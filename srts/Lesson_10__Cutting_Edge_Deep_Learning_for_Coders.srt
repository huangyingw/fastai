1
00:00:00,470 --> 00:00:07,040
<font color="#E5E5E5">okay welcome again everybody</font><font color="#CCCCCC"> so some</font>

2
00:00:07,040 --> 00:00:09,139
really<font color="#E5E5E5"> fun</font><font color="#CCCCCC"> stuff appearing on the forums</font>

3
00:00:09,139 --> 00:00:10,879
this<font color="#CCCCCC"> week</font><font color="#E5E5E5"> and one of the really great</font>

4
00:00:10,879 --> 00:00:13,669
projects<font color="#E5E5E5"> which was created by I believe</font>

5
00:00:13,669 --> 00:00:16,700
our sole Bulgarian<font color="#CCCCCC"> participant in the</font>

6
00:00:16,700 --> 00:00:19,700
course<font color="#CCCCCC"> Slav even off wrote a great post</font>

7
00:00:19,700 --> 00:00:22,850
<font color="#E5E5E5">about picking an optimizer for style</font>

8
00:00:22,850 --> 00:00:26,990
transfer<font color="#CCCCCC"> this post came from</font><font color="#E5E5E5"> a forum</font>

9
00:00:26,990 --> 00:00:29,660
<font color="#CCCCCC">discussion in which</font><font color="#E5E5E5"> I made an offhand</font>

10
00:00:29,660 --> 00:00:33,409
remark<font color="#E5E5E5"> about how I didn't I know that</font><font color="#CCCCCC"> in</font>

11
00:00:33,409 --> 00:00:36,230
theory<font color="#CCCCCC"> BFGS you know is a</font><font color="#E5E5E5"> deterministic</font>

12
00:00:36,230 --> 00:00:38,539
optimizer you know uses a line search

13
00:00:38,539 --> 00:00:40,640
should approximate the<font color="#E5E5E5"> Hessian it ought</font>

14
00:00:40,640 --> 00:00:42,140
<font color="#CCCCCC">to work on this kind</font><font color="#E5E5E5"> of deterministic</font>

15
00:00:42,140 --> 00:00:44,839
problem better<font color="#E5E5E5"> but I hadn't tried it</font>

16
00:00:44,839 --> 00:00:46,609
<font color="#E5E5E5">myself and I hadn't seen anybody try it</font>

17
00:00:46,609 --> 00:00:49,100
and so maybe somebody<font color="#CCCCCC"> should try it I</font>

18
00:00:49,100 --> 00:00:50,569
don't know if you've<font color="#CCCCCC"> noticed but</font><font color="#E5E5E5"> pretty</font>

19
00:00:50,569 --> 00:00:52,219
much every week I say something<font color="#CCCCCC"> like</font>

20
00:00:52,219 --> 00:00:53,749
<font color="#CCCCCC">that a</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> times and</font><font color="#CCCCCC"> every time I</font>

21
00:00:53,749 --> 00:00:55,399
do I'm<font color="#E5E5E5"> always hoping that somebody might</font>

22
00:00:55,399 --> 00:00:57,889
go<font color="#E5E5E5"> oh I wonder as well and so</font><font color="#CCCCCC"> slobs</font>

23
00:00:57,889 --> 00:01:00,199
<font color="#E5E5E5">you've wonder and so he posted a really</font>

24
00:01:00,199 --> 00:01:03,769
interesting<font color="#E5E5E5"> uh blog posts about about</font>

25
00:01:03,769 --> 00:01:07,310
that exact question<font color="#CCCCCC"> and I was</font><font color="#E5E5E5"> thrilled</font>

26
00:01:07,310 --> 00:01:10,760
<font color="#CCCCCC">to see that the blog post got a lot of a</font>

27
00:01:10,760 --> 00:01:14,360
lot of<font color="#CCCCCC"> pick</font><font color="#E5E5E5"> up on the machine learning</font>

28
00:01:14,360 --> 00:01:17,960
reddit<font color="#CCCCCC"> it got fifty five uploads</font><font color="#E5E5E5"> which</font>

29
00:01:17,960 --> 00:01:22,280
for that subreddit<font color="#E5E5E5"> is put it in second</font>

30
00:01:22,280 --> 00:01:25,820
place on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> front page</font><font color="#CCCCCC"> it also got</font>

31
00:01:25,820 --> 00:01:32,150
picked up by the<font color="#E5E5E5"> wild ml mailing list</font>

32
00:01:32,150 --> 00:01:34,670
weekly summary of interesting things in

33
00:01:34,670 --> 00:01:39,610
<font color="#E5E5E5">AI as the second post that was looted</font><font color="#CCCCCC"> so</font>

34
00:01:39,610 --> 00:01:43,700
that was a that was great<font color="#E5E5E5"> for those of</font>

35
00:01:43,700 --> 00:01:45,410
you that have looked at it<font color="#E5E5E5"> and kind of</font>

36
00:01:45,410 --> 00:01:47,000
<font color="#E5E5E5">wondered okay what is it about this post</font>

37
00:01:47,000 --> 00:01:49,490
that causes it to get noticed for<font color="#E5E5E5"> us</font>

38
00:01:49,490 --> 00:01:53,210
other ones don't<font color="#E5E5E5"> I mean I don't I'm not</font>

39
00:01:53,210 --> 00:01:54,590
<font color="#E5E5E5">sure I know</font><font color="#CCCCCC"> the secret but</font><font color="#E5E5E5"> when I as</font>

40
00:01:54,590 --> 00:01:55,940
soon as I read<font color="#E5E5E5"> it I kind of thought okay</font>

41
00:01:55,940 --> 00:01:56,930
I think<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit we're going to read</font>

42
00:01:56,930 --> 00:01:59,659
this it<font color="#E5E5E5"> gives some background you know</font>

43
00:01:59,659 --> 00:02:01,940
like it assumes an intelligent reader

44
00:02:01,940 --> 00:02:03,710
<font color="#E5E5E5">that it assumes that elephant reader who</font>

45
00:02:03,710 --> 00:02:05,750
doesn't<font color="#CCCCCC"> necessarily know all about this</font>

46
00:02:05,750 --> 00:02:08,479
<font color="#E5E5E5">so you know something like you guys six</font>

47
00:02:08,479 --> 00:02:10,649
months ago

48
00:02:10,649 --> 00:02:12,269
and so it describes<font color="#E5E5E5"> like this is what it</font>

49
00:02:12,269 --> 00:02:13,860
is<font color="#E5E5E5"> and you know this is where this kind</font>

50
00:02:13,860 --> 00:02:17,959
<font color="#E5E5E5">of thing is used</font><font color="#CCCCCC"> and get some examples</font>

51
00:02:17,959 --> 00:02:22,349
and then goes ahead and shows<font color="#CCCCCC"> talks</font>

52
00:02:22,349 --> 00:02:24,450
<font color="#E5E5E5">about you know</font><font color="#CCCCCC"> sets up</font><font color="#E5E5E5"> the question</font><font color="#CCCCCC"> of</font>

53
00:02:24,450 --> 00:02:27,390
different optimization algorithms<font color="#CCCCCC"> and</font>

54
00:02:27,390 --> 00:02:30,540
then shows lots<font color="#E5E5E5"> of examples of those</font>

55
00:02:30,540 --> 00:02:33,180
learning<font color="#E5E5E5"> curves as well as pictures</font><font color="#CCCCCC"> a</font>

56
00:02:33,180 --> 00:02:38,430
<font color="#CCCCCC">commodity</font><font color="#E5E5E5"> durman's and I think hopefully</font>

57
00:02:38,430 --> 00:02:40,019
<font color="#CCCCCC">it's been a great experience just loud</font>

58
00:02:40,019 --> 00:02:42,120
as well because in the reddit thread

59
00:02:42,120 --> 00:02:43,849
there's you<font color="#E5E5E5"> know all kinds</font><font color="#CCCCCC"> of folks</font>

60
00:02:43,849 --> 00:02:47,010
<font color="#E5E5E5">pointing out you know other</font><font color="#CCCCCC"> things that</font>

61
00:02:47,010 --> 00:02:49,950
he could try<font color="#CCCCCC"> questions</font><font color="#E5E5E5"> that were</font><font color="#CCCCCC"> quite</font>

62
00:02:49,950 --> 00:02:52,400
<font color="#E5E5E5">clear and so now this whole kind of</font>

63
00:02:52,400 --> 00:02:55,290
actually kind of summarized in that

64
00:02:55,290 --> 00:02:57,269
thread<font color="#E5E5E5"> a kind of list of things that</font>

65
00:02:57,269 --> 00:02:59,220
perhaps<font color="#E5E5E5"> could be done next so I'm going</font>

66
00:02:59,220 --> 00:03:02,389
<font color="#CCCCCC">to</font><font color="#E5E5E5"> open up a whole interesting question</font>

67
00:03:02,389 --> 00:03:05,849
<font color="#CCCCCC">another</font><font color="#E5E5E5"> post which I not even sure it's</font>

68
00:03:05,849 --> 00:03:09,269
officially posted yet<font color="#CCCCCC"> I got</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> early</font>

69
00:03:09,269 --> 00:03:12,420
<font color="#CCCCCC">bird version from Brad is this crazy</font>

70
00:03:12,420 --> 00:03:16,980
thing here is Kanye drawn using<font color="#E5E5E5"> a brush</font>

71
00:03:16,980 --> 00:03:20,069
of Captain jean-luc Picard

72
00:03:20,069 --> 00:03:23,099
in case you wondering is that<font color="#E5E5E5"> really him</font>

73
00:03:23,099 --> 00:03:27,239
<font color="#CCCCCC">I will show you a zoomed in version it</font>

74
00:03:27,239 --> 00:03:30,000
really is<font color="#CCCCCC"> John look at the cards</font><font color="#E5E5E5"> and</font>

75
00:03:30,000 --> 00:03:31,799
this<font color="#E5E5E5"> is a really interesting idea</font>

76
00:03:31,799 --> 00:03:35,129
<font color="#CCCCCC">because he points out that generally</font>

77
00:03:35,129 --> 00:03:39,440
speaking<font color="#E5E5E5"> when you try</font><font color="#CCCCCC"> to use a non</font>

78
00:03:39,440 --> 00:03:43,680
artwork as your style<font color="#E5E5E5"> image it</font><font color="#CCCCCC"> doesn't</font>

79
00:03:43,680 --> 00:03:47,159
actually give very good results<font color="#CCCCCC"> there's</font>

80
00:03:47,159 --> 00:03:48,989
another<font color="#CCCCCC"> example the non our work does</font>

81
00:03:48,989 --> 00:03:51,709
<font color="#CCCCCC">give the</font><font color="#E5E5E5"> response</font>

82
00:03:52,150 --> 00:03:54,010
it's kind of<font color="#CCCCCC"> interesting but it's</font><font color="#E5E5E5"> not</font>

83
00:03:54,010 --> 00:03:56,560
<font color="#CCCCCC">quite</font><font color="#E5E5E5"> what I was</font><font color="#CCCCCC"> looking for</font><font color="#E5E5E5"> that if you</font>

84
00:03:56,560 --> 00:03:59,920
<font color="#E5E5E5">tile it you totally get it right</font>

85
00:03:59,920 --> 00:04:06,190
so it's Kanye using a Nintendo and

86
00:04:06,190 --> 00:04:10,830
controller brush<font color="#E5E5E5"> so then he tried out</font>

87
00:04:10,830 --> 00:04:14,200
<font color="#E5E5E5">this film look the card and got</font><font color="#CCCCCC"> okay</font>

88
00:04:14,200 --> 00:04:16,779
results and kind<font color="#E5E5E5"> of realized that</font>

89
00:04:16,779 --> 00:04:19,839
actually<font color="#E5E5E5"> the size of the texture is</font>

90
00:04:19,839 --> 00:04:21,668
pretty<font color="#E5E5E5"> critical and I've never seen</font>

91
00:04:21,668 --> 00:04:25,139
<font color="#E5E5E5">anybody do</font><font color="#CCCCCC"> this before so I think I</font>

92
00:04:25,139 --> 00:04:27,940
think when<font color="#E5E5E5"> this image gets shared on</font>

93
00:04:27,940 --> 00:04:29,590
Twitter it's gonna go<font color="#CCCCCC"> everywhere</font><font color="#E5E5E5"> it's</font>

94
00:04:29,590 --> 00:04:36,039
<font color="#E5E5E5">just the freakiest thing trick is good</font>

95
00:04:36,039 --> 00:04:38,349
so I'm you know I think<font color="#E5E5E5"> I warned you</font>

96
00:04:38,349 --> 00:04:41,559
<font color="#E5E5E5">guys about your project when I first</font>

97
00:04:41,559 --> 00:04:42,669
<font color="#E5E5E5">mentioned them as being something it's</font>

98
00:04:42,669 --> 00:04:46,689
<font color="#CCCCCC">very easy to overshoot</font><font color="#E5E5E5"> a little bit and</font>

99
00:04:46,689 --> 00:04:48,339
spend weeks and<font color="#E5E5E5"> weeks talking about what</font>

100
00:04:48,339 --> 00:04:51,729
you're eventually going<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> you've had</font>

101
00:04:51,729 --> 00:04:55,149
you know a<font color="#E5E5E5"> couple of weeks</font><font color="#CCCCCC"> really it</font>

102
00:04:55,149 --> 00:04:56,169
would have been nice to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> something</font>

103
00:04:56,169 --> 00:04:57,759
done by now<font color="#CCCCCC"> right rather</font><font color="#E5E5E5"> than spending a</font>

104
00:04:57,759 --> 00:04:58,839
<font color="#CCCCCC">couple of weeks wondering about what to</font>

105
00:04:58,839 --> 00:05:02,110
do<font color="#E5E5E5"> so if your team string of its low</font>

106
00:05:02,110 --> 00:05:03,610
<font color="#E5E5E5">agree on something to start working on</font>

107
00:05:03,610 --> 00:05:06,699
something<font color="#E5E5E5"> yourself</font><font color="#CCCCCC"> or you know as a team</font>

108
00:05:06,699 --> 00:05:09,699
<font color="#E5E5E5">just</font><font color="#CCCCCC"> fix</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that you can do by</font>

109
00:05:09,699 --> 00:05:13,120
next Monday and right up<font color="#CCCCCC"> it you know</font>

110
00:05:13,120 --> 00:05:15,339
<font color="#E5E5E5">something brings about it so for example</font>

111
00:05:15,339 --> 00:05:16,899
if you're thinking<font color="#CCCCCC"> okay we</font><font color="#E5E5E5"> went through</font>

112
00:05:16,899 --> 00:05:19,210
the<font color="#E5E5E5"> 1 million dollar data science Bowl</font>

113
00:05:19,210 --> 00:05:21,430
<font color="#E5E5E5">that's fine</font><font color="#CCCCCC"> you're not going to finish</font>

114
00:05:21,430 --> 00:05:23,889
it by<font color="#E5E5E5"> Monday but maybe by Monday you</font>

115
00:05:23,889 --> 00:05:25,680
could have written a blog post

116
00:05:25,680 --> 00:05:28,839
<font color="#E5E5E5">introducing you know what you can learn</font>

117
00:05:28,839 --> 00:05:30,789
<font color="#E5E5E5">in a week about medical imaging</font><font color="#CCCCCC"> oh it</font>

118
00:05:30,789 --> 00:05:32,409
turns out to use<font color="#CCCCCC"> something called daikon</font>

119
00:05:32,409 --> 00:05:34,270
<font color="#E5E5E5">here are the</font><font color="#CCCCCC"> plates and daikon libraries</font>

120
00:05:34,270 --> 00:05:36,039
and we try to use them and<font color="#CCCCCC"> these are the</font>

121
00:05:36,039 --> 00:05:37,569
things they've got it's kind of<font color="#E5E5E5"> confused</font>

122
00:05:37,569 --> 00:05:39,039
<font color="#CCCCCC">and these are the ways that</font><font color="#E5E5E5"> we solve</font>

123
00:05:39,039 --> 00:05:41,740
them<font color="#CCCCCC"> and here's a place a notebook which</font>

124
00:05:41,740 --> 00:05:43,990
shows you some of<font color="#CCCCCC"> the main ways you can</font>

125
00:05:43,990 --> 00:05:47,229
look<font color="#E5E5E5"> at these daikon for instance so you</font>

126
00:05:47,229 --> 00:05:49,509
<font color="#CCCCCC">know split</font><font color="#E5E5E5"> up your project into little</font>

127
00:05:49,509 --> 00:05:52,269
pieces it's like when you enter a

128
00:05:52,269 --> 00:05:55,199
careful composition I always tell<font color="#E5E5E5"> people</font>

129
00:05:55,199 --> 00:05:58,870
submit every single day<font color="#E5E5E5"> and try and put</font>

130
00:05:58,870 --> 00:06:01,240
in at least<font color="#E5E5E5"> half</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> hour a day to make</font>

131
00:06:01,240 --> 00:06:03,430
<font color="#E5E5E5">it slightly better than yesterday so how</font>

132
00:06:03,430 --> 00:06:04,990
do you<font color="#E5E5E5"> put in the first day submission</font>

133
00:06:04,990 --> 00:06:07,689
so what I always do<font color="#CCCCCC"> on the first</font><font color="#E5E5E5"> day is</font>

134
00:06:07,689 --> 00:06:10,809
to submit the<font color="#E5E5E5"> benchmark script you know</font>

135
00:06:10,809 --> 00:06:12,490
which is generally like all<font color="#CCCCCC"> zeroes and</font>

136
00:06:12,490 --> 00:06:14,830
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the next day</font><font color="#E5E5E5"> I try to improve it so</font>

137
00:06:14,830 --> 00:06:17,740
I'll put in like all 0.5<font color="#E5E5E5"> the next day</font>

138
00:06:17,740 --> 00:06:19,089
I'll try to improve it<font color="#E5E5E5"> I'll be like</font><font color="#CCCCCC"> ok</font>

139
00:06:19,089 --> 00:06:20,620
<font color="#E5E5E5">with the average for cats the aperture</font>

140
00:06:20,620 --> 00:06:22,599
dogs<font color="#CCCCCC"> they'll submit that and if you do</font>

141
00:06:22,599 --> 00:06:25,559
<font color="#E5E5E5">that every day</font><font color="#CCCCCC"> for 90</font><font color="#E5E5E5"> days</font>

142
00:06:25,760 --> 00:06:27,350
<font color="#E5E5E5">you'll be amazed at how much</font><font color="#CCCCCC"> you can</font>

143
00:06:27,350 --> 00:06:30,500
<font color="#E5E5E5">achieve where else if you wait</font><font color="#CCCCCC"> 2 months</font>

144
00:06:30,500 --> 00:06:32,330
and<font color="#E5E5E5"> spend</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> that time reading papers</font>

145
00:06:32,330 --> 00:06:33,980
and theorizing<font color="#E5E5E5"> and thinking about the</font>

146
00:06:33,980 --> 00:06:35,840
<font color="#CCCCCC">best</font><font color="#E5E5E5"> possible approach you'll discover</font>

147
00:06:35,840 --> 00:06:37,220
that<font color="#E5E5E5"> you don't get any any submissions</font>

148
00:06:37,220 --> 00:06:38,930
it or you finally get<font color="#CCCCCC"> your perfect</font>

149
00:06:38,930 --> 00:06:40,490
<font color="#CCCCCC">submission in and it because terribly</font>

150
00:06:40,490 --> 00:06:42,080
<font color="#E5E5E5">and now you don't have time to make</font><font color="#CCCCCC"> it</font>

151
00:06:42,080 --> 00:06:44,500
better so

152
00:06:45,510 --> 00:06:48,120
<font color="#CCCCCC">I think those</font><font color="#E5E5E5"> tips equally useful for</font>

153
00:06:48,120 --> 00:06:50,150
<font color="#CCCCCC">cable competitions as well as</font><font color="#E5E5E5"> their</font>

154
00:06:50,150 --> 00:06:53,970
making sure that<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end of this part</font>

155
00:06:53,970 --> 00:06:55,740
<font color="#E5E5E5">of the course</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have something that</font>

156
00:06:55,740 --> 00:06:57,840
<font color="#CCCCCC">you're you</font><font color="#E5E5E5"> know that you're proud of</font>

157
00:06:57,840 --> 00:06:59,370
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that you feel you you did a</font>

158
00:06:59,370 --> 00:07:02,940
good job<font color="#CCCCCC"> in</font><font color="#E5E5E5"> you know small amount of</font>

159
00:07:02,940 --> 00:07:05,850
time<font color="#E5E5E5"> if you try</font><font color="#CCCCCC"> and publish something</font>

160
00:07:05,850 --> 00:07:08,190
<font color="#E5E5E5">every week on the same kind of topic</font>

161
00:07:08,190 --> 00:07:10,200
you'll be able<font color="#E5E5E5"> to keep</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> further and</font>

162
00:07:10,200 --> 00:07:12,180
<font color="#CCCCCC">further</font><font color="#E5E5E5"> on that thing</font><font color="#CCCCCC"> I don't know</font><font color="#E5E5E5"> what</font>

163
00:07:12,180 --> 00:07:14,340
<font color="#CCCCCC">slavs plans are but maybe he'll next</font>

164
00:07:14,340 --> 00:07:16,920
week<font color="#E5E5E5"> he'll follow up on some of the</font>

165
00:07:16,920 --> 00:07:19,290
<font color="#CCCCCC">interesting research angle</font><font color="#E5E5E5"> to came up</font>

166
00:07:19,290 --> 00:07:21,060
and<font color="#E5E5E5"> read it or maybe Brad will follow up</font>

167
00:07:21,060 --> 00:07:23,820
on some of his additional ideas<font color="#E5E5E5"> from his</font>

168
00:07:23,820 --> 00:07:28,100
post<font color="#CCCCCC"> okay</font>

169
00:07:28,169 --> 00:07:30,539
<font color="#CCCCCC">as a Lexington wickiup</font><font color="#E5E5E5"> already which has</font>

170
00:07:30,539 --> 00:07:35,819
the notebooks<font color="#CCCCCC"> and just do a kid pool</font><font color="#E5E5E5"> one</font>

171
00:07:35,819 --> 00:07:38,129
<font color="#E5E5E5">we</font><font color="#CCCCCC"> get on</font><font color="#E5E5E5"> the github repo</font><font color="#CCCCCC"> to get the</font>

172
00:07:38,129 --> 00:07:40,740
nonce<font color="#E5E5E5"> up-to-date on</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> another thing</font>

173
00:07:40,740 --> 00:07:45,229
<font color="#CCCCCC">that I wanted</font><font color="#E5E5E5"> to point out is that and</font>

174
00:07:45,229 --> 00:07:47,460
in study group so<font color="#CCCCCC"> we've been having</font>

175
00:07:47,460 --> 00:07:49,560
study groups each each Friday here and I

176
00:07:49,560 --> 00:07:50,520
know some of<font color="#E5E5E5"> you have had</font><font color="#CCCCCC"> to study</font>

177
00:07:50,520 --> 00:07:53,550
groups<font color="#E5E5E5"> elsewhere around the Bay Area</font>

178
00:07:53,550 --> 00:07:56,849
what if you asked me<font color="#CCCCCC"> I don't understand</font>

179
00:07:56,849 --> 00:07:59,279
this<font color="#E5E5E5"> grand metric stuff I don't</font><font color="#CCCCCC"> get it</font>

180
00:07:59,279 --> 00:08:01,650
what's what's<font color="#CCCCCC"> going on I</font><font color="#E5E5E5"> almost had the</font>

181
00:08:01,650 --> 00:08:03,150
symbol<font color="#CCCCCC"> that is an a mask but</font><font color="#E5E5E5"> what's</font>

182
00:08:03,150 --> 00:08:06,689
going<font color="#E5E5E5"> on</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> said maybe if</font><font color="#CCCCCC"> you had a</font>

183
00:08:06,689 --> 00:08:09,289
spreadsheet<font color="#E5E5E5"> it would all</font><font color="#CCCCCC"> make sense</font>

184
00:08:09,289 --> 00:08:11,969
<font color="#E5E5E5">here's kind of like I'm doing it in</font>

185
00:08:11,969 --> 00:08:15,509
Python<font color="#CCCCCC"> you know a nice to puzzler</font><font color="#E5E5E5"> maybe</font>

186
00:08:15,509 --> 00:08:16,740
if you<font color="#CCCCCC"> hit a spreadsheet</font><font color="#E5E5E5"> it would all</font>

187
00:08:16,740 --> 00:08:19,259
<font color="#E5E5E5">make sense</font><font color="#CCCCCC"> it's like</font><font color="#E5E5E5"> maybe I'll create a</font>

188
00:08:19,259 --> 00:08:22,110
spreadsheet<font color="#E5E5E5"> yes do that</font><font color="#CCCCCC"> and 20 minutes</font>

189
00:08:22,110 --> 00:08:24,539
<font color="#E5E5E5">later I turn to him and I</font><font color="#CCCCCC"> said so how</font><font color="#E5E5E5"> do</font>

190
00:08:24,539 --> 00:08:26,039
you<font color="#E5E5E5"> feel about</font><font color="#CCCCCC"> Graham matrices now</font><font color="#E5E5E5"> and</font>

191
00:08:26,039 --> 00:08:28,259
he goes<font color="#CCCCCC"> I totally understand them</font><font color="#E5E5E5"> and I</font>

192
00:08:28,259 --> 00:08:29,400
looked over<font color="#E5E5E5"> and he had created a</font>

193
00:08:29,400 --> 00:08:31,110
spreadsheet<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a spreadsheet he</font>

194
00:08:31,110 --> 00:08:34,169
created it it's a<font color="#E5E5E5"> very simple</font>

195
00:08:34,169 --> 00:08:35,789
<font color="#CCCCCC">spreadsheet where it's like here's an</font>

196
00:08:35,789 --> 00:08:38,458
image where the<font color="#CCCCCC"> pixels just</font><font color="#E5E5E5"> like 1 minus</font>

197
00:08:38,458 --> 00:08:40,708
1 or 0<font color="#E5E5E5"> it has</font><font color="#CCCCCC"> two filters</font><font color="#E5E5E5"> that are</font>

198
00:08:40,708 --> 00:08:42,019
<font color="#E5E5E5">either 1 or minus 1</font>

199
00:08:42,019 --> 00:08:47,100
he had the<font color="#CCCCCC"> flattened convolutions next</font>

200
00:08:47,100 --> 00:08:49,640
to each other<font color="#E5E5E5"> and then he's created the</font>

201
00:08:49,640 --> 00:08:54,000
little dot product matrix and so I

202
00:08:54,000 --> 00:08:57,029
haven't<font color="#E5E5E5"> been doing so</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> Excel stuff</font>

203
00:08:57,029 --> 00:09:00,209
<font color="#CCCCCC">myself</font><font color="#E5E5E5"> and but you know I think you</font>

204
00:09:00,209 --> 00:09:01,320
learn<font color="#E5E5E5"> a lot more by trying it yourself</font>

205
00:09:01,320 --> 00:09:03,510
<font color="#CCCCCC">and</font><font color="#E5E5E5"> particularly if you try it</font><font color="#CCCCCC"> yourself</font>

206
00:09:03,510 --> 00:09:06,029
<font color="#E5E5E5">and can't figure out how to do it in</font>

207
00:09:06,029 --> 00:09:07,649
<font color="#CCCCCC">Excel then we have firms</font>

208
00:09:07,649 --> 00:09:10,260
<font color="#E5E5E5">I love itself so if you ask me</font><font color="#CCCCCC"> questions</font>

209
00:09:10,260 --> 00:09:14,529
that<font color="#E5E5E5"> Excel I will have a great time</font>

210
00:09:14,529 --> 00:09:17,259
so I'm not going<font color="#E5E5E5"> to put that</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> on the</font>

211
00:09:17,259 --> 00:09:19,689
forum<font color="#E5E5E5"> for now so I</font><font color="#CCCCCC"> think it's so easy to</font>

212
00:09:19,689 --> 00:09:21,219
<font color="#E5E5E5">create you get so much more out of</font><font color="#CCCCCC"> doing</font>

213
00:09:21,219 --> 00:09:23,039
it<font color="#CCCCCC"> yourself for anybody</font><font color="#E5E5E5"> who's still not</font>

214
00:09:23,039 --> 00:09:27,430
quite understanding what grand<font color="#E5E5E5"> matrices</font>

215
00:09:27,430 --> 00:09:31,870
<font color="#CCCCCC">all right so last week</font>

216
00:09:31,870 --> 00:09:34,130
[Music]

217
00:09:34,130 --> 00:09:39,250
we talked about the idea of

218
00:09:40,440 --> 00:09:45,149
<font color="#E5E5E5">loading with larger data centers and our</font>

219
00:09:45,149 --> 00:09:47,699
goal<font color="#CCCCCC"> was to try</font><font color="#E5E5E5"> and replicate the</font>

220
00:09:47,699 --> 00:09:51,120
<font color="#CCCCCC">devised paper</font><font color="#E5E5E5"> and remind you the</font><font color="#CCCCCC"> devised</font>

221
00:09:51,120 --> 00:09:54,300
paper is the one where we<font color="#E5E5E5"> to a regular</font>

222
00:09:54,300 --> 00:09:57,449
CNN<font color="#E5E5E5"> but the thing</font><font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> trying to</font>

223
00:09:57,449 --> 00:10:01,110
<font color="#E5E5E5">predict is not a one hot encoding of</font><font color="#CCCCCC"> the</font>

224
00:10:01,110 --> 00:10:04,889
category but it's the word vector for

225
00:10:04,889 --> 00:10:09,389
the category yes<font color="#E5E5E5"> so it's a it's an</font>

226
00:10:09,389 --> 00:10:10,920
<font color="#E5E5E5">interesting problem but one of the</font>

227
00:10:10,920 --> 00:10:12,600
things interesting<font color="#E5E5E5"> about it is is</font><font color="#CCCCCC"> just</font>

228
00:10:12,600 --> 00:10:15,689
<font color="#E5E5E5">okay we have to use all of</font><font color="#CCCCCC"> imagenet</font>

229
00:10:15,689 --> 00:10:18,329
<font color="#E5E5E5">which has its own challenges</font><font color="#CCCCCC"> so last</font>

230
00:10:18,329 --> 00:10:21,680
<font color="#CCCCCC">week we got to the point where we had</font>

231
00:10:21,680 --> 00:10:24,899
created<font color="#E5E5E5"> the word vectors and</font><font color="#CCCCCC"> remember</font>

232
00:10:24,899 --> 00:10:27,240
the word vectors we then had to like map

233
00:10:27,240 --> 00:10:29,399
them to<font color="#CCCCCC"> imagenet categories there are</font>

234
00:10:29,399 --> 00:10:31,259
<font color="#E5E5E5">thousand imagenet categories so we had</font>

235
00:10:31,259 --> 00:10:33,720
to<font color="#E5E5E5"> create the</font><font color="#CCCCCC"> work vector V each one we</font>

236
00:10:33,720 --> 00:10:35,040
didn't quite get all<font color="#CCCCCC"> of them to match</font>

237
00:10:35,040 --> 00:10:36,569
<font color="#CCCCCC">it's something like</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> thirds of the</font>

238
00:10:36,569 --> 00:10:38,220
match<font color="#CCCCCC"> so we're working</font><font color="#E5E5E5"> on like two</font>

239
00:10:38,220 --> 00:10:42,509
thirds<font color="#E5E5E5"> of</font><font color="#CCCCCC"> imagenet we've got as far as</font>

240
00:10:42,509 --> 00:10:44,600
<font color="#CCCCCC">reading all</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bio names the</font><font color="#E5E5E5"> imagenet</font>

241
00:10:44,600 --> 00:10:50,100
<font color="#CCCCCC">and we then we're going to resize our</font>

242
00:10:50,100 --> 00:10:53,220
images<font color="#CCCCCC"> so I'm going</font><font color="#E5E5E5"> to resize all of our</font>

243
00:10:53,220 --> 00:10:59,069
images to<font color="#CCCCCC"> 224 by</font><font color="#E5E5E5"> 224 it's I think it's a</font>

244
00:10:59,069 --> 00:11:00,509
<font color="#E5E5E5">good idea to</font><font color="#CCCCCC"> do some of this</font>

245
00:11:00,509 --> 00:11:04,439
<font color="#E5E5E5">pre-processing</font><font color="#CCCCCC"> up front something that</font>

246
00:11:04,439 --> 00:11:07,829
tends<font color="#CCCCCC"> to flow and</font><font color="#E5E5E5"> apply</font><font color="#CCCCCC"> towards both to</font>

247
00:11:07,829 --> 00:11:10,529
and care us<font color="#E5E5E5"> recently started doing is</font>

248
00:11:10,529 --> 00:11:13,550
that if you<font color="#E5E5E5"> use a generator it actually</font>

249
00:11:13,550 --> 00:11:17,220
does the image pre-processing<font color="#E5E5E5"> in a</font>

250
00:11:17,220 --> 00:11:18,689
number<font color="#E5E5E5"> of separate threads in parallel</font>

251
00:11:18,689 --> 00:11:21,600
behind the scenes<font color="#E5E5E5"> and so some of this</font><font color="#CCCCCC"> is</font>

252
00:11:21,600 --> 00:11:24,240
a<font color="#E5E5E5"> little less important than it was six</font>

253
00:11:24,240 --> 00:11:25,829
months<font color="#CCCCCC"> ago</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> clear</font><font color="#E5E5E5"> us didn't do that</font>

254
00:11:25,829 --> 00:11:28,709
you know it used to<font color="#CCCCCC"> be that we had to</font>

255
00:11:28,709 --> 00:11:31,680
<font color="#CCCCCC">spend a long</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> waiting for</font><font color="#E5E5E5"> our data</font>

256
00:11:31,680 --> 00:11:33,449
to get<font color="#E5E5E5"> processed before it could get</font>

257
00:11:33,449 --> 00:11:37,199
into the into the CNN um<font color="#CCCCCC"> having</font><font color="#E5E5E5"> said</font>

258
00:11:37,199 --> 00:11:39,230
that

259
00:11:39,810 --> 00:11:42,960
actually image resizing<font color="#CCCCCC"> when you've got</font>

260
00:11:42,960 --> 00:11:46,740
large JPEGs<font color="#E5E5E5"> just reading them off the</font>

261
00:11:46,740 --> 00:11:49,020
hard disk and resizing<font color="#E5E5E5"> them can take</font>

262
00:11:49,020 --> 00:11:51,300
quite a<font color="#E5E5E5"> long time so I always like to</font>

263
00:11:51,300 --> 00:11:53,430
<font color="#E5E5E5">put it in to do all that resizing up</font>

264
00:11:53,430 --> 00:11:55,590
front and end up with<font color="#E5E5E5"> something</font><font color="#CCCCCC"> within a</font>

265
00:11:55,590 --> 00:11:59,520
nice convenient<font color="#CCCCCC"> vehicle to</font><font color="#E5E5E5"> read</font><font color="#CCCCCC"> amongst</font>

266
00:11:59,520 --> 00:12:02,490
other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> it means that unless you</font>

267
00:12:02,490 --> 00:12:06,390
have enough money to<font color="#E5E5E5"> have a huge</font><font color="#CCCCCC"> nvme or</font>

268
00:12:06,390 --> 00:12:09,240
SSD<font color="#CCCCCC"> drive</font><font color="#E5E5E5"> which you can put the entirety</font>

269
00:12:09,240 --> 00:12:11,970
of<font color="#E5E5E5"> image net on</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably have</font><font color="#CCCCCC"> your</font>

270
00:12:11,970 --> 00:12:14,100
big<font color="#CCCCCC"> data</font><font color="#E5E5E5"> sets on like some kind of</font>

271
00:12:14,100 --> 00:12:16,740
pretty slow spinning<font color="#E5E5E5"> disk or slow rate</font>

272
00:12:16,740 --> 00:12:19,470
<font color="#CCCCCC">array</font><font color="#E5E5E5"> so one of the nice</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> about</font>

273
00:12:19,470 --> 00:12:21,330
doing<font color="#E5E5E5"> the resizing first is that it</font>

274
00:12:21,330 --> 00:12:22,650
makes<font color="#E5E5E5"> it a lot smaller and you probably</font>

275
00:12:22,650 --> 00:12:25,260
<font color="#E5E5E5">can then fit</font><font color="#CCCCCC"> it on your SSD there's lots</font>

276
00:12:25,260 --> 00:12:27,980
of<font color="#E5E5E5"> reasons that I think</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is good so</font>

277
00:12:27,980 --> 00:12:30,900
<font color="#E5E5E5">so I'm going to resize all of the image</font>

278
00:12:30,900 --> 00:12:33,470
<font color="#CCCCCC">net images</font><font color="#E5E5E5"> put them in a big holes array</font>

279
00:12:33,470 --> 00:12:37,320
on my SSD<font color="#CCCCCC"> right so here's the</font><font color="#E5E5E5"> path and</font>

280
00:12:37,320 --> 00:12:39,900
the deep past is the past

281
00:12:39,900 --> 00:12:45,120
<font color="#E5E5E5">- my fast SSD mount point</font><font color="#CCCCCC"> and we talked</font>

282
00:12:45,120 --> 00:12:47,580
briefly about it<font color="#E5E5E5"> all there are these the</font>

283
00:12:47,580 --> 00:12:50,220
<font color="#E5E5E5">things actually do the resizing and</font>

284
00:12:50,220 --> 00:12:52,080
we're going<font color="#E5E5E5"> to do a different</font><font color="#CCCCCC"> kind of</font>

285
00:12:52,080 --> 00:12:54,180
resizing<font color="#CCCCCC"> in the past we've done</font><font color="#E5E5E5"> the same</font>

286
00:12:54,180 --> 00:12:56,310
kind of resizing<font color="#CCCCCC"> the Charis does which</font>

287
00:12:56,310 --> 00:12:58,620
is<font color="#CCCCCC"> to add a black border</font><font color="#E5E5E5"> like if you</font>

288
00:12:58,620 --> 00:12:59,850
start<font color="#CCCCCC"> with something that's not</font><font color="#E5E5E5"> square</font>

289
00:12:59,850 --> 00:13:01,980
you make it square you resize the

290
00:13:01,980 --> 00:13:06,390
largest access to be the size<font color="#E5E5E5"> of your</font>

291
00:13:06,390 --> 00:13:07,830
square which<font color="#CCCCCC"> means you're left with a</font>

292
00:13:07,830 --> 00:13:13,710
black border<font color="#CCCCCC"> re was concerned that any</font>

293
00:13:13,710 --> 00:13:15,630
model where you<font color="#CCCCCC"> have that is going to</font>

294
00:13:15,630 --> 00:13:18,570
have to like learn to model the<font color="#E5E5E5"> black</font>

295
00:13:18,570 --> 00:13:21,210
border a and B that<font color="#E5E5E5"> you're kind</font><font color="#CCCCCC"> of</font>

296
00:13:21,210 --> 00:13:22,920
<font color="#E5E5E5">throwing away information you know</font>

297
00:13:22,920 --> 00:13:24,360
you're not<font color="#CCCCCC"> using the full size</font><font color="#E5E5E5"> of the</font>

298
00:13:24,360 --> 00:13:29,250
image and indeed every other library or

299
00:13:29,250 --> 00:13:30,900
pretty much<font color="#E5E5E5"> paper I've seen uses a</font>

300
00:13:30,900 --> 00:13:33,390
different<font color="#E5E5E5"> approach which is</font><font color="#CCCCCC"> to resize</font>

301
00:13:33,390 --> 00:13:37,290
the smaller side<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> image</font><font color="#CCCCCC"> to the</font>

302
00:13:37,290 --> 00:13:39,360
square<font color="#E5E5E5"> and now the big</font><font color="#CCCCCC"> that now the</font>

303
00:13:39,360 --> 00:13:41,580
larger size is now too big for<font color="#E5E5E5"> your</font>

304
00:13:41,580 --> 00:13:44,220
square so<font color="#E5E5E5"> you crop off the top and</font>

305
00:13:44,220 --> 00:13:46,380
<font color="#CCCCCC">bottom</font><font color="#E5E5E5"> or crop off the left and right so</font>

306
00:13:46,380 --> 00:13:50,450
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> center cropping</font>

307
00:13:50,819 --> 00:13:56,029
<font color="#CCCCCC">Center cropping approach so I understand</font>

308
00:13:56,029 --> 00:13:59,579
continuing to learn with Google<font color="#CCCCCC"> and you</font>

309
00:13:59,579 --> 00:14:02,389
said<font color="#E5E5E5"> after that</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> waiting on</font>

310
00:14:02,389 --> 00:14:04,740
<font color="#CCCCCC">data those scenes</font><font color="#E5E5E5"> ledger</font>

311
00:14:04,740 --> 00:14:09,209
I'm<font color="#CCCCCC"> through here this okay that's true</font>

312
00:14:09,209 --> 00:14:11,809
what you're doing is throwing away

313
00:14:11,809 --> 00:14:14,579
you're throwing away compute like like

314
00:14:14,579 --> 00:14:16,559
with the one where you do<font color="#CCCCCC"> send to crop</font>

315
00:14:16,559 --> 00:14:18,689
you have a complete<font color="#CCCCCC"> 224 thing full of</font>

316
00:14:18,689 --> 00:14:20,819
meaningful pixels<font color="#E5E5E5"> for us with a black</font>

317
00:14:20,819 --> 00:14:23,670
border<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> like a 180 by</font><font color="#CCCCCC"> 224 bit</font><font color="#E5E5E5"> is</font>

318
00:14:23,670 --> 00:14:25,139
meaningful pixels and a whole bunch<font color="#CCCCCC"> of</font>

319
00:14:25,139 --> 00:14:34,819
like<font color="#E5E5E5"> okay yeah that can be a problem</font><font color="#CCCCCC"> so</font>

320
00:14:34,819 --> 00:14:37,259
it works well for image net because

321
00:14:37,259 --> 00:14:38,970
image net things are<font color="#CCCCCC"> generally somewhat</font>

322
00:14:38,970 --> 00:14:43,220
centered you may need to do some<font color="#CCCCCC"> kind of</font>

323
00:14:43,220 --> 00:14:45,779
<font color="#E5E5E5">initial set to do like a hate map or</font>

324
00:14:45,779 --> 00:14:47,339
something<font color="#E5E5E5"> like to get in</font><font color="#CCCCCC"> lesson</font><font color="#E5E5E5"> seven to</font>

325
00:14:47,339 --> 00:14:48,660
figure out<font color="#CCCCCC"> roughly where the</font><font color="#E5E5E5"> thing is</font>

326
00:14:48,660 --> 00:14:50,100
<font color="#CCCCCC">before you decide where to send</font><font color="#E5E5E5"> to the</font>

327
00:14:50,100 --> 00:14:53,149
<font color="#CCCCCC">crop so these things are all compromises</font>

328
00:14:53,149 --> 00:14:55,559
<font color="#CCCCCC">but</font><font color="#E5E5E5"> I've got to say since I switched</font><font color="#CCCCCC"> to</font>

329
00:14:55,559 --> 00:14:56,970
using this approach I feel like my

330
00:14:56,970 --> 00:14:58,410
models<font color="#CCCCCC"> are trained a lot faster and</font>

331
00:14:58,410 --> 00:15:00,569
<font color="#E5E5E5">giving better results</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> certainly the</font>

332
00:15:00,569 --> 00:15:03,899
<font color="#E5E5E5">super resolution okay now I said last</font>

333
00:15:03,899 --> 00:15:05,189
<font color="#E5E5E5">week that we are going to start looking</font>

334
00:15:05,189 --> 00:15:09,059
<font color="#E5E5E5">at parallel processing</font><font color="#CCCCCC"> and if you're</font>

335
00:15:09,059 --> 00:15:10,319
<font color="#E5E5E5">wondering about last week's homework</font>

336
00:15:10,319 --> 00:15:12,269
we're going to get there but some<font color="#E5E5E5"> of the</font>

337
00:15:12,269 --> 00:15:13,829
techniques<font color="#CCCCCC"> were about</font><font color="#E5E5E5"> to learn we're</font>

338
00:15:13,829 --> 00:15:15,209
going to use to do last week so I'm

339
00:15:15,209 --> 00:15:18,620
<font color="#E5E5E5">working even better so but don't worry</font>

340
00:15:18,620 --> 00:15:20,939
so what I want to<font color="#E5E5E5"> do is I want to have</font>

341
00:15:20,939 --> 00:15:26,550
I've got a a CPU with something like<font color="#CCCCCC"> 10</font>

342
00:15:26,550 --> 00:15:29,069
<font color="#CCCCCC">cores on it and then each of</font><font color="#E5E5E5"> those calls</font>

343
00:15:29,069 --> 00:15:30,600
have<font color="#E5E5E5"> hyper threading so it means each of</font>

344
00:15:30,600 --> 00:15:32,550
<font color="#E5E5E5">those calls can do kind of two things at</font>

345
00:15:32,550 --> 00:15:32,879
once

346
00:15:32,879 --> 00:15:34,829
<font color="#E5E5E5">so I really want to be able to you know</font>

347
00:15:34,829 --> 00:15:37,740
<font color="#E5E5E5">have a couple of dozen processes going</font>

348
00:15:37,740 --> 00:15:40,079
on each one resizing an image that's

349
00:15:40,079 --> 00:15:43,519
<font color="#E5E5E5">called parallel processing okay</font><font color="#CCCCCC"> and just</font>

350
00:15:43,519 --> 00:15:45,870
<font color="#CCCCCC">to</font><font color="#E5E5E5"> remind you this is as opposed to</font>

351
00:15:45,870 --> 00:15:49,050
<font color="#E5E5E5">vectorization</font><font color="#CCCCCC"> or SIMD which is where a</font>

352
00:15:49,050 --> 00:15:51,269
single thread operates on a bunch<font color="#E5E5E5"> of</font>

353
00:15:51,269 --> 00:15:53,069
<font color="#E5E5E5">things at a time</font><font color="#CCCCCC"> and so we learnt</font><font color="#E5E5E5"> that</font>

354
00:15:53,069 --> 00:15:54,899
to get<font color="#CCCCCC"> SSD working you just have to</font>

355
00:15:54,899 --> 00:15:55,529
<font color="#E5E5E5">install</font>

356
00:15:55,529 --> 00:15:59,440
hello SIMD and the

357
00:15:59,440 --> 00:16:00,790
this happened in<font color="#E5E5E5"> six</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> percents</font>

358
00:16:00,790 --> 00:16:03,879
data<font color="#CCCCCC"> I tried it it works now we're going</font>

359
00:16:03,879 --> 00:16:05,769
<font color="#E5E5E5">to as well as a 600 percent speed-up</font>

360
00:16:05,769 --> 00:16:08,920
<font color="#E5E5E5">also get another and on</font><font color="#CCCCCC"> 20x speed up by</font>

361
00:16:08,920 --> 00:16:11,770
doing<font color="#CCCCCC"> parallel processing</font>

362
00:16:11,770 --> 00:16:13,510
the basic approach to parallel

363
00:16:13,510 --> 00:16:18,520
processing in Python 3<font color="#CCCCCC"> is to set</font><font color="#E5E5E5"> up</font>

364
00:16:18,520 --> 00:16:20,230
something<font color="#E5E5E5"> called either a process pool</font>

365
00:16:20,230 --> 00:16:23,320
or a thread pool<font color="#CCCCCC"> so the idea here is</font>

366
00:16:23,320 --> 00:16:24,840
that<font color="#E5E5E5"> we've</font><font color="#CCCCCC"> got a number of little</font>

367
00:16:24,840 --> 00:16:27,370
<font color="#CCCCCC">programs running threads or processes</font>

368
00:16:27,370 --> 00:16:31,000
<font color="#E5E5E5">and when we set up that</font><font color="#CCCCCC"> pool we say how</font>

369
00:16:31,000 --> 00:16:32,470
many<font color="#CCCCCC"> of those</font><font color="#E5E5E5"> little programs do we want</font>

370
00:16:32,470 --> 00:16:35,500
to fire up<font color="#CCCCCC"> ok and then what we do is</font><font color="#E5E5E5"> we</font>

371
00:16:35,500 --> 00:16:40,060
say<font color="#E5E5E5"> ok now I want you to use all</font><font color="#CCCCCC"> of</font>

372
00:16:40,060 --> 00:16:42,040
their code workers<font color="#CCCCCC"> I want you to use all</font>

373
00:16:42,040 --> 00:16:45,430
of<font color="#E5E5E5"> those workers to do some thing right</font>

374
00:16:45,430 --> 00:16:47,440
and the easiest way to do<font color="#CCCCCC"> is being</font>

375
00:16:47,440 --> 00:16:50,860
inside some<font color="#E5E5E5"> tree is to use</font><font color="#CCCCCC"> Matt a lot</font><font color="#E5E5E5"> of</font>

376
00:16:50,860 --> 00:16:52,150
you<font color="#CCCCCC"> probably used how many of you have</font>

377
00:16:52,150 --> 00:16:54,940
<font color="#E5E5E5">used Matt before</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> for those you</font>

378
00:16:54,940 --> 00:16:57,010
<font color="#CCCCCC">who haven't maps is a very common</font>

379
00:16:57,010 --> 00:16:58,600
functional programming construct that's

380
00:16:58,600 --> 00:16:59,620
<font color="#E5E5E5">found its way into lots of other</font>

381
00:16:59,620 --> 00:17:02,620
languages<font color="#E5E5E5"> which simply says look through</font>

382
00:17:02,620 --> 00:17:04,839
a collection<font color="#CCCCCC"> and call a function on</font>

383
00:17:04,839 --> 00:17:07,210
everything in that collection<font color="#CCCCCC"> and return</font>

384
00:17:07,210 --> 00:17:10,000
a new collection which is<font color="#E5E5E5"> the result of</font>

385
00:17:10,000 --> 00:17:11,740
calling<font color="#CCCCCC"> that function on that thing in</font>

386
00:17:11,740 --> 00:17:14,380
our<font color="#E5E5E5"> case the function is resized and the</font>

387
00:17:14,380 --> 00:17:18,339
collection is<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Internet images well in</font>

388
00:17:18,339 --> 00:17:22,180
fact the collection is a bunch of

389
00:17:22,180 --> 00:17:25,089
numbers<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> 2 3</font><font color="#CCCCCC"> 4 and so forth and what</font>

390
00:17:25,089 --> 00:17:28,240
<font color="#E5E5E5">the resize image is going</font><font color="#CCCCCC"> to do is it's</font>

391
00:17:28,240 --> 00:17:31,620
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> open that image of disk access</font>

392
00:17:31,620 --> 00:17:35,080
<font color="#E5E5E5">turning the number 3 into the third</font>

393
00:17:35,080 --> 00:17:38,140
<font color="#E5E5E5">image resize to</font><font color="#CCCCCC"> 224</font><font color="#E5E5E5"> by 224 and</font><font color="#CCCCCC"> will</font>

394
00:17:38,140 --> 00:17:41,110
<font color="#E5E5E5">return that so the general approach here</font>

395
00:17:41,110 --> 00:17:43,150
<font color="#E5E5E5">this is basically what it looks like to</font>

396
00:17:43,150 --> 00:17:48,580
<font color="#E5E5E5">do</font><font color="#CCCCCC"> parallel processing in Python it may</font>

397
00:17:48,580 --> 00:17:50,590
<font color="#E5E5E5">look a bit weird we're going result</font>

398
00:17:50,590 --> 00:17:55,000
equals exact<font color="#E5E5E5"> map and this is a function</font>

399
00:17:55,000 --> 00:17:57,130
I<font color="#E5E5E5"> want this is</font><font color="#CCCCCC"> the thing</font><font color="#E5E5E5"> to map over and</font>

400
00:17:57,130 --> 00:17:59,200
then I'm saying<font color="#E5E5E5"> for each thing in that</font>

401
00:17:59,200 --> 00:18:02,140
list<font color="#E5E5E5"> do something now this might make</font>

402
00:18:02,140 --> 00:18:03,460
<font color="#CCCCCC">you think we'll wait there's nothing in</font>

403
00:18:03,460 --> 00:18:06,820
this list<font color="#E5E5E5"> has</font><font color="#CCCCCC"> to have enough memory to</font>

404
00:18:06,820 --> 00:18:10,060
every single<font color="#CCCCCC"> resize image and the answer</font>

405
00:18:10,060 --> 00:18:13,030
is no no it doesn't<font color="#E5E5E5"> one of the things</font>

406
00:18:13,030 --> 00:18:16,450
that<font color="#CCCCCC"> Python 3 uses a lot more is using</font>

407
00:18:16,450 --> 00:18:18,840
these things<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> called generators</font>

408
00:18:18,840 --> 00:18:21,310
which is basically it's a something<font color="#E5E5E5"> that</font>

409
00:18:21,310 --> 00:18:24,040
looks like a list but<font color="#E5E5E5"> it's lazy it only</font>

410
00:18:24,040 --> 00:18:25,049
creates

411
00:18:25,049 --> 00:18:27,779
thing when you<font color="#CCCCCC"> ask for it so as I</font><font color="#E5E5E5"> append</font>

412
00:18:27,779 --> 00:18:30,059
each image is going<font color="#E5E5E5"> to give me that</font>

413
00:18:30,059 --> 00:18:32,340
image and if<font color="#E5E5E5"> this mapping is</font><font color="#CCCCCC"> not yet</font>

414
00:18:32,340 --> 00:18:36,059
<font color="#E5E5E5">finished creating it it'll wait so this</font>

415
00:18:36,059 --> 00:18:37,679
<font color="#E5E5E5">approach looks like it's going</font><font color="#CCCCCC"> to use</font>

416
00:18:37,679 --> 00:18:40,889
heaps of memory<font color="#E5E5E5"> but it doesn't it uses</font>

417
00:18:40,889 --> 00:18:42,720
only the<font color="#CCCCCC"> minimum amount of memory</font>

418
00:18:42,720 --> 00:18:44,249
necessary<font color="#E5E5E5"> and it does everything</font><font color="#CCCCCC"> in</font>

419
00:18:44,249 --> 00:18:46,610
parallel

420
00:18:46,820 --> 00:18:50,200
so resize image

421
00:18:52,440 --> 00:18:54,120
<font color="#E5E5E5">is something which is going to</font><font color="#CCCCCC"> open</font><font color="#E5E5E5"> up</font>

422
00:18:54,120 --> 00:18:56,520
the image<font color="#CCCCCC"> it's going to turn</font><font color="#E5E5E5"> it into</font><font color="#CCCCCC"> an</font>

423
00:18:56,520 --> 00:18:58,680
<font color="#CCCCCC">umpire ray and then it's going to resize</font>

424
00:18:58,680 --> 00:19:01,560
it<font color="#E5E5E5"> okay and so then the resize</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

425
00:19:01,560 --> 00:19:03,060
<font color="#E5E5E5">center cropping we just mentioned and</font>

426
00:19:03,060 --> 00:19:05,430
then after<font color="#CCCCCC"> it's resize it's going to get</font>

427
00:19:05,430 --> 00:19:10,260
appended<font color="#CCCCCC"> what</font><font color="#E5E5E5"> is append image to so this</font>

428
00:19:10,260 --> 00:19:14,670
<font color="#E5E5E5">is a bit weird what's going on here</font><font color="#CCCCCC"> what</font>

429
00:19:14,670 --> 00:19:16,920
it does is it says is it's<font color="#E5E5E5"> going to</font>

430
00:19:16,920 --> 00:19:19,800
actually<font color="#E5E5E5"> take</font><font color="#CCCCCC"> it into what we call a</font>

431
00:19:19,800 --> 00:19:23,220
pre-allocated array so<font color="#E5E5E5"> we're learning a</font>

432
00:19:23,220 --> 00:19:24,720
<font color="#CCCCCC">lot</font><font color="#E5E5E5"> of computer science concepts here</font>

433
00:19:24,720 --> 00:19:26,310
anybody<font color="#CCCCCC"> that's done computer</font><font color="#E5E5E5"> science</font>

434
00:19:26,310 --> 00:19:27,570
<font color="#E5E5E5">before</font><font color="#CCCCCC"> which familiar with all of this</font>

435
00:19:27,570 --> 00:19:30,000
already<font color="#CCCCCC"> if you haven't you probably</font>

436
00:19:30,000 --> 00:19:32,960
<font color="#E5E5E5">won't but it's important</font><font color="#CCCCCC"> to know that</font>

437
00:19:32,960 --> 00:19:35,520
the slowest thing in<font color="#E5E5E5"> your computer</font>

438
00:19:35,520 --> 00:19:38,790
<font color="#CCCCCC">generally speaking is allocating memory</font>

439
00:19:38,790 --> 00:19:41,610
<font color="#E5E5E5">it's finding some memory it's reading</font>

440
00:19:41,610 --> 00:19:43,140
stuff from<font color="#CCCCCC"> that memories writing to that</font>

441
00:19:43,140 --> 00:19:45,060
memory<font color="#E5E5E5"> and let's suppose it's like cache</font>

442
00:19:45,060 --> 00:19:46,350
or something

443
00:19:46,350 --> 00:19:48,510
and generally<font color="#CCCCCC"> speaking if you like</font>

444
00:19:48,510 --> 00:19:51,000
create lots and lots of arrays and then

445
00:19:51,000 --> 00:19:51,930
<font color="#E5E5E5">throw them away again</font>

446
00:19:51,930 --> 00:19:54,210
that's likely to<font color="#CCCCCC"> be really really slow</font>

447
00:19:54,210 --> 00:19:56,700
<font color="#E5E5E5">and so what I wanted to do was to create</font>

448
00:19:56,700 --> 00:20:00,390
a single<font color="#CCCCCC"> 224 by 224 array which is going</font>

449
00:20:00,390 --> 00:20:02,880
<font color="#E5E5E5">to contain my resize image and then I'm</font>

450
00:20:02,880 --> 00:20:06,110
going to append that to my big holes

451
00:20:06,110 --> 00:20:12,890
<font color="#E5E5E5">tensor so but where you do that in</font>

452
00:20:12,890 --> 00:20:17,190
<font color="#E5E5E5">Python it's it's wonderfully easy</font><font color="#CCCCCC"> you</font>

453
00:20:17,190 --> 00:20:21,030
can create a variable<font color="#E5E5E5"> from this thing</font>

454
00:20:21,030 --> 00:20:24,660
called threading local now<font color="#CCCCCC"> DL is now</font>

455
00:20:24,660 --> 00:20:26,700
just a it's<font color="#CCCCCC"> basically something that</font>

456
00:20:26,700 --> 00:20:28,860
<font color="#E5E5E5">looks a bit like a dictionary</font><font color="#CCCCCC"> it's a</font>

457
00:20:28,860 --> 00:20:30,690
very special kind<font color="#E5E5E5"> of dictionary</font><font color="#CCCCCC"> it's</font>

458
00:20:30,690 --> 00:20:32,370
going to create a separate copy of it

459
00:20:32,370 --> 00:20:36,900
for every thread or process<font color="#CCCCCC"> so normally</font>

460
00:20:36,900 --> 00:20:38,100
when you've got<font color="#E5E5E5"> lots of things happening</font>

461
00:20:38,100 --> 00:20:40,020
at once<font color="#CCCCCC"> it's going to be a real pain</font>

462
00:20:40,020 --> 00:20:41,820
because<font color="#CCCCCC"> if two things try to use it at</font>

463
00:20:41,820 --> 00:20:44,720
the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> you get</font>

464
00:20:44,720 --> 00:20:47,660
bad results or<font color="#CCCCCC"> even crashes but</font><font color="#E5E5E5"> if you</font>

465
00:20:47,660 --> 00:20:50,540
allocate<font color="#E5E5E5"> a variable like</font><font color="#CCCCCC"> this it</font>

466
00:20:50,540 --> 00:20:52,400
automatically creates<font color="#E5E5E5"> a separate copy</font>

467
00:20:52,400 --> 00:20:54,710
<font color="#CCCCCC">and every threat and you</font><font color="#E5E5E5"> don't have to</font>

468
00:20:54,710 --> 00:20:55,940
worry<font color="#E5E5E5"> about locks you don't have to</font>

469
00:20:55,940 --> 00:20:58,360
worry about<font color="#E5E5E5"> race conditions whatever</font>

470
00:20:58,360 --> 00:21:01,430
so once<font color="#E5E5E5"> I've created this special</font>

471
00:21:01,430 --> 00:21:04,810
threading local variable<font color="#CCCCCC"> I then create a</font>

472
00:21:04,810 --> 00:21:07,730
<font color="#CCCCCC">safe folder inside it which is just an</font>

473
00:21:07,730 --> 00:21:10,760
array<font color="#CCCCCC"> of</font><font color="#E5E5E5"> zeros of size 224 by 224 by 3</font>

474
00:21:10,760 --> 00:21:14,600
and<font color="#E5E5E5"> so then later on</font><font color="#CCCCCC"> I create my big</font>

475
00:21:14,600 --> 00:21:16,520
holes array which<font color="#CCCCCC"> is where I'm going</font><font color="#E5E5E5"> to</font>

476
00:21:16,520 --> 00:21:18,680
<font color="#E5E5E5">put everything</font><font color="#CCCCCC"> eventually</font><font color="#E5E5E5"> and to append</font>

477
00:21:18,680 --> 00:21:21,140
<font color="#CCCCCC">the image</font><font color="#E5E5E5"> i graph the bit of the image</font>

478
00:21:21,140 --> 00:21:24,530
<font color="#CCCCCC">that I want and I put it into that</font>

479
00:21:24,530 --> 00:21:29,120
pre-allocated<font color="#E5E5E5"> that pre-allocated</font><font color="#CCCCCC"> threads</font>

480
00:21:29,120 --> 00:21:32,660
local variable<font color="#E5E5E5"> and then I can let my big</font>

481
00:21:32,660 --> 00:21:37,730
<font color="#CCCCCC">holes array so there's lots of detail</font>

482
00:21:37,730 --> 00:21:41,060
here in terms of<font color="#E5E5E5"> lag using parallel</font>

483
00:21:41,060 --> 00:21:43,520
processing effectively<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to kind</font>

484
00:21:43,520 --> 00:21:45,620
of<font color="#E5E5E5"> briefly mention it not because I</font>

485
00:21:45,620 --> 00:21:46,760
think somebody<font color="#E5E5E5"> who hasn't</font><font color="#CCCCCC"> thirty</font>

486
00:21:46,760 --> 00:21:48,350
computer<font color="#E5E5E5"> science is now going to</font><font color="#CCCCCC"> go OK I</font>

487
00:21:48,350 --> 00:21:50,570
<font color="#E5E5E5">totally understood all that but to give</font>

488
00:21:50,570 --> 00:21:52,430
you<font color="#CCCCCC"> some of the things to</font><font color="#E5E5E5"> like search</font>

489
00:21:52,430 --> 00:21:54,830
for and learn about over the<font color="#E5E5E5"> next week</font>

490
00:21:54,830 --> 00:21:56,270
if<font color="#E5E5E5"> you haven't done any parallel</font>

491
00:21:56,270 --> 00:21:58,310
programming before<font color="#E5E5E5"> you're going to need</font>

492
00:21:58,310 --> 00:22:00,800
to understand<font color="#CCCCCC"> regular storage</font><font color="#E5E5E5"> and race</font>

493
00:22:00,800 --> 00:22:03,340
conditions

494
00:22:04,909 --> 00:22:09,340
I'm sorry I'm not<font color="#CCCCCC"> the young great boss</font>

495
00:22:14,100 --> 00:22:17,620
so<font color="#CCCCCC"> somebody who knows their person and</font>

496
00:22:17,620 --> 00:22:19,030
<font color="#E5E5E5">person is looking for the global</font>

497
00:22:19,030 --> 00:22:21,820
interpreter lock which is<font color="#E5E5E5"> one of the</font>

498
00:22:21,820 --> 00:22:24,700
many<font color="#CCCCCC"> thoughtful</font><font color="#E5E5E5"> things that open</font><font color="#CCCCCC"> theirs</font>

499
00:22:24,700 --> 00:22:27,430
most of all in which is that in theory

500
00:22:27,430 --> 00:22:28,780
<font color="#E5E5E5">true things can't happen at the same</font>

501
00:22:28,780 --> 00:22:31,570
time because<font color="#CCCCCC"> Tyson wasn't really</font><font color="#E5E5E5"> written</font>

502
00:22:31,570 --> 00:22:35,880
in a<font color="#CCCCCC"> read safe way the good news is that</font>

503
00:22:35,880 --> 00:22:39,340
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> of libraries are written in a</font>

504
00:22:39,340 --> 00:22:41,860
thread safe way so<font color="#CCCCCC"> if you're using a</font>

505
00:22:41,860 --> 00:22:43,809
<font color="#CCCCCC">library where most of</font><font color="#E5E5E5"> its workers the</font>

506
00:22:43,809 --> 00:22:46,690
emergency as is the case with<font color="#E5E5E5"> pillow</font>

507
00:22:46,690 --> 00:22:49,210
simd actually you<font color="#E5E5E5"> don't have to worry</font>

508
00:22:49,210 --> 00:22:51,100
<font color="#E5E5E5">about that and I can prove it to you</font>

509
00:22:51,100 --> 00:22:55,090
<font color="#CCCCCC">even if they drew a little picture here</font>

510
00:22:55,090 --> 00:22:58,450
is the<font color="#E5E5E5"> result right of serial versus</font>

511
00:22:58,450 --> 00:23:02,950
parallel<font color="#E5E5E5"> now the cereal without SIMD</font>

512
00:23:02,950 --> 00:23:04,870
version is six times bigger<font color="#E5E5E5"> than this</font>

513
00:23:04,870 --> 00:23:08,020
right so the kind of default place and

514
00:23:08,020 --> 00:23:09,850
code you<font color="#E5E5E5"> would have written maybe before</font>

515
00:23:09,850 --> 00:23:12,250
today's course would have been 120

516
00:23:12,250 --> 00:23:18,790
seconds process<font color="#CCCCCC"> 2,000 images with SIMD</font>

517
00:23:18,790 --> 00:23:21,100
<font color="#E5E5E5">at 25 seconds</font>

518
00:23:21,100 --> 00:23:23,650
with the<font color="#CCCCCC"> protest pool at eight seconds</font>

519
00:23:23,650 --> 00:23:25,720
<font color="#CCCCCC">for</font><font color="#E5E5E5"> three workers for six workers it's</font>

520
00:23:25,720 --> 00:23:28,120
five<font color="#E5E5E5"> seconds</font><font color="#CCCCCC"> so on and so forth</font><font color="#E5E5E5"> the</font>

521
00:23:28,120 --> 00:23:30,910
thread pool is even better<font color="#CCCCCC"> 3.6 seconds</font>

522
00:23:30,910 --> 00:23:34,299
to 12 workers<font color="#CCCCCC"> 3.2 seconds at 16 workers</font>

523
00:23:34,299 --> 00:23:38,710
now your mileage will<font color="#CCCCCC"> vary depending</font><font color="#E5E5E5"> on</font>

524
00:23:38,710 --> 00:23:41,410
<font color="#E5E5E5">what</font><font color="#CCCCCC"> CPU you have given</font><font color="#E5E5E5"> the that's</font>

525
00:23:41,410 --> 00:23:42,610
probably<font color="#CCCCCC"> quite</font><font color="#E5E5E5"> a lot of you are using</font>

526
00:23:42,610 --> 00:23:44,380
the<font color="#E5E5E5"> p2s tool unless</font><font color="#CCCCCC"> you've got</font><font color="#E5E5E5"> your deep</font>

527
00:23:44,380 --> 00:23:46,270
learning box up and<font color="#E5E5E5"> running you'll have</font>

528
00:23:46,270 --> 00:23:48,220
the<font color="#E5E5E5"> same performance as other people</font>

529
00:23:48,220 --> 00:23:49,840
using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> t2 but you should try</font>

530
00:23:49,840 --> 00:23:51,640
something<font color="#CCCCCC"> like this right which</font><font color="#E5E5E5"> is to</font>

531
00:23:51,640 --> 00:23:54,100
try different<font color="#E5E5E5"> numbers</font><font color="#CCCCCC"> of workers</font><font color="#E5E5E5"> and see</font>

532
00:23:54,100 --> 00:23:56,470
what's the optimal for<font color="#E5E5E5"> that particular</font>

533
00:23:56,470 --> 00:23:58,990
<font color="#E5E5E5">CPU and now once you've done that you</font>

534
00:23:58,990 --> 00:24:01,419
know<font color="#CCCCCC"> once I went beyond</font><font color="#E5E5E5"> 16 I didn't</font>

535
00:24:01,419 --> 00:24:03,970
really get improvements so I know<font color="#E5E5E5"> that</font>

536
00:24:03,970 --> 00:24:06,820
on that<font color="#CCCCCC"> computer a thread pool of size</font>

537
00:24:06,820 --> 00:24:09,820
16 is a pretty<font color="#E5E5E5"> good choice and as you</font>

538
00:24:09,820 --> 00:24:10,990
can see<font color="#E5E5E5"> once you get</font><font color="#CCCCCC"> into the right</font>

539
00:24:10,990 --> 00:24:13,120
<font color="#E5E5E5">general vicinity it doesn't vary too</font>

540
00:24:13,120 --> 00:24:15,460
much<font color="#CCCCCC"> and so as</font><font color="#E5E5E5"> long</font><font color="#CCCCCC"> as you're roughly</font>

541
00:24:15,460 --> 00:24:18,860
<font color="#E5E5E5">okay there's behind</font><font color="#CCCCCC"> to Rachel</font>

542
00:24:18,860 --> 00:24:20,920
you

543
00:24:22,520 --> 00:24:24,440
so that's the<font color="#E5E5E5"> general approach here</font><font color="#CCCCCC"> is</font>

544
00:24:24,440 --> 00:24:26,240
run through something<font color="#E5E5E5"> in parallel each</font>

545
00:24:26,240 --> 00:24:29,630
time<font color="#CCCCCC"> appender</font><font color="#E5E5E5"> to my big holes array</font><font color="#CCCCCC"> and</font>

546
00:24:29,630 --> 00:24:31,910
at the end of<font color="#E5E5E5"> that I've got</font><font color="#CCCCCC"> a big holes</font>

547
00:24:31,910 --> 00:24:33,650
array which I can use again and<font color="#E5E5E5"> again so</font>

548
00:24:33,650 --> 00:24:35,510
I don't rerun that code very often

549
00:24:35,510 --> 00:24:37,809
anymore<font color="#CCCCCC"> I've got all of the</font><font color="#E5E5E5"> image net</font>

550
00:24:37,809 --> 00:24:41,600
resized into each of 72 by 72 to 24 and

551
00:24:41,600 --> 00:24:43,670
<font color="#E5E5E5">to 88 so I just and I give them</font>

552
00:24:43,670 --> 00:24:49,690
different names<font color="#E5E5E5"> and I just use them for</font>

553
00:24:49,690 --> 00:24:54,620
<font color="#CCCCCC">our</font><font color="#E5E5E5"> image of serving so</font><font color="#CCCCCC"> the food they</font>

554
00:24:54,620 --> 00:24:56,870
<font color="#E5E5E5">are consuming</font><font color="#CCCCCC"> recycle some number and</font>

555
00:24:56,870 --> 00:24:59,900
we'll just squish the title to square I

556
00:24:59,900 --> 00:25:01,760
mean I<font color="#CCCCCC"> usually will distort it but Brad</font>

557
00:25:01,760 --> 00:25:03,620
<font color="#CCCCCC">hopefuls right in fact</font><font color="#E5E5E5"> I think that's</font>

558
00:25:03,620 --> 00:25:05,179
what Paris does nothing about<font color="#CCCCCC"> helping it</font>

559
00:25:05,179 --> 00:25:07,450
squishes

560
00:25:07,740 --> 00:25:10,559
yeah<font color="#CCCCCC"> I okay</font><font color="#E5E5E5"> so here's one of these</font>

561
00:25:10,559 --> 00:25:13,289
things<font color="#CCCCCC"> I'm not quite sure right my guess</font>

562
00:25:13,289 --> 00:25:15,630
was<font color="#E5E5E5"> that I don't</font><font color="#CCCCCC"> think it's a good idea</font>

563
00:25:15,630 --> 00:25:18,750
<font color="#E5E5E5">because you're now going to have</font><font color="#CCCCCC"> dogs</font><font color="#E5E5E5"> of</font>

564
00:25:18,750 --> 00:25:20,309
various<font color="#E5E5E5"> different squish levels and</font>

565
00:25:20,309 --> 00:25:21,870
you'll see an<font color="#E5E5E5"> N is going to have to</font>

566
00:25:21,870 --> 00:25:24,690
learn<font color="#E5E5E5"> that thing right it's going to</font>

567
00:25:24,690 --> 00:25:28,649
<font color="#E5E5E5">have it's got another type of you</font><font color="#CCCCCC"> know</font>

568
00:25:28,649 --> 00:25:31,260
<font color="#E5E5E5">symmetry to learn about you</font><font color="#CCCCCC"> know level</font>

569
00:25:31,260 --> 00:25:33,419
<font color="#CCCCCC">of squishiness wealth if we keep</font>

570
00:25:33,419 --> 00:25:39,090
everything the same<font color="#E5E5E5"> kind of aspect ratio</font>

571
00:25:39,090 --> 00:25:41,100
<font color="#CCCCCC">I think it's going to be easier to learn</font>

572
00:25:41,100 --> 00:25:42,929
so we'll get better results with a C+

573
00:25:42,929 --> 00:25:46,740
training yeah I that's my<font color="#E5E5E5"> theory and I'd</font>

574
00:25:46,740 --> 00:25:48,029
be fascinated<font color="#CCCCCC"> for somebody to do a</font>

575
00:25:48,029 --> 00:25:50,159
really in-depth<font color="#E5E5E5"> analysis of like black</font>

576
00:25:50,159 --> 00:25:53,149
<font color="#E5E5E5">borders versus center cropping</font><font color="#CCCCCC"> versus</font>

577
00:25:53,149 --> 00:25:58,200
<font color="#E5E5E5">squishing</font><font color="#CCCCCC"> good image -</font><font color="#E5E5E5"> okay so for now</font>

578
00:25:58,200 --> 00:26:00,720
<font color="#E5E5E5">we can just open the big</font><font color="#CCCCCC"> holes array and</font>

579
00:26:00,720 --> 00:26:03,720
there we go<font color="#E5E5E5"> so we're now ready to create</font>

580
00:26:03,720 --> 00:26:05,880
<font color="#E5E5E5">our model and run through this pretty</font>

581
00:26:05,880 --> 00:26:07,230
<font color="#E5E5E5">quickly because most of</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> pretty</font>

582
00:26:07,230 --> 00:26:09,899
<font color="#E5E5E5">boring the basic idea here is that</font><font color="#CCCCCC"> we</font>

583
00:26:09,899 --> 00:26:12,600
need<font color="#CCCCCC"> to create an array of labels which</font>

584
00:26:12,600 --> 00:26:15,840
are called<font color="#E5E5E5"> vexed which contains for</font>

585
00:26:15,840 --> 00:26:20,070
every<font color="#E5E5E5"> image in my in my</font><font color="#CCCCCC"> vehicles array</font>

586
00:26:20,070 --> 00:26:22,649
needs<font color="#E5E5E5"> to contain the word vector but</font>

587
00:26:22,649 --> 00:26:24,360
then the target<font color="#CCCCCC"> word vector for that</font>

588
00:26:24,360 --> 00:26:25,830
<font color="#E5E5E5">image</font>

589
00:26:25,830 --> 00:26:30,409
and just remind you last week we

590
00:26:30,409 --> 00:26:34,769
randomly ordered the<font color="#CCCCCC"> file ends so</font><font color="#E5E5E5"> this</font>

591
00:26:34,769 --> 00:26:38,240
<font color="#E5E5E5">they called array is in random order</font>

592
00:26:38,299 --> 00:26:41,250
<font color="#E5E5E5">okay so we've got</font><font color="#CCCCCC"> our labels which is</font>

593
00:26:41,250 --> 00:26:44,549
the work vectors for every image<font color="#CCCCCC"> we need</font>

594
00:26:44,549 --> 00:26:48,390
to do<font color="#CCCCCC"> our normal pre-processing this is</font>

595
00:26:48,390 --> 00:26:53,100
a handy way<font color="#CCCCCC"> to pre-process in the new</font>

596
00:26:53,100 --> 00:26:56,490
version of<font color="#E5E5E5"> chaos we're using the normal</font>

597
00:26:56,490 --> 00:26:59,580
<font color="#E5E5E5">Clara</font><font color="#CCCCCC"> ResNet model</font><font color="#E5E5E5"> the one that comes in</font>

598
00:26:59,580 --> 00:27:02,429
<font color="#E5E5E5">Kherson applications</font><font color="#CCCCCC"> it doesn't do the</font>

599
00:27:02,429 --> 00:27:06,330
<font color="#E5E5E5">pre-processing for you</font><font color="#CCCCCC"> but if you create</font>

600
00:27:06,330 --> 00:27:08,340
<font color="#CCCCCC">a lambda</font><font color="#E5E5E5"> layer it does the</font>

601
00:27:08,340 --> 00:27:11,190
<font color="#E5E5E5">pre-processing and</font><font color="#CCCCCC"> you can use that</font>

602
00:27:11,190 --> 00:27:14,909
lambda layer as the<font color="#E5E5E5"> input tensor so this</font>

603
00:27:14,909 --> 00:27:18,419
whole thing<font color="#CCCCCC"> now we'll do the</font>

604
00:27:18,419 --> 00:27:20,700
<font color="#E5E5E5">pre-processing automatically without you</font>

605
00:27:20,700 --> 00:27:21,840
having to worry<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it so</font><font color="#CCCCCC"> that's a</font>

606
00:27:21,840 --> 00:27:24,059
good<font color="#CCCCCC"> little trick I'm not sure it's</font>

607
00:27:24,059 --> 00:27:26,010
<font color="#CCCCCC">quite as neat</font><font color="#E5E5E5"> as what we did in part</font><font color="#CCCCCC"> one</font>

608
00:27:26,010 --> 00:27:30,090
where we put it in the model itself<font color="#CCCCCC"> but</font>

609
00:27:30,090 --> 00:27:31,320
<font color="#E5E5E5">at least this way we don't</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font>

610
00:27:31,320 --> 00:27:33,570
maintain a whole separate version of all

611
00:27:33,570 --> 00:27:37,620
<font color="#E5E5E5">of the models so that's kind of what I'm</font>

612
00:27:37,620 --> 00:27:40,070
doing<font color="#CCCCCC"> nowadays</font>

613
00:27:40,159 --> 00:27:43,340
<font color="#CCCCCC">all right</font>

614
00:27:44,280 --> 00:27:45,810
when you're<font color="#E5E5E5"> working on really big</font>

615
00:27:45,810 --> 00:27:49,070
<font color="#E5E5E5">datasets</font><font color="#CCCCCC"> you don't want to process</font>

616
00:27:49,070 --> 00:27:51,690
<font color="#CCCCCC">things any more</font><font color="#E5E5E5"> than necessary</font><font color="#CCCCCC"> and any</font>

617
00:27:51,690 --> 00:27:53,190
more time necessary

618
00:27:53,190 --> 00:27:55,290
<font color="#E5E5E5">I know ahead of time but I'm going to</font>

619
00:27:55,290 --> 00:27:58,560
want to<font color="#E5E5E5"> do some fine-tuning so what I</font>

620
00:27:58,560 --> 00:28:01,530
decided to do was I decided<font color="#CCCCCC"> you know</font>

621
00:28:01,530 --> 00:28:04,500
this is the particular layer where I'm

622
00:28:04,500 --> 00:28:06,690
going to do my fine-tuning<font color="#E5E5E5"> so I decided</font>

623
00:28:06,690 --> 00:28:09,150
to first of all create a model which

624
00:28:09,150 --> 00:28:13,130
started at the input and went as far as

625
00:28:13,130 --> 00:28:17,430
this layer<font color="#CCCCCC"> and so my first step</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> to</font>

626
00:28:17,430 --> 00:28:21,540
create<font color="#E5E5E5"> that model and save the results</font>

627
00:28:21,540 --> 00:28:24,120
of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then I was you know the next</font>

628
00:28:24,120 --> 00:28:26,340
<font color="#E5E5E5">step will be to take</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> intermediate</font>

629
00:28:26,340 --> 00:28:28,350
step and take it to the<font color="#E5E5E5"> next stage I</font>

630
00:28:28,350 --> 00:28:30,090
would<font color="#E5E5E5"> have fine-tuned</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> save that</font>

631
00:28:30,090 --> 00:28:33,990
<font color="#E5E5E5">so it's a little shortcut there's a</font>

632
00:28:33,990 --> 00:28:36,810
couple<font color="#E5E5E5"> of really important intricacies</font>

633
00:28:36,810 --> 00:28:39,240
to be aware of<font color="#E5E5E5"> here</font><font color="#CCCCCC"> though</font><font color="#E5E5E5"> the first one</font>

634
00:28:39,240 --> 00:28:41,040
is

635
00:28:41,040 --> 00:28:44,430
<font color="#E5E5E5">you'll notice that</font><font color="#CCCCCC"> ResNet</font><font color="#E5E5E5"> and inception</font>

636
00:28:44,430 --> 00:28:46,500
are not used<font color="#CCCCCC"> very often</font><font color="#E5E5E5"> to transfer</font>

637
00:28:46,500 --> 00:28:51,150
<font color="#CCCCCC">learning and again this is something</font>

638
00:28:51,150 --> 00:28:53,070
which I've not seen studies and I

639
00:28:53,070 --> 00:28:54,330
actually think<font color="#CCCCCC"> it's a really important</font>

640
00:28:54,330 --> 00:28:57,240
thing to<font color="#E5E5E5"> study is which of these things</font>

641
00:28:57,240 --> 00:28:59,130
work best<font color="#E5E5E5"> transfer learning but I think</font>

642
00:28:59,130 --> 00:29:01,470
one of the difficulties is just resonate

643
00:29:01,470 --> 00:29:04,020
and inception the harder and the reason

644
00:29:04,020 --> 00:29:06,330
they're harder is that<font color="#CCCCCC"> if you look at</font>

645
00:29:06,330 --> 00:29:09,030
<font color="#E5E5E5">resinate you've got lots and lots of</font>

646
00:29:09,030 --> 00:29:11,490
layers which make no<font color="#CCCCCC"> sense on their own</font>

647
00:29:11,490 --> 00:29:13,500
<font color="#E5E5E5">get over inception because if I keep on</font>

648
00:29:13,500 --> 00:29:15,210
<font color="#E5E5E5">splitting into two bits and then merging</font>

649
00:29:15,210 --> 00:29:16,530
again splitting into two<font color="#E5E5E5"> bits and</font>

650
00:29:16,530 --> 00:29:17,870
<font color="#E5E5E5">noticing</font>

651
00:29:17,870 --> 00:29:23,179
so what I<font color="#CCCCCC"> did was I looked in at the</font>

652
00:29:23,179 --> 00:29:25,520
<font color="#CCCCCC">care our source code to</font><font color="#E5E5E5"> kind of find out</font>

653
00:29:25,520 --> 00:29:29,539
okay how<font color="#CCCCCC"> is each block named</font><font color="#E5E5E5"> and because</font>

654
00:29:29,539 --> 00:29:31,760
what I wanted to do was to say<font color="#CCCCCC"> alright</font>

655
00:29:31,760 --> 00:29:34,340
we've got<font color="#E5E5E5"> you know a resident block</font>

656
00:29:34,340 --> 00:29:37,400
we've just had a merge<font color="#CCCCCC"> okay and then it</font>

657
00:29:37,400 --> 00:29:39,440
goes out it does a<font color="#E5E5E5"> couple of</font>

658
00:29:39,440 --> 00:29:42,409
convolutions<font color="#E5E5E5"> and then it comes</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> and</font>

659
00:29:42,409 --> 00:29:45,320
does an<font color="#E5E5E5"> addition right</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> basically I</font>

660
00:29:45,320 --> 00:29:49,220
want to get one<font color="#E5E5E5"> of these I want to grab</font>

661
00:29:49,220 --> 00:29:51,260
one<font color="#CCCCCC"> of these unfortunately for some</font>

662
00:29:51,260 --> 00:29:54,909
reason<font color="#CCCCCC"> chaos</font><font color="#E5E5E5"> does not name these merge</font>

663
00:29:54,909 --> 00:29:59,000
cells<font color="#CCCCCC"> so what I had to</font><font color="#E5E5E5"> do was get the</font>

664
00:29:59,000 --> 00:30:03,980
<font color="#E5E5E5">next cell</font><font color="#CCCCCC"> and then go back by one and so</font>

665
00:30:03,980 --> 00:30:05,960
it kind of<font color="#E5E5E5"> shows you how little people</font>

666
00:30:05,960 --> 00:30:07,279
<font color="#E5E5E5">have been working</font><font color="#CCCCCC"> with ResNet with</font>

667
00:30:07,279 --> 00:30:08,899
transfer<font color="#CCCCCC"> learning is it like literally</font>

668
00:30:08,899 --> 00:30:10,909
the<font color="#E5E5E5"> only bit of it the next chance to</font>

669
00:30:10,909 --> 00:30:15,020
transfer learn from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> nameless in one of</font>

670
00:30:15,020 --> 00:30:17,750
the most popular probably<font color="#CCCCCC"> the most</font>

671
00:30:17,750 --> 00:30:18,890
popular<font color="#CCCCCC"> thing for transfer learning</font>

672
00:30:18,890 --> 00:30:24,350
isostatic<font color="#E5E5E5"> care us</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> there's a second</font>

673
00:30:24,350 --> 00:30:28,250
complexity when working with<font color="#E5E5E5"> ResNet we</font>

674
00:30:28,250 --> 00:30:30,260
haven't discussed this much but renting

675
00:30:30,260 --> 00:30:31,820
it actually has two kinds<font color="#E5E5E5"> of</font><font color="#CCCCCC"> ResNet</font>

676
00:30:31,820 --> 00:30:36,260
<font color="#E5E5E5">blocks while it is this kind which</font><font color="#CCCCCC"> is an</font>

677
00:30:36,260 --> 00:30:39,399
identity<font color="#CCCCCC"> block</font>

678
00:30:39,470 --> 00:30:42,280
and the second time is a<font color="#CCCCCC"> redneck</font>

679
00:30:42,280 --> 00:30:45,340
<font color="#E5E5E5">convolution block</font>

680
00:30:45,340 --> 00:30:50,850
and which<font color="#E5E5E5"> I also call a bottleneck</font><font color="#CCCCCC"> block</font>

681
00:30:51,070 --> 00:30:54,940
and what this is is it's<font color="#E5E5E5"> pretty similar</font>

682
00:30:54,940 --> 00:30:56,710
<font color="#E5E5E5">you know what one thing</font><font color="#CCCCCC"> that's going up</font>

683
00:30:56,710 --> 00:30:58,180
through a couple<font color="#CCCCCC"> of convolutions and</font>

684
00:30:58,180 --> 00:31:00,100
<font color="#E5E5E5">then goes and gets added together but</font>

685
00:31:00,100 --> 00:31:02,320
the<font color="#E5E5E5"> other side is</font><font color="#CCCCCC"> not an identity</font><font color="#E5E5E5"> the</font>

686
00:31:02,320 --> 00:31:06,000
other side is a single convolution

687
00:31:07,450 --> 00:31:10,420
and<font color="#CCCCCC"> in ResNet they throw in one</font><font color="#E5E5E5"> of these</font>

688
00:31:10,420 --> 00:31:15,250
every half<font color="#CCCCCC"> a dozen</font><font color="#E5E5E5"> blocks or so</font><font color="#CCCCCC"> why is</font>

689
00:31:15,250 --> 00:31:18,160
that<font color="#E5E5E5"> well the reason</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> if you only</font>

690
00:31:18,160 --> 00:31:20,980
<font color="#CCCCCC">have identity blocks</font><font color="#E5E5E5"> and all it can</font>

691
00:31:20,980 --> 00:31:24,960
<font color="#CCCCCC">really do is to continually fine-tune</font>

692
00:31:24,960 --> 00:31:27,310
<font color="#E5E5E5">where it's at</font><font color="#CCCCCC"> so far</font><font color="#E5E5E5"> you know we've</font>

693
00:31:27,310 --> 00:31:29,170
<font color="#E5E5E5">learned quite a</font><font color="#CCCCCC"> few times</font><font color="#E5E5E5"> now that these</font>

694
00:31:29,170 --> 00:31:32,770
identity blocks basically<font color="#E5E5E5"> they map</font><font color="#CCCCCC"> to</font>

695
00:31:32,770 --> 00:31:34,810
the residual so they keep trying<font color="#CCCCCC"> to kind</font>

696
00:31:34,810 --> 00:31:37,270
<font color="#CCCCCC">of</font><font color="#E5E5E5"> fine</font><font color="#CCCCCC"> tune the types</font><font color="#E5E5E5"> of features that</font>

697
00:31:37,270 --> 00:31:38,380
<font color="#E5E5E5">we</font><font color="#CCCCCC"> have so far</font>

698
00:31:38,380 --> 00:31:40,740
<font color="#E5E5E5">where else these bottlenecks</font><font color="#CCCCCC"> blocks</font>

699
00:31:40,740 --> 00:31:43,660
<font color="#E5E5E5">actually force it from time to time to</font>

700
00:31:43,660 --> 00:31:45,430
kind of create a whole<font color="#CCCCCC"> different types</font>

701
00:31:45,430 --> 00:31:47,520
<font color="#E5E5E5">of features</font><font color="#CCCCCC"> and because there is no</font>

702
00:31:47,520 --> 00:31:50,380
identity<font color="#E5E5E5"> passed through here</font><font color="#CCCCCC"> and the</font>

703
00:31:50,380 --> 00:31:51,760
shortest<font color="#E5E5E5"> path still goes</font><font color="#CCCCCC"> through a</font>

704
00:31:51,760 --> 00:31:55,270
single convolution so when you think

705
00:31:55,270 --> 00:31:57,340
<font color="#CCCCCC">about transfer</font><font color="#E5E5E5"> learning from</font><font color="#CCCCCC"> ResNet</font><font color="#E5E5E5"> you</font>

706
00:31:57,340 --> 00:31:59,110
kind of need to think<font color="#E5E5E5"> about</font><font color="#CCCCCC"> ok should I</font>

707
00:31:59,110 --> 00:32:01,990
transfer learn from identity<font color="#CCCCCC"> blocks</font>

708
00:32:01,990 --> 00:32:04,750
before<font color="#E5E5E5"> or after</font><font color="#CCCCCC"> or from a bottleneck</font>

709
00:32:04,750 --> 00:32:08,710
block before or after again<font color="#CCCCCC"> I don't</font>

710
00:32:08,710 --> 00:32:11,050
<font color="#CCCCCC">think anybody's</font><font color="#E5E5E5"> studied this or at least</font>

711
00:32:11,050 --> 00:32:12,690
I haven't<font color="#CCCCCC"> seen anybody write it down</font>

712
00:32:12,690 --> 00:32:14,920
<font color="#CCCCCC">I've played around a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit and I'm</font>

713
00:32:14,920 --> 00:32:17,410
not sure I<font color="#E5E5E5"> have a</font>

714
00:32:17,410 --> 00:32:20,640
totally decisive suggestion for you

715
00:32:20,640 --> 00:32:28,630
<font color="#CCCCCC">clearly my guess</font><font color="#E5E5E5"> is that the best point</font>

716
00:32:28,630 --> 00:32:32,200
to grab in<font color="#CCCCCC"> ResNet is the block</font><font color="#E5E5E5"> at the</font>

717
00:32:32,200 --> 00:32:34,600
end of the<font color="#CCCCCC"> blocks immediately before</font><font color="#E5E5E5"> a</font>

718
00:32:34,600 --> 00:32:37,120
bottle net block and the reason<font color="#CCCCCC"> for that</font>

719
00:32:37,120 --> 00:32:40,330
is<font color="#CCCCCC"> that at that level of</font><font color="#E5E5E5"> kind of but at</font>

720
00:32:40,330 --> 00:32:42,220
that level of receptive field<font color="#E5E5E5"> obviously</font>

721
00:32:42,220 --> 00:32:43,690
<font color="#E5E5E5">because each bottleneck block is</font>

722
00:32:43,690 --> 00:32:45,310
changing the receptive field<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that</font>

723
00:32:45,310 --> 00:32:47,380
level<font color="#E5E5E5"> of receptive field and at that</font>

724
00:32:47,380 --> 00:32:49,380
level of<font color="#E5E5E5"> kind of semantic complexity</font>

725
00:32:49,380 --> 00:32:52,750
this is the most sophisticated version

726
00:32:52,750 --> 00:32:54,010
of it because<font color="#CCCCCC"> it's been through a</font><font color="#E5E5E5"> whole</font>

727
00:32:54,010 --> 00:32:55,960
bunch<font color="#CCCCCC"> of identity blocks to get there</font>

728
00:32:55,960 --> 00:32:57,880
<font color="#E5E5E5">that gradually finds you in fine tune</font>

729
00:32:57,880 --> 00:33:00,550
fine tune<font color="#E5E5E5"> button times</font><font color="#CCCCCC"> you and fine</font><font color="#E5E5E5"> tune</font>

730
00:33:00,550 --> 00:33:03,730
fine tune bottlenecks<font color="#E5E5E5"> so my belief is</font>

731
00:33:03,730 --> 00:33:05,890
that<font color="#E5E5E5"> you want to get just before that</font>

732
00:33:05,890 --> 00:33:09,220
bottleneck<font color="#E5E5E5"> is the best place to</font><font color="#CCCCCC"> transfer</font>

733
00:33:09,220 --> 00:33:13,450
<font color="#E5E5E5">learning from so that's what it</font><font color="#CCCCCC"> is this</font>

734
00:33:13,450 --> 00:33:18,420
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the spot</font><font color="#CCCCCC"> just before the</font><font color="#E5E5E5"> last</font>

735
00:33:18,420 --> 00:33:22,600
bottleneck layer in<font color="#CCCCCC"> ResNet so it's</font>

736
00:33:22,600 --> 00:33:26,320
<font color="#E5E5E5">pretty late</font><font color="#CCCCCC"> and so as we know</font><font color="#E5E5E5"> very well</font>

737
00:33:26,320 --> 00:33:28,300
from<font color="#CCCCCC"> plat</font><font color="#E5E5E5"> one with transfer learning</font>

738
00:33:28,300 --> 00:33:30,340
<font color="#E5E5E5">when you're doing something</font><font color="#CCCCCC"> which is</font><font color="#E5E5E5"> not</font>

739
00:33:30,340 --> 00:33:32,230
too different<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this case we're</font>

740
00:33:32,230 --> 00:33:33,970
switching from<font color="#CCCCCC"> one</font><font color="#E5E5E5"> fighting coding to</font>

741
00:33:33,970 --> 00:33:35,580
work vectors which is not too different

742
00:33:35,580 --> 00:33:38,470
<font color="#CCCCCC">you probably</font><font color="#E5E5E5"> don't want to transfer</font>

743
00:33:38,470 --> 00:33:41,530
learn from too early<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> that's why</font>

744
00:33:41,530 --> 00:33:43,780
I've<font color="#E5E5E5"> picked this fairly late stage which</font>

745
00:33:43,780 --> 00:33:47,160
is the just<font color="#E5E5E5"> before the final bottleneck</font>

746
00:33:47,160 --> 00:33:49,600
block

747
00:33:49,600 --> 00:33:53,260
<font color="#E5E5E5">okay so the second complexity here is</font>

748
00:33:53,260 --> 00:33:56,860
that this bottleneck block has these

749
00:33:56,860 --> 00:34:00,130
dimensions<font color="#E5E5E5"> the output is 14 by 14 by 102</font>

750
00:34:00,130 --> 00:34:04,840
<font color="#E5E5E5">4 so we have</font><font color="#CCCCCC"> about a million images</font><font color="#E5E5E5"> so a</font>

751
00:34:04,840 --> 00:34:08,770
<font color="#E5E5E5">million by 14 by 14 by 102 4 is more</font>

752
00:34:08,770 --> 00:34:11,520
<font color="#CCCCCC">than I wanted</font><font color="#E5E5E5"> to deal with</font>

753
00:34:12,679 --> 00:34:16,099
so I did something<font color="#CCCCCC"> very simple which was</font>

754
00:34:16,099 --> 00:34:20,349
I popped in one more layer<font color="#E5E5E5"> after</font><font color="#CCCCCC"> this</font>

755
00:34:20,349 --> 00:34:23,679
which is an average<font color="#CCCCCC"> cooling layer seven</font>

756
00:34:23,679 --> 00:34:26,710
by seven so that's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to take my 14</font>

757
00:34:26,710 --> 00:34:30,099
by 14<font color="#E5E5E5"> output and turn it into a</font><font color="#CCCCCC"> two by</font>

758
00:34:30,099 --> 00:34:33,099
<font color="#CCCCCC">two output all</font><font color="#E5E5E5"> right so let's say one of</font>

759
00:34:33,099 --> 00:34:35,529
those activations was looking for<font color="#E5E5E5"> thirds</font>

760
00:34:35,529 --> 00:34:38,109
<font color="#E5E5E5">eyeballs</font><font color="#CCCCCC"> right then it's</font><font color="#E5E5E5"> saying in each</font>

761
00:34:38,109 --> 00:34:39,940
of the 14 by 14 spots

762
00:34:39,940 --> 00:34:41,739
how likely is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is a bird's</font>

763
00:34:41,739 --> 00:34:44,619
eye ball and so after<font color="#CCCCCC"> this it's now</font>

764
00:34:44,619 --> 00:34:47,469
seeing<font color="#CCCCCC"> in each of these four spots</font><font color="#E5E5E5"> on</font>

765
00:34:47,469 --> 00:34:50,679
<font color="#CCCCCC">average how much were</font><font color="#E5E5E5"> those cells</font>

766
00:34:50,679 --> 00:34:53,909
looking<font color="#E5E5E5"> like</font><font color="#CCCCCC"> bird's eye balls</font>

767
00:34:55,018 --> 00:34:58,299
this is losing<font color="#E5E5E5"> information</font><font color="#CCCCCC"> if I had a</font>

768
00:34:58,299 --> 00:35:03,099
bigger SSD<font color="#CCCCCC"> I had more time I wouldn't</font>

769
00:35:03,099 --> 00:35:04,989
<font color="#CCCCCC">have done this but it's a</font><font color="#E5E5E5"> good trick</font>

770
00:35:04,989 --> 00:35:06,069
<font color="#CCCCCC">right when you're working with these</font>

771
00:35:06,069 --> 00:35:09,039
fully convolutional architectures<font color="#E5E5E5"> you</font>

772
00:35:09,039 --> 00:35:10,239
can pop an average<font color="#CCCCCC"> cooling layer</font>

773
00:35:10,239 --> 00:35:13,329
anywhere<font color="#E5E5E5"> and decrease the resolution to</font>

774
00:35:13,329 --> 00:35:15,519
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that you feel like you can</font>

775
00:35:15,519 --> 00:35:17,920
deal with so in this case this was my

776
00:35:17,920 --> 00:35:20,619
<font color="#CCCCCC">petition with</font><font color="#E5E5E5"> to go to Dubai</font><font color="#CCCCCC"> to buy one</font>

777
00:35:20,619 --> 00:35:27,549
<font color="#E5E5E5">or two</font><font color="#CCCCCC"> four and we talked about</font><font color="#E5E5E5"> by means</font>

778
00:35:27,549 --> 00:35:29,859
<font color="#E5E5E5">of merge operation into</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> more</font>

779
00:35:29,859 --> 00:35:31,000
complex

780
00:35:31,000 --> 00:35:33,950
we have<font color="#CCCCCC"> our assignments</font><font color="#E5E5E5"> which which</font><font color="#CCCCCC"> is</font>

781
00:35:33,950 --> 00:35:35,900
basically<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the merge with the thing</font>

782
00:35:35,900 --> 00:35:40,400
which does the plus yet<font color="#CCCCCC"> that's the trick</font>

783
00:35:40,400 --> 00:35:43,910
to making<font color="#CCCCCC"> it into a ResNet block is</font>

784
00:35:43,910 --> 00:35:46,670
having<font color="#E5E5E5"> the addition of the identity with</font>

785
00:35:46,670 --> 00:35:50,230
<font color="#CCCCCC">the result when you have</font><font color="#E5E5E5"> accomplished</font>

786
00:35:55,100 --> 00:35:58,280
so<font color="#E5E5E5"> uh recently I was trying to go from</font>

787
00:35:58,280 --> 00:36:00,830
many filters<font color="#CCCCCC"> so he kind of stopped</font><font color="#E5E5E5"> going</font>

788
00:36:00,830 --> 00:36:03,800
down finding<font color="#CCCCCC"> the time Jennifer yeah</font>

789
00:36:03,800 --> 00:36:06,050
they're good best practice ongoing

790
00:36:06,050 --> 00:36:08,210
problem appeal<font color="#CCCCCC"> I 512 filters down to</font>

791
00:36:08,210 --> 00:36:10,460
<font color="#CCCCCC">labs just as</font><font color="#E5E5E5"> simple as doing</font>

792
00:36:10,460 --> 00:36:16,900
<font color="#E5E5E5">accomplishing with less filters yeah</font>

793
00:36:18,190 --> 00:36:22,790
<font color="#CCCCCC">there's not exactly a as I</font><font color="#E5E5E5"> exactly that</font>

794
00:36:22,790 --> 00:36:26,330
after<font color="#CCCCCC"> selects</font><font color="#E5E5E5"> but and I</font><font color="#CCCCCC"> think every</font>

795
00:36:26,330 --> 00:36:29,420
single<font color="#E5E5E5"> successful architecture</font><font color="#CCCCCC"> did she's</font>

796
00:36:29,420 --> 00:36:31,160
on in class about that every one of them

797
00:36:31,160 --> 00:36:34,310
eventually<font color="#E5E5E5"> had</font><font color="#CCCCCC"> to end up with you know a</font>

798
00:36:34,310 --> 00:36:37,600
<font color="#CCCCCC">thousand categories</font><font color="#E5E5E5"> if it's</font><font color="#CCCCCC"> an edge</font><font color="#E5E5E5"> or</font>

799
00:36:37,600 --> 00:36:41,630
<font color="#E5E5E5">trade</font><font color="#CCCCCC"> channels of most 255</font><font color="#E5E5E5"> continuous if</font>

800
00:36:41,630 --> 00:36:44,840
it's<font color="#E5E5E5"> generative</font><font color="#CCCCCC"> so the best</font><font color="#E5E5E5"> things you</font>

801
00:36:44,840 --> 00:36:48,080
<font color="#E5E5E5">can really do is legitimate kind of</font><font color="#CCCCCC"> move</font>

802
00:36:48,080 --> 00:36:50,300
<font color="#CCCCCC">into</font><font color="#E5E5E5"> successful</font><font color="#CCCCCC"> exceptions I don't</font><font color="#E5E5E5"> think</font>

803
00:36:50,300 --> 00:36:52,700
it's all<font color="#CCCCCC"> completed kind of</font><font color="#E5E5E5"> a last week</font>

804
00:36:52,700 --> 00:36:54,610
<font color="#E5E5E5">where maybe I'll be looking at images</font><font color="#CCCCCC"> I</font>

805
00:36:54,610 --> 00:36:57,670
admitted briefly next week<font color="#E5E5E5"> open with a</font>

806
00:36:57,670 --> 00:37:00,140
quick run through some<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> things</font>

807
00:37:00,140 --> 00:37:01,760
<font color="#E5E5E5">that you could go back to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> more a</font>

808
00:37:01,760 --> 00:37:04,520
<font color="#E5E5E5">monofin is going to be a paper</font><font color="#CCCCCC"> attach a</font>

809
00:37:04,520 --> 00:37:06,530
different<font color="#CCCCCC"> papers which have like best</font>

810
00:37:06,530 --> 00:37:09,200
practices<font color="#CCCCCC"> you know really nice kind of</font>

811
00:37:09,200 --> 00:37:10,850
<font color="#CCCCCC">descriptions we did</font><font color="#E5E5E5"> need hundreds of</font>

812
00:37:10,850 --> 00:37:14,780
things<font color="#E5E5E5"> these monitor results but all</font>

813
00:37:14,780 --> 00:37:18,100
this<font color="#E5E5E5"> stuff it's still pretty young</font>

814
00:37:19,490 --> 00:37:22,510
<font color="#E5E5E5">a biro</font>

815
00:37:25,750 --> 00:37:28,420
good<font color="#E5E5E5"> question so</font><font color="#CCCCCC"> from a society which</font>

816
00:37:28,420 --> 00:37:31,300
<font color="#CCCCCC">institutions for interment support and</font>

817
00:37:31,300 --> 00:37:33,490
<font color="#CCCCCC">that ended</font><font color="#E5E5E5"> up being</font><font color="#CCCCCC"> a bit because there</font>

818
00:37:33,490 --> 00:37:37,450
<font color="#CCCCCC">again</font><font color="#E5E5E5"> so complex life</font><font color="#CCCCCC"> beauty even worse</font>

819
00:37:37,450 --> 00:37:43,619
the<font color="#CCCCCC"> native community ministry yes so</font>

820
00:37:43,619 --> 00:37:46,090
compressed and uncompressed<font color="#E5E5E5"> it's like a</font>

821
00:37:46,090 --> 00:37:48,670
couple hundred<font color="#CCCCCC"> gig yeah but you won't</font>

822
00:37:48,670 --> 00:37:51,700
you feel<font color="#CCCCCC"> others injuries like why</font><font color="#E5E5E5"> not</font>

823
00:37:51,700 --> 00:37:53,470
<font color="#E5E5E5">going to learn</font><font color="#CCCCCC"> it memory</font><font color="#E5E5E5"> you know states</font>

824
00:37:53,470 --> 00:37:55,030
<font color="#E5E5E5">all you describe employees</font><font color="#CCCCCC"> a little</font>

825
00:37:55,030 --> 00:37:59,890
<font color="#E5E5E5">we're getting there yeah so so that's</font>

826
00:37:59,890 --> 00:38:01,660
<font color="#E5E5E5">exactly the right segue I was looking</font>

827
00:38:01,660 --> 00:38:04,030
for so thank you so<font color="#CCCCCC"> what we're going</font><font color="#E5E5E5"> to</font>

828
00:38:04,030 --> 00:38:06,940
do now is we want<font color="#CCCCCC"> to run this model we</font>

829
00:38:06,940 --> 00:38:09,609
<font color="#E5E5E5">just built just just called basically</font>

830
00:38:09,609 --> 00:38:11,410
<font color="#E5E5E5">dot project on it and save the</font>

831
00:38:11,410 --> 00:38:14,320
predictions<font color="#E5E5E5"> and the problem is that</font><font color="#CCCCCC"> the</font>

832
00:38:14,320 --> 00:38:16,390
size of those<font color="#E5E5E5"> predictions is going to be</font>

833
00:38:16,390 --> 00:38:18,849
bigger<font color="#CCCCCC"> than the</font><font color="#E5E5E5"> amount of RAM I have so</font>

834
00:38:18,849 --> 00:38:20,950
I need to do with a batch at a time and

835
00:38:20,950 --> 00:38:22,930
save it a batch of times they've got a

836
00:38:22,930 --> 00:38:26,349
million<font color="#E5E5E5"> things each one with this many</font>

837
00:38:26,349 --> 00:38:29,800
activations so and this<font color="#E5E5E5"> was going to</font>

838
00:38:29,800 --> 00:38:31,060
<font color="#E5E5E5">happen quite often right you're either</font>

839
00:38:31,060 --> 00:38:33,099
working<font color="#E5E5E5"> on a smaller computer or you're</font>

840
00:38:33,099 --> 00:38:34,990
<font color="#E5E5E5">working with a bigger data set</font><font color="#CCCCCC"> or you're</font>

841
00:38:34,990 --> 00:38:36,550
working<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> data set where you're</font>

842
00:38:36,550 --> 00:38:39,480
using a larger<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of activations</font>

843
00:38:39,480 --> 00:38:42,849
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is actually very</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to handle you</font>

844
00:38:42,849 --> 00:38:45,640
<font color="#CCCCCC">just create your big holes array where</font>

845
00:38:45,640 --> 00:38:48,820
you're going to<font color="#E5E5E5"> store it and then</font><font color="#CCCCCC"> all I</font>

846
00:38:48,820 --> 00:38:53,800
do is I go through<font color="#E5E5E5"> from 0 to the length</font>

847
00:38:53,800 --> 00:38:57,609
<font color="#E5E5E5">of my array my saucer a a batch at a</font>

848
00:38:57,609 --> 00:38:58,930
time right<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is creating</font><font color="#CCCCCC"> the</font>

849
00:38:58,930 --> 00:39:04,540
numbers 0 0 plus 128 128 plus 128 so on

850
00:39:04,540 --> 00:39:07,119
and so forth<font color="#E5E5E5"> and then I take the slice</font>

851
00:39:07,119 --> 00:39:10,030
with my source array<font color="#E5E5E5"> from originally 0</font>

852
00:39:10,030 --> 00:39:15,670
to 128<font color="#E5E5E5"> and 128 256 and so forth so this</font>

853
00:39:15,670 --> 00:39:18,609
<font color="#E5E5E5">is now going to contain a slice of my</font>

854
00:39:18,609 --> 00:39:22,320
source equals array

855
00:39:22,690 --> 00:39:25,540
and then<font color="#E5E5E5"> well actually this is going to</font>

856
00:39:25,540 --> 00:39:27,160
create<font color="#CCCCCC"> a generator which is</font><font color="#E5E5E5"> going to</font>

857
00:39:27,160 --> 00:39:29,860
have all<font color="#CCCCCC"> of those slices and of course</font>

858
00:39:29,860 --> 00:39:31,619
being a generator it's going to be lazy

859
00:39:31,619 --> 00:39:34,180
<font color="#CCCCCC">so I can then enumerate through</font><font color="#E5E5E5"> each of</font>

860
00:39:34,180 --> 00:39:37,300
those<font color="#E5E5E5"> slices and I can</font><font color="#CCCCCC"> depend my big</font>

861
00:39:37,300 --> 00:39:40,030
holes array the result of predicting

862
00:39:40,030 --> 00:39:44,860
just<font color="#CCCCCC"> on that one batch okay</font>

863
00:39:44,860 --> 00:39:49,110
so you've seen like predict and evaluate

864
00:39:49,110 --> 00:39:53,290
and and fit and<font color="#E5E5E5"> so forth and the</font>

865
00:39:53,290 --> 00:39:57,220
generator versions also<font color="#E5E5E5"> in</font><font color="#CCCCCC"> carest</font><font color="#E5E5E5"> is</font>

866
00:39:57,220 --> 00:39:59,890
generally an on batch<font color="#E5E5E5"> version so there's</font>

867
00:39:59,890 --> 00:40:01,960
a<font color="#E5E5E5"> train on batch and they predict on</font>

868
00:40:01,960 --> 00:40:03,580
batch and what these do is they

869
00:40:03,580 --> 00:40:06,700
<font color="#E5E5E5">basically they</font><font color="#CCCCCC"> have no smarts to them at</font>

870
00:40:06,700 --> 00:40:08,650
all<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is like the most basic thing</font><font color="#CCCCCC"> so</font>

871
00:40:08,650 --> 00:40:09,910
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> going to take whatever you</font>

872
00:40:09,910 --> 00:40:12,280
give it and call predict on this thing

873
00:40:12,280 --> 00:40:12,670
it won't

874
00:40:12,670 --> 00:40:14,590
shuffle that<font color="#CCCCCC"> they</font><font color="#E5E5E5"> want that shirt it's</font>

875
00:40:14,590 --> 00:40:17,050
just going to throw it directly<font color="#E5E5E5"> into the</font>

876
00:40:17,050 --> 00:40:21,720
computation graph got a call predict

877
00:40:21,720 --> 00:40:25,300
<font color="#CCCCCC">adjust this batch of</font><font color="#E5E5E5"> data and then from</font>

878
00:40:25,300 --> 00:40:28,210
time<font color="#E5E5E5"> to time I print out how far I've</font>

879
00:40:28,210 --> 00:40:29,790
got just so that I know<font color="#E5E5E5"> how I'm going</font>

880
00:40:29,790 --> 00:40:33,220
also<font color="#E5E5E5"> from time to time I called flash</font>

881
00:40:33,220 --> 00:40:34,990
that's<font color="#E5E5E5"> the thing in big holes that</font>

882
00:40:34,990 --> 00:40:37,600
actually writes it to<font color="#E5E5E5"> disk after</font><font color="#CCCCCC"> this</font>

883
00:40:37,600 --> 00:40:39,369
make<font color="#CCCCCC"> sure that's continuously</font><font color="#E5E5E5"> written to</font>

884
00:40:39,369 --> 00:40:41,410
disk<font color="#E5E5E5"> so</font><font color="#CCCCCC"> this thing doesn't</font><font color="#E5E5E5"> actually take</font>

885
00:40:41,410 --> 00:40:44,109
very long<font color="#CCCCCC"> to run and one of the nice</font>

886
00:40:44,109 --> 00:40:46,690
<font color="#CCCCCC">things they can do here is I can</font><font color="#E5E5E5"> do some</font>

887
00:40:46,690 --> 00:40:48,910
data augmentation as well so I've added

888
00:40:48,910 --> 00:40:51,640
a direction<font color="#E5E5E5"> parameter and what I'm going</font>

889
00:40:51,640 --> 00:40:53,950
to do is I'm<font color="#CCCCCC"> going to have a second copy</font>

890
00:40:53,950 --> 00:40:56,220
<font color="#E5E5E5">of all of my images which is</font><font color="#CCCCCC"> clipped</font>

891
00:40:56,220 --> 00:41:00,130
<font color="#CCCCCC">horizontally so to flip things</font>

892
00:41:00,130 --> 00:41:03,940
horizontally<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> interesting I think</font>

893
00:41:03,940 --> 00:41:06,600
<font color="#E5E5E5">I screwed this up</font>

894
00:41:08,579 --> 00:41:10,589
should be here<font color="#E5E5E5"> to</font><font color="#CCCCCC"> flip things</font>

895
00:41:10,589 --> 00:41:13,339
<font color="#CCCCCC">horizontally</font>

896
00:41:15,630 --> 00:41:19,829
you've got<font color="#E5E5E5"> batch height and then yeah</font>

897
00:41:19,829 --> 00:41:22,529
this<font color="#E5E5E5"> is columns so this is the thing if</font>

898
00:41:22,529 --> 00:41:25,469
we<font color="#E5E5E5"> pass in a minus 1 here</font><font color="#CCCCCC"> then it's</font>

899
00:41:25,469 --> 00:41:31,140
going to flip<font color="#E5E5E5"> it horizontally that</font>

900
00:41:31,140 --> 00:41:32,670
explains what some of<font color="#CCCCCC"> my results</font><font color="#E5E5E5"> haven't</font>

901
00:41:32,670 --> 00:41:33,979
been quite<font color="#E5E5E5"> as good as I hoped</font>

902
00:41:33,979 --> 00:41:38,219
<font color="#CCCCCC">okay so when you</font><font color="#E5E5E5"> run this we're going</font><font color="#CCCCCC"> to</font>

903
00:41:38,219 --> 00:41:41,369
end up with a big big<font color="#E5E5E5"> holes array that's</font>

904
00:41:41,369 --> 00:41:43,489
going to contain two copies of every

905
00:41:43,489 --> 00:41:47,309
<font color="#CCCCCC">resized</font><font color="#E5E5E5"> image net image the activations</font>

906
00:41:47,309 --> 00:41:51,239
<font color="#E5E5E5">at the layer that we one layer</font><font color="#CCCCCC"> before</font>

907
00:41:51,239 --> 00:41:55,219
this so

908
00:41:55,360 --> 00:41:56,920
all at once with<font color="#E5E5E5"> Direction forward</font>

909
00:41:56,920 --> 00:41:59,230
someone runs direction backwards<font color="#CCCCCC"> and so</font>

910
00:41:59,230 --> 00:42:01,300
at the<font color="#CCCCCC"> end of that I've now got nearly</font>

911
00:42:01,300 --> 00:42:04,960
<font color="#CCCCCC">two million images</font><font color="#E5E5E5"> or activations of two</font>

912
00:42:04,960 --> 00:42:10,260
<font color="#E5E5E5">by two by</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> or two</font><font color="#CCCCCC"> four okay</font><font color="#E5E5E5"> so</font>

913
00:42:12,510 --> 00:42:17,490
<font color="#E5E5E5">okay so that'd be</font><font color="#CCCCCC"> pretty close</font><font color="#E5E5E5"> to the</font>

914
00:42:17,490 --> 00:42:19,890
<font color="#E5E5E5">end of ResNet</font><font color="#CCCCCC"> I then just</font><font color="#E5E5E5"> copied and</font>

915
00:42:19,890 --> 00:42:22,710
pasted from the<font color="#E5E5E5"> terrace code the last</font>

916
00:42:22,710 --> 00:42:25,050
few sets of<font color="#CCCCCC"> ResNet</font><font color="#E5E5E5"> right so this is the</font>

917
00:42:25,050 --> 00:42:29,130
last few blocks<font color="#CCCCCC"> I</font><font color="#E5E5E5"> added in one extra</font>

918
00:42:29,130 --> 00:42:30,810
identity block<font color="#E5E5E5"> just because I had a</font>

919
00:42:30,810 --> 00:42:32,850
feeling<font color="#CCCCCC"> that</font><font color="#E5E5E5"> might help things along a</font>

920
00:42:32,850 --> 00:42:34,560
little<font color="#E5E5E5"> bit again people have not really</font>

921
00:42:34,560 --> 00:42:37,200
studied<font color="#E5E5E5"> this yet so I I haven't had a</font>

922
00:42:37,200 --> 00:42:39,119
<font color="#E5E5E5">chance to properly experiment but it</font>

923
00:42:39,119 --> 00:42:42,210
seemed<font color="#E5E5E5"> to work quite well</font><font color="#CCCCCC"> so this is</font>

924
00:42:42,210 --> 00:42:44,550
basically copied and pasted from<font color="#CCCCCC"> Chaos's</font>

925
00:42:44,550 --> 00:42:47,460
code<font color="#CCCCCC"> I then need to</font><font color="#E5E5E5"> copy and copy the</font>

926
00:42:47,460 --> 00:42:50,040
weights and<font color="#E5E5E5"> care us</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> those last few</font>

927
00:42:50,040 --> 00:42:52,800
layers of<font color="#CCCCCC"> ResNet and so now I'm</font><font color="#E5E5E5"> going to</font>

928
00:42:52,800 --> 00:42:54,900
<font color="#E5E5E5">repeat the</font><font color="#CCCCCC"> same process</font><font color="#E5E5E5"> again which is</font>

929
00:42:54,900 --> 00:42:58,470
to call predict on these last few layers

930
00:42:58,470 --> 00:43:01,230
and the input will be<font color="#CCCCCC"> the</font><font color="#E5E5E5"> output from</font>

931
00:43:01,230 --> 00:43:04,290
the previous one<font color="#E5E5E5"> okay so we went like</font>

932
00:43:04,290 --> 00:43:06,240
two-thirds of the way into<font color="#CCCCCC"> reg net and</font>

933
00:43:06,240 --> 00:43:08,340
got those activations<font color="#E5E5E5"> and put those</font>

934
00:43:08,340 --> 00:43:10,230
activations<font color="#E5E5E5"> into the last few stages of</font>

935
00:43:10,230 --> 00:43:14,880
<font color="#CCCCCC">ResNet to get those activations now the</font>

936
00:43:14,880 --> 00:43:19,920
outputs from this are actually<font color="#CCCCCC"> just a</font>

937
00:43:19,920 --> 00:43:22,500
<font color="#E5E5E5">vector of length</font><font color="#CCCCCC"> two or four eight which</font>

938
00:43:22,500 --> 00:43:24,900
does fit in my<font color="#CCCCCC"> RAM so I didn't</font><font color="#E5E5E5"> bother</font>

939
00:43:24,900 --> 00:43:27,960
with calling predict on batch<font color="#CCCCCC"> I can just</font>

940
00:43:27,960 --> 00:43:30,330
call doctored it<font color="#CCCCCC"> if you try</font><font color="#E5E5E5"> this at home</font>

941
00:43:30,330 --> 00:43:32,700
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you don't have enough memory you can</font>

942
00:43:32,700 --> 00:43:35,130
use the predict on batch trick again<font color="#E5E5E5"> so</font>

943
00:43:35,130 --> 00:43:38,490
you know<font color="#CCCCCC"> anytime you</font><font color="#E5E5E5"> ran out of memory</font>

944
00:43:38,490 --> 00:43:41,250
when calling predict you can<font color="#CCCCCC"> always just</font>

945
00:43:41,250 --> 00:43:42,940
use

946
00:43:42,940 --> 00:43:45,050
<font color="#E5E5E5">this time</font>

947
00:43:45,050 --> 00:43:47,110
you

948
00:43:47,370 --> 00:43:49,320
so at the end<font color="#CCCCCC"> of</font><font color="#E5E5E5"> all that</font><font color="#CCCCCC"> I've now</font><font color="#E5E5E5"> got</font>

949
00:43:49,320 --> 00:43:53,220
the activations from the penultimate

950
00:43:53,220 --> 00:43:57,390
layer of<font color="#CCCCCC"> Brezhnev and so I can do</font><font color="#E5E5E5"> our</font>

951
00:43:57,390 --> 00:43:58,950
usual transfer learning<font color="#E5E5E5"> trick of</font>

952
00:43:58,950 --> 00:44:04,170
creating a linear<font color="#E5E5E5"> model</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> my linear</font>

953
00:44:04,170 --> 00:44:08,460
model is now going<font color="#E5E5E5"> to try to use the</font>

954
00:44:08,460 --> 00:44:10,470
number<font color="#E5E5E5"> of dimensions in my work vectors</font>

955
00:44:10,470 --> 00:44:13,170
<font color="#E5E5E5">at the output and you'll see it doesn't</font>

956
00:44:13,170 --> 00:44:16,770
<font color="#E5E5E5">have any activation function</font><font color="#CCCCCC"> that's</font>

957
00:44:16,770 --> 00:44:19,200
because I'm<font color="#E5E5E5"> not doing one hot encoding</font>

958
00:44:19,200 --> 00:44:21,450
my work<font color="#CCCCCC"> batches could be any size</font>

959
00:44:21,450 --> 00:44:23,660
numbers so<font color="#CCCCCC"> I'll just leave it as linear</font>

960
00:44:23,660 --> 00:44:27,690
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then I compile it and then I fit it</font>

961
00:44:27,690 --> 00:44:31,140
<font color="#CCCCCC">and</font><font color="#E5E5E5"> so this linear</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> is now my very</font>

962
00:44:31,140 --> 00:44:33,420
first this<font color="#E5E5E5"> is you know this is almost</font>

963
00:44:33,420 --> 00:44:34,860
<font color="#E5E5E5">the same as</font><font color="#CCCCCC"> what we</font><font color="#E5E5E5"> did in</font><font color="#CCCCCC"> Lesson</font><font color="#E5E5E5"> one</font>

964
00:44:34,860 --> 00:44:37,710
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> cryptographers</font><font color="#CCCCCC"> cares</font>

965
00:44:37,710 --> 00:44:40,980
we're fine-tuning a model to a slightly

966
00:44:40,980 --> 00:44:42,870
different objective<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> one</font>

967
00:44:42,870 --> 00:44:46,620
slightly different<font color="#E5E5E5"> target to what it was</font>

968
00:44:46,620 --> 00:44:48,390
<font color="#E5E5E5">originally trained with it's just that</font>

969
00:44:48,390 --> 00:44:50,490
we're doing<font color="#E5E5E5"> it with a lot more data so</font>

970
00:44:50,490 --> 00:44:53,420
we<font color="#CCCCCC"> have to be a bit more thoughtful</font>

971
00:44:53,420 --> 00:44:55,650
there's one other<font color="#CCCCCC"> difference here which</font>

972
00:44:55,650 --> 00:44:57,590
is I'm<font color="#E5E5E5"> using a custom loss function and</font>

973
00:44:57,590 --> 00:45:00,360
the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> function I'm using is cosine</font>

974
00:45:00,360 --> 00:45:04,020
distance<font color="#E5E5E5"> you can lock that</font><font color="#CCCCCC"> up at home if</font>

975
00:45:04,020 --> 00:45:05,160
you're<font color="#E5E5E5"> not familiar with</font><font color="#CCCCCC"> it but</font>

976
00:45:05,160 --> 00:45:08,010
<font color="#CCCCCC">basically cosine distance says for these</font>

977
00:45:08,010 --> 00:45:10,020
two points in space<font color="#E5E5E5"> what's</font><font color="#CCCCCC"> their angle</font>

978
00:45:10,020 --> 00:45:12,270
<font color="#E5E5E5">between them rather than how far away</font>

979
00:45:12,270 --> 00:45:14,490
are<font color="#CCCCCC"> they the</font><font color="#E5E5E5"> reason we're doing that is</font>

980
00:45:14,490 --> 00:45:17,220
<font color="#CCCCCC">because we're about</font><font color="#E5E5E5"> to start using K</font>

981
00:45:17,220 --> 00:45:18,780
nearest<font color="#E5E5E5"> neighbors</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> K dearest</font>

982
00:45:18,780 --> 00:45:20,070
neighbors<font color="#E5E5E5"> are going to basically say oh</font>

983
00:45:20,070 --> 00:45:22,560
here's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> words actually predicted which</font>

984
00:45:22,560 --> 00:45:25,290
is the work vector which is<font color="#E5E5E5"> closest</font><font color="#CCCCCC"> to</font>

985
00:45:25,290 --> 00:45:28,110
<font color="#CCCCCC">it it turns out</font><font color="#E5E5E5"> that in really really</font>

986
00:45:28,110 --> 00:45:30,570
<font color="#E5E5E5">high dimensional space the concept of</font>

987
00:45:30,570 --> 00:45:33,570
how far<font color="#E5E5E5"> away something is is nearly</font>

988
00:45:33,570 --> 00:45:35,760
meaningless and the reason why is that

989
00:45:35,760 --> 00:45:37,380
in really really<font color="#E5E5E5"> high dimensional space</font>

990
00:45:37,380 --> 00:45:40,470
everything<font color="#CCCCCC"> chips on the edge of that</font>

991
00:45:40,470 --> 00:45:44,250
space<font color="#E5E5E5"> some basically because you</font><font color="#CCCCCC"> can</font>

992
00:45:44,250 --> 00:45:46,080
<font color="#CCCCCC">imagine like as you add each additional</font>

993
00:45:46,080 --> 00:45:47,610
dimension the probability that

994
00:45:47,610 --> 00:45:49,530
<font color="#E5E5E5">something's on the edge in</font><font color="#CCCCCC"> that</font>

995
00:45:49,530 --> 00:45:51,930
dimension<font color="#CCCCCC"> you know let's say the</font>

996
00:45:51,930 --> 00:45:53,460
<font color="#E5E5E5">probabilities</font><font color="#CCCCCC"> too bright on the</font><font color="#E5E5E5"> edge is</font>

997
00:45:53,460 --> 00:45:55,590
like<font color="#CCCCCC"> 110 then if you're</font><font color="#E5E5E5"> going to go one</font>

998
00:45:55,590 --> 00:45:56,340
dimension

999
00:45:56,340 --> 00:45:58,140
you've got to probably<font color="#CCCCCC"> have</font><font color="#E5E5E5"> 110 it's on</font>

1000
00:45:58,140 --> 00:45:59,610
the edge in one dimension<font color="#E5E5E5"> or two</font>

1001
00:45:59,610 --> 00:46:01,830
dimensions it's

1002
00:46:01,830 --> 00:46:03,750
there are basically multiplicatively

1003
00:46:03,750 --> 00:46:05,310
decreasing the<font color="#CCCCCC"> probability that</font><font color="#E5E5E5"> that</font>

1004
00:46:05,310 --> 00:46:08,730
happens<font color="#E5E5E5"> so in a 300 dimensional space</font>

1005
00:46:08,730 --> 00:46:10,920
<font color="#E5E5E5">everything is on the edge and when</font>

1006
00:46:10,920 --> 00:46:12,750
everything's on the edge<font color="#E5E5E5"> everything is</font>

1007
00:46:12,750 --> 00:46:15,060
kind<font color="#CCCCCC"> of an equal distance away from</font><font color="#E5E5E5"> each</font>

1008
00:46:15,060 --> 00:46:17,730
<font color="#CCCCCC">other</font><font color="#E5E5E5"> more or less and</font><font color="#CCCCCC"> so distances are</font>

1009
00:46:17,730 --> 00:46:19,770
very<font color="#E5E5E5"> helpful but the angle between</font>

1010
00:46:19,770 --> 00:46:24,390
things<font color="#E5E5E5"> your barriers</font><font color="#CCCCCC"> so when you're</font>

1011
00:46:24,390 --> 00:46:26,760
doing<font color="#CCCCCC"> anything with trying to find</font>

1012
00:46:26,760 --> 00:46:28,740
nearest<font color="#E5E5E5"> neighbors</font><font color="#CCCCCC"> it's a really good</font>

1013
00:46:28,740 --> 00:46:31,590
<font color="#E5E5E5">idea</font><font color="#CCCCCC"> to Train things using cosine</font>

1014
00:46:31,590 --> 00:46:34,860
<font color="#CCCCCC">distance and</font><font color="#E5E5E5"> this is the formula</font><font color="#CCCCCC"> for</font>

1015
00:46:34,860 --> 00:46:38,820
<font color="#E5E5E5">cosine distance</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> this is one</font><font color="#CCCCCC"> of</font>

1016
00:46:38,820 --> 00:46:39,900
these things where I'm skipping over

1017
00:46:39,900 --> 00:46:41,280
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> you'd</font><font color="#E5E5E5"> probably</font><font color="#CCCCCC"> spend a</font>

1018
00:46:41,280 --> 00:46:45,210
week in undergrad studying<font color="#CCCCCC"> there's heaps</font>

1019
00:46:45,210 --> 00:46:46,830
of<font color="#CCCCCC"> information about cosine distance on</font>

1020
00:46:46,830 --> 00:46:48,780
the web<font color="#CCCCCC"> so those of you already familiar</font>

1021
00:46:48,780 --> 00:46:50,790
with<font color="#E5E5E5"> it I won't waste your time those of</font>

1022
00:46:50,790 --> 00:46:54,060
you<font color="#E5E5E5"> not it's a very very</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> idea to</font>

1023
00:46:54,060 --> 00:46:56,310
<font color="#CCCCCC">become familiar</font><font color="#E5E5E5"> with this and feel free</font>

1024
00:46:56,310 --> 00:46:58,770
to ask on<font color="#E5E5E5"> the forums if you find any</font>

1025
00:46:58,770 --> 00:47:00,380
<font color="#CCCCCC">material that makes sense</font>

1026
00:47:00,380 --> 00:47:04,590
<font color="#CCCCCC">okay so we've fitted</font><font color="#E5E5E5"> our linear model as</font>

1027
00:47:04,590 --> 00:47:07,470
per usual we saved our<font color="#CCCCCC"> weights</font><font color="#E5E5E5"> and we</font>

1028
00:47:07,470 --> 00:47:11,040
can see how we're<font color="#CCCCCC"> going so what we've</font>

1029
00:47:11,040 --> 00:47:13,020
got<font color="#CCCCCC"> now is</font><font color="#E5E5E5"> something where</font><font color="#CCCCCC"> we can feed</font>

1030
00:47:13,020 --> 00:47:16,740
in an image<font color="#E5E5E5"> and it will spit out a word</font>

1031
00:47:16,740 --> 00:47:19,590
vector but it's something<font color="#CCCCCC"> that looks</font>

1032
00:47:19,590 --> 00:47:20,790
like<font color="#CCCCCC"> a word vector it has the same</font>

1033
00:47:20,790 --> 00:47:23,670
dimensionality is a word vector but it's

1034
00:47:23,670 --> 00:47:25,080
very unlikely<font color="#CCCCCC"> that it's going</font><font color="#E5E5E5"> to be the</font>

1035
00:47:25,080 --> 00:47:29,820
exact as one of<font color="#E5E5E5"> our thousands target</font>

1036
00:47:29,820 --> 00:47:32,160
word vectors<font color="#E5E5E5"> you know so if the word</font>

1037
00:47:32,160 --> 00:47:35,580
vector for a part you know is this<font color="#E5E5E5"> list</font>

1038
00:47:35,580 --> 00:47:38,280
of 200 floats even if we have a

1039
00:47:38,280 --> 00:47:40,740
perfectly<font color="#CCCCCC"> Pocky Pug we're not going to</font>

1040
00:47:40,740 --> 00:47:42,540
<font color="#E5E5E5">get that exact list of 2,000 floats</font>

1041
00:47:42,540 --> 00:47:45,240
<font color="#CCCCCC">we'll have something that is</font><font color="#E5E5E5"> similar and</font>

1042
00:47:45,240 --> 00:47:47,400
when we say similar we probably<font color="#E5E5E5"> mean</font>

1043
00:47:47,400 --> 00:47:49,260
<font color="#CCCCCC">that the cosine distance between the</font>

1044
00:47:49,260 --> 00:47:52,560
perfect<font color="#CCCCCC"> platonic plug and our Pug is</font>

1045
00:47:52,560 --> 00:47:59,940
pretty small<font color="#E5E5E5"> but that's why after we get</font>

1046
00:47:59,940 --> 00:48:05,329
our our<font color="#CCCCCC"> predictions</font><font color="#E5E5E5"> we</font>

1047
00:48:05,329 --> 00:48:07,099
you then have<font color="#CCCCCC"> to use nearest neighbors</font>

1048
00:48:07,099 --> 00:48:09,829
as a second<font color="#E5E5E5"> step to basically say okay</font>

1049
00:48:09,829 --> 00:48:11,630
<font color="#CCCCCC">for each of those predictions what are</font>

1050
00:48:11,630 --> 00:48:14,959
the three work vectors that<font color="#CCCCCC"> are closest</font>

1051
00:48:14,959 --> 00:48:19,640
for that prediction<font color="#CCCCCC"> so we can now take</font>

1052
00:48:19,640 --> 00:48:21,829
<font color="#CCCCCC">those nearest</font><font color="#E5E5E5"> neighbors</font><font color="#CCCCCC"> and find out for</font>

1053
00:48:21,829 --> 00:48:25,099
<font color="#E5E5E5">our you know a bunch of our images what</font>

1054
00:48:25,099 --> 00:48:26,239
are the three things<font color="#CCCCCC"> that thinks it</font>

1055
00:48:26,239 --> 00:48:29,390
might<font color="#E5E5E5"> be so for example for this image</font>

1056
00:48:29,390 --> 00:48:31,260
here

1057
00:48:31,260 --> 00:48:34,320
it's best<font color="#E5E5E5"> guess with trombone next with</font>

1058
00:48:34,320 --> 00:48:37,170
flute and third with cello

1059
00:48:37,170 --> 00:48:39,480
this gives<font color="#E5E5E5"> us</font><font color="#CCCCCC"> some hope that this</font>

1060
00:48:39,480 --> 00:48:42,359
approach seems to be working okay it's

1061
00:48:42,359 --> 00:48:44,309
not<font color="#E5E5E5"> great yet but it's</font><font color="#CCCCCC"> recognize these</font>

1062
00:48:44,309 --> 00:48:46,170
things<font color="#CCCCCC"> the musical</font><font color="#E5E5E5"> instruments and</font><font color="#CCCCCC"> its</font>

1063
00:48:46,170 --> 00:48:48,270
<font color="#E5E5E5">third guess was better correct mutual</font>

1064
00:48:48,270 --> 00:48:50,299
instrument so we know what to do<font color="#E5E5E5"> next</font>

1065
00:48:50,299 --> 00:48:53,040
<font color="#CCCCCC">what we do</font><font color="#E5E5E5"> next is to find three and</font>

1066
00:48:53,040 --> 00:48:55,730
more layers and<font color="#E5E5E5"> because we have already</font>

1067
00:48:55,730 --> 00:48:58,589
saved the intermediate results from an

1068
00:48:58,589 --> 00:49:00,630
earlier layer and that<font color="#CCCCCC"> fine-tuning is</font>

1069
00:49:00,630 --> 00:49:05,010
going to be much faster<font color="#E5E5E5"> to do two more</font>

1070
00:49:05,010 --> 00:49:07,740
<font color="#CCCCCC">things I briefly mentioned</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> is that</font>

1071
00:49:07,740 --> 00:49:09,030
there's a couple<font color="#E5E5E5"> of different ways</font><font color="#CCCCCC"> to do</font>

1072
00:49:09,030 --> 00:49:10,589
nearest neighbors one is what's<font color="#E5E5E5"> called</font>

1073
00:49:10,589 --> 00:49:12,690
<font color="#E5E5E5">the</font><font color="#CCCCCC"> brute-force approach</font><font color="#E5E5E5"> which is</font>

1074
00:49:12,690 --> 00:49:15,299
<font color="#E5E5E5">literally okay</font><font color="#CCCCCC"> what's the</font><font color="#E5E5E5"> what's the</font>

1075
00:49:15,299 --> 00:49:17,670
nearest word vector to this word vector

1076
00:49:17,670 --> 00:49:19,319
<font color="#CCCCCC">I'd</font><font color="#E5E5E5"> like to go through every one</font><font color="#CCCCCC"> and see</font>

1077
00:49:19,319 --> 00:49:21,869
<font color="#CCCCCC">how far away it is there's another</font>

1078
00:49:21,869 --> 00:49:24,089
<font color="#CCCCCC">approach which is approximate nearest</font>

1079
00:49:24,089 --> 00:49:27,180
<font color="#E5E5E5">neighbors</font><font color="#CCCCCC"> and when you've</font><font color="#E5E5E5"> got lots and</font>

1080
00:49:27,180 --> 00:49:28,680
lots of things you're trying<font color="#E5E5E5"> to look for</font>

1081
00:49:28,680 --> 00:49:31,020
<font color="#E5E5E5">nearest neighbors</font><font color="#CCCCCC"> the brute-force</font>

1082
00:49:31,020 --> 00:49:34,230
<font color="#E5E5E5">approach is going</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> N squared</font><font color="#CCCCCC"> time</font>

1083
00:49:34,230 --> 00:49:36,540
it's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be two this way where else</font>

1084
00:49:36,540 --> 00:49:38,579
<font color="#E5E5E5">would approximate nearest neighbors are</font>

1085
00:49:38,579 --> 00:49:41,190
generally n log n time

1086
00:49:41,190 --> 00:49:44,760
so orders of<font color="#E5E5E5"> magnitude faster if you've</font>

1087
00:49:44,760 --> 00:49:48,630
got a large data<font color="#E5E5E5"> set the particular</font>

1088
00:49:48,630 --> 00:49:50,069
<font color="#E5E5E5">approach I'm using here is an encoder</font>

1089
00:49:50,069 --> 00:49:53,250
<font color="#E5E5E5">locality-sensitive</font><font color="#CCCCCC"> hashing it's a</font>

1090
00:49:53,250 --> 00:49:55,859
fascinating<font color="#CCCCCC"> and wonderful algorithm</font>

1091
00:49:55,859 --> 00:49:57,690
anybody who's<font color="#E5E5E5"> interested in algorithms</font><font color="#CCCCCC"> I</font>

1092
00:49:57,690 --> 00:50:00,299
strongly<font color="#E5E5E5"> recommend you go read about</font><font color="#CCCCCC"> it</font>

1093
00:50:00,299 --> 00:50:03,349
let me<font color="#CCCCCC"> know if you need a hand</font><font color="#E5E5E5"> with it</font>

1094
00:50:03,349 --> 00:50:07,490
my favorite kind<font color="#E5E5E5"> of algorithms are these</font>

1095
00:50:07,490 --> 00:50:10,260
approximate approximate algorithms<font color="#CCCCCC"> like</font>

1096
00:50:10,260 --> 00:50:13,349
<font color="#E5E5E5">in data science you almost never need</font><font color="#CCCCCC"> to</font>

1097
00:50:13,349 --> 00:50:15,869
<font color="#CCCCCC">know something exactly yet</font><font color="#E5E5E5"> nearly every</font>

1098
00:50:15,869 --> 00:50:17,460
algorithm<font color="#CCCCCC"> that people learn at</font>

1099
00:50:17,460 --> 00:50:19,290
<font color="#CCCCCC">University and</font><font color="#E5E5E5"> certainly</font><font color="#CCCCCC"> at high school</font>

1100
00:50:19,290 --> 00:50:21,630
<font color="#CCCCCC">are exact we learn exact</font>

1101
00:50:21,630 --> 00:50:23,339
nearest-neighbor algorithms and exact

1102
00:50:23,339 --> 00:50:25,410
indexing algorithms and exact median

1103
00:50:25,410 --> 00:50:27,329
algorithms<font color="#CCCCCC"> pretty much for every</font>

1104
00:50:27,329 --> 00:50:29,250
algorithm<font color="#E5E5E5"> out there there's an</font>

1105
00:50:29,250 --> 00:50:32,099
approximate version<font color="#E5E5E5"> that</font><font color="#CCCCCC"> runs you know</font>

1106
00:50:32,099 --> 00:50:36,660
<font color="#E5E5E5">an order of</font><font color="#CCCCCC"> n or log</font><font color="#E5E5E5"> n over</font><font color="#CCCCCC"> n</font><font color="#E5E5E5"> faster so</font>

1107
00:50:36,660 --> 00:50:38,970
and one of the cool<font color="#CCCCCC"> things is that once</font>

1108
00:50:38,970 --> 00:50:40,260
you start<font color="#E5E5E5"> realizing that you suddenly</font>

1109
00:50:40,260 --> 00:50:41,880
<font color="#E5E5E5">discover</font><font color="#CCCCCC"> that all of the libraries</font>

1110
00:50:41,880 --> 00:50:43,859
you've been using for ages were written

1111
00:50:43,859 --> 00:50:46,410
by<font color="#E5E5E5"> people</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> didn't know this and then</font>

1112
00:50:46,410 --> 00:50:48,119
you realize that like<font color="#CCCCCC"> every sub</font>

1113
00:50:48,119 --> 00:50:49,380
algorithm they've written they could

1114
00:50:49,380 --> 00:50:50,200
have used naproxen

1115
00:50:50,200 --> 00:50:52,119
version next thing you've got know about

1116
00:50:52,119 --> 00:50:53,290
something it runs a thousand times

1117
00:50:53,290 --> 00:50:55,720
faster<font color="#CCCCCC"> the other cool</font><font color="#E5E5E5"> thing about</font>

1118
00:50:55,720 --> 00:50:58,089
approximate algorithms is that<font color="#CCCCCC"> they're</font>

1119
00:50:58,089 --> 00:51:00,730
<font color="#E5E5E5">generally written</font><font color="#CCCCCC"> to provably be</font>

1120
00:51:00,730 --> 00:51:03,579
accurate<font color="#CCCCCC"> to within so close and like it</font>

1121
00:51:03,579 --> 00:51:05,200
can tell you with your<font color="#E5E5E5"> parameters how</font>

1122
00:51:05,200 --> 00:51:07,690
close they're so close which<font color="#E5E5E5"> means that</font>

1123
00:51:07,690 --> 00:51:10,750
if you<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> make it more accurate</font><font color="#CCCCCC"> we</font>

1124
00:51:10,750 --> 00:51:13,030
run it more times<font color="#E5E5E5"> there's like different</font>

1125
00:51:13,030 --> 00:51:14,980
random<font color="#E5E5E5"> feeds and so this thing called</font>

1126
00:51:14,980 --> 00:51:17,950
<font color="#CCCCCC">LSH forest</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> locality</font><font color="#E5E5E5"> sensitive</font>

1127
00:51:17,950 --> 00:51:20,589
<font color="#E5E5E5">hashing forest which means it creates a</font>

1128
00:51:20,589 --> 00:51:22,030
bunch of these locality sensitive

1129
00:51:22,030 --> 00:51:24,550
hashing<font color="#E5E5E5"> and the amazingly great thing</font>

1130
00:51:24,550 --> 00:51:26,109
about approximate algorithms is that

1131
00:51:26,109 --> 00:51:28,480
<font color="#CCCCCC">each time you create another version of</font>

1132
00:51:28,480 --> 00:51:31,869
it you're exponentially increasing the

1133
00:51:31,869 --> 00:51:34,119
accuracy or multiplicatively<font color="#E5E5E5"> increasing</font>

1134
00:51:34,119 --> 00:51:36,550
the accuracy<font color="#E5E5E5"> but only linearly</font>

1135
00:51:36,550 --> 00:51:39,190
increasing the time right<font color="#CCCCCC"> so</font><font color="#E5E5E5"> if the</font>

1136
00:51:39,190 --> 00:51:45,280
error on one fall of<font color="#CCCCCC"> LSH was</font><font color="#E5E5E5"> eight then</font>

1137
00:51:45,280 --> 00:51:49,599
the error of<font color="#E5E5E5"> two calls is one - each</font>

1138
00:51:49,599 --> 00:51:52,329
grade in three calls is<font color="#E5E5E5"> 1 minus</font><font color="#CCCCCC"> e cubed</font>

1139
00:51:52,329 --> 00:51:54,520
and the time you're taking<font color="#CCCCCC"> though the</font>

1140
00:51:54,520 --> 00:51:57,280
time for one call<font color="#E5E5E5"> was n is now 2 n 3 n</font>

1141
00:51:57,280 --> 00:51:59,500
so when you've<font color="#CCCCCC"> got something</font><font color="#E5E5E5"> where you</font>

1142
00:51:59,500 --> 00:52:03,040
can make<font color="#E5E5E5"> it as</font><font color="#CCCCCC"> accurate as you like with</font>

1143
00:52:03,040 --> 00:52:05,230
only linear increase in time this<font color="#E5E5E5"> is</font>

1144
00:52:05,230 --> 00:52:08,440
<font color="#E5E5E5">incredibly powerful</font><font color="#CCCCCC"> so this is a great</font>

1145
00:52:08,440 --> 00:52:11,579
approximation algorithm

1146
00:52:11,730 --> 00:52:13,770
<font color="#E5E5E5">had more time I'd love to tell you all</font>

1147
00:52:13,770 --> 00:52:18,450
about it<font color="#CCCCCC"> so I generally used LSH forests</font>

1148
00:52:18,450 --> 00:52:20,910
<font color="#E5E5E5">when I'm doing nearest news because it's</font>

1149
00:52:20,910 --> 00:52:23,940
arbitrarily<font color="#E5E5E5"> closed and much faster when</font>

1150
00:52:23,940 --> 00:52:26,250
you publish words<font color="#E5E5E5"> work vectors the</font>

1151
00:52:26,250 --> 00:52:27,990
reason<font color="#E5E5E5"> that they place the time that</font>

1152
00:52:27,990 --> 00:52:31,590
<font color="#E5E5E5">becomes important is when I move beyond</font>

1153
00:52:31,590 --> 00:52:34,530
<font color="#CCCCCC">image net which I'm going to do now so</font>

1154
00:52:34,530 --> 00:52:38,130
let's say<font color="#E5E5E5"> I got a picture and I don't</font>

1155
00:52:38,130 --> 00:52:40,230
<font color="#E5E5E5">just want to say which one</font><font color="#CCCCCC"> of the</font>

1156
00:52:40,230 --> 00:52:42,930
thousand image net categories is it<font color="#CCCCCC"> it</font>

1157
00:52:42,930 --> 00:52:45,210
which one of<font color="#E5E5E5"> the hundred thousand word</font>

1158
00:52:45,210 --> 00:52:47,820
net nouns<font color="#E5E5E5"> is it</font>

1159
00:52:47,820 --> 00:52:50,160
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> harder thing to do</font><font color="#E5E5E5"> okay and</font>

1160
00:52:50,160 --> 00:52:52,920
that's something<font color="#CCCCCC"> that no previous</font><font color="#E5E5E5"> model</font>

1161
00:52:52,920 --> 00:52:55,230
could do right<font color="#E5E5E5"> when you trained an image</font>

1162
00:52:55,230 --> 00:52:57,150
net model<font color="#E5E5E5"> the only thing you could do is</font>

1163
00:52:57,150 --> 00:52:58,740
recognize pictures of<font color="#E5E5E5"> things that were</font>

1164
00:52:58,740 --> 00:53:02,570
image net but now

1165
00:53:02,570 --> 00:53:04,940
we've got a word<font color="#CCCCCC"> sector model and so we</font>

1166
00:53:04,940 --> 00:53:07,070
can put<font color="#E5E5E5"> in an</font><font color="#CCCCCC"> image that spits out a</font>

1167
00:53:07,070 --> 00:53:09,020
word vector and that word vector could

1168
00:53:09,020 --> 00:53:10,940
be closer to things<font color="#E5E5E5"> that are not</font><font color="#CCCCCC"> an</font>

1169
00:53:10,940 --> 00:53:14,780
image net at all or it could be a some

1170
00:53:14,780 --> 00:53:16,490
higher<font color="#CCCCCC"> level of the</font><font color="#E5E5E5"> hierarchy so we</font>

1171
00:53:16,490 --> 00:53:18,500
could look<font color="#CCCCCC"> for a dog rather than a park</font>

1172
00:53:18,500 --> 00:53:25,280
or a plane rather<font color="#E5E5E5"> than a 747</font><font color="#CCCCCC"> so here we</font>

1173
00:53:25,280 --> 00:53:28,700
bring in the<font color="#CCCCCC"> entire set of work vectors</font>

1174
00:53:28,700 --> 00:53:30,590
and I have to remember<font color="#E5E5E5"> to share these</font>

1175
00:53:30,590 --> 00:53:31,750
<font color="#CCCCCC">with you because</font><font color="#E5E5E5"> these are</font><font color="#CCCCCC"> actually</font>

1176
00:53:31,750 --> 00:53:35,630
quite hard to create<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is where I</font>

1177
00:53:35,630 --> 00:53:37,790
definitely want<font color="#CCCCCC"> LSH forest because this</font>

1178
00:53:37,790 --> 00:53:41,570
is<font color="#E5E5E5"> very pretty slow</font><font color="#CCCCCC"> and we can now do</font>

1179
00:53:41,570 --> 00:53:44,270
the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> and not surprisingly</font><font color="#E5E5E5"> it's</font>

1180
00:53:44,270 --> 00:53:45,530
got<font color="#CCCCCC"> works right the thing that was</font>

1181
00:53:45,530 --> 00:53:47,930
actually<font color="#CCCCCC"> cello</font><font color="#E5E5E5"> that now cellos not even</font>

1182
00:53:47,930 --> 00:53:50,600
in the<font color="#E5E5E5"> top three and so this is a harder</font>

1183
00:53:50,600 --> 00:53:55,520
problem<font color="#E5E5E5"> so let's try</font><font color="#CCCCCC"> fine-tuning so fine</font>

1184
00:53:55,520 --> 00:53:58,550
<font color="#CCCCCC">tuning is the final trick I'm going</font><font color="#E5E5E5"> to</font>

1185
00:53:58,550 --> 00:54:02,140
<font color="#E5E5E5">show you are just behind</font><font color="#CCCCCC"> your ritual</font>

1186
00:54:03,430 --> 00:54:05,260
just to clarify what<font color="#CCCCCC"> you were getting up</font>

1187
00:54:05,260 --> 00:54:07,980
there<font color="#E5E5E5"> we sing all over</font><font color="#CCCCCC"> veterans</font><font color="#E5E5E5"> Lane</font>

1188
00:54:07,980 --> 00:54:11,050
<font color="#E5E5E5">everywhere in English language yeah yeah</font>

1189
00:54:11,050 --> 00:54:13,619
<font color="#CCCCCC">you</font><font color="#E5E5E5"> Mike remember last week we looked at</font>

1190
00:54:13,619 --> 00:54:17,500
<font color="#CCCCCC">creating our word vectors</font><font color="#E5E5E5"> and what we</font>

1191
00:54:17,500 --> 00:54:24,099
did was we actually I created a list I

1192
00:54:24,099 --> 00:54:27,720
went to word net and I

1193
00:54:28,390 --> 00:54:30,700
yeah our website<font color="#E5E5E5"> worth net and I</font>

1194
00:54:30,700 --> 00:54:32,230
<font color="#E5E5E5">downloaded the</font><font color="#CCCCCC"> whole of work net</font><font color="#E5E5E5"> and</font>

1195
00:54:32,230 --> 00:54:35,259
then I pick it out which<font color="#CCCCCC"> team for nouns</font>

1196
00:54:35,259 --> 00:54:37,239
and<font color="#E5E5E5"> then I use the rich expertise out</font>

1197
00:54:37,239 --> 00:54:39,609
those and then I saved<font color="#E5E5E5"> that so yeah we</font>

1198
00:54:39,609 --> 00:54:45,759
<font color="#CCCCCC">actually have the entirety of work</font><font color="#E5E5E5"> net</font>

1199
00:54:45,759 --> 00:54:48,910
nouns<font color="#CCCCCC"> like</font><font color="#E5E5E5"> children your limoncello not</font>

1200
00:54:48,910 --> 00:54:52,029
<font color="#CCCCCC">close to it</font><font color="#E5E5E5"> because it's because it's</font>

1201
00:54:52,029 --> 00:54:54,249
<font color="#CCCCCC">not a good</font><font color="#E5E5E5"> enough model yet</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so</font>

1202
00:54:54,249 --> 00:54:58,569
now that<font color="#E5E5E5"> there's 80,000 nouns there's a</font>

1203
00:54:58,569 --> 00:55:01,720
lot more a lot<font color="#CCCCCC"> more</font><font color="#E5E5E5"> ways to be wrong</font><font color="#CCCCCC"> all</font>

1204
00:55:01,720 --> 00:55:03,430
<font color="#E5E5E5">right so what it only has to say</font><font color="#CCCCCC"> okay</font>

1205
00:55:03,430 --> 00:55:04,930
which of these thousand things is it

1206
00:55:04,930 --> 00:55:06,160
that's<font color="#E5E5E5"> pretty easy</font>

1207
00:55:06,160 --> 00:55:08,440
which of these<font color="#E5E5E5"> 80,000 things is it is</font>

1208
00:55:08,440 --> 00:55:10,780
pretty<font color="#E5E5E5"> hard</font>

1209
00:55:10,780 --> 00:55:13,490
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> sure you want to</font><font color="#E5E5E5"> take that</font>

1210
00:55:13,490 --> 00:55:15,200
[Music]

1211
00:55:15,200 --> 00:55:20,030
okay so to fine-tune it it looks<font color="#E5E5E5"> very</font>

1212
00:55:20,030 --> 00:55:21,799
similar to our<font color="#CCCCCC"> usual way of</font><font color="#E5E5E5"> fine-tuning</font>

1213
00:55:21,799 --> 00:55:26,690
things<font color="#E5E5E5"> which is that we take our two</font>

1214
00:55:26,690 --> 00:55:30,430
models<font color="#E5E5E5"> and stick them back</font><font color="#CCCCCC"> to back</font>

1215
00:55:31,820 --> 00:55:34,130
and we're now going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> train the whole</font>

1216
00:55:34,130 --> 00:55:36,260
thing rather<font color="#E5E5E5"> than just the linear model</font>

1217
00:55:36,260 --> 00:55:40,160
<font color="#E5E5E5">now the problem is</font><font color="#CCCCCC"> that the input</font><font color="#E5E5E5"> to</font>

1218
00:55:40,160 --> 00:55:45,130
<font color="#CCCCCC">this model is too big to</font><font color="#E5E5E5"> fit in</font><font color="#CCCCCC"> round so</font>

1219
00:55:45,130 --> 00:55:49,880
how are<font color="#E5E5E5"> we going to call fit or fit</font>

1220
00:55:49,880 --> 00:55:52,670
generator<font color="#E5E5E5"> when we have an array data too</font>

1221
00:55:52,670 --> 00:55:55,340
big to fit<font color="#E5E5E5"> in</font><font color="#CCCCCC"> RAM well one obvious</font><font color="#E5E5E5"> thing</font>

1222
00:55:55,340 --> 00:55:57,230
to<font color="#E5E5E5"> do would USB to</font><font color="#CCCCCC"> past in the big holes</font>

1223
00:55:57,230 --> 00:56:00,560
array because<font color="#E5E5E5"> to most things in place</font>

1224
00:56:00,560 --> 00:56:02,180
than a big holes array<font color="#E5E5E5"> looks just like a</font>

1225
00:56:02,180 --> 00:56:04,610
regular array doesn't really<font color="#E5E5E5"> look any</font>

1226
00:56:04,610 --> 00:56:09,740
<font color="#E5E5E5">different the way a big holes array is</font>

1227
00:56:09,740 --> 00:56:12,640
actually<font color="#E5E5E5"> stored</font>

1228
00:56:12,640 --> 00:56:16,500
is<font color="#E5E5E5"> it actually stored as a</font>

1229
00:56:17,560 --> 00:56:19,840
yeah a big<font color="#CCCCCC"> holes array is actually</font>

1230
00:56:19,840 --> 00:56:21,910
<font color="#CCCCCC">stored</font><font color="#E5E5E5"> in a directory as I'm sure you've</font>

1231
00:56:21,910 --> 00:56:25,560
noticed<font color="#CCCCCC"> and in that directory</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> takes</font>

1232
00:56:25,560 --> 00:56:29,320
<font color="#E5E5E5">got something that called</font><font color="#CCCCCC"> chunk</font><font color="#E5E5E5"> length</font>

1233
00:56:29,320 --> 00:56:35,200
<font color="#E5E5E5">and plan actually</font><font color="#CCCCCC"> I set</font><font color="#E5E5E5"> it to 32 when I</font>

1234
00:56:35,200 --> 00:56:37,300
created<font color="#E5E5E5"> these big holes arrays what it</font>

1235
00:56:37,300 --> 00:56:42,150
does is it takes every 32 images

1236
00:56:42,410 --> 00:56:45,369
puts them<font color="#E5E5E5"> into a separate file</font>

1237
00:56:45,369 --> 00:56:49,079
<font color="#E5E5E5">all right so each one</font><font color="#CCCCCC"> of these has 32</font>

1238
00:56:49,079 --> 00:56:55,329
images in<font color="#E5E5E5"> it</font><font color="#CCCCCC"> or 32</font><font color="#E5E5E5"> of the leading of</font>

1239
00:56:55,329 --> 00:56:59,619
leading axis of the array<font color="#E5E5E5"> now if you</font>

1240
00:56:59,619 --> 00:57:02,349
then try<font color="#E5E5E5"> to take this whole array and</font>

1241
00:57:02,349 --> 00:57:07,180
passed it to<font color="#E5E5E5"> dot set and care us with</font>

1242
00:57:07,180 --> 00:57:10,420
shuffle it's going to try<font color="#E5E5E5"> and grab one</font>

1243
00:57:10,420 --> 00:57:12,190
<font color="#CCCCCC">thing from here and one thing</font><font color="#E5E5E5"> from here</font>

1244
00:57:12,190 --> 00:57:14,049
and there one thing<font color="#E5E5E5"> from here here's the</font>

1245
00:57:14,049 --> 00:57:17,529
bad news<font color="#E5E5E5"> but they call to park get one</font>

1246
00:57:17,529 --> 00:57:20,559
thing out<font color="#E5E5E5"> of a chunk it has to read and</font>

1247
00:57:20,559 --> 00:57:23,019
decompress the whole thing<font color="#E5E5E5"> as it has to</font>

1248
00:57:23,019 --> 00:57:25,539
read and decompress<font color="#CCCCCC"> 32 images in order</font>

1249
00:57:25,539 --> 00:57:27,479
<font color="#CCCCCC">to give you the</font><font color="#E5E5E5"> one image you asked for</font>

1250
00:57:27,479 --> 00:57:29,920
<font color="#E5E5E5">at</font><font color="#CCCCCC"> B as a</font><font color="#E5E5E5"> buzzer and that be</font>

1251
00:57:29,920 --> 00:57:33,219
ridiculously horribly slow we didn't

1252
00:57:33,219 --> 00:57:34,630
have to worry<font color="#E5E5E5"> about that</font>

1253
00:57:34,630 --> 00:57:38,769
when we called predict on<font color="#E5E5E5"> batch because</font>

1254
00:57:38,769 --> 00:57:40,989
we were<font color="#CCCCCC"> grab it we were going</font><font color="#E5E5E5"> not</font>

1255
00:57:40,989 --> 00:57:42,789
shuffling but we were going in<font color="#E5E5E5"> order</font>

1256
00:57:42,789 --> 00:57:46,589
<font color="#E5E5E5">that was just grabbing one</font>

1257
00:57:49,890 --> 00:57:53,370
grabbing a single image out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the out</font>

1258
00:57:53,370 --> 00:57:55,500
<font color="#CCCCCC">of a chunk but now that we want to</font>

1259
00:57:55,500 --> 00:58:00,090
shuffle<font color="#E5E5E5"> it would</font><font color="#CCCCCC"> right so what we've</font>

1260
00:58:00,090 --> 00:58:04,110
done is<font color="#E5E5E5"> we've somebody very helpfully</font>

1261
00:58:04,110 --> 00:58:06,690
actually on a<font color="#E5E5E5"> cattle forum provided</font>

1262
00:58:06,690 --> 00:58:08,670
<font color="#E5E5E5">something called a</font><font color="#CCCCCC"> be called array</font>

1263
00:58:08,670 --> 00:58:11,400
iterator<font color="#E5E5E5"> and the be called array</font>

1264
00:58:11,400 --> 00:58:17,400
iterator which<font color="#E5E5E5"> was kindly discovered on</font>

1265
00:58:17,400 --> 00:58:20,670
the forums actually by somebody named<font color="#E5E5E5"> NP</font>

1266
00:58:20,670 --> 00:58:23,910
<font color="#CCCCCC">Johnston originally written by this</font>

1267
00:58:23,910 --> 00:58:30,770
fellow<font color="#CCCCCC"> what it does is it</font>

1268
00:58:31,290 --> 00:58:35,030
provides a<font color="#CCCCCC"> Karass compatible generator</font>

1269
00:58:35,030 --> 00:58:40,200
which grabs an entire chunk at a time<font color="#E5E5E5"> so</font>

1270
00:58:40,200 --> 00:58:43,080
it's a little<font color="#E5E5E5"> bit less random right but</font>

1271
00:58:43,080 --> 00:58:45,810
given that<font color="#E5E5E5"> if this has got two million</font>

1272
00:58:45,810 --> 00:58:48,240
<font color="#CCCCCC">images in and the</font><font color="#E5E5E5"> chunk length is 32</font>

1273
00:58:48,240 --> 00:58:50,340
<font color="#E5E5E5">then it's going to basically create a</font>

1274
00:58:50,340 --> 00:58:54,060
batch of chunks rather than a batch of

1275
00:58:54,060 --> 00:58:57,330
<font color="#CCCCCC">images and so that</font><font color="#E5E5E5"> means we</font><font color="#CCCCCC"> have none of</font>

1276
00:58:57,330 --> 00:58:59,730
<font color="#CCCCCC">the performance problems and</font>

1277
00:58:59,730 --> 00:59:01,530
<font color="#E5E5E5">particularly because we remember</font>

1278
00:59:01,530 --> 00:59:03,750
originally<font color="#E5E5E5"> we randomly shuffled our</font>

1279
00:59:03,750 --> 00:59:05,880
files<font color="#CCCCCC"> so this whole thing is randomly</font>

1280
00:59:05,880 --> 00:59:08,520
shuffled anyway and so this is a good

1281
00:59:08,520 --> 00:59:09,780
<font color="#E5E5E5">trick</font>

1282
00:59:09,780 --> 00:59:12,180
so you'll find the big<font color="#CCCCCC"> holes array</font>

1283
00:59:12,180 --> 00:59:15,960
iterator<font color="#E5E5E5"> on github</font><font color="#CCCCCC"> feel free to take</font><font color="#E5E5E5"> a</font>

1284
00:59:15,960 --> 00:59:17,280
<font color="#CCCCCC">look at the code it's pretty</font>

1285
00:59:17,280 --> 00:59:22,740
<font color="#CCCCCC">straightforward there was</font><font color="#E5E5E5"> a few issues</font>

1286
00:59:22,740 --> 00:59:26,070
<font color="#E5E5E5">with the original version so NP</font><font color="#CCCCCC"> Jensen</font>

1287
00:59:26,070 --> 00:59:27,750
life kind of<font color="#E5E5E5"> tried</font><font color="#CCCCCC"> to fix</font><font color="#E5E5E5"> it up and I've</font>

1288
00:59:27,750 --> 00:59:29,160
written some tests for us<font color="#E5E5E5"> and he's</font>

1289
00:59:29,160 --> 00:59:32,250
written some documentation<font color="#E5E5E5"> for</font><font color="#CCCCCC"> it but if</font>

1290
00:59:32,250 --> 00:59:35,730
you<font color="#E5E5E5"> just want to use it</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> it's as</font>

1291
00:59:35,730 --> 00:59:38,970
simple as writing this<font color="#CCCCCC"> wire equals big</font>

1292
00:59:38,970 --> 00:59:42,710
holes array iterator<font color="#E5E5E5"> this is your data</font>

1293
00:59:42,710 --> 00:59:46,140
<font color="#CCCCCC">your labels</font><font color="#E5E5E5"> couple equals true batch</font>

1294
00:59:46,140 --> 00:59:48,300
size equals whatever<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you can</font>

1295
00:59:48,300 --> 00:59:49,920
just<font color="#E5E5E5"> call fit generator as per usual</font>

1296
00:59:49,920 --> 00:59:53,970
<font color="#E5E5E5">nothing</font><font color="#CCCCCC"> in that iterator</font><font color="#E5E5E5"> and that</font>

1297
00:59:53,970 --> 00:59:57,300
iterators<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of items</font>

1298
00:59:57,300 --> 00:59:59,520
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> all of you guys who have</font><font color="#CCCCCC"> been</font>

1299
00:59:59,520 --> 01:00:02,160
asking you know how do I deal with<font color="#E5E5E5"> data</font>

1300
01:00:02,160 --> 01:00:06,510
that's<font color="#E5E5E5"> bigger than memory this is how</font>

1301
01:00:06,510 --> 01:00:10,680
you do<font color="#CCCCCC"> it okay so hopefully that will</font>

1302
01:00:10,680 --> 01:00:14,150
<font color="#CCCCCC">make life easier for other people so we</font>

1303
01:00:14,150 --> 01:00:16,410
<font color="#CCCCCC">fine-tune it for a while we do some</font>

1304
01:00:16,410 --> 01:00:19,760
<font color="#CCCCCC">loading</font><font color="#E5E5E5"> repre kneeling for a while and</font>

1305
01:00:19,760 --> 01:00:23,850
this basically runs overnight<font color="#CCCCCC"> for me</font>

1306
01:00:23,850 --> 01:00:27,270
kind<font color="#E5E5E5"> of takes about six hours to run and</font>

1307
01:00:27,270 --> 01:00:30,240
so come back<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next morning</font><font color="#E5E5E5"> and I just</font>

1308
01:00:30,240 --> 01:00:33,120
copy and paste my<font color="#E5E5E5"> K nearest neighbors so</font>

1309
01:00:33,120 --> 01:00:35,700
I call predict to get my predicted<font color="#E5E5E5"> work</font>

1310
01:00:35,700 --> 01:00:40,020
vectors for<font color="#E5E5E5"> each word vector R then pass</font>

1311
01:00:40,020 --> 01:00:41,670
it<font color="#E5E5E5"> into nearest neighbors this is my</font>

1312
01:00:41,670 --> 01:00:44,780
<font color="#CCCCCC">gist thousand categories</font>

1313
01:00:44,840 --> 01:00:48,230
and lo<font color="#CCCCCC"> and behold</font><font color="#E5E5E5"> we now have fellow</font><font color="#CCCCCC"> in</font>

1314
01:00:48,230 --> 01:00:51,290
the top spot<font color="#CCCCCC"> as we hoped how did</font><font color="#E5E5E5"> it go</font>

1315
01:00:51,290 --> 01:00:53,240
in the<font color="#CCCCCC"> heart a problem of looking at the</font>

1316
01:00:53,240 --> 01:00:55,600
<font color="#CCCCCC">100,000 or</font><font color="#E5E5E5"> so now nouns in English</font>

1317
01:00:55,600 --> 01:00:58,700
<font color="#E5E5E5">pretty good</font><font color="#CCCCCC"> I've got this one right and</font>

1318
01:00:58,700 --> 01:01:01,460
just to pick<font color="#E5E5E5"> another one at random</font><font color="#CCCCCC"> let's</font>

1319
01:01:01,460 --> 01:01:02,210
pick the first<font color="#CCCCCC"> one</font>

1320
01:01:02,210 --> 01:01:05,120
it said thrown that sure looks like a

1321
01:01:05,120 --> 01:01:09,350
<font color="#E5E5E5">throne</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> looking pretty good</font><font color="#CCCCCC"> so here's</font>

1322
01:01:09,350 --> 01:01:11,900
something<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> now that we have</font>

1323
01:01:11,900 --> 01:01:14,690
<font color="#E5E5E5">bought images and words into the same</font>

1324
01:01:14,690 --> 01:01:18,190
space<font color="#E5E5E5"> let's play with it some more</font>

1325
01:01:18,190 --> 01:01:21,400
so why<font color="#E5E5E5"> don't we</font><font color="#CCCCCC"> use nearest neighbors</font>

1326
01:01:21,400 --> 01:01:25,650
<font color="#CCCCCC">with those predictions so predicted</font>

1327
01:01:25,650 --> 01:01:27,930
that's<font color="#E5E5E5"> me</font>

1328
01:01:27,930 --> 01:01:30,530
early

1329
01:01:30,789 --> 01:01:36,839
argument<font color="#CCCCCC"> boom boom</font><font color="#E5E5E5"> what there's work yet</font>

1330
01:01:36,839 --> 01:01:41,890
<font color="#E5E5E5">so</font><font color="#CCCCCC"> to to the to the word Tyvek vector</font>

1331
01:01:41,890 --> 01:01:46,660
which Google created and but the subset

1332
01:01:46,660 --> 01:01:48,429
of<font color="#E5E5E5"> those which are nouns</font>

1333
01:01:48,429 --> 01:01:51,669
according to<font color="#E5E5E5"> word net maps</font><font color="#CCCCCC"> - there are</font>

1334
01:01:51,669 --> 01:01:58,049
<font color="#CCCCCC">ten set IDs both zu several know dreams</font>

1335
01:01:58,049 --> 01:02:00,880
so yeah the<font color="#CCCCCC"> word well the word vectors</font>

1336
01:02:00,880 --> 01:02:03,219
are just the word to word two vectors

1337
01:02:03,219 --> 01:02:04,929
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can download off the internet</font><font color="#CCCCCC"> so</font>

1338
01:02:04,929 --> 01:02:05,949
<font color="#E5E5E5">yes they were</font>

1339
01:02:05,949 --> 01:02:11,020
pre trained by<font color="#E5E5E5"> Google please</font><font color="#CCCCCC"> versus</font>

1340
01:02:11,020 --> 01:02:12,910
we like very<font color="#CCCCCC"> beddings</font><font color="#E5E5E5"> but they're not</font>

1341
01:02:12,910 --> 01:02:15,550
<font color="#E5E5E5">really waste</font><font color="#CCCCCC"> you're better than me I'm</font>

1342
01:02:15,550 --> 01:02:19,390
gettin<font color="#E5E5E5"> okay so Lincoln grew presumably</font>

1343
01:02:19,390 --> 01:02:23,230
<font color="#E5E5E5">onwards which yes exactly so we're</font>

1344
01:02:23,230 --> 01:02:28,330
<font color="#E5E5E5">saying here</font><font color="#CCCCCC"> is this this image</font><font color="#E5E5E5"> spits out</font>

1345
01:02:28,330 --> 01:02:32,230
a vector from a thing we<font color="#E5E5E5"> just trained</font><font color="#CCCCCC"> we</font>

1346
01:02:32,230 --> 01:02:35,260
have a hundred thousand word to that

1347
01:02:35,260 --> 01:02:37,330
<font color="#CCCCCC">word vectors for all the nouns in</font>

1348
01:02:37,330 --> 01:02:40,060
English<font color="#E5E5E5"> which one of those is the</font>

1349
01:02:40,060 --> 01:02:42,460
closest to<font color="#CCCCCC"> the thing that came out of</font>

1350
01:02:42,460 --> 01:02:46,870
<font color="#E5E5E5">our model and the answer was from the</font>

1351
01:02:46,870 --> 01:02:51,490
zoo in<font color="#CCCCCC"> localization user excusive long</font>

1352
01:02:51,490 --> 01:02:55,990
<font color="#CCCCCC">nourishment space hold</font><font color="#E5E5E5"> that thought will</font>

1353
01:02:55,990 --> 01:02:57,700
be<font color="#E5E5E5"> doing language translation starting</font>

1354
01:02:57,700 --> 01:03:00,130
next week so no we don't<font color="#E5E5E5"> quite do it</font>

1355
01:03:00,130 --> 01:03:02,140
<font color="#E5E5E5">that way but you can</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> of it</font><font color="#CCCCCC"> much um</font>

1356
01:03:02,140 --> 01:03:04,810
so let's do something<font color="#CCCCCC"> interesting let's</font>

1357
01:03:04,810 --> 01:03:09,520
um create a nearest neighbors<font color="#CCCCCC"> not for</font>

1358
01:03:09,520 --> 01:03:12,430
all<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> work of X Factor's but for</font>

1359
01:03:12,430 --> 01:03:15,160
all<font color="#E5E5E5"> of our image predicted vectors and</font>

1360
01:03:15,160 --> 01:03:17,560
now we can do the opposite let's take a

1361
01:03:17,560 --> 01:03:20,470
word<font color="#E5E5E5"> we pick at random let's look it up</font>

1362
01:03:20,470 --> 01:03:23,440
in our<font color="#E5E5E5"> work to veterinary and let's find</font>

1363
01:03:23,440 --> 01:03:27,730
the nearest neighbors for that<font color="#E5E5E5"> in our</font>

1364
01:03:27,730 --> 01:03:30,330
images

1365
01:03:31,650 --> 01:03:35,219
there it is okay<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is pretty</font>

1366
01:03:35,219 --> 01:03:37,019
<font color="#E5E5E5">interesting you</font><font color="#CCCCCC"> know you could now</font><font color="#E5E5E5"> find</font>

1367
01:03:37,019 --> 01:03:39,599
there's a<font color="#CCCCCC"> touch-free</font><font color="#E5E5E5"> right so you can</font>

1368
01:03:39,599 --> 01:03:42,630
now find<font color="#E5E5E5"> the images</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are the most</font>

1369
01:03:42,630 --> 01:03:45,960
like whatever words you come up with<font color="#E5E5E5"> so</font>

1370
01:03:45,960 --> 01:03:49,519
okay that's crazy<font color="#CCCCCC"> but we can do crazier</font>

1371
01:03:49,519 --> 01:03:51,960
<font color="#CCCCCC">here is a random thing</font><font color="#E5E5E5"> I picked now</font>

1372
01:03:51,960 --> 01:03:53,400
notice I picked it from the validation

1373
01:03:53,400 --> 01:03:55,200
set of image<font color="#E5E5E5"> nets we've never seen this</font>

1374
01:03:55,200 --> 01:03:57,269
image before and when<font color="#CCCCCC"> honestly when I</font>

1375
01:03:57,269 --> 01:03:59,190
opened<font color="#CCCCCC"> it up my heart sank because I</font>

1376
01:03:59,190 --> 01:04:01,400
don't know what it is

1377
01:04:01,400 --> 01:04:05,349
so this is a<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> what is that</font>

1378
01:04:06,020 --> 01:04:09,230
<font color="#CCCCCC">Riesling</font><font color="#E5E5E5"> manta ray okay so I didn't pick</font>

1379
01:04:09,230 --> 01:04:12,440
it<font color="#E5E5E5"> so what we can do is we can call drop</font>

1380
01:04:12,440 --> 01:04:15,890
predict on that<font color="#E5E5E5"> image and we can</font><font color="#CCCCCC"> then do</font>

1381
01:04:15,890 --> 01:04:17,600
a nearest neighbors<font color="#CCCCCC"> of all</font><font color="#E5E5E5"> of our other</font>

1382
01:04:17,600 --> 01:04:22,460
images and there's the first there's a

1383
01:04:22,460 --> 01:04:24,860
second<font color="#E5E5E5"> and the third one</font><font color="#CCCCCC"> is even</font>

1384
01:04:24,860 --> 01:04:28,040
<font color="#E5E5E5">somebody putting their hand on it which</font>

1385
01:04:28,040 --> 01:04:31,190
<font color="#E5E5E5">is slightly crazy but that</font><font color="#CCCCCC"> was what the</font>

1386
01:04:31,190 --> 01:04:34,730
original one<font color="#CCCCCC"> for play in fact I've got a</font>

1387
01:04:34,730 --> 01:04:40,610
if I can<font color="#CCCCCC"> find</font><font color="#E5E5E5"> it at this one I ran it</font>

1388
01:04:40,610 --> 01:04:43,450
again on a different<font color="#E5E5E5"> image</font>

1389
01:04:46,770 --> 01:04:51,309
yeah here<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I took this one which is</font>

1390
01:04:51,309 --> 01:04:53,109
<font color="#E5E5E5">like pretty I actually looked around for</font>

1391
01:04:53,109 --> 01:04:54,430
something weird<font color="#E5E5E5"> this is pretty weird</font>

1392
01:04:54,430 --> 01:04:56,069
right<font color="#E5E5E5"> this is the natural is it</font><font color="#CCCCCC"> a fish</font>

1393
01:04:56,069 --> 01:04:58,750
<font color="#E5E5E5">so when we then</font><font color="#CCCCCC"> ask</font><font color="#E5E5E5"> for nearest</font>

1394
01:04:58,750 --> 01:05:03,099
<font color="#E5E5E5">neighbors we get fish</font><font color="#CCCCCC"> in there okay</font><font color="#E5E5E5"> so</font>

1395
01:05:03,099 --> 01:05:06,220
it's like I don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> sometimes deep</font>

1396
01:05:06,220 --> 01:05:07,900
learning so magic you just kind of<font color="#E5E5E5"> go</font><font color="#CCCCCC"> in</font>

1397
01:05:07,900 --> 01:05:10,450
<font color="#CCCCCC">there possibly what ads this behind you</font>

1398
01:05:10,450 --> 01:05:14,309
Rachel<font color="#CCCCCC"> I don't assistant</font>

1399
01:05:14,890 --> 01:05:18,100
we try to do<font color="#E5E5E5"> that</font>

1400
01:05:18,100 --> 01:05:20,369
<font color="#E5E5E5">Catherine</font>

1401
01:05:20,369 --> 01:05:22,400
<font color="#E5E5E5">Oh</font>

1402
01:05:22,610 --> 01:05:24,780
yeah

1403
01:05:24,780 --> 01:05:30,030
yeah<font color="#E5E5E5"> I'm only a little bit</font><font color="#CCCCCC"> and maybe you</font>

1404
01:05:30,030 --> 01:05:31,800
know future<font color="#E5E5E5"> course we model cadets go</font>

1405
01:05:31,800 --> 01:05:34,470
<font color="#CCCCCC">thinking maybe even in your</font><font color="#E5E5E5"> numerical</font>

1406
01:05:34,470 --> 01:05:35,580
linear algebra course<font color="#CCCCCC"> you</font><font color="#E5E5E5"> might be</font>

1407
01:05:35,580 --> 01:05:37,170
looking<font color="#E5E5E5"> a desk so I don't think we'll</font>

1408
01:05:37,170 --> 01:05:40,260
cover it this course

1409
01:05:40,260 --> 01:05:42,780
<font color="#CCCCCC">um but do look at that dask it's</font>

1410
01:05:42,780 --> 01:05:49,500
difficult to show<font color="#E5E5E5"> our problem issue</font><font color="#CCCCCC"> in</font>

1411
01:05:49,500 --> 01:05:51,750
training there and<font color="#CCCCCC"> if they have easy</font>

1412
01:05:51,750 --> 01:05:55,440
<font color="#CCCCCC">using</font><font color="#E5E5E5"> them and fish no not at all</font>

1413
01:05:55,440 --> 01:05:59,190
so these<font color="#CCCCCC"> were</font><font color="#E5E5E5"> actually labeled as this</font>

1414
01:05:59,190 --> 01:06:01,980
particular kind<font color="#E5E5E5"> of fish</font><font color="#CCCCCC"> in fact that's</font>

1415
01:06:01,980 --> 01:06:03,240
the<font color="#E5E5E5"> other thing</font><font color="#CCCCCC"> is it's not only</font><font color="#E5E5E5"> found</font>

1416
01:06:03,240 --> 01:06:05,310
fishing nets it has actually found<font color="#CCCCCC"> this</font>

1417
01:06:05,310 --> 01:06:07,560
more or<font color="#CCCCCC"> less the same breed of fish in</font>

1418
01:06:07,560 --> 01:06:14,850
the net<font color="#CCCCCC"> but when we called predict on</font>

1419
01:06:14,850 --> 01:06:19,650
those<font color="#E5E5E5"> it created a word vector which was</font>

1420
01:06:19,650 --> 01:06:22,590
probably<font color="#CCCCCC"> like</font><font color="#E5E5E5"> halfway between that kind</font>

1421
01:06:22,590 --> 01:06:27,390
<font color="#E5E5E5">of fish and a net because it doesn't</font>

1422
01:06:27,390 --> 01:06:29,340
know what to<font color="#E5E5E5"> do right and so</font><font color="#CCCCCC"> sometimes</font>

1423
01:06:29,340 --> 01:06:30,750
when it<font color="#E5E5E5"> see things like</font><font color="#CCCCCC"> that there would</font>

1424
01:06:30,750 --> 01:06:32,370
have<font color="#E5E5E5"> been mark seen image net of the net</font>

1425
01:06:32,370 --> 01:06:33,480
and sometimes it would<font color="#E5E5E5"> have been a fish</font>

1426
01:06:33,480 --> 01:06:36,210
<font color="#E5E5E5">and so the best way to minimize</font><font color="#CCCCCC"> the loss</font>

1427
01:06:36,210 --> 01:06:38,070
function would<font color="#E5E5E5"> have been to kind of</font>

1428
01:06:38,070 --> 01:06:40,710
pitch<font color="#E5E5E5"> that's so attached and as a result</font>

1429
01:06:40,710 --> 01:06:42,480
the images that were closest were the

1430
01:06:42,480 --> 01:06:44,400
ones which actually were half way

1431
01:06:44,400 --> 01:06:47,010
<font color="#CCCCCC">between the two themselves so it's kind</font>

1432
01:06:47,010 --> 01:06:51,360
of a<font color="#E5E5E5"> convenient accident</font><font color="#CCCCCC"> all in in</font><font color="#E5E5E5"> your</font>

1433
01:06:51,360 --> 01:06:52,950
<font color="#E5E5E5">alone</font><font color="#CCCCCC"> in that</font><font color="#E5E5E5"> evening a chance and</font><font color="#CCCCCC"> be</font>

1434
01:06:52,950 --> 01:06:55,470
<font color="#CCCCCC">willing</font><font color="#E5E5E5"> network that an</font><font color="#CCCCCC"> asset</font><font color="#E5E5E5"> yeah yeah</font>

1435
01:06:55,470 --> 01:06:58,290
absolutely<font color="#CCCCCC"> yeah this up at the back</font>

1436
01:06:58,290 --> 01:07:01,880
there<font color="#E5E5E5"> we'll just walk it over it</font>

1437
01:07:02,270 --> 01:07:04,330
you

1438
01:07:05,130 --> 01:07:06,750
the bridge<font color="#E5E5E5"> network to length with the</font>

1439
01:07:06,750 --> 01:07:11,359
<font color="#E5E5E5">ring when you can't</font><font color="#CCCCCC"> wear prison</font>

1440
01:07:13,090 --> 01:07:16,030
<font color="#E5E5E5">you absolutely can and I have</font><font color="#CCCCCC"> and but</font>

1441
01:07:16,030 --> 01:07:17,680
really<font color="#E5E5E5"> certain nearest neighbors</font><font color="#CCCCCC"> I</font>

1442
01:07:17,680 --> 01:07:19,390
haven't found anything nearly as<font color="#E5E5E5"> good as</font>

1443
01:07:19,390 --> 01:07:22,930
<font color="#E5E5E5">cosine and that's true and all of the</font>

1444
01:07:22,930 --> 01:07:25,900
things<font color="#CCCCCC"> I looked up as well by</font><font color="#E5E5E5"> the way</font><font color="#CCCCCC"> I</font>

1445
01:07:25,900 --> 01:07:28,330
should<font color="#CCCCCC"> mention the when you</font><font color="#E5E5E5"> use</font>

1446
01:07:28,330 --> 01:07:30,910
<font color="#CCCCCC">locality-sensitive hashing</font><font color="#E5E5E5"> in Python by</font>

1447
01:07:30,910 --> 01:07:32,440
default it uses something<font color="#E5E5E5"> that's</font>

1448
01:07:32,440 --> 01:07:34,090
equivalent to the<font color="#E5E5E5"> cosine</font><font color="#CCCCCC"> metrics so</font>

1449
01:07:34,090 --> 01:07:37,710
that's why the<font color="#E5E5E5"> nearest neighbors work</font>

1450
01:07:38,970 --> 01:07:45,450
<font color="#E5E5E5">yes yes more than one yes exactly</font><font color="#CCCCCC"> so</font>

1451
01:07:45,450 --> 01:07:47,410
<font color="#CCCCCC">starting next week we're going to be</font>

1452
01:07:47,410 --> 01:07:49,480
<font color="#E5E5E5">learning about sequence to sequence</font>

1453
01:07:49,480 --> 01:07:52,740
models<font color="#E5E5E5"> and memory and attention methods</font>

1454
01:07:52,740 --> 01:07:55,060
<font color="#CCCCCC">they're going</font><font color="#E5E5E5"> to show us how we can take</font>

1455
01:07:55,060 --> 01:07:57,310
an input such<font color="#CCCCCC"> as a sentence in English</font>

1456
01:07:57,310 --> 01:07:59,890
and without<font color="#CCCCCC"> input/output such as a</font>

1457
01:07:59,890 --> 01:08:01,450
sentence<font color="#E5E5E5"> in French which</font><font color="#CCCCCC"> is the</font>

1458
01:08:01,450 --> 01:08:02,680
particular case study<font color="#E5E5E5"> we're going to be</font>

1459
01:08:02,680 --> 01:08:05,500
spending<font color="#CCCCCC"> two or</font><font color="#E5E5E5"> three weeks on when you</font>

1460
01:08:05,500 --> 01:08:07,750
combine that<font color="#E5E5E5"> with this you get image</font>

1461
01:08:07,750 --> 01:08:09,820
captioning<font color="#CCCCCC"> I'm not sure if we're going</font>

1462
01:08:09,820 --> 01:08:12,220
<font color="#E5E5E5">to have time</font><font color="#CCCCCC"> to do it ourselves but it</font>

1463
01:08:12,220 --> 01:08:15,910
will literally be<font color="#E5E5E5"> trivial for you guys</font>

1464
01:08:15,910 --> 01:08:18,339
to take the two things and<font color="#E5E5E5"> combine them</font>

1465
01:08:18,339 --> 01:08:20,680
<font color="#E5E5E5">into image caching</font><font color="#CCCCCC"> I could serve it's</font>

1466
01:08:20,680 --> 01:08:21,839
just those<font color="#E5E5E5"> two techniques together</font>

1467
01:08:21,839 --> 01:08:24,328
<font color="#CCCCCC">person</font>

1468
01:08:24,328 --> 01:08:29,929
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so we're now</font><font color="#E5E5E5"> going to switch to</font>

1469
01:08:29,929 --> 01:08:34,078
<font color="#E5E5E5">actually before we</font><font color="#CCCCCC"> take a break I want</font>

1470
01:08:34,078 --> 01:08:38,448
<font color="#CCCCCC">to show you the homework and the</font>

1471
01:08:38,448 --> 01:08:41,189
<font color="#CCCCCC">homework</font><font color="#E5E5E5"> hopefully you guys noticed I</font>

1472
01:08:41,189 --> 01:08:42,509
gave you some tips<font color="#E5E5E5"> because it's really</font>

1473
01:08:42,509 --> 01:08:45,658
challenging one<font color="#CCCCCC"> even though in</font><font color="#E5E5E5"> a sense</font>

1474
01:08:45,658 --> 01:08:47,908
<font color="#CCCCCC">it was kind of straightforward</font><font color="#E5E5E5"> which</font>

1475
01:08:47,908 --> 01:08:49,020
would take everything<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we've already</font>

1476
01:08:49,020 --> 01:08:50,849
learned about<font color="#E5E5E5"> different resolution and</font>

1477
01:08:50,849 --> 01:08:53,099
<font color="#E5E5E5">slightly change the loss function so</font>

1478
01:08:53,099 --> 01:08:54,599
that it<font color="#E5E5E5"> does perceptual</font><font color="#CCCCCC"> loss it's the</font>

1479
01:08:54,599 --> 01:08:56,939
<font color="#CCCCCC">cell transfer instead the details are</font>

1480
01:08:56,939 --> 01:08:59,788
tricky<font color="#E5E5E5"> and I'm going to quickly</font><font color="#CCCCCC"> show you</font>

1481
01:08:59,788 --> 01:09:01,170
two<font color="#CCCCCC"> things and the first we're going</font><font color="#E5E5E5"> to</font>

1482
01:09:01,170 --> 01:09:02,969
<font color="#CCCCCC">show you how I did the homework if</font><font color="#E5E5E5"> I</font>

1483
01:09:02,969 --> 01:09:05,538
actually hadn't done it last week

1484
01:09:05,538 --> 01:09:08,038
luckily I have enough RAM that<font color="#E5E5E5"> I could</font>

1485
01:09:08,038 --> 01:09:09,719
read the two<font color="#E5E5E5"> things all into memory so</font>

1486
01:09:09,719 --> 01:09:11,819
<font color="#CCCCCC">don't forget you can</font><font color="#E5E5E5"> just do that with a</font>

1487
01:09:11,819 --> 01:09:13,799
big holes array to turn it into<font color="#CCCCCC"> a numpy</font>

1488
01:09:13,799 --> 01:09:15,830
<font color="#CCCCCC">array</font><font color="#E5E5E5"> in memory</font>

1489
01:09:15,830 --> 01:09:17,328
[Music]

1490
01:09:17,328 --> 01:09:18,948
so one thing<font color="#E5E5E5"> I did</font><font color="#CCCCCC"> was I created</font><font color="#E5E5E5"> my</font>

1491
01:09:18,948 --> 01:09:21,049
<font color="#CCCCCC">upsampling</font><font color="#E5E5E5"> block to get</font><font color="#CCCCCC"> rid of the</font>

1492
01:09:21,049 --> 01:09:23,479
checkerboard patterns that was literally

1493
01:09:23,479 --> 01:09:25,849
<font color="#E5E5E5">as simple</font><font color="#CCCCCC"> as saying upsampling</font><font color="#E5E5E5"> 2d than</font>

1494
01:09:25,849 --> 01:09:29,118
<font color="#CCCCCC">1x1</font><font color="#E5E5E5"> cotton so that</font><font color="#CCCCCC"> got rid of</font><font color="#E5E5E5"> my</font>

1495
01:09:29,118 --> 01:09:34,880
triangle<font color="#CCCCCC"> layer</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> checkable</font><font color="#E5E5E5"> times the</font>

1496
01:09:34,880 --> 01:09:36,618
next<font color="#CCCCCC"> thing I did was I changed my last</font>

1497
01:09:36,618 --> 01:09:39,828
function<font color="#E5E5E5"> and I decided before I try to</font>

1498
01:09:39,828 --> 01:09:42,290
do<font color="#E5E5E5"> style transfer with perceptual losses</font>

1499
01:09:42,290 --> 01:09:45,969
let's try and do super resolution<font color="#E5E5E5"> with</font>

1500
01:09:45,969 --> 01:09:49,339
multiple content<font color="#CCCCCC"> last</font><font color="#E5E5E5"> layers because</font>

1501
01:09:49,339 --> 01:09:51,020
like that's one thing that<font color="#E5E5E5"> I'm going to</font>

1502
01:09:51,020 --> 01:09:52,939
<font color="#E5E5E5">have to do is they'll transfer is be</font>

1503
01:09:52,939 --> 01:09:55,099
<font color="#E5E5E5">able to use multiple</font><font color="#CCCCCC"> layers so like I</font>

1504
01:09:55,099 --> 01:09:56,210
<font color="#CCCCCC">always like to</font><font color="#E5E5E5"> start with something that</font>

1505
01:09:56,210 --> 01:09:59,389
<font color="#E5E5E5">works and make small</font><font color="#CCCCCC"> little changes</font><font color="#E5E5E5"> so</font>

1506
01:09:59,389 --> 01:10:01,790
it<font color="#E5E5E5"> keeps working at every point so in</font>

1507
01:10:01,790 --> 01:10:05,929
this case I<font color="#E5E5E5"> thought</font><font color="#CCCCCC"> okay let's first of</font>

1508
01:10:05,929 --> 01:10:07,610
all<font color="#E5E5E5"> slightly change the loss function</font>

1509
01:10:07,610 --> 01:10:10,550
<font color="#E5E5E5">tour and took a resolution so</font><font color="#CCCCCC"> that it</font>

1510
01:10:10,550 --> 01:10:13,730
<font color="#CCCCCC">uses multiple layers so here's how I did</font>

1511
01:10:13,730 --> 01:10:18,020
that<font color="#CCCCCC"> I changed my get output layer so I</font>

1512
01:10:18,020 --> 01:10:21,559
changed my PTT content so it created a

1513
01:10:21,559 --> 01:10:25,219
list of outputs<font color="#CCCCCC"> climbs one from each of</font>

1514
01:10:25,219 --> 01:10:27,409
the<font color="#E5E5E5"> first second and third blocks</font><font color="#CCCCCC"> okay</font>

1515
01:10:27,409 --> 01:10:32,570
and then I changed my<font color="#CCCCCC"> loss</font><font color="#E5E5E5"> function so</font>

1516
01:10:32,570 --> 01:10:35,510
it went through and added the mean

1517
01:10:35,510 --> 01:10:37,610
squared difference<font color="#E5E5E5"> for each</font><font color="#CCCCCC"> of those</font>

1518
01:10:37,610 --> 01:10:40,280
three layers I also just have to add a

1519
01:10:40,280 --> 01:10:42,710
weight just<font color="#E5E5E5"> for fun so</font><font color="#CCCCCC"> I decided what to</font>

1520
01:10:42,710 --> 01:10:44,590
go point one point eight<font color="#E5E5E5"> point one</font>

1521
01:10:44,590 --> 01:10:46,790
because this<font color="#CCCCCC"> is the layer that they used</font>

1522
01:10:46,790 --> 01:10:49,639
in the<font color="#E5E5E5"> paper but you know but let's have</font>

1523
01:10:49,639 --> 01:10:51,980
<font color="#E5E5E5">a little bit of you know more precise</font>

1524
01:10:51,980 --> 01:10:53,960
<font color="#E5E5E5">super resolution and a little bit of</font>

1525
01:10:53,960 --> 01:10:55,849
more semantic<font color="#CCCCCC"> sticker</font><font color="#E5E5E5"> resolution see how</font>

1526
01:10:55,849 --> 01:11:00,500
it goes I created it functioned<font color="#E5E5E5"> to kind</font>

1527
01:11:00,500 --> 01:11:03,520
<font color="#CCCCCC">of a</font><font color="#E5E5E5"> more general</font><font color="#CCCCCC"> mean</font><font color="#E5E5E5"> squared error and</font>

1528
01:11:03,520 --> 01:11:06,590
<font color="#CCCCCC">that was basically it</font><font color="#E5E5E5"> so other than</font><font color="#CCCCCC"> that</font>

1529
01:11:06,590 --> 01:11:09,170
line and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> line everything else was</font>

1530
01:11:09,170 --> 01:11:11,540
the<font color="#CCCCCC"> same and so that gave me</font><font color="#E5E5E5"> super</font>

1531
01:11:11,540 --> 01:11:14,719
resolution<font color="#E5E5E5"> working on multiple</font><font color="#CCCCCC"> layers</font>

1532
01:11:14,719 --> 01:11:16,670
<font color="#E5E5E5">and one of the things I found</font>

1533
01:11:16,670 --> 01:11:20,900
fascinating is<font color="#E5E5E5"> that this is the original</font>

1534
01:11:20,900 --> 01:11:23,179
low res and<font color="#CCCCCC"> it</font><font color="#E5E5E5"> done a good job of</font>

1535
01:11:23,179 --> 01:11:25,110
upscaling<font color="#E5E5E5"> it but it's also</font>

1536
01:11:25,110 --> 01:11:27,570
fixed up the weird white balance<font color="#E5E5E5"> which</font>

1537
01:11:27,570 --> 01:11:30,750
really surprised me<font color="#CCCCCC"> right it's thinkin</font>

1538
01:11:30,750 --> 01:11:33,300
this obviously over<font color="#CCCCCC"> yellow is shot and</font>

1539
01:11:33,300 --> 01:11:35,219
this is what<font color="#CCCCCC"> ceramic should look like it</font>

1540
01:11:35,219 --> 01:11:36,960
should<font color="#CCCCCC"> be white</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> and somehow</font>

1541
01:11:36,960 --> 01:11:38,719
<font color="#E5E5E5">it's kind of adjusted everything so the</font>

1542
01:11:38,719 --> 01:11:40,650
30s or whatever it is in the background

1543
01:11:40,650 --> 01:11:42,510
<font color="#CCCCCC">has come from</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Yowie Brown to a nice</font>

1544
01:11:42,510 --> 01:11:45,630
white<font color="#E5E5E5"> as if these</font><font color="#CCCCCC"> cast here I'm going to</font>

1545
01:11:45,630 --> 01:11:46,500
<font color="#CCCCCC">figure</font><font color="#E5E5E5"> it out with these slightly</font>

1546
01:11:46,500 --> 01:11:48,119
pixelated<font color="#E5E5E5"> things they're actually</font><font color="#CCCCCC"> meant</font>

1547
01:11:48,119 --> 01:11:50,670
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> upside</font><font color="#CCCCCC"> down handles now this is</font>

1548
01:11:50,670 --> 01:11:56,100
<font color="#E5E5E5">only</font><font color="#CCCCCC"> 20,000 images so I</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> am</font><font color="#E5E5E5"> very</font>

1549
01:11:56,100 --> 01:11:58,889
surprised<font color="#CCCCCC"> that it's fixing the color</font>

1550
01:11:58,889 --> 01:12:03,840
<font color="#E5E5E5">because we never asked it to but I guess</font>

1551
01:12:03,840 --> 01:12:05,219
it knows what a<font color="#E5E5E5"> cut is meant to look</font>

1552
01:12:05,219 --> 01:12:08,610
like<font color="#E5E5E5"> then so this is what it's decided</font>

1553
01:12:08,610 --> 01:12:10,560
to do is to make a up<font color="#E5E5E5"> to where it thinks</font>

1554
01:12:10,560 --> 01:12:12,600
<font color="#E5E5E5">it's meant to look so that is pretty</font>

1555
01:12:12,600 --> 01:12:14,719
cool

1556
01:12:16,250 --> 01:12:20,400
so so then to go from<font color="#CCCCCC"> there to style</font>

1557
01:12:20,400 --> 01:12:22,079
transfer was pretty straightforward<font color="#CCCCCC"> I</font>

1558
01:12:22,079 --> 01:12:26,219
had to read in<font color="#E5E5E5"> my style as before</font><font color="#CCCCCC"> this</font>

1559
01:12:26,219 --> 01:12:28,889
is<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do their special kind of</font>

1560
01:12:28,889 --> 01:12:31,260
<font color="#CCCCCC">ResNet block where we</font><font color="#E5E5E5"> use valid</font>

1561
01:12:31,260 --> 01:12:34,289
convolutions which means we lose<font color="#E5E5E5"> two</font>

1562
01:12:34,289 --> 01:12:37,019
pixels<font color="#E5E5E5"> each</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> and so therefore we</font>

1563
01:12:37,019 --> 01:12:39,030
have<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> it Center crop I</font><font color="#E5E5E5"> don't forget</font>

1564
01:12:39,030 --> 01:12:41,880
lambda layers are<font color="#E5E5E5"> great for this kind</font><font color="#CCCCCC"> of</font>

1565
01:12:41,880 --> 01:12:43,949
thing<font color="#E5E5E5"> right</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> whatever you whatever</font>

1566
01:12:43,949 --> 01:12:45,480
code you<font color="#E5E5E5"> can write check it in a lambda</font>

1567
01:12:45,480 --> 01:12:47,699
layer<font color="#E5E5E5"> suddenly it's a</font><font color="#CCCCCC"> chaos' layer</font><font color="#E5E5E5"> so do</font>

1568
01:12:47,699 --> 01:12:49,530
<font color="#E5E5E5">my</font><font color="#CCCCCC"> Center crop</font><font color="#E5E5E5"> so this is our resident</font>

1569
01:12:49,530 --> 01:12:53,449
block which does<font color="#E5E5E5"> well it comes</font>

1570
01:12:53,660 --> 01:12:55,550
so this is basically all exactly the

1571
01:12:55,550 --> 01:12:59,330
<font color="#CCCCCC">same we</font><font color="#E5E5E5"> have to do a few down</font><font color="#CCCCCC"> samplings</font>

1572
01:12:59,330 --> 01:13:00,860
and then the<font color="#CCCCCC"> computation in our up</font>

1573
01:13:00,860 --> 01:13:04,480
sampling<font color="#E5E5E5"> just</font><font color="#CCCCCC"> like a supplemental paper</font>

1574
01:13:04,480 --> 01:13:07,820
<font color="#E5E5E5">so the loss function looks a lot like</font>

1575
01:13:07,820 --> 01:13:10,430
the loss function did before but<font color="#E5E5E5"> we've</font>

1576
01:13:10,430 --> 01:13:11,990
got two<font color="#E5E5E5"> extra things what is the</font><font color="#CCCCCC"> ground</font>

1577
01:13:11,990 --> 01:13:15,470
matrix so here is a version of<font color="#E5E5E5"> the</font>

1578
01:13:15,470 --> 01:13:17,780
ground matrix which works a batch at a

1579
01:13:17,780 --> 01:13:20,090
time<font color="#E5E5E5"> now if any of</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> tried to do this</font>

1580
01:13:20,090 --> 01:13:21,410
a<font color="#E5E5E5"> single image at a</font><font color="#CCCCCC"> time</font>

1581
01:13:21,410 --> 01:13:22,610
you would<font color="#E5E5E5"> have gone crazy with</font><font color="#CCCCCC"> that</font>

1582
01:13:22,610 --> 01:13:24,380
slower<font color="#E5E5E5"> talk I</font><font color="#CCCCCC"> saw a few of you</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to</font>

1583
01:13:24,380 --> 01:13:27,560
do that<font color="#E5E5E5"> so here's the batch wise version</font>

1584
01:13:27,560 --> 01:13:30,530
of Graham<font color="#E5E5E5"> metrics and then the second</font>

1585
01:13:30,530 --> 01:13:32,180
thing<font color="#E5E5E5"> I needed to do</font><font color="#CCCCCC"> was somehow</font><font color="#E5E5E5"> feed in</font>

1586
01:13:32,180 --> 01:13:35,420
my style target<font color="#CCCCCC"> okay so another thing I</font>

1587
01:13:35,420 --> 01:13:38,480
thought<font color="#E5E5E5"> some of you do was feed in the</font>

1588
01:13:38,480 --> 01:13:44,180
style target every<font color="#CCCCCC"> time of</font><font color="#E5E5E5"> feed in</font><font color="#CCCCCC"> that</font>

1589
01:13:44,180 --> 01:13:47,900
array into your<font color="#E5E5E5"> loss function now you</font>

1590
01:13:47,900 --> 01:13:49,370
can obviously calculate your<font color="#E5E5E5"> style</font>

1591
01:13:49,370 --> 01:13:53,180
<font color="#E5E5E5">target by just calling dot</font><font color="#CCCCCC"> product</font><font color="#E5E5E5"> right</font>

1592
01:13:53,180 --> 01:13:55,700
with the thing which gives<font color="#E5E5E5"> you</font><font color="#CCCCCC"> your all</font>

1593
01:13:55,700 --> 01:13:57,260
of<font color="#E5E5E5"> your different style target layers</font>

1594
01:13:57,260 --> 01:13:59,270
<font color="#CCCCCC">but the problem is this</font><font color="#E5E5E5"> thing here</font>

1595
01:13:59,270 --> 01:14:01,910
returns an umpire<font color="#E5E5E5"> rain it's a pretty big</font>

1596
01:14:01,910 --> 01:14:04,640
number<font color="#E5E5E5"> array which</font><font color="#CCCCCC"> means that then when</font>

1597
01:14:04,640 --> 01:14:06,860
you want<font color="#CCCCCC"> to use it as a style target and</font>

1598
01:14:06,860 --> 01:14:09,200
training it has to copy<font color="#E5E5E5"> that back to the</font>

1599
01:14:09,200 --> 01:14:13,670
GPU<font color="#E5E5E5"> and copying to the GPU is very very</font>

1600
01:14:13,670 --> 01:14:15,050
very slow<font color="#E5E5E5"> and this is a really</font><font color="#CCCCCC"> big thing</font>

1601
01:14:15,050 --> 01:14:17,390
<font color="#CCCCCC">to copy to the GPU so any of you</font><font color="#E5E5E5"> who</font>

1602
01:14:17,390 --> 01:14:18,830
<font color="#CCCCCC">tries this and I saw some of</font><font color="#E5E5E5"> you try it</font>

1603
01:14:18,830 --> 01:14:24,370
took forever<font color="#CCCCCC"> okay so here's</font><font color="#E5E5E5"> the trick</font>

1604
01:14:24,460 --> 01:14:26,920
called variable art<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> turning</font>

1605
01:14:26,920 --> 01:14:29,590
<font color="#CCCCCC">something into a variable</font><font color="#E5E5E5"> fix it on the</font>

1606
01:14:29,590 --> 01:14:32,890
<font color="#E5E5E5">GPU</font><font color="#CCCCCC"> for you all</font><font color="#E5E5E5"> right so once you've</font>

1607
01:14:32,890 --> 01:14:34,480
done that you can<font color="#CCCCCC"> now treat this as a</font>

1608
01:14:34,480 --> 01:14:38,980
list of symbolic entities which are<font color="#E5E5E5"> the</font>

1609
01:14:38,980 --> 01:14:42,370
GPU versions of this right so I<font color="#E5E5E5"> can now</font>

1610
01:14:42,370 --> 01:14:46,390
call this use this inside<font color="#CCCCCC"> eye</font><font color="#E5E5E5"> GPU code</font>

1611
01:14:46,390 --> 01:14:50,219
so here my style targets<font color="#CCCCCC"> I can use</font>

1612
01:14:50,219 --> 01:14:54,520
inside my<font color="#E5E5E5"> lost function</font><font color="#CCCCCC"> there it</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> I</font>

1613
01:14:54,520 --> 01:14:57,250
can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> inside my loss function</font><font color="#CCCCCC"> and it</font>

1614
01:14:57,250 --> 01:14:59,590
<font color="#E5E5E5">doesn't have to</font><font color="#CCCCCC"> do any copying passing</font>

1615
01:14:59,590 --> 01:15:02,680
forward so there's a subtlety<font color="#CCCCCC"> but if you</font>

1616
01:15:02,680 --> 01:15:04,480
don't get that<font color="#E5E5E5"> subtlety right you're</font>

1617
01:15:04,480 --> 01:15:07,450
<font color="#E5E5E5">going to be waiting for a week or so if</font>

1618
01:15:07,450 --> 01:15:10,570
your code<font color="#CCCCCC"> to finish so those are the</font>

1619
01:15:10,570 --> 01:15:13,150
<font color="#CCCCCC">little subtleties which were necessary</font>

1620
01:15:13,150 --> 01:15:15,730
<font color="#CCCCCC">to get this</font><font color="#E5E5E5"> to work</font><font color="#CCCCCC"> and once you get it</font>

1621
01:15:15,730 --> 01:15:17,320
<font color="#CCCCCC">to</font><font color="#E5E5E5"> work it does exactly the same thing</font>

1622
01:15:17,320 --> 01:15:22,989
<font color="#CCCCCC">basically it before so</font><font color="#E5E5E5"> where this gets</font>

1623
01:15:22,989 --> 01:15:25,840
combined with devise is I want<font color="#E5E5E5"> to try</font>

1624
01:15:25,840 --> 01:15:27,670
something interesting which<font color="#CCCCCC"> is in the</font>

1625
01:15:27,670 --> 01:15:31,000
original perceptual<font color="#CCCCCC"> office paper they</font>

1626
01:15:31,000 --> 01:15:34,330
trained it on on the cocoa data set

1627
01:15:34,330 --> 01:15:37,630
which has 80,000 images which didn't

1628
01:15:37,630 --> 01:15:39,280
seem like many I wanted to know what

1629
01:15:39,280 --> 01:15:40,750
would<font color="#E5E5E5"> happen</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> we trained it on all of</font>

1630
01:15:40,750 --> 01:15:47,350
<font color="#CCCCCC">imagenet so I did so I decided to train</font>

1631
01:15:47,350 --> 01:15:49,510
a<font color="#E5E5E5"> super resolution</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> on all of</font>

1632
01:15:49,510 --> 01:15:53,290
<font color="#E5E5E5">image net and a</font><font color="#CCCCCC"> codes all identical</font><font color="#E5E5E5"> so</font>

1633
01:15:53,290 --> 01:15:56,340
I'm not going<font color="#CCCCCC"> to explain</font><font color="#E5E5E5"> it other than</font>

1634
01:15:56,340 --> 01:15:59,560
you'll notice we don't have the square

1635
01:15:59,560 --> 01:16:00,880
bracket colon square bracket<font color="#CCCCCC"> here</font>

1636
01:16:00,880 --> 01:16:03,040
anymore<font color="#CCCCCC"> all right because</font><font color="#E5E5E5"> we don't</font><font color="#CCCCCC"> want</font>

1637
01:16:03,040 --> 01:16:04,570
<font color="#E5E5E5">to try and read in the entirety of image</font>

1638
01:16:04,570 --> 01:16:06,700
net into<font color="#CCCCCC"> RAM so</font><font color="#E5E5E5"> these are still big</font>

1639
01:16:06,700 --> 01:16:09,430
holes arrays and all the other code is

1640
01:16:09,430 --> 01:16:13,860
identical<font color="#E5E5E5"> until we get to</font>

1641
01:16:14,860 --> 01:16:20,080
here so I use a be called array iterator

1642
01:16:20,080 --> 01:16:27,150
<font color="#CCCCCC">I can't just call</font><font color="#E5E5E5"> dot fit</font><font color="#CCCCCC"> because</font>

1643
01:16:27,669 --> 01:16:31,630
that's it<font color="#CCCCCC"> adopt it generator</font><font color="#E5E5E5"> assumes</font>

1644
01:16:31,630 --> 01:16:35,280
that your iterator<font color="#CCCCCC"> is returning</font><font color="#E5E5E5"> your</font>

1645
01:16:35,280 --> 01:16:39,579
your data and your labels in our<font color="#CCCCCC"> case we</font>

1646
01:16:39,579 --> 01:16:41,380
don't<font color="#E5E5E5"> have data and labels we have two</font>

1647
01:16:41,380 --> 01:16:43,510
<font color="#E5E5E5">things that both get set in as</font><font color="#CCCCCC"> two</font>

1648
01:16:43,510 --> 01:16:46,809
inputs<font color="#E5E5E5"> and our labels are just</font><font color="#CCCCCC"> a list</font><font color="#E5E5E5"> of</font>

1649
01:16:46,809 --> 01:16:50,019
zeros okay<font color="#E5E5E5"> so here's a</font><font color="#CCCCCC"> quick</font><font color="#E5E5E5"> trick</font><font color="#CCCCCC"> and</font>

1650
01:16:50,019 --> 01:16:52,090
just<font color="#CCCCCC"> this answers your</font><font color="#E5E5E5"> earlier question</font>

1651
01:16:52,090 --> 01:16:56,169
about<font color="#E5E5E5"> how do you how do you do multi</font>

1652
01:16:56,169 --> 01:16:58,929
input models on large data<font color="#CCCCCC"> sets</font><font color="#E5E5E5"> and the</font>

1653
01:16:58,929 --> 01:17:01,479
answer is create<font color="#E5E5E5"> your own training loop</font>

1654
01:17:01,479 --> 01:17:04,419
<font color="#E5E5E5">okay create your own training loop which</font>

1655
01:17:04,419 --> 01:17:06,429
lives through a bunch<font color="#E5E5E5"> of iterations and</font>

1656
01:17:06,429 --> 01:17:10,030
<font color="#E5E5E5">then</font><font color="#CCCCCC"> you can grab</font><font color="#E5E5E5"> as many batches of</font>

1657
01:17:10,030 --> 01:17:11,289
data from<font color="#E5E5E5"> as many different</font><font color="#CCCCCC"> iterations</font>

1658
01:17:11,289 --> 01:17:14,469
<font color="#CCCCCC">as you like</font><font color="#E5E5E5"> and then call</font><font color="#CCCCCC"> trained on</font>

1659
01:17:14,469 --> 01:17:17,679
<font color="#E5E5E5">batch</font><font color="#CCCCCC"> right so in my case I big holes</font>

1660
01:17:17,679 --> 01:17:19,510
array iterator<font color="#E5E5E5"> is going to return my</font>

1661
01:17:19,510 --> 01:17:21,939
high resolution and<font color="#E5E5E5"> low</font><font color="#CCCCCC"> resolution</font><font color="#E5E5E5"> batch</font>

1662
01:17:21,939 --> 01:17:24,340
of images<font color="#CCCCCC"> so I go to a bunch of</font>

1663
01:17:24,340 --> 01:17:26,800
iterations<font color="#E5E5E5"> grab one batch of</font><font color="#CCCCCC"> high</font><font color="#E5E5E5"> res</font>

1664
01:17:26,800 --> 01:17:30,360
and<font color="#E5E5E5"> low res images and pass them as my</font>

1665
01:17:30,360 --> 01:17:35,320
two inputs<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Train on batch so this is</font>

1666
01:17:35,320 --> 01:17:38,739
the only code

1667
01:17:38,739 --> 01:17:42,939
I changed<font color="#E5E5E5"> other than changing that fit</font>

1668
01:17:42,939 --> 01:17:47,390
generator<font color="#E5E5E5"> to actually</font><font color="#CCCCCC"> calling back</font>

1669
01:17:47,390 --> 01:17:51,440
so as you can<font color="#E5E5E5"> see this took me four</font><font color="#CCCCCC"> and</font>

1670
01:17:51,440 --> 01:17:54,920
a half hours<font color="#E5E5E5"> to train and I then it</font>

1671
01:17:54,920 --> 01:17:56,270
<font color="#E5E5E5">creates learning rate and I</font><font color="#CCCCCC"> trained for</font>

1672
01:17:56,270 --> 01:17:58,550
<font color="#E5E5E5">another four and</font><font color="#CCCCCC"> a half hours actually I</font>

1673
01:17:58,550 --> 01:18:00,140
did<font color="#E5E5E5"> it overnight last night</font><font color="#CCCCCC"> I only had</font>

1674
01:18:00,140 --> 01:18:02,030
<font color="#E5E5E5">enough time to</font><font color="#CCCCCC"> do about half</font><font color="#E5E5E5"> of imagenet</font>

1675
01:18:02,030 --> 01:18:04,070
so this<font color="#E5E5E5"> isn't even the whole thing but</font>

1676
01:18:04,070 --> 01:18:07,790
check this out so<font color="#CCCCCC"> check that model</font><font color="#E5E5E5"> and</font>

1677
01:18:07,790 --> 01:18:11,930
we're going<font color="#CCCCCC"> to call</font><font color="#E5E5E5"> drop predict on this</font>

1678
01:18:11,930 --> 01:18:16,190
is the original<font color="#CCCCCC"> high-res image here's</font>

1679
01:18:16,190 --> 01:18:20,000
the low res version and here's the

1680
01:18:20,000 --> 01:18:22,310
version<font color="#E5E5E5"> that we've created</font><font color="#CCCCCC"> and as you</font>

1681
01:18:22,310 --> 01:18:24,070
<font color="#E5E5E5">can</font><font color="#CCCCCC"> see it's done</font><font color="#E5E5E5"> a pretty</font>

1682
01:18:24,070 --> 01:18:26,780
extraordinarily good job<font color="#E5E5E5"> you know the</font>

1683
01:18:26,780 --> 01:18:29,510
when you<font color="#CCCCCC"> look at the original</font><font color="#E5E5E5"> ball</font>

1684
01:18:29,510 --> 01:18:32,000
they'll just<font color="#E5E5E5"> kind of a yellow thing here</font>

1685
01:18:32,000 --> 01:18:33,170
it's kind of turned it into a nice

1686
01:18:33,170 --> 01:18:36,260
little<font color="#E5E5E5"> inscription</font><font color="#CCCCCC"> you can see that her</font>

1687
01:18:36,260 --> 01:18:39,770
eyes would like to<font color="#E5E5E5"> grade Lots</font><font color="#CCCCCC"> it's kind</font>

1688
01:18:39,770 --> 01:18:43,190
of<font color="#CCCCCC"> spin</font><font color="#E5E5E5"> turn it into some eyes you can</font>

1689
01:18:43,190 --> 01:18:46,250
<font color="#CCCCCC">see that her you could just tell that's</font>

1690
01:18:46,250 --> 01:18:48,410
an<font color="#CCCCCC"> a</font><font color="#E5E5E5"> maybe if you look carefully</font><font color="#CCCCCC"> now</font>

1691
01:18:48,410 --> 01:18:51,170
it's<font color="#E5E5E5"> very clearly an</font><font color="#CCCCCC"> A so you can see it</font>

1692
01:18:51,170 --> 01:18:57,160
doesn't amazing job of<font color="#CCCCCC"> upscaling</font><font color="#E5E5E5"> this</font>

1693
01:18:57,160 --> 01:19:00,230
<font color="#E5E5E5">Paul is still is this is a fully</font>

1694
01:19:00,230 --> 01:19:02,540
convolutional net and therefore is<font color="#CCCCCC"> not</font>

1695
01:19:02,540 --> 01:19:03,860
specific to any<font color="#E5E5E5"> particular input</font>

1696
01:19:03,860 --> 01:19:06,850
<font color="#E5E5E5">resolution so what I can</font><font color="#CCCCCC"> do is I can</font>

1697
01:19:06,850 --> 01:19:10,330
create<font color="#E5E5E5"> another</font><font color="#CCCCCC"> version of the model</font>

1698
01:19:10,330 --> 01:19:14,990
using our high<font color="#E5E5E5"> risk as the input okay so</font>

1699
01:19:14,990 --> 01:19:16,460
now we're<font color="#CCCCCC"> going to call</font><font color="#E5E5E5"> dot predicts</font>

1700
01:19:16,460 --> 01:19:19,660
with the<font color="#CCCCCC"> high-res input</font>

1701
01:19:21,250 --> 01:19:23,330
and that

1702
01:19:23,330 --> 01:19:25,930
<font color="#E5E5E5">but we get</font><font color="#CCCCCC"> that</font>

1703
01:19:25,930 --> 01:19:29,500
look at that<font color="#E5E5E5"> we can now see</font><font color="#CCCCCC"> all of</font><font color="#E5E5E5"> this</font>

1704
01:19:29,500 --> 01:19:35,010
detail<font color="#E5E5E5"> on the basketball which simply</font>

1705
01:19:35,010 --> 01:19:37,480
none of that<font color="#E5E5E5"> really existed here like it</font>

1706
01:19:37,480 --> 01:19:39,430
<font color="#E5E5E5">was there but pretty hard to see what it</font>

1707
01:19:39,430 --> 01:19:40,600
was<font color="#CCCCCC"> okay</font>

1708
01:19:40,600 --> 01:19:42,400
and like look<font color="#E5E5E5"> at before like look at</font>

1709
01:19:42,400 --> 01:19:44,980
over here<font color="#CCCCCC"> right this</font><font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> gray blob</font>

1710
01:19:44,980 --> 01:19:47,400
here

1711
01:19:49,400 --> 01:19:52,550
here you can see it<font color="#CCCCCC"> it knows it's like</font>

1712
01:19:52,550 --> 01:19:56,870
<font color="#E5E5E5">little bit to pull back</font><font color="#CCCCCC"> here so like we</font>

1713
01:19:56,870 --> 01:19:59,409
can<font color="#E5E5E5"> take any size image and make it</font>

1714
01:19:59,409 --> 01:20:04,850
bigger<font color="#E5E5E5"> and</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> to me is one</font>

1715
01:20:04,850 --> 01:20:07,489
of<font color="#CCCCCC"> the most amazing results I've seen in</font>

1716
01:20:07,489 --> 01:20:09,020
<font color="#E5E5E5">deep learning when we</font><font color="#CCCCCC"> train something</font><font color="#E5E5E5"> on</font>

1717
01:20:09,020 --> 01:20:11,000
nearly<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of imagenet it's a single</font>

1718
01:20:11,000 --> 01:20:13,159
epoch so there's<font color="#E5E5E5"> definitely no</font>

1719
01:20:13,159 --> 01:20:15,670
overfitting<font color="#E5E5E5"> and it's like able to</font>

1720
01:20:15,670 --> 01:20:17,840
recognize what hair is meant to look

1721
01:20:17,840 --> 01:20:20,179
<font color="#CCCCCC">like when pulled back into a bun</font><font color="#E5E5E5"> it's</font>

1722
01:20:20,179 --> 01:20:22,940
pretty pretty extraordinary result I

1723
01:20:22,940 --> 01:20:25,909
think something<font color="#E5E5E5"> else which I only</font>

1724
01:20:25,909 --> 01:20:30,580
<font color="#CCCCCC">realized later is that the</font>

1725
01:20:31,360 --> 01:20:34,639
it's all a bit fuzzy<font color="#E5E5E5"> right I'd like this</font>

1726
01:20:34,639 --> 01:20:37,489
<font color="#E5E5E5">arm in the background for this fuzzy</font>

1727
01:20:37,489 --> 01:20:40,850
the model knows that that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> meant</font><font color="#E5E5E5"> to</font>

1728
01:20:40,850 --> 01:20:44,239
stay<font color="#E5E5E5"> fuzzy it knows what out-of-focus</font>

1729
01:20:44,239 --> 01:20:49,460
<font color="#E5E5E5">things look like</font><font color="#CCCCCC"> so like equally cool is</font>

1730
01:20:49,460 --> 01:20:52,580
not just tell like you know that a<font color="#CCCCCC"> is</font>

1731
01:20:52,580 --> 01:20:55,340
<font color="#E5E5E5">now incredibly precise and accurate that</font>

1732
01:20:55,340 --> 01:20:56,660
<font color="#E5E5E5">the fact</font><font color="#CCCCCC"> that it knows that</font><font color="#E5E5E5"> blurry</font>

1733
01:20:56,660 --> 01:21:01,160
things needs a stable<font color="#E5E5E5"> area so I don't</font>

1734
01:21:01,160 --> 01:21:02,719
know if<font color="#E5E5E5"> you're as amazed that this is I</font>

1735
01:21:02,719 --> 01:21:03,800
am but I thought this was a pretty cool

1736
01:21:03,800 --> 01:21:07,310
<font color="#E5E5E5">result</font><font color="#CCCCCC"> and there you</font><font color="#E5E5E5"> know we could run</font>

1737
01:21:07,310 --> 01:21:10,130
this over<font color="#CCCCCC"> 24 hour period</font><font color="#E5E5E5"> on maybe</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> we</font>

1738
01:21:10,130 --> 01:21:11,960
<font color="#E5E5E5">post of all of</font><font color="#CCCCCC"> imagenet</font><font color="#E5E5E5"> and presumably</font>

1739
01:21:11,960 --> 01:21:14,840
it get even<font color="#CCCCCC"> better still</font><font color="#E5E5E5"> there we go</font>

1740
01:21:14,840 --> 01:21:17,450
<font color="#CCCCCC">ok so let's take a</font><font color="#E5E5E5"> 7 minute break and</font>

1741
01:21:17,450 --> 01:21:23,020
see you back here<font color="#CCCCCC"> at</font><font color="#E5E5E5"> 5:00</font><font color="#CCCCCC"> class station</font>

1742
01:21:24,719 --> 01:21:30,269
<font color="#CCCCCC">in general</font><font color="#E5E5E5"> okay thanks everybody</font>

1743
01:21:31,739 --> 01:21:35,559
that was fun so we're going to<font color="#E5E5E5"> do</font>

1744
01:21:35,559 --> 01:21:38,280
something<font color="#E5E5E5"> else fun</font>

1745
01:21:39,790 --> 01:21:46,490
and that is to look at<font color="#CCCCCC"> Oh actually</font>

1746
01:21:46,490 --> 01:21:48,530
<font color="#E5E5E5">prefer to continue</font><font color="#CCCCCC"> I did want to mention</font>

1747
01:21:48,530 --> 01:21:52,900
one thing<font color="#CCCCCC"> in the homework that I changed</font>

1748
01:21:52,900 --> 01:21:55,930
which is

1749
01:21:56,820 --> 01:22:02,190
<font color="#CCCCCC">I realized in my in my like manually</font>

1750
01:22:02,190 --> 01:22:04,349
created<font color="#CCCCCC"> loss</font><font color="#E5E5E5"> function I was already</font>

1751
01:22:04,349 --> 01:22:10,199
doing<font color="#E5E5E5"> a mean squared error in the</font><font color="#CCCCCC"> last</font>

1752
01:22:10,199 --> 01:22:13,400
function<font color="#E5E5E5"> but then when I like told</font>

1753
01:22:13,400 --> 01:22:15,929
<font color="#CCCCCC">Terrace like make that</font><font color="#E5E5E5"> thing as close to</font>

1754
01:22:15,929 --> 01:22:16,949
zero as possible

1755
01:22:16,949 --> 01:22:18,780
I had to also<font color="#E5E5E5"> give it</font><font color="#CCCCCC"> the loss function</font>

1756
01:22:18,780 --> 01:22:21,840
<font color="#CCCCCC">and I was giving</font><font color="#E5E5E5"> it MSE and effectively</font>

1757
01:22:21,840 --> 01:22:23,460
<font color="#CCCCCC">that was like kind of squaring right</font>

1758
01:22:23,460 --> 01:22:25,619
squared errors<font color="#CCCCCC"> that seemed wrong</font><font color="#E5E5E5"> so I've</font>

1759
01:22:25,619 --> 01:22:28,400
changed<font color="#E5E5E5"> it to M ay e mean absolute error</font>

1760
01:22:28,400 --> 01:22:30,750
<font color="#E5E5E5">so when you look back over</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> notebook</font>

1761
01:22:30,750 --> 01:22:33,659
<font color="#E5E5E5">sense</font><font color="#CCCCCC"> that's why is because this is just</font>

1762
01:22:33,659 --> 01:22:37,110
to say hey get the last as close to zero

1763
01:22:37,110 --> 01:22:40,739
as possible<font color="#CCCCCC"> I didn't really want to read</font>

1764
01:22:40,739 --> 01:22:43,050
where it<font color="#E5E5E5"> that didn't make any</font><font color="#CCCCCC"> sense</font><font color="#E5E5E5"> so</font>

1765
01:22:43,050 --> 01:22:45,119
<font color="#E5E5E5">and that's that's why you'll see that</font>

1766
01:22:45,119 --> 01:22:49,170
<font color="#CCCCCC">minor change the only</font><font color="#E5E5E5"> thing to</font><font color="#CCCCCC"> mention</font>

1767
01:22:49,170 --> 01:22:51,840
is I<font color="#E5E5E5"> I</font><font color="#CCCCCC"> didn't</font><font color="#E5E5E5"> notice</font><font color="#CCCCCC"> that when</font><font color="#E5E5E5"> I</font>

1768
01:22:51,840 --> 01:22:55,619
retrained my<font color="#E5E5E5"> super resolution</font><font color="#CCCCCC"> on my new</font>

1769
01:22:55,619 --> 01:22:57,420
images that didn't have the black border

1770
01:22:57,420 --> 01:23:00,679
<font color="#E5E5E5">it gave good results</font><font color="#CCCCCC"> much much faster</font>

1771
01:23:00,679 --> 01:23:03,270
<font color="#E5E5E5">and so I really</font><font color="#CCCCCC"> think that</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> is like</font>

1772
01:23:03,270 --> 01:23:05,190
learning<font color="#CCCCCC"> to put the black border back in</font>

1773
01:23:05,190 --> 01:23:07,020
<font color="#CCCCCC">seemed to take quite</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> effort</font><font color="#CCCCCC"> for</font>

1774
01:23:07,020 --> 01:23:10,349
<font color="#CCCCCC">it so again</font><font color="#E5E5E5"> hopefully some of you were</font>

1775
01:23:10,349 --> 01:23:14,160
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> look into that in more detail</font>

1776
01:23:14,160 --> 01:23:15,909
<font color="#E5E5E5">um</font>

1777
01:23:15,909 --> 01:23:17,850
so we're<font color="#E5E5E5"> going to learn about</font>

1778
01:23:17,850 --> 01:23:19,690
adversarial<font color="#CCCCCC"> Network generative</font>

1779
01:23:19,690 --> 01:23:21,010
adversarial networks and<font color="#E5E5E5"> this will kind</font>

1780
01:23:21,010 --> 01:23:23,770
of<font color="#E5E5E5"> close off a deep dive into German</font>

1781
01:23:23,770 --> 01:23:26,620
generative models<font color="#E5E5E5"> as applied to</font><font color="#CCCCCC"> images</font>

1782
01:23:26,620 --> 01:23:30,370
and<font color="#CCCCCC"> just you know to remind you the</font>

1783
01:23:30,370 --> 01:23:32,199
purpose of this has<font color="#CCCCCC"> been to learn about</font>

1784
01:23:32,199 --> 01:23:34,690
<font color="#E5E5E5">generative models not so specifically</font>

1785
01:23:34,690 --> 01:23:37,690
learn about<font color="#CCCCCC"> super-resolution</font><font color="#E5E5E5"> or artistic</font>

1786
01:23:37,690 --> 01:23:40,900
<font color="#E5E5E5">style but</font><font color="#CCCCCC"> you know remember these</font><font color="#E5E5E5"> things</font>

1787
01:23:40,900 --> 01:23:42,699
can<font color="#CCCCCC"> be used to create four kinds of</font>

1788
01:23:42,699 --> 01:23:44,100
images so<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the groups is</font>

1789
01:23:44,100 --> 01:23:47,199
interested in<font color="#E5E5E5"> taking a 2d photo and</font>

1790
01:23:47,199 --> 01:23:49,179
trying to turn<font color="#CCCCCC"> it into something</font><font color="#E5E5E5"> that</font>

1791
01:23:49,179 --> 01:23:51,790
<font color="#E5E5E5">you can rotate in 3d or at least show a</font>

1792
01:23:51,790 --> 01:23:53,650
different angle<font color="#E5E5E5"> of that 2d photo and</font>

1793
01:23:53,650 --> 01:23:55,510
that's a great example<font color="#E5E5E5"> of something that</font>

1794
01:23:55,510 --> 01:23:58,210
<font color="#E5E5E5">is</font><font color="#CCCCCC"> you're totally</font><font color="#E5E5E5"> work for you know it's</font>

1795
01:23:58,210 --> 01:24:01,030
just a mapping from one image to some

1796
01:24:01,030 --> 01:24:02,620
different<font color="#CCCCCC"> image just</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> this</font>

1797
01:24:02,620 --> 01:24:04,960
image<font color="#E5E5E5"> look like from above</font><font color="#CCCCCC"> versus from</font>

1798
01:24:04,960 --> 01:24:09,040
the kernel<font color="#CCCCCC"> but</font><font color="#E5E5E5"> keep in mind the purpose</font>

1799
01:24:09,040 --> 01:24:11,800
<font color="#E5E5E5">of this is just like in part one we</font>

1800
01:24:11,800 --> 01:24:14,560
<font color="#CCCCCC">learn about</font><font color="#E5E5E5"> classification which you can</font>

1801
01:24:14,560 --> 01:24:16,389
use<font color="#E5E5E5"> for thousand things now we're</font>

1802
01:24:16,389 --> 01:24:18,070
learning about generative models that

1803
01:24:18,070 --> 01:24:20,800
you can<font color="#E5E5E5"> enter a different</font><font color="#CCCCCC"> certainty</font><font color="#E5E5E5"> now</font>

1804
01:24:20,800 --> 01:24:24,580
any generative model<font color="#E5E5E5"> you build you can</font>

1805
01:24:24,580 --> 01:24:27,790
make it better by adding<font color="#E5E5E5"> on top of it</font>

1806
01:24:27,790 --> 01:24:30,969
again<font color="#CCCCCC"> a generative adversarial</font><font color="#E5E5E5"> Network</font>

1807
01:24:30,969 --> 01:24:33,280
<font color="#CCCCCC">and this is</font><font color="#E5E5E5"> something I don't really</font>

1808
01:24:33,280 --> 01:24:34,389
<font color="#E5E5E5">feel like it's been fully appreciated</font>

1809
01:24:34,389 --> 01:24:37,270
<font color="#CCCCCC">people I've seen generally</font><font color="#E5E5E5"> tree scans as</font>

1810
01:24:37,270 --> 01:24:40,030
a different<font color="#E5E5E5"> way of creating</font><font color="#CCCCCC"> a job</font><font color="#E5E5E5"> that a</font>

1811
01:24:40,030 --> 01:24:43,060
generative<font color="#E5E5E5"> model</font><font color="#CCCCCC"> but I think of this</font>

1812
01:24:43,060 --> 01:24:45,159
<font color="#E5E5E5">more</font><font color="#CCCCCC"> is like why not create your</font>

1813
01:24:45,159 --> 01:24:46,449
generative model using the<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font>

1814
01:24:46,449 --> 01:24:49,060
techniques we've been talking<font color="#CCCCCC"> about</font>

1815
01:24:49,060 --> 01:24:50,950
but then think of it<font color="#E5E5E5"> this way think of</font>

1816
01:24:50,950 --> 01:24:54,580
that<font color="#E5E5E5"> all the artistic style stuff we</font>

1817
01:24:54,580 --> 01:24:57,820
were doing<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> the like my terrible</font>

1818
01:24:57,820 --> 01:25:01,510
<font color="#E5E5E5">attempt at a Simpsons cartoon version of</font>

1819
01:25:01,510 --> 01:25:03,970
<font color="#E5E5E5">the picture and it looked nothing like</font>

1820
01:25:03,970 --> 01:25:05,970
<font color="#CCCCCC">The Simpsons</font>

1821
01:25:05,970 --> 01:25:09,100
so what<font color="#CCCCCC"> would</font><font color="#E5E5E5"> be one way to</font><font color="#CCCCCC"> improve that</font>

1822
01:25:09,100 --> 01:25:12,160
<font color="#CCCCCC">but one way to improve that would be to</font>

1823
01:25:12,160 --> 01:25:17,170
<font color="#E5E5E5">create two networks there would be one</font>

1824
01:25:17,170 --> 01:25:21,220
network<font color="#E5E5E5"> that takes our picture which is</font>

1825
01:25:21,220 --> 01:25:24,070
<font color="#CCCCCC">actually not</font><font color="#E5E5E5"> the Simpsons</font><font color="#CCCCCC"> and takes</font>

1826
01:25:24,070 --> 01:25:25,480
<font color="#E5E5E5">another picture</font><font color="#CCCCCC"> that actually is</font>

1827
01:25:25,480 --> 01:25:28,330
Simpsons<font color="#E5E5E5"> and maybe we can train a neural</font>

1828
01:25:28,330 --> 01:25:30,220
<font color="#E5E5E5">network that takes those</font><font color="#CCCCCC"> two photos</font>

1829
01:25:30,220 --> 01:25:33,460
<font color="#E5E5E5">throw those two</font><font color="#CCCCCC"> images and spits out</font>

1830
01:25:33,460 --> 01:25:37,930
something saying is that a real Simpsons

1831
01:25:37,930 --> 01:25:42,070
image or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> okay and this thing will</font>

1832
01:25:42,070 --> 01:25:46,830
call the discriminator

1833
01:25:48,489 --> 01:25:50,920
so we could easily train a discriminator

1834
01:25:50,920 --> 01:25:52,869
right now right<font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> a</font>

1835
01:25:52,869 --> 01:25:54,489
classification networks just<font color="#E5E5E5"> use the</font>

1836
01:25:54,489 --> 01:25:56,860
same techniques<font color="#CCCCCC"> we used in part</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> we</font>

1837
01:25:56,860 --> 01:26:00,159
<font color="#CCCCCC">feed it the two</font><font color="#E5E5E5"> images and it's going to</font>

1838
01:26:00,159 --> 01:26:02,949
<font color="#E5E5E5">spit out a one if it's a real Simpsons</font>

1839
01:26:02,949 --> 01:26:05,829
cartoon<font color="#E5E5E5"> and a zero if it's Jeremy's</font>

1840
01:26:05,829 --> 01:26:09,249
crappy generative model of Simpsons<font color="#CCCCCC"> it's</font>

1841
01:26:09,249 --> 01:26:10,599
easy right<font color="#E5E5E5"> we know how to do that right</font>

1842
01:26:10,599 --> 01:26:10,979
now

1843
01:26:10,979 --> 01:26:15,869
<font color="#E5E5E5">okay go and build that now</font>

1844
01:26:16,149 --> 01:26:21,090
go and build another model

1845
01:26:22,440 --> 01:26:28,830
hi that's<font color="#E5E5E5"> room</font><font color="#CCCCCC"> there's two images is</font>

1846
01:26:28,830 --> 01:26:31,520
input yeah

1847
01:26:31,520 --> 01:26:33,600
<font color="#E5E5E5">wonderful</font>

1848
01:26:33,600 --> 01:26:36,300
what was that<font color="#CCCCCC"> or do people</font><font color="#E5E5E5"> know so you</font>

1849
01:26:36,300 --> 01:26:38,100
would feed it one thing<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the</font>

1850
01:26:38,100 --> 01:26:39,740
<font color="#CCCCCC">symptoms and one thing</font><font color="#E5E5E5"> that's a</font>

1851
01:26:39,740 --> 01:26:43,560
generative output it's up<font color="#E5E5E5"> to you to feed</font>

1852
01:26:43,560 --> 01:26:48,630
it<font color="#E5E5E5"> one one of each</font><font color="#CCCCCC"> okay or alternatively</font>

1853
01:26:48,630 --> 01:26:51,570
you<font color="#E5E5E5"> could feed it one thing in fact</font>

1854
01:26:51,570 --> 01:26:52,890
probably<font color="#E5E5E5"> easier is</font><font color="#CCCCCC"> to just to feed it</font>

1855
01:26:52,890 --> 01:26:55,620
one thing and it spits out is it<font color="#E5E5E5"> the</font>

1856
01:26:55,620 --> 01:26:57,210
<font color="#E5E5E5">Simpsons or</font><font color="#CCCCCC"> is it isn't</font><font color="#E5E5E5"> it the Simpsons</font>

1857
01:26:57,210 --> 01:26:58,800
and you could just<font color="#E5E5E5"> mix the matter</font>

1858
01:26:58,800 --> 01:27:00,660
<font color="#CCCCCC">actually it's the latter</font><font color="#E5E5E5"> that we're</font>

1859
01:27:00,660 --> 01:27:06,870
going to do so that's probably easier<font color="#E5E5E5"> as</font>

1860
01:27:06,870 --> 01:27:09,870
my<font color="#CCCCCC"> original wedding</font><font color="#E5E5E5"> yes</font><font color="#CCCCCC"> we're going to</font>

1861
01:27:09,870 --> 01:27:11,190
<font color="#CCCCCC">have one thing</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is either not a</font>

1862
01:27:11,190 --> 01:27:13,980
Simpsons or it is a Simpsons<font color="#E5E5E5"> and we're</font>

1863
01:27:13,980 --> 01:27:15,630
going to<font color="#E5E5E5"> have a bit of mix of 50/50 of</font>

1864
01:27:15,630 --> 01:27:17,640
<font color="#E5E5E5">those two</font>

1865
01:27:17,640 --> 01:27:19,440
and we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to have something come</font>

1866
01:27:19,440 --> 01:27:22,050
out saying<font color="#E5E5E5"> what do you think is it real</font>

1867
01:27:22,050 --> 01:27:26,100
or not so<font color="#CCCCCC"> this thing this discriminator</font>

1868
01:27:26,100 --> 01:27:27,750
<font color="#E5E5E5">from now on will probably generally to</font>

1869
01:27:27,750 --> 01:27:30,450
this be calling it<font color="#E5E5E5"> d thanks is the</font><font color="#CCCCCC"> thing</font>

1870
01:27:30,450 --> 01:27:32,130
<font color="#CCCCCC">Cordy</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we can think</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that as a</font>

1871
01:27:32,130 --> 01:27:35,190
function<font color="#E5E5E5"> right C is a function that</font>

1872
01:27:35,190 --> 01:27:38,720
<font color="#CCCCCC">takes some input X</font>

1873
01:27:38,720 --> 01:27:42,950
which is an image<font color="#E5E5E5"> right and fits out a 1</font>

1874
01:27:42,950 --> 01:27:47,410
or a<font color="#E5E5E5"> 0 or</font><font color="#CCCCCC"> maybe a probability</font>

1875
01:27:48,599 --> 01:27:50,689
what we could now do is create another

1876
01:27:50,689 --> 01:27:54,869
neural network<font color="#CCCCCC"> and what this neural</font>

1877
01:27:54,869 --> 01:27:56,429
<font color="#CCCCCC">network is going</font><font color="#E5E5E5"> to do is it's going to</font>

1878
01:27:56,429 --> 01:28:00,800
take as input<font color="#E5E5E5"> some random noise</font>

1879
01:28:00,870 --> 01:28:03,690
<font color="#E5E5E5">just like our all</font><font color="#CCCCCC"> of our</font><font color="#E5E5E5"> generators have</font>

1880
01:28:03,690 --> 01:28:06,650
so far<font color="#E5E5E5"> okay and it's going to spit out</font>

1881
01:28:06,650 --> 01:28:10,070
an image

1882
01:28:11,720 --> 01:28:14,330
and the<font color="#E5E5E5"> lost function</font><font color="#CCCCCC"> is going to</font><font color="#E5E5E5"> be if</font>

1883
01:28:14,330 --> 01:28:16,040
you take that image and<font color="#E5E5E5"> stick it through</font>

1884
01:28:16,040 --> 01:28:18,580
<font color="#E5E5E5">D</font>

1885
01:28:20,200 --> 01:28:23,090
did you manage<font color="#CCCCCC"> to</font><font color="#E5E5E5"> fool us</font>

1886
01:28:23,090 --> 01:28:25,280
<font color="#E5E5E5">all right so could you create something</font>

1887
01:28:25,280 --> 01:28:27,430
where<font color="#E5E5E5"> in fact we want it to say</font><font color="#CCCCCC"> oh yeah</font>

1888
01:28:27,430 --> 01:28:29,570
totally<font color="#CCCCCC"> that's a simple that's a real</font>

1889
01:28:29,570 --> 01:28:33,140
Simpsons so if<font color="#E5E5E5"> that was our last</font>

1890
01:28:33,140 --> 01:28:35,180
function<font color="#E5E5E5"> but we're going to call this</font>

1891
01:28:35,180 --> 01:28:37,490
<font color="#E5E5E5">the generator for call it G right it's</font>

1892
01:28:37,490 --> 01:28:39,640
<font color="#E5E5E5">just something exactly</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> our</font>

1893
01:28:39,640 --> 01:28:42,260
perceptual losses style transfer<font color="#E5E5E5"> model</font>

1894
01:28:42,260 --> 01:28:43,970
could be<font color="#E5E5E5"> exactly the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> model okay</font>

1895
01:28:43,970 --> 01:28:46,790
that the<font color="#CCCCCC"> last function is now going to</font>

1896
01:28:46,790 --> 01:28:48,980
<font color="#E5E5E5">be</font><font color="#CCCCCC"> take the output of that</font><font color="#E5E5E5"> and stick it</font>

1897
01:28:48,980 --> 01:28:51,710
through D the discriminator<font color="#E5E5E5"> and try to</font>

1898
01:28:51,710 --> 01:28:54,380
trick it right so the generators doing

1899
01:28:54,380 --> 01:28:56,720
well if the discriminate<font color="#E5E5E5"> is getting it</font>

1900
01:28:56,720 --> 01:28:58,389
wrong

1901
01:28:58,389 --> 01:29:01,270
<font color="#E5E5E5">in fact so one way to do this would be</font>

1902
01:29:01,270 --> 01:29:04,690
<font color="#E5E5E5">to</font><font color="#CCCCCC"> take our discriminator</font><font color="#E5E5E5"> and train it</font>

1903
01:29:04,690 --> 01:29:06,580
as<font color="#E5E5E5"> best as we can</font><font color="#CCCCCC"> to recognize</font><font color="#E5E5E5"> the</font>

1904
01:29:06,580 --> 01:29:08,619
difference between<font color="#E5E5E5"> our crappy Simpsons</font>

1905
01:29:08,619 --> 01:29:11,440
and real Simpsons<font color="#E5E5E5"> and then get a</font>

1906
01:29:11,440 --> 01:29:14,350
generator<font color="#E5E5E5"> and train it to trick that</font>

1907
01:29:14,350 --> 01:29:16,960
discriminator<font color="#E5E5E5"> but now at the end of that</font>

1908
01:29:16,960 --> 01:29:18,159
it's<font color="#E5E5E5"> probably still not very good</font>

1909
01:29:18,159 --> 01:29:19,570
<font color="#CCCCCC">because</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> realize</font><font color="#E5E5E5"> that actually</font><font color="#CCCCCC"> a</font>

1910
01:29:19,570 --> 01:29:21,580
discriminator<font color="#E5E5E5"> didn't have to be very</font>

1911
01:29:21,580 --> 01:29:23,380
good<font color="#CCCCCC"> before because my</font><font color="#E5E5E5"> Simpsons</font>

1912
01:29:23,380 --> 01:29:25,179
generators were so bad

1913
01:29:25,179 --> 01:29:27,340
so I could now go back and<font color="#E5E5E5"> retrain the</font>

1914
01:29:27,340 --> 01:29:30,429
discriminator<font color="#E5E5E5"> based on my better</font>

1915
01:29:30,429 --> 01:29:32,440
generated images<font color="#E5E5E5"> and then I can go back</font>

1916
01:29:32,440 --> 01:29:35,469
<font color="#CCCCCC">and retrain the generator</font><font color="#E5E5E5"> and back and</font>

1917
01:29:35,469 --> 01:29:38,500
forth I go<font color="#E5E5E5"> and then is the general</font>

1918
01:29:38,500 --> 01:29:41,830
approach<font color="#CCCCCC"> of again</font><font color="#E5E5E5"> is to keep going</font><font color="#CCCCCC"> back</font>

1919
01:29:41,830 --> 01:29:44,080
<font color="#E5E5E5">between two things which is training a</font>

1920
01:29:44,080 --> 01:29:48,730
discriminator<font color="#CCCCCC"> and training a generator</font>

1921
01:29:48,730 --> 01:29:50,670
using a discriminator as a loss function

1922
01:29:50,670 --> 01:29:55,139
<font color="#E5E5E5">so we've got one thing which is</font>

1923
01:29:55,710 --> 01:29:58,260
<font color="#CCCCCC">discriminator</font><font color="#E5E5E5"> on some image and another</font>

1924
01:29:58,260 --> 01:30:02,300
thing which is<font color="#E5E5E5"> a discriminator</font><font color="#CCCCCC"> on a</font>

1925
01:30:02,300 --> 01:30:07,760
<font color="#CCCCCC">generator on some noise</font>

1926
01:30:07,890 --> 01:30:09,950
you

1927
01:30:15,470 --> 01:30:18,720
yeah yeah so in practice<font color="#E5E5E5"> these</font><font color="#CCCCCC"> things</font>

1928
01:30:18,720 --> 01:30:23,120
are going<font color="#CCCCCC"> to spit out probabilities</font>

1929
01:30:23,939 --> 01:30:27,570
<font color="#E5E5E5">okay so that's the general idea</font><font color="#CCCCCC"> in</font>

1930
01:30:27,570 --> 01:30:34,090
practice they found it<font color="#CCCCCC"> very difficult to</font>

1931
01:30:34,090 --> 01:30:36,579
<font color="#E5E5E5">do this like train the discriminator as</font>

1932
01:30:36,579 --> 01:30:39,579
best as we<font color="#CCCCCC"> can stop</font><font color="#E5E5E5"> train the generator</font>

1933
01:30:39,579 --> 01:30:44,530
as best as we<font color="#CCCCCC"> can so instead of what the</font>

1934
01:30:44,530 --> 01:30:47,229
original<font color="#E5E5E5"> gand paper that's fine then</font>

1935
01:30:47,229 --> 01:30:49,749
right now the original<font color="#CCCCCC"> gand paper is</font>

1936
01:30:49,749 --> 01:30:53,619
called generative adversarial<font color="#CCCCCC"> Nets and</font>

1937
01:30:53,619 --> 01:30:56,380
what they did was<font color="#E5E5E5"> to and here you can</font>

1938
01:30:56,380 --> 01:30:57,939
see they've actually specified this<font color="#CCCCCC"> loss</font>

1939
01:30:57,939 --> 01:30:59,919
<font color="#E5E5E5">function so</font><font color="#CCCCCC"> here it is a notation</font><font color="#E5E5E5"> right</font>

1940
01:30:59,919 --> 01:31:06,099
<font color="#E5E5E5">is</font><font color="#CCCCCC"> two and they call it minimizing the</font>

1941
01:31:06,099 --> 01:31:08,169
generator<font color="#CCCCCC"> whilst maximizing the</font>

1942
01:31:08,169 --> 01:31:11,019
discriminator<font color="#E5E5E5"> this is what</font><font color="#CCCCCC"> min max is</font>

1943
01:31:11,019 --> 01:31:15,309
referring to what they do in<font color="#CCCCCC"> practice</font><font color="#E5E5E5"> is</font>

1944
01:31:15,309 --> 01:31:17,530
they do it a batch at a time<font color="#E5E5E5"> and so they</font>

1945
01:31:17,530 --> 01:31:18,909
have a loop I'm going<font color="#E5E5E5"> to go through a</font>

1946
01:31:18,909 --> 01:31:21,159
loop into a single batch through the

1947
01:31:21,159 --> 01:31:23,800
discriminator<font color="#E5E5E5"> that same batch stick it</font>

1948
01:31:23,800 --> 01:31:26,050
through the generator and so we're going

1949
01:31:26,050 --> 01:31:28,959
to do it a batch at a time<font color="#E5E5E5"> so let's look</font>

1950
01:31:28,959 --> 01:31:32,110
at that<font color="#CCCCCC"> so here's the original game</font><font color="#E5E5E5"> from</font>

1951
01:31:32,110 --> 01:31:35,409
that paper and we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do it on</font><font color="#E5E5E5"> M</font>

1952
01:31:35,409 --> 01:31:37,570
<font color="#E5E5E5">list</font><font color="#CCCCCC"> and what we're</font><font color="#E5E5E5"> going to do is we're</font>

1953
01:31:37,570 --> 01:31:38,949
going<font color="#CCCCCC"> to see if we</font><font color="#E5E5E5"> can start from</font>

1954
01:31:38,949 --> 01:31:41,590
<font color="#CCCCCC">scratch</font><font color="#E5E5E5"> to create something which can</font>

1955
01:31:41,590 --> 01:31:47,079
<font color="#E5E5E5">create images which</font><font color="#CCCCCC"> the discriminator</font>

1956
01:31:47,079 --> 01:31:50,459
<font color="#E5E5E5">cannot tell whether they're real or fake</font>

1957
01:31:50,459 --> 01:31:53,229
<font color="#CCCCCC">and it's a discriminator that has</font><font color="#E5E5E5"> LEDs</font>

1958
01:31:53,229 --> 01:31:55,179
the good at discriminating real from

1959
01:31:55,179 --> 01:31:58,840
fake pictures of<font color="#CCCCCC"> init endless images so</font>

1960
01:31:58,840 --> 01:32:01,929
<font color="#E5E5E5">a</font><font color="#CCCCCC"> loaded in earnest</font><font color="#E5E5E5"> and the first thing</font>

1961
01:32:01,929 --> 01:32:03,579
they do in the paper is<font color="#E5E5E5"> just used a</font>

1962
01:32:03,579 --> 01:32:09,340
standard<font color="#CCCCCC"> multilayered cetera</font><font color="#E5E5E5"> so under</font>

1963
01:32:09,340 --> 01:32:11,579
skip over that<font color="#E5E5E5"> and let's get to the</font>

1964
01:32:11,579 --> 01:32:15,309
perceptron so here's our generator<font color="#E5E5E5"> it's</font>

1965
01:32:15,309 --> 01:32:17,280
just a standard multi-layer perceptron

1966
01:32:17,280 --> 01:32:20,019
<font color="#CCCCCC">and here's our discriminator which is</font>

1967
01:32:20,019 --> 01:32:22,679
also<font color="#E5E5E5"> a standard multi-layer perceptron</font>

1968
01:32:22,679 --> 01:32:25,510
<font color="#CCCCCC">their generator has a sigmoid activation</font>

1969
01:32:25,510 --> 01:32:27,399
so in other words we're<font color="#E5E5E5"> going to spit</font>

1970
01:32:27,399 --> 01:32:30,459
out an image<font color="#E5E5E5"> where all of the pixels are</font>

1971
01:32:30,459 --> 01:32:32,139
<font color="#E5E5E5">between 0</font><font color="#CCCCCC"> and 1 so if you want to print</font>

1972
01:32:32,139 --> 01:32:34,599
<font color="#CCCCCC">it out we'll just multiply it</font><font color="#E5E5E5"> by 255 I</font>

1973
01:32:34,599 --> 01:32:36,059
guess

1974
01:32:36,059 --> 01:32:37,500
so there's our<font color="#E5E5E5"> generator there's our</font>

1975
01:32:37,500 --> 01:32:41,340
discriminator so there's then the

1976
01:32:41,340 --> 01:32:42,510
combination<font color="#CCCCCC"> of the two</font>

1977
01:32:42,510 --> 01:32:44,190
so take the generator and stick it into

1978
01:32:44,190 --> 01:32:45,780
the discriminator<font color="#E5E5E5"> so we can just use</font>

1979
01:32:45,780 --> 01:32:48,030
<font color="#E5E5E5">sequential for that and this is actually</font>

1980
01:32:48,030 --> 01:32:50,760
<font color="#CCCCCC">therefore the loss function that I</font><font color="#E5E5E5"> want</font>

1981
01:32:50,760 --> 01:32:53,190
on my<font color="#E5E5E5"> generator is generate something</font>

1982
01:32:53,190 --> 01:32:54,570
and then carefully<font color="#CCCCCC"> fold the</font>

1983
01:32:54,570 --> 01:32:56,270
discriminator

1984
01:32:56,270 --> 01:33:01,550
so<font color="#E5E5E5"> these are my architectures</font><font color="#CCCCCC"> setup so</font>

1985
01:33:01,550 --> 01:33:02,720
the next thing I<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to do is set up</font>

1986
01:33:02,720 --> 01:33:04,550
this<font color="#CCCCCC"> thing called</font><font color="#E5E5E5"> train which is</font><font color="#CCCCCC"> going</font>

1987
01:33:04,550 --> 01:33:07,700
<font color="#E5E5E5">to do this adversarial training let's go</font>

1988
01:33:07,700 --> 01:33:10,540
back and<font color="#E5E5E5"> have a look</font><font color="#CCCCCC"> at train</font>

1989
01:33:10,620 --> 01:33:12,300
so what train<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to going to do is</font>

1990
01:33:12,300 --> 01:33:13,500
going<font color="#E5E5E5"> to go through a bunch</font><font color="#CCCCCC"> of epochs</font>

1991
01:33:13,500 --> 01:33:17,700
<font color="#E5E5E5">and notice here I wrap it in this TQ DM</font>

1992
01:33:17,700 --> 01:33:19,050
this is the thing<font color="#CCCCCC"> that creates a</font><font color="#E5E5E5"> magical</font>

1993
01:33:19,050 --> 01:33:21,150
progress bar doesn't do anything<font color="#E5E5E5"> else to</font>

1994
01:33:21,150 --> 01:33:22,590
just create a<font color="#E5E5E5"> little progress bar</font><font color="#CCCCCC"> we</font>

1995
01:33:22,590 --> 01:33:24,900
<font color="#CCCCCC">learned about</font><font color="#E5E5E5"> that last week</font>

1996
01:33:24,900 --> 01:33:27,530
so the first thing I<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to do is to</font>

1997
01:33:27,530 --> 01:33:30,360
<font color="#E5E5E5">generate some data to feed the</font>

1998
01:33:30,360 --> 01:33:31,890
discriminator<font color="#CCCCCC"> so create a little</font>

1999
01:33:31,890 --> 01:33:34,140
function to that<font color="#CCCCCC"> and here's my little</font>

2000
01:33:34,140 --> 01:33:36,480
function so it's going to create a

2001
01:33:36,480 --> 01:33:38,370
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of data that's real and a</font>

2002
01:33:38,370 --> 01:33:41,130
little bit of data to<font color="#E5E5E5"> fake</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so my</font>

2003
01:33:41,130 --> 01:33:43,470
real data is okay let's go<font color="#E5E5E5"> into my</font>

2004
01:33:43,470 --> 01:33:46,500
<font color="#CCCCCC">actual training</font><font color="#E5E5E5"> set and grab some</font>

2005
01:33:46,500 --> 01:33:50,400
randomly selected emne stitches that's

2006
01:33:50,400 --> 01:33:54,690
my real<font color="#E5E5E5"> bit and then let's create some</font>

2007
01:33:54,690 --> 01:33:58,200
fake right so noise is a function<font color="#CCCCCC"> that</font>

2008
01:33:58,200 --> 01:33:59,340
I've just<font color="#E5E5E5"> created up</font><font color="#CCCCCC"> here which is</font>

2009
01:33:59,340 --> 01:34:02,640
<font color="#E5E5E5">create some 100 random numbers okay</font>

2010
01:34:02,640 --> 01:34:06,410
so let's create some noise<font color="#E5E5E5"> orgy predict</font>

2011
01:34:06,410 --> 01:34:08,850
right and so then<font color="#E5E5E5"> I can catenate the two</font>

2012
01:34:08,850 --> 01:34:10,980
together<font color="#E5E5E5"> so</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> I've got some real data</font>

2013
01:34:10,980 --> 01:34:14,550
<font color="#CCCCCC">and some fake data and so this is going</font>

2014
01:34:14,550 --> 01:34:16,950
<font color="#CCCCCC">to try</font><font color="#E5E5E5"> and predict whether</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> not</font>

2015
01:34:16,950 --> 01:34:17,790
something<font color="#E5E5E5"> is fake</font>

2016
01:34:17,790 --> 01:34:22,410
so<font color="#E5E5E5"> one means fake</font><font color="#CCCCCC"> zero means real so I'm</font>

2017
01:34:22,410 --> 01:34:27,270
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> return my my data and my</font><font color="#CCCCCC"> maples</font>

2018
01:34:27,270 --> 01:34:29,430
<font color="#CCCCCC">which is a bunch of</font><font color="#E5E5E5"> zeros say they're</font>

2019
01:34:29,430 --> 01:34:31,200
all real<font color="#CCCCCC"> a</font><font color="#E5E5E5"> bunch of ones to say they are</font>

2020
01:34:31,200 --> 01:34:33,030
all fake okay so there's my

2021
01:34:33,030 --> 01:34:35,780
<font color="#CCCCCC">discriminative data now go ahead</font><font color="#E5E5E5"> and</font>

2022
01:34:35,780 --> 01:34:38,460
<font color="#E5E5E5">create</font><font color="#CCCCCC"> a set of</font><font color="#E5E5E5"> data for the</font>

2023
01:34:38,460 --> 01:34:41,880
discriminator and then do one batch of

2024
01:34:41,880 --> 01:34:44,390
<font color="#E5E5E5">training</font>

2025
01:34:44,550 --> 01:34:47,500
now I'm going to<font color="#E5E5E5"> do the same thing for</font>

2026
01:34:47,500 --> 01:34:49,510
the generator<font color="#CCCCCC"> but when I train the</font>

2027
01:34:49,510 --> 01:34:51,490
generator<font color="#CCCCCC"> I don't want to change the</font>

2028
01:34:51,490 --> 01:34:54,460
discriminators weights<font color="#E5E5E5"> right so make</font>

2029
01:34:54,460 --> 01:34:56,470
trainable<font color="#E5E5E5"> simply go through</font><font color="#CCCCCC"> each layer</font>

2030
01:34:56,470 --> 01:34:57,820
<font color="#E5E5E5">and</font><font color="#CCCCCC"> said it's not trainable</font>

2031
01:34:57,820 --> 01:34:59,890
so make my<font color="#E5E5E5"> discriminator non trainable</font>

2032
01:34:59,890 --> 01:35:03,910
<font color="#E5E5E5">and do one batch</font><font color="#CCCCCC"> of training</font><font color="#E5E5E5"> where I'm</font>

2033
01:35:03,910 --> 01:35:08,320
taking noise<font color="#E5E5E5"> there's my inputs and my</font>

2034
01:35:08,320 --> 01:35:10,900
goal is<font color="#CCCCCC"> to get the discriminator</font><font color="#E5E5E5"> to</font>

2035
01:35:10,900 --> 01:35:14,749
think that they are<font color="#E5E5E5"> actually real</font>

2036
01:35:14,749 --> 01:35:16,610
<font color="#CCCCCC">so</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> why I'm passing in a bunch of</font>

2037
01:35:16,610 --> 01:35:19,570
<font color="#CCCCCC">zeros because remember</font><font color="#E5E5E5"> zero means real</font>

2038
01:35:19,570 --> 01:35:21,530
and that's it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then make</font>

2039
01:35:21,530 --> 01:35:23,360
discriminator trainable again<font color="#E5E5E5"> so keep</font>

2040
01:35:23,360 --> 01:35:25,159
working<font color="#E5E5E5"> through this train the</font>

2041
01:35:25,159 --> 01:35:29,030
discriminator<font color="#E5E5E5"> on a batch of up real</font>

2042
01:35:29,030 --> 01:35:31,820
half-baked and then train the generator

2043
01:35:31,820 --> 01:35:35,030
to try and trick the discriminator<font color="#E5E5E5"> using</font>

2044
01:35:35,030 --> 01:35:38,980
<font color="#E5E5E5">all fake repeat</font>

2045
01:35:38,980 --> 01:35:41,380
so that's the training loop<font color="#E5E5E5"> that's a</font>

2046
01:35:41,380 --> 01:35:44,890
basic game<font color="#CCCCCC"> because we use TQ DM we get</font>

2047
01:35:44,890 --> 01:35:49,300
an astral progress bar<font color="#CCCCCC"> we can plot out</font>

2048
01:35:49,300 --> 01:35:51,310
the<font color="#CCCCCC"> I kept track</font><font color="#E5E5E5"> of the last</font><font color="#CCCCCC"> at each</font>

2049
01:35:51,310 --> 01:35:53,500
step<font color="#E5E5E5"> so there's our lofts for the</font>

2050
01:35:53,500 --> 01:35:55,420
discriminator<font color="#CCCCCC"> and there's our loss to</font>

2051
01:35:55,420 --> 01:35:58,360
the generator so<font color="#CCCCCC"> a question</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> what are</font>

2052
01:35:58,360 --> 01:35:59,680
these lost<font color="#CCCCCC"> curves mean are they good or</font>

2053
01:35:59,680 --> 01:36:02,820
bad like

2054
01:36:02,820 --> 01:36:05,280
how do we<font color="#E5E5E5"> know and the</font><font color="#CCCCCC"> answer is but</font>

2055
01:36:05,280 --> 01:36:07,410
<font color="#CCCCCC">this kind of can they mean</font><font color="#E5E5E5"> nothing at</font>

2056
01:36:07,410 --> 01:36:10,110
all like<font color="#E5E5E5"> the generator could get</font>

2057
01:36:10,110 --> 01:36:12,030
<font color="#CCCCCC">fantastic but it could</font><font color="#E5E5E5"> be because</font><font color="#CCCCCC"> the</font>

2058
01:36:12,030 --> 01:36:14,310
discriminate<font color="#E5E5E5"> is terrible</font><font color="#CCCCCC"> and like they</font>

2059
01:36:14,310 --> 01:36:16,290
<font color="#CCCCCC">don't really know whether each one is</font>

2060
01:36:16,290 --> 01:36:18,450
good or not<font color="#CCCCCC"> so like even the order of</font>

2061
01:36:18,450 --> 01:36:19,860
magnitude<font color="#CCCCCC"> of</font><font color="#E5E5E5"> both of them is meaningless</font>

2062
01:36:19,860 --> 01:36:23,340
<font color="#CCCCCC">so these curves</font><font color="#E5E5E5"> me nothing the direction</font>

2063
01:36:23,340 --> 01:36:25,530
<font color="#E5E5E5">of the curves mean nothing and this is</font>

2064
01:36:25,530 --> 01:36:26,640
one<font color="#E5E5E5"> of the real difficulty through</font>

2065
01:36:26,640 --> 01:36:30,540
training<font color="#E5E5E5"> dance</font><font color="#CCCCCC"> and here's what happens</font>

2066
01:36:30,540 --> 01:36:34,950
when<font color="#CCCCCC"> I plot 12 randomly selected</font><font color="#E5E5E5"> random</font>

2067
01:36:34,950 --> 01:36:38,040
noise<font color="#E5E5E5"> vectors duck through there and we</font>

2068
01:36:38,040 --> 01:36:39,660
have not got things<font color="#CCCCCC"> above terribly like</font>

2069
01:36:39,660 --> 01:36:41,490
<font color="#E5E5E5">endless</font><font color="#CCCCCC"> digits and</font><font color="#E5E5E5"> they also don't look</font>

2070
01:36:41,490 --> 01:36:42,960
<font color="#E5E5E5">terribly much like they have a lot of</font>

2071
01:36:42,960 --> 01:36:47,490
variety<font color="#E5E5E5"> this is called</font>

2072
01:36:47,490 --> 01:36:49,480
you

2073
01:36:49,480 --> 01:36:53,980
load class very common problem<font color="#E5E5E5"> when</font>

2074
01:36:53,980 --> 01:36:56,560
<font color="#E5E5E5">training</font><font color="#CCCCCC"> against and what it means is</font>

2075
01:36:56,560 --> 01:36:58,360
that the generator and<font color="#E5E5E5"> the discriminator</font>

2076
01:36:58,360 --> 01:37:01,720
<font color="#CCCCCC">have kind</font><font color="#E5E5E5"> of reached a stalemate where</font>

2077
01:37:01,720 --> 01:37:03,700
neither<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> neither</font><font color="#CCCCCC"> 'litham</font>

2078
01:37:03,700 --> 01:37:05,860
<font color="#CCCCCC">basically knows how to go</font><font color="#E5E5E5"> from here and</font>

2079
01:37:05,860 --> 01:37:08,470
in terms of optimization we've<font color="#CCCCCC"> basically</font>

2080
01:37:08,470 --> 01:37:13,060
found a<font color="#E5E5E5"> local minima right so okay that</font>

2081
01:37:13,060 --> 01:37:15,150
was not<font color="#E5E5E5"> very successful</font><font color="#CCCCCC"> can we do better</font>

2082
01:37:15,150 --> 01:37:17,590
<font color="#E5E5E5">so the next page</font><font color="#CCCCCC"> of paper that came</font>

2083
01:37:17,590 --> 01:37:21,570
<font color="#E5E5E5">along was this one</font>

2084
01:37:23,659 --> 01:37:27,090
the<font color="#E5E5E5"> topic</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> called unsupervised</font>

2085
01:37:27,090 --> 01:37:28,409
representation learning with deep

2086
01:37:28,409 --> 01:37:29,999
convolutional derivative adversarial

2087
01:37:29,999 --> 01:37:33,809
networks<font color="#CCCCCC"> so this created something that</font>

2088
01:37:33,809 --> 01:37:38,579
<font color="#E5E5E5">they</font><font color="#CCCCCC"> called DC games and the main page</font>

2089
01:37:38,579 --> 01:37:41,090
<font color="#CCCCCC">that you want to look at here</font><font color="#E5E5E5"> is page 3</font>

2090
01:37:41,090 --> 01:37:44,030
<font color="#E5E5E5">where they say core to our</font><font color="#CCCCCC"> approach is</font>

2091
01:37:44,030 --> 01:37:47,280
doing these<font color="#CCCCCC"> three</font><font color="#E5E5E5"> things and basically</font>

2092
01:37:47,280 --> 01:37:49,019
what they do is<font color="#E5E5E5"> they</font><font color="#CCCCCC"> just do exactly</font><font color="#E5E5E5"> the</font>

2093
01:37:49,019 --> 01:37:50,070
same<font color="#E5E5E5"> thing as</font><font color="#CCCCCC"> gans</font>

2094
01:37:50,070 --> 01:37:52,650
but they do three<font color="#E5E5E5"> things one is to</font><font color="#CCCCCC"> use</font>

2095
01:37:52,650 --> 01:37:55,739
the kinds of<font color="#CCCCCC"> one for all</font><font color="#E5E5E5"> of them is to</font>

2096
01:37:55,739 --> 01:37:57,570
learn<font color="#E5E5E5"> the tricks</font><font color="#CCCCCC"> that we've been</font>

2097
01:37:57,570 --> 01:37:59,429
learning<font color="#CCCCCC"> for generative models here's an</font>

2098
01:37:59,429 --> 01:38:03,059
<font color="#CCCCCC">all convolutional net get rid of max</font>

2099
01:38:03,059 --> 01:38:04,979
pooling<font color="#E5E5E5"> and use trader convolutions</font>

2100
01:38:04,979 --> 01:38:07,260
instead<font color="#E5E5E5"> get rid of fully connected</font>

2101
01:38:07,260 --> 01:38:08,969
layers and use lots<font color="#CCCCCC"> of convolutional</font>

2102
01:38:08,969 --> 01:38:12,030
features instead and add in national<font color="#CCCCCC"> ok</font>

2103
01:38:12,030 --> 01:38:18,559
<font color="#E5E5E5">and then use a CNN rather than</font><font color="#CCCCCC"> MRP</font><font color="#E5E5E5"> so</font>

2104
01:38:18,559 --> 01:38:21,059
here is<font color="#E5E5E5"> that right there's a</font><font color="#CCCCCC"> little very</font>

2105
01:38:21,059 --> 01:38:22,860
familiar it looks just like last lesson

2106
01:38:22,860 --> 01:38:25,170
and<font color="#E5E5E5"> stuff right</font><font color="#CCCCCC"> so the generator is</font>

2107
01:38:25,170 --> 01:38:30,389
going<font color="#CCCCCC"> to take in some random grid of</font>

2108
01:38:30,389 --> 01:38:34,409
inputs<font color="#CCCCCC"> it's going to do a batch norm up</font>

2109
01:38:34,409 --> 01:38:36,929
sample<font color="#E5E5E5"> you'll notice that I'm</font><font color="#CCCCCC"> doing even</font>

2110
01:38:36,929 --> 01:38:38,610
<font color="#E5E5E5">newer than this paper I'm doing the up</font>

2111
01:38:38,610 --> 01:38:40,139
sampling approach<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we know</font><font color="#E5E5E5"> that's</font>

2112
01:38:40,139 --> 01:38:43,349
better up sample<font color="#CCCCCC"> one</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> calms batch</font>

2113
01:38:43,349 --> 01:38:46,650
norm<font color="#E5E5E5"> of sample one by one cons batch</font>

2114
01:38:46,650 --> 01:38:50,269
norm<font color="#E5E5E5"> and then a final column player</font>

2115
01:38:50,269 --> 01:38:52,019
discriminator basically does<font color="#CCCCCC"> the</font>

2116
01:38:52,019 --> 01:38:54,150
opposite which is<font color="#E5E5E5"> some two by two sub</font>

2117
01:38:54,150 --> 01:38:57,869
samplings<font color="#E5E5E5"> so down sampling in the</font>

2118
01:38:57,869 --> 01:39:01,679
discriminator<font color="#CCCCCC"> another trick that</font><font color="#E5E5E5"> they</font>

2119
01:39:01,679 --> 01:39:02,760
mentioned I think<font color="#CCCCCC"> it's mentioned</font><font color="#E5E5E5"> in the</font>

2120
01:39:02,760 --> 01:39:06,869
paper<font color="#E5E5E5"> is to before you do the back and</font>

2121
01:39:06,869 --> 01:39:08,969
forth batch for the discriminator and a

2122
01:39:08,969 --> 01:39:11,880
<font color="#E5E5E5">bachelor generator is to train the</font>

2123
01:39:11,880 --> 01:39:14,699
discriminator<font color="#CCCCCC"> for a fraction</font><font color="#E5E5E5"> of an epoch</font>

2124
01:39:14,699 --> 01:39:16,469
<font color="#E5E5E5">like there</font><font color="#CCCCCC"> are few batches through the</font>

2125
01:39:16,469 --> 01:39:18,179
discriminator so at least<font color="#E5E5E5"> it knows how</font>

2126
01:39:18,179 --> 01:39:19,590
<font color="#CCCCCC">to recognize the difference between a</font>

2127
01:39:19,590 --> 01:39:22,590
random<font color="#CCCCCC"> image and a real</font><font color="#E5E5E5"> image a little</font>

2128
01:39:22,590 --> 01:39:24,900
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> and so you can see here actually to</font>

2129
01:39:24,900 --> 01:39:28,769
start<font color="#E5E5E5"> by calling</font><font color="#CCCCCC"> discriminative</font><font color="#E5E5E5"> it it's</font>

2130
01:39:28,769 --> 01:39:31,710
just<font color="#E5E5E5"> a</font><font color="#CCCCCC"> very small</font><font color="#E5E5E5"> amount of data</font><font color="#CCCCCC"> so this</font>

2131
01:39:31,710 --> 01:39:33,060
is kind of like

2132
01:39:33,060 --> 01:39:36,300
bootstrapping the discriminator<font color="#CCCCCC"> and then</font>

2133
01:39:36,300 --> 01:39:38,850
<font color="#CCCCCC">I</font><font color="#E5E5E5"> just go</font><font color="#CCCCCC"> ahead and call the same train</font>

2134
01:39:38,850 --> 01:39:41,130
<font color="#CCCCCC">as we had before with my other</font>

2135
01:39:41,130 --> 01:39:43,880
architectures

2136
01:39:44,180 --> 01:39:45,890
and again<font color="#E5E5E5"> these curves are kind of</font>

2137
01:39:45,890 --> 01:39:49,400
totally meaningless<font color="#E5E5E5"> but we had something</font>

2138
01:39:49,400 --> 01:39:51,620
<font color="#CCCCCC">which if you squint you could almost</font>

2139
01:39:51,620 --> 01:39:54,700
<font color="#E5E5E5">convince yourself of that</font><font color="#CCCCCC"> survived any</font>

2140
01:39:54,700 --> 01:40:01,340
so until a week<font color="#E5E5E5"> or two before this all</font>

2141
01:40:01,340 --> 01:40:04,820
started<font color="#CCCCCC"> this</font><font color="#E5E5E5"> was kind of about as good</font>

2142
01:40:04,820 --> 01:40:07,790
as we had people<font color="#E5E5E5"> were much better at the</font>

2143
01:40:07,790 --> 01:40:10,310
artisanal details of<font color="#E5E5E5"> this than I was and</font>

2144
01:40:10,310 --> 01:40:12,530
indeed<font color="#CCCCCC"> there's a whole page called</font><font color="#E5E5E5"> gang</font>

2145
01:40:12,530 --> 01:40:20,200
hacks which had<font color="#E5E5E5"> lots of tips</font><font color="#CCCCCC"> but then</font>

2146
01:40:20,200 --> 01:40:22,070
<font color="#CCCCCC">couple of</font><font color="#E5E5E5"> weeks</font><font color="#CCCCCC"> before this</font><font color="#E5E5E5"> class</font>

2147
01:40:22,070 --> 01:40:23,720
started<font color="#CCCCCC"> as I mentioned in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> first</font>

2148
01:40:23,720 --> 01:40:27,800
class<font color="#CCCCCC"> along</font><font color="#E5E5E5"> came the wasa</font><font color="#CCCCCC"> Stein game and</font>

2149
01:40:27,800 --> 01:40:30,620
the<font color="#CCCCCC"> wasps</font><font color="#E5E5E5"> tank and got rid of all these</font>

2150
01:40:30,620 --> 01:40:33,940
problems<font color="#CCCCCC"> and here is the wasa same can</font>

2151
01:40:33,940 --> 01:40:36,940
<font color="#E5E5E5">ever</font>

2152
01:40:37,860 --> 01:40:43,640
and this paper<font color="#E5E5E5"> is</font>

2153
01:40:44,110 --> 01:40:46,690
quite an extraordinary paper<font color="#E5E5E5"> and it's</font>

2154
01:40:46,690 --> 01:40:48,820
<font color="#E5E5E5">particularly extraordinary because I</font>

2155
01:40:48,820 --> 01:40:50,579
<font color="#E5E5E5">think I mentioned this in playing in the</font>

2156
01:40:50,579 --> 01:40:54,460
first class<font color="#E5E5E5"> of this part</font><font color="#CCCCCC"> both papers</font>

2157
01:40:54,460 --> 01:40:57,010
tend<font color="#E5E5E5"> to either be math theory that goes</font>

2158
01:40:57,010 --> 01:40:59,949
nowhere<font color="#CCCCCC"> or kind of nice experiments</font><font color="#E5E5E5"> and</font>

2159
01:40:59,949 --> 01:41:02,590
engineering where the theory gets kind

2160
01:41:02,590 --> 01:41:04,900
<font color="#E5E5E5">of tacked on at the end and kind of</font>

2161
01:41:04,900 --> 01:41:09,969
<font color="#E5E5E5">minimus this paper is entirely driven by</font>

2162
01:41:09,969 --> 01:41:13,329
theory and then the theory<font color="#E5E5E5"> they go on to</font>

2163
01:41:13,329 --> 01:41:15,280
show this is what the theory<font color="#E5E5E5"> means this</font>

2164
01:41:15,280 --> 01:41:16,719
is what we do and<font color="#E5E5E5"> suddenly all</font><font color="#CCCCCC"> the</font>

2165
01:41:16,719 --> 01:41:18,849
problems go away<font color="#E5E5E5"> the lost curves are</font>

2166
01:41:18,849 --> 01:41:20,139
<font color="#E5E5E5">going to actually mean something</font><font color="#CCCCCC"> and</font>

2167
01:41:20,139 --> 01:41:21,820
we're going<font color="#E5E5E5"> to be able to do what I've</font>

2168
01:41:21,820 --> 01:41:23,469
said we<font color="#E5E5E5"> wanted to do right at the start</font>

2169
01:41:23,469 --> 01:41:27,270
of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> gen Dan section which is to</font>

2170
01:41:27,270 --> 01:41:30,190
<font color="#CCCCCC">train</font><font color="#E5E5E5"> the discriminator</font><font color="#CCCCCC"> a whole bunch of</font>

2171
01:41:30,190 --> 01:41:32,409
steps<font color="#E5E5E5"> and then do a generator and then</font>

2172
01:41:32,409 --> 01:41:33,579
<font color="#E5E5E5">discriminator a whole bunch of</font><font color="#CCCCCC"> steps</font>

2173
01:41:33,579 --> 01:41:35,889
into<font color="#E5E5E5"> the generator and all that is going</font>

2174
01:41:35,889 --> 01:41:39,099
<font color="#E5E5E5">to</font><font color="#CCCCCC"> suddenly start working how do we get</font>

2175
01:41:39,099 --> 01:41:41,030
it to<font color="#E5E5E5"> work</font>

2176
01:41:41,030 --> 01:41:43,820
so in fact<font color="#E5E5E5"> despite the fact that this</font>

2177
01:41:43,820 --> 01:41:48,050
paper is both long and full<font color="#E5E5E5"> of equations</font>

2178
01:41:48,050 --> 01:41:52,280
<font color="#E5E5E5">and theorems and proofs and there's a</font>

2179
01:41:52,280 --> 01:41:53,540
whole bunch<font color="#E5E5E5"> of appendices of the back</font>

2180
01:41:53,540 --> 01:41:56,030
with more theorems and proofs<font color="#E5E5E5"> there's</font>

2181
01:41:56,030 --> 01:41:57,320
actually<font color="#E5E5E5"> only two things you need to do</font>

2182
01:41:57,320 --> 01:42:01,130
one is remove the log from<font color="#E5E5E5"> the loss</font>

2183
01:42:01,130 --> 01:42:02,840
<font color="#E5E5E5">function</font><font color="#CCCCCC"> so rather</font><font color="#E5E5E5"> than using</font>

2184
01:42:02,840 --> 01:42:05,570
<font color="#E5E5E5">cross-entropy loss</font><font color="#CCCCCC"> we're just going to</font>

2185
01:42:05,570 --> 01:42:07,940
<font color="#E5E5E5">use</font><font color="#CCCCCC"> means Guidera that's one change</font><font color="#E5E5E5"> and</font>

2186
01:42:07,940 --> 01:42:11,230
the second change is we're going to

2187
01:42:11,230 --> 01:42:14,150
constrain the<font color="#E5E5E5"> weights so that they lie</font>

2188
01:42:14,150 --> 01:42:16,700
between<font color="#CCCCCC"> negative 0.01</font><font color="#E5E5E5"> and positive point</font>

2189
01:42:16,700 --> 01:42:18,230
<font color="#E5E5E5">no</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to constrain the</font>

2190
01:42:18,230 --> 01:42:21,500
weights to<font color="#E5E5E5"> make them more now in</font><font color="#CCCCCC"> the</font>

2191
01:42:21,500 --> 01:42:22,550
process<font color="#CCCCCC"> of seeing</font><font color="#E5E5E5"> that's all we're going</font>

2192
01:42:22,550 --> 01:42:26,810
<font color="#E5E5E5">to do is to kind of massively is to not</font>

2193
01:42:26,810 --> 01:42:28,460
give<font color="#CCCCCC"> credit for</font><font color="#E5E5E5"> this paper</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> because</font>

2194
01:42:28,460 --> 01:42:30,260
this paper<font color="#E5E5E5"> is is they figured out that</font>

2195
01:42:30,260 --> 01:42:33,050
<font color="#CCCCCC">that's what we need to do and on the</font>

2196
01:42:33,050 --> 01:42:35,030
forums<font color="#E5E5E5"> some of you have been reading</font>

2197
01:42:35,030 --> 01:42:36,770
<font color="#E5E5E5">through this paper and I've already</font>

2198
01:42:36,770 --> 01:42:39,680
<font color="#E5E5E5">given you some tips as</font><font color="#CCCCCC"> to some really</font>

2199
01:42:39,680 --> 01:42:41,780
there's a really great<font color="#CCCCCC"> walkthrough I put</font>

2200
01:42:41,780 --> 01:42:44,810
it on our wiki<font color="#CCCCCC"> that explains all the</font>

2201
01:42:44,810 --> 01:42:47,330
math from scratch but<font color="#E5E5E5"> basically what the</font>

2202
01:42:47,330 --> 01:42:52,640
math says is is again<font color="#CCCCCC"> the last function</font>

2203
01:42:52,640 --> 01:42:54,890
<font color="#E5E5E5">for again is not really the loss</font>

2204
01:42:54,890 --> 01:42:57,560
function you put<font color="#E5E5E5"> into</font><font color="#CCCCCC"> chaos</font><font color="#E5E5E5"> like we</font>

2205
01:42:57,560 --> 01:42:59,300
thought we were<font color="#E5E5E5"> just putting in like a</font>

2206
01:42:59,300 --> 01:43:01,490
cross entropy loss function but in fact

2207
01:43:01,490 --> 01:43:03,020
<font color="#E5E5E5">and again what we really care about is</font>

2208
01:43:03,020 --> 01:43:05,600
the<font color="#E5E5E5"> difference between two</font><font color="#CCCCCC"> distributions</font>

2209
01:43:05,600 --> 01:43:07,310
<font color="#E5E5E5">the difference between the discriminator</font>

2210
01:43:07,310 --> 01:43:10,010
<font color="#E5E5E5">and the generator and</font><font color="#CCCCCC"> the difference</font>

2211
01:43:10,010 --> 01:43:12,710
<font color="#CCCCCC">between two blocks functions as a very</font>

2212
01:43:12,710 --> 01:43:15,440
different shape for the loss function on

2213
01:43:15,440 --> 01:43:18,860
its own<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so it</font><font color="#CCCCCC"> turns out that the</font>

2214
01:43:18,860 --> 01:43:20,180
<font color="#E5E5E5">difference</font><font color="#CCCCCC"> between the two loss</font>

2215
01:43:20,180 --> 01:43:21,950
functions<font color="#CCCCCC"> the two</font><font color="#E5E5E5"> cross after loss</font>

2216
01:43:21,950 --> 01:43:23,900
functions is something called the<font color="#E5E5E5"> Jenson</font>

2217
01:43:23,900 --> 01:43:28,090
Shannon distance and the this paper

2218
01:43:28,090 --> 01:43:33,490
shows that that loss function is hideous

2219
01:43:33,490 --> 01:43:38,150
it is not differentiable<font color="#CCCCCC"> and it does not</font>

2220
01:43:38,150 --> 01:43:45,260
have a nice smooth<font color="#CCCCCC"> shape at all so it</font>

2221
01:43:45,260 --> 01:43:47,780
kind of explains why it is that<font color="#CCCCCC"> we kept</font>

2222
01:43:47,780 --> 01:43:49,550
getting<font color="#E5E5E5"> this mode collapse and failing</font>

2223
01:43:49,550 --> 01:43:51,200
<font color="#CCCCCC">to find nice minimum which</font><font color="#E5E5E5"> is basically</font>

2224
01:43:51,200 --> 01:43:54,230
<font color="#CCCCCC">that mathematically this loss function</font>

2225
01:43:54,230 --> 01:43:54,469
does

2226
01:43:54,469 --> 01:43:56,420
not behave the way a good loss function

2227
01:43:56,420 --> 01:43:59,690
<font color="#E5E5E5">should and you know previously we've not</font>

2228
01:43:59,690 --> 01:44:02,150
come across anything like<font color="#E5E5E5"> this because</font>

2229
01:44:02,150 --> 01:44:04,460
we have been<font color="#CCCCCC"> training</font><font color="#E5E5E5"> a single function</font>

2230
01:44:04,460 --> 01:44:08,090
<font color="#CCCCCC">at a time we</font><font color="#E5E5E5"> really understand those</font>

2231
01:44:08,090 --> 01:44:10,130
loss functions<font color="#E5E5E5"> mean squared error cross</font>

2232
01:44:10,130 --> 01:44:12,079
<font color="#E5E5E5">entropy but never though we haven't</font>

2233
01:44:12,079 --> 01:44:14,389
<font color="#E5E5E5">already always derived the</font><font color="#CCCCCC"> math in</font>

2234
01:44:14,389 --> 01:44:16,369
detail plenty<font color="#CCCCCC"> of people have you</font><font color="#E5E5E5"> know we</font>

2235
01:44:16,369 --> 01:44:17,630
know<font color="#CCCCCC"> that they're kind of nice and</font>

2236
01:44:17,630 --> 01:44:19,309
smooth and<font color="#CCCCCC"> that they have pretty nice</font>

2237
01:44:19,309 --> 01:44:20,719
shapes and they do what<font color="#E5E5E5"> we want them to</font>

2238
01:44:20,719 --> 01:44:24,320
<font color="#E5E5E5">do in this case by training</font><font color="#CCCCCC"> true things</font>

2239
01:44:24,320 --> 01:44:25,969
kind of<font color="#CCCCCC"> adversarially to each other</font>

2240
01:44:25,969 --> 01:44:28,489
we're actually doing something<font color="#E5E5E5"> quite</font>

2241
01:44:28,489 --> 01:44:31,280
different<font color="#CCCCCC"> at this paper</font><font color="#E5E5E5"> just absolutely</font>

2242
01:44:31,280 --> 01:44:34,010
fantastically<font color="#CCCCCC"> show shows with both</font>

2243
01:44:34,010 --> 01:44:36,889
examples<font color="#E5E5E5"> and the theory why that's</font><font color="#CCCCCC"> just</font>

2244
01:44:36,889 --> 01:44:39,579
never going<font color="#E5E5E5"> to work</font>

2245
01:44:41,390 --> 01:44:45,130
we use<font color="#CCCCCC"> lysimachus</font>

2246
01:44:48,679 --> 01:44:50,800
<font color="#E5E5E5">um</font>

2247
01:44:51,040 --> 01:44:54,760
yes<font color="#E5E5E5"> but the I mean even the cosine</font>

2248
01:44:54,760 --> 01:44:58,300
distance so the cosine distance<font color="#E5E5E5"> is the</font>

2249
01:44:58,300 --> 01:45:00,460
difference between<font color="#E5E5E5"> two</font><font color="#CCCCCC"> things or else</font>

2250
01:45:00,460 --> 01:45:02,320
<font color="#E5E5E5">these distances that we're</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about</font>

2251
01:45:02,320 --> 01:45:03,730
<font color="#CCCCCC">here are the distances between</font><font color="#E5E5E5"> two</font>

2252
01:45:03,730 --> 01:45:05,890
<font color="#CCCCCC">distributions which is a much more</font>

2253
01:45:05,890 --> 01:45:09,489
<font color="#E5E5E5">tricky problem</font><font color="#CCCCCC"> to deal with the cosine</font>

2254
01:45:09,489 --> 01:45:12,280
distance<font color="#CCCCCC"> actually if</font><font color="#E5E5E5"> you if you look at</font>

2255
01:45:12,280 --> 01:45:13,870
the notebook during the week you'll see

2256
01:45:13,870 --> 01:45:17,350
it's basically<font color="#E5E5E5"> the same as the Euclidean</font>

2257
01:45:17,350 --> 01:45:20,440
distance that you normalize the<font color="#CCCCCC"> data</font>

2258
01:45:20,440 --> 01:45:22,150
first<font color="#CCCCCC"> so it has all the</font><font color="#E5E5E5"> same nice</font>

2259
01:45:22,150 --> 01:45:25,350
properties that the Euclidean distance

2260
01:45:25,350 --> 01:45:31,870
<font color="#CCCCCC">so the so one things fun is that the</font>

2261
01:45:31,870 --> 01:45:34,300
authors of this paper released their

2262
01:45:34,300 --> 01:45:38,770
code in<font color="#CCCCCC"> pi torch</font><font color="#E5E5E5"> and luckily</font><font color="#CCCCCC"> Platzer pi</font>

2263
01:45:38,770 --> 01:45:40,600
<font color="#CCCCCC">torch the first kind</font><font color="#E5E5E5"> of pre-release came</font>

2264
01:45:40,600 --> 01:45:44,410
out in mid-january<font color="#CCCCCC"> he</font><font color="#E5E5E5"> won't be surprised</font>

2265
01:45:44,410 --> 01:45:45,910
<font color="#E5E5E5">to hear that one</font><font color="#CCCCCC"> of the authors of the</font>

2266
01:45:45,910 --> 01:45:49,390
paper<font color="#E5E5E5"> is the main author of</font><font color="#CCCCCC"> pi torch</font><font color="#E5E5E5"> so</font>

2267
01:45:49,390 --> 01:45:51,640
he was writing<font color="#E5E5E5"> this before we even</font>

2268
01:45:51,640 --> 01:45:54,280
<font color="#CCCCCC">released the code there's lots of</font>

2269
01:45:54,280 --> 01:45:55,540
<font color="#CCCCCC">reasons we want to learn play torch</font>

2270
01:45:55,540 --> 01:45:58,840
anyway so here's a<font color="#E5E5E5"> good reason</font><font color="#CCCCCC"> right so</font>

2271
01:45:58,840 --> 01:46:00,610
<font color="#E5E5E5">let's look at the</font><font color="#CCCCCC"> Wasserstein gain in</font>

2272
01:46:00,610 --> 01:46:04,360
play torch<font color="#CCCCCC"> most</font><font color="#E5E5E5"> most of the code can</font>

2273
01:46:04,360 --> 01:46:05,739
catch other than<font color="#E5E5E5"> this pretty much all</font>

2274
01:46:05,739 --> 01:46:08,290
the code I'm showing you<font color="#E5E5E5"> in this part of</font>

2275
01:46:08,290 --> 01:46:12,040
<font color="#E5E5E5">the course is very loosely based on lots</font>

2276
01:46:12,040 --> 01:46:13,690
of<font color="#E5E5E5"> bits of other code which I had to</font>

2277
01:46:13,690 --> 01:46:15,160
massively rewrite<font color="#E5E5E5"> because all</font><font color="#CCCCCC"> of it was</font>

2278
01:46:15,160 --> 01:46:18,520
wrong<font color="#E5E5E5"> and hideous this code</font><font color="#CCCCCC"> actually I</font>

2279
01:46:18,520 --> 01:46:20,680
only did some minor refactoring<font color="#E5E5E5"> to</font>

2280
01:46:20,680 --> 01:46:22,480
simplify things<font color="#E5E5E5"> so this is actually very</font>

2281
01:46:22,480 --> 01:46:25,030
<font color="#E5E5E5">close to their code and so there's a</font>

2282
01:46:25,030 --> 01:46:28,239
very nice paper with very nice code<font color="#E5E5E5"> so</font>

2283
01:46:28,239 --> 01:46:30,369
that's great thing

2284
01:46:30,369 --> 01:46:32,590
so before we look<font color="#CCCCCC"> at the wealth of stone</font>

2285
01:46:32,590 --> 01:46:33,999
<font color="#E5E5E5">I guess it's the fastest time really</font>

2286
01:46:33,999 --> 01:46:37,629
does the stone again<font color="#CCCCCC"> in play torch let's</font>

2287
01:46:37,629 --> 01:46:39,729
look briefly<font color="#E5E5E5"> a play torch okay</font>

2288
01:46:39,729 --> 01:46:42,849
<font color="#E5E5E5">so pay torch basically what you're going</font>

2289
01:46:42,849 --> 01:46:44,949
<font color="#CCCCCC">to see is</font><font color="#E5E5E5"> that I torch looks a lot like</font>

2290
01:46:44,949 --> 01:46:49,689
<font color="#E5E5E5">numpy which is nice</font><font color="#CCCCCC"> we don't have to</font>

2291
01:46:49,689 --> 01:46:53,050
create a computational graph using

2292
01:46:53,050 --> 01:46:55,479
variables and placeholders and later on

2293
01:46:55,479 --> 01:46:57,820
round in a<font color="#CCCCCC"> session and blah blah blah</font>

2294
01:46:57,820 --> 01:46:59,610
thank you<font color="#E5E5E5"> I'm sure</font><font color="#CCCCCC"> you've seen by now</font>

2295
01:46:59,610 --> 01:47:03,219
with you know<font color="#E5E5E5"> care a</font><font color="#CCCCCC"> script</font><font color="#E5E5E5"> tends to</font>

2296
01:47:03,219 --> 01:47:04,780
flow you try to print<font color="#E5E5E5"> something out that</font>

2297
01:47:04,780 --> 01:47:06,579
<font color="#E5E5E5">some intermediate output it just prints</font>

2298
01:47:06,579 --> 01:47:08,530
out like cancer and<font color="#E5E5E5"> tells you how many</font>

2299
01:47:08,530 --> 01:47:11,110
<font color="#CCCCCC">dimensions it has but</font><font color="#E5E5E5"> that's because all</font>

2300
01:47:11,110 --> 01:47:13,539
that thing is<font color="#E5E5E5"> symbolic side of a</font>

2301
01:47:13,539 --> 01:47:16,659
computational breath<font color="#CCCCCC"> PI torch doesn't</font>

2302
01:47:16,659 --> 01:47:18,669
<font color="#E5E5E5">work that way</font><font color="#CCCCCC"> pi</font><font color="#E5E5E5"> torch is what's called</font>

2303
01:47:18,669 --> 01:47:21,699
<font color="#E5E5E5">a defined by run framework</font><font color="#CCCCCC"> it's</font>

2304
01:47:21,699 --> 01:47:27,340
basically designed<font color="#E5E5E5"> to be so fast to take</font>

2305
01:47:27,340 --> 01:47:30,879
your code<font color="#E5E5E5"> and compile it that you don't</font>

2306
01:47:30,879 --> 01:47:32,800
have to create that graph in<font color="#E5E5E5"> advance</font>

2307
01:47:32,800 --> 01:47:34,659
<font color="#CCCCCC">like every time</font><font color="#E5E5E5"> you run a piece of</font><font color="#CCCCCC"> code</font>

2308
01:47:34,659 --> 01:47:38,320
<font color="#E5E5E5">it puts it on</font><font color="#CCCCCC"> the GPU</font><font color="#E5E5E5"> runs it sends it</font>

2309
01:47:38,320 --> 01:47:41,379
back<font color="#E5E5E5"> all in one go so it makes things</font>

2310
01:47:41,379 --> 01:47:44,169
<font color="#E5E5E5">look very</font><font color="#CCCCCC"> simple so</font><font color="#E5E5E5"> this is a slightly</font>

2311
01:47:44,169 --> 01:47:46,119
<font color="#CCCCCC">cut-down version of the PI torch</font>

2312
01:47:46,119 --> 01:47:48,280
tutorial that PI torch provides on their

2313
01:47:48,280 --> 01:47:51,780
website<font color="#E5E5E5"> so you can</font><font color="#CCCCCC"> grab that from there</font>

2314
01:47:51,780 --> 01:47:55,360
so rather than<font color="#E5E5E5"> creating</font><font color="#CCCCCC"> NPO terrain you</font>

2315
01:47:55,360 --> 01:47:58,209
create torch<font color="#CCCCCC"> tensor but other than that</font>

2316
01:47:58,209 --> 01:48:01,030
it's identical<font color="#E5E5E5"> right so here's a random</font>

2317
01:48:01,030 --> 01:48:04,139
torch<font color="#E5E5E5"> tensor</font>

2318
01:48:08,700 --> 01:48:11,100
rather than<font color="#E5E5E5"> a few guys all a little</font><font color="#CCCCCC"> bit</font>

2319
01:48:11,100 --> 01:48:14,990
<font color="#CCCCCC">different rather than Shaitaan size</font>

2320
01:48:16,290 --> 01:48:18,120
but you<font color="#CCCCCC"> can settle through</font><font color="#E5E5E5"> similar right</font>

2321
01:48:18,120 --> 01:48:22,260
and so unlike<font color="#E5E5E5"> in</font><font color="#CCCCCC"> enter flow or theano we</font>

2322
01:48:22,260 --> 01:48:24,390
can just say X<font color="#E5E5E5"> plus y and there it is we</font>

2323
01:48:24,390 --> 01:48:27,140
<font color="#CCCCCC">don't have to say that</font><font color="#E5E5E5"> equaled X plus y</font>

2324
01:48:27,140 --> 01:48:31,380
<font color="#E5E5E5">equals</font><font color="#CCCCCC"> function takes</font><font color="#E5E5E5"> X and y inputs and</font>

2325
01:48:31,380 --> 01:48:33,180
because there's output and then in

2326
01:48:33,180 --> 01:48:35,970
function dot a vowel<font color="#E5E5E5"> no just X plus y</font>

2327
01:48:35,970 --> 01:48:38,580
and there it<font color="#E5E5E5"> is as you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> why it's</font>

2328
01:48:38,580 --> 01:48:41,910
<font color="#CCCCCC">called</font><font color="#E5E5E5"> defined by run we just provide</font>

2329
01:48:41,910 --> 01:48:45,210
the code<font color="#E5E5E5"> and it just runs it</font><font color="#CCCCCC"> generally</font>

2330
01:48:45,210 --> 01:48:47,070
<font color="#CCCCCC">speaking</font><font color="#E5E5E5"> most operations in torch as</font>

2331
01:48:47,070 --> 01:48:48,360
well as<font color="#E5E5E5"> having this in fixed version</font>

2332
01:48:48,360 --> 01:48:51,450
<font color="#E5E5E5">there's also a suffix of so prefix</font>

2333
01:48:51,450 --> 01:48:54,170
version<font color="#E5E5E5"> this is exactly the same thing</font>

2334
01:48:54,170 --> 01:48:57,270
um you can<font color="#E5E5E5"> often add and</font><font color="#CCCCCC"> that nearly</font>

2335
01:48:57,270 --> 01:48:59,790
<font color="#E5E5E5">always a day out equals and that puts</font>

2336
01:48:59,790 --> 01:49:01,530
the<font color="#CCCCCC"> results in this</font><font color="#E5E5E5"> pre allocated memory</font>

2337
01:49:01,530 --> 01:49:03,660
<font color="#E5E5E5">we've already talked about</font><font color="#CCCCCC"> way it's</font>

2338
01:49:03,660 --> 01:49:05,240
really<font color="#E5E5E5"> important to pre allocate memory</font>

2339
01:49:05,240 --> 01:49:08,970
<font color="#E5E5E5">it's particularly important</font><font color="#CCCCCC"> on GPUs and</font>

2340
01:49:08,970 --> 01:49:10,770
so if you write your<font color="#CCCCCC"> own algorithms in</font>

2341
01:49:10,770 --> 01:49:12,870
<font color="#CCCCCC">pipe torch you need to be very careful</font>

2342
01:49:12,870 --> 01:49:15,480
<font color="#E5E5E5">of this perhaps</font><font color="#CCCCCC"> the best trick is that</font>

2343
01:49:15,480 --> 01:49:17,160
you<font color="#E5E5E5"> can stick an underscore on the end</font>

2344
01:49:17,160 --> 01:49:19,620
of<font color="#E5E5E5"> most things and it causes it to in</font>

2345
01:49:19,620 --> 01:49:22,370
place<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> y plus equals x</font>

2346
01:49:22,370 --> 01:49:26,400
that's what this underscore<font color="#E5E5E5"> had again so</font>

2347
01:49:26,400 --> 01:49:28,230
there's<font color="#E5E5E5"> some good little tricks you</font><font color="#CCCCCC"> can</font>

2348
01:49:28,230 --> 01:49:32,850
do<font color="#E5E5E5"> splicing just like</font><font color="#CCCCCC"> numpy you can</font><font color="#E5E5E5"> turn</font>

2349
01:49:32,850 --> 01:49:35,880
numpy stuff into torch<font color="#CCCCCC"> tensors and</font><font color="#E5E5E5"> vice</font>

2350
01:49:35,880 --> 01:49:40,950
versa by simply going<font color="#CCCCCC"> numpy and one</font>

2351
01:49:40,950 --> 01:49:43,530
thing<font color="#CCCCCC"> to be very aware of</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that a and</font>

2352
01:49:43,530 --> 01:49:48,080
<font color="#CCCCCC">b are</font><font color="#E5E5E5"> now referring to the same thing</font><font color="#CCCCCC"> so</font>

2353
01:49:48,080 --> 01:49:52,590
<font color="#CCCCCC">that if I now add underscore</font><font color="#E5E5E5"> so in place</font>

2354
01:49:52,590 --> 01:49:57,140
a plus equals<font color="#CCCCCC"> one it also changes be</font>

2355
01:49:57,140 --> 01:50:00,270
<font color="#CCCCCC">okay vice versa</font><font color="#E5E5E5"> you can turn</font><font color="#CCCCCC"> on play</font>

2356
01:50:00,270 --> 01:50:03,570
into torch<font color="#E5E5E5"> by calling torch from numpy</font>

2357
01:50:03,570 --> 01:50:06,660
<font color="#E5E5E5">and again same thing</font><font color="#CCCCCC"> if you change the</font>

2358
01:50:06,660 --> 01:50:09,860
<font color="#E5E5E5">none fire change of the torch</font>

2359
01:50:10,500 --> 01:50:12,850
<font color="#CCCCCC">all of that</font><font color="#E5E5E5"> so far</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> been running on</font>

2360
01:50:12,850 --> 01:50:15,610
the<font color="#E5E5E5"> CPU to turn anything into something</font>

2361
01:50:15,610 --> 01:50:17,770
<font color="#CCCCCC">that runs on</font><font color="#E5E5E5"> the GPU</font><font color="#CCCCCC"> your Chuck scooter</font>

2362
01:50:17,770 --> 01:50:20,320
at the end of it<font color="#CCCCCC"> okay so this X plus</font><font color="#E5E5E5"> y</font>

2363
01:50:20,320 --> 01:50:22,530
just ran on the GPU

2364
01:50:22,530 --> 01:50:24,590
<font color="#E5E5E5">you</font>

2365
01:50:24,870 --> 01:50:27,830
so where things get cool<font color="#CCCCCC"> is that</font>

2366
01:50:27,830 --> 01:50:30,870
<font color="#CCCCCC">something like this</font><font color="#E5E5E5"> no it's not just how</font>

2367
01:50:30,870 --> 01:50:33,179
<font color="#CCCCCC">to do the that piece of arithmetic</font><font color="#E5E5E5"> but</font>

2368
01:50:33,179 --> 01:50:34,739
it also knows how<font color="#E5E5E5"> to take the gradient</font>

2369
01:50:34,739 --> 01:50:40,230
<font color="#CCCCCC">of that gradient you just</font><font color="#E5E5E5"> take your</font>

2370
01:50:40,230 --> 01:50:41,540
torch<font color="#CCCCCC"> tensor</font>

2371
01:50:41,540 --> 01:50:45,210
wrap it in variable and add this

2372
01:50:45,210 --> 01:50:47,760
parameter<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it and now from now on</font>

2373
01:50:47,760 --> 01:50:49,469
<font color="#E5E5E5">anything I do to</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> it's going</font><font color="#CCCCCC"> to</font>

2374
01:50:49,469 --> 01:50:51,660
remember<font color="#CCCCCC"> what I did</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> it can take</font>

2375
01:50:51,660 --> 01:50:55,380
<font color="#E5E5E5">the gradient of it so for example X plus</font>

2376
01:50:55,380 --> 01:50:58,170
<font color="#E5E5E5">2</font><font color="#CCCCCC"> okay I get back three just</font><font color="#E5E5E5"> like a</font>

2377
01:50:58,170 --> 01:50:59,969
normal tensor so a variable<font color="#E5E5E5"> and attempt</font>

2378
01:50:59,969 --> 01:51:04,320
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have the same API except</font><font color="#CCCCCC"> that I can</font>

2379
01:51:04,320 --> 01:51:08,550
<font color="#E5E5E5">keep doing things to it squared times</font>

2380
01:51:08,550 --> 01:51:12,090
<font color="#E5E5E5">three mean later on I can go dot</font>

2381
01:51:12,090 --> 01:51:15,000
backward and<font color="#E5E5E5"> grad and I can get the</font>

2382
01:51:15,000 --> 01:51:16,520
<font color="#E5E5E5">gradient</font>

2383
01:51:16,520 --> 01:51:20,030
match<font color="#E5E5E5"> the critical difference between a</font>

2384
01:51:20,030 --> 01:51:22,010
tensor and the variable<font color="#E5E5E5"> they have</font>

2385
01:51:22,010 --> 01:51:24,740
exactly<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> exact variable</font><font color="#CCCCCC"> also</font>

2386
01:51:24,740 --> 01:51:28,370
has<font color="#E5E5E5"> backward and</font><font color="#CCCCCC"> that gets you the</font>

2387
01:51:28,370 --> 01:51:31,070
gradient<font color="#E5E5E5"> so when I say top gradient the</font>

2388
01:51:31,070 --> 01:51:33,500
reason that this is<font color="#E5E5E5"> the out</font><font color="#CCCCCC"> DX is</font>

2389
01:51:33,500 --> 01:51:37,040
because I typed out<font color="#E5E5E5"> backward</font><font color="#CCCCCC"> all right</font>

2390
01:51:37,040 --> 01:51:38,600
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the thing it's the</font><font color="#CCCCCC"> derivative</font>

2391
01:51:38,600 --> 01:51:41,830
is for respect<font color="#CCCCCC"> to</font>

2392
01:51:45,350 --> 01:51:46,970
<font color="#E5E5E5">kind of crazy</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do things like</font>

2393
01:51:46,970 --> 01:51:49,500
while loops

2394
01:51:49,500 --> 01:51:52,200
get the gradients of<font color="#E5E5E5"> them this kind of</font>

2395
01:51:52,200 --> 01:51:55,050
<font color="#E5E5E5">seeing pretty tricky</font><font color="#CCCCCC"> to do with Spencer</font>

2396
01:51:55,050 --> 01:51:56,700
<font color="#E5E5E5">flow or piano or these kind of</font>

2397
01:51:56,700 --> 01:51:58,860
computation graph approaches<font color="#E5E5E5"> so it gives</font>

2398
01:51:58,860 --> 01:52:01,760
you a whole lot of flexibility<font color="#CCCCCC"> to define</font>

2399
01:52:01,760 --> 01:52:06,570
things in like much<font color="#CCCCCC"> more natural ways so</font>

2400
01:52:06,570 --> 01:52:08,100
you<font color="#E5E5E5"> can really write</font><font color="#CCCCCC"> play torch just</font>

2401
01:52:08,100 --> 01:52:08,970
<font color="#E5E5E5">like</font><font color="#CCCCCC"> you're writing</font>

2402
01:52:08,970 --> 01:52:15,150
regular<font color="#E5E5E5"> old kind of non play stuff</font><font color="#CCCCCC"> it</font>

2403
01:52:15,150 --> 01:52:17,160
has plenty of libraries<font color="#E5E5E5"> so if you want</font>

2404
01:52:17,160 --> 01:52:19,890
to<font color="#E5E5E5"> create a neural network</font><font color="#CCCCCC"> here's how</font>

2405
01:52:19,890 --> 01:52:24,060
<font color="#E5E5E5">you do a CNN</font><font color="#CCCCCC"> I want you early on</font><font color="#E5E5E5"> that if</font>

2406
01:52:24,060 --> 01:52:25,200
you<font color="#E5E5E5"> don't know about</font>

2407
01:52:25,200 --> 01:52:27,690
<font color="#CCCCCC">oh whoa</font><font color="#E5E5E5"> and pipes</font><font color="#CCCCCC"> immunity to my lotion</font>

2408
01:52:27,690 --> 01:52:30,020
so here's why because<font color="#E5E5E5"> in play torch</font>

2409
01:52:30,020 --> 01:52:32,700
everything kind of done years<font color="#E5E5E5"> ago</font><font color="#CCCCCC"> oh I</font>

2410
01:52:32,700 --> 01:52:34,800
really like this<font color="#CCCCCC"> track</font><font color="#E5E5E5"> because like in</font>

2411
01:52:34,800 --> 01:52:38,820
in piano<font color="#CCCCCC"> I'm sorry intensive flow they</font>

2412
01:52:38,820 --> 01:52:41,640
kind of invent their own weird<font color="#CCCCCC"> way of</font>

2413
01:52:41,640 --> 01:52:45,420
<font color="#E5E5E5">programming rather than use Python over</font>

2414
01:52:45,420 --> 01:52:48,000
<font color="#CCCCCC">real play torch</font><font color="#E5E5E5"> just goes out we already</font>

2415
01:52:48,000 --> 01:52:49,560
<font color="#E5E5E5">have these features</font><font color="#CCCCCC"> in the language</font>

2416
01:52:49,560 --> 01:52:52,110
let's just use them<font color="#CCCCCC"> so it's way</font><font color="#E5E5E5"> easier</font>

2417
01:52:52,110 --> 01:52:56,970
in my opinion<font color="#CCCCCC"> so to create a neural net</font>

2418
01:52:56,970 --> 01:52:59,160
you create a new<font color="#E5E5E5"> class you derive from</font>

2419
01:52:59,160 --> 01:53:03,030
<font color="#CCCCCC">module</font><font color="#E5E5E5"> and then in the constructor you</font>

2420
01:53:03,030 --> 01:53:05,790
create all of<font color="#E5E5E5"> the things that have</font>

2421
01:53:05,790 --> 01:53:07,860
weights<font color="#E5E5E5"> okay</font>

2422
01:53:07,860 --> 01:53:11,580
so these you know<font color="#E5E5E5"> cons one is now</font>

2423
01:53:11,580 --> 01:53:13,740
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that has some weight</font><font color="#E5E5E5"> 3d cons</font>

2424
01:53:13,740 --> 01:53:15,480
come<font color="#CCCCCC"> true is something with some weights</font>

2425
01:53:15,480 --> 01:53:17,160
<font color="#CCCCCC">poly</font><font color="#E5E5E5"> connected one is something</font><font color="#CCCCCC"> with</font>

2426
01:53:17,160 --> 01:53:21,210
some ways<font color="#E5E5E5"> okay so there's all</font><font color="#CCCCCC"> of your</font>

2427
01:53:21,210 --> 01:53:24,060
layers<font color="#E5E5E5"> and then you get to see</font><font color="#CCCCCC"> exactly</font>

2428
01:53:24,060 --> 01:53:27,030
<font color="#CCCCCC">what happens</font><font color="#E5E5E5"> in your forward path right</font>

2429
01:53:27,030 --> 01:53:29,760
now<font color="#CCCCCC"> because max cool 2d doesn't have any</font>

2430
01:53:29,760 --> 01:53:31,830
weights and revenue doesn't<font color="#E5E5E5"> have any</font>

2431
01:53:31,830 --> 01:53:35,250
weights<font color="#E5E5E5"> there's no need</font><font color="#CCCCCC"> to define them</font>

2432
01:53:35,250 --> 01:53:37,200
in<font color="#E5E5E5"> the initializer right you can</font><font color="#CCCCCC"> just</font>

2433
01:53:37,200 --> 01:53:39,270
<font color="#E5E5E5">call them as</font><font color="#CCCCCC"> functions but these things</font>

2434
01:53:39,270 --> 01:53:43,050
have works<font color="#E5E5E5"> so they need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be at a</font>

2435
01:53:43,050 --> 01:53:46,590
stateful<font color="#CCCCCC"> persistent so in my</font><font color="#E5E5E5"> forward</font>

2436
01:53:46,590 --> 01:53:49,350
<font color="#E5E5E5">class you literally just define</font><font color="#CCCCCC"> what are</font>

2437
01:53:49,350 --> 01:53:51,710
<font color="#E5E5E5">the things that happen</font>

2438
01:53:51,710 --> 01:53:56,000
dot view is the<font color="#E5E5E5"> same as reshape okay so</font>

2439
01:53:56,000 --> 01:53:58,370
like the whole API<font color="#E5E5E5"> has different names</font>

2440
01:53:58,370 --> 01:54:01,340
for<font color="#E5E5E5"> everything which</font><font color="#CCCCCC"> is mildly annoying</font>

2441
01:54:01,340 --> 01:54:02,780
for the first week that<font color="#E5E5E5"> you kind of get</font>

2442
01:54:02,780 --> 01:54:05,320
<font color="#E5E5E5">used to it so dot reshape is called</font><font color="#CCCCCC"> docu</font>

2443
01:54:05,320 --> 01:54:07,490
during the week if you try to use pay

2444
01:54:07,490 --> 01:54:09,080
torch and you're like how do you say

2445
01:54:09,080 --> 01:54:11,870
blah and<font color="#CCCCCC"> pay torch</font><font color="#E5E5E5"> and you can't find it</font>

2446
01:54:11,870 --> 01:54:13,820
<font color="#E5E5E5">feel free to post on the forum</font>

2447
01:54:13,820 --> 01:54:17,020
having said that pay torch has its own

2448
01:54:17,020 --> 01:54:20,930
discourse based forums<font color="#E5E5E5"> and as you can</font>

2449
01:54:20,930 --> 01:54:24,470
<font color="#E5E5E5">see it is just as busy and friendly as</font>

2450
01:54:24,470 --> 01:54:26,300
our forums<font color="#E5E5E5"> people</font><font color="#CCCCCC"> are posting on</font><font color="#E5E5E5"> these</font>

2451
01:54:26,300 --> 01:54:31,400
all the<font color="#E5E5E5"> time</font><font color="#CCCCCC"> so I find it a really great</font>

2452
01:54:31,400 --> 01:54:35,000
helpful<font color="#E5E5E5"> community</font><font color="#CCCCCC"> so feel free</font><font color="#E5E5E5"> to ask</font>

2453
01:54:35,000 --> 01:54:39,190
<font color="#E5E5E5">over there or over here</font>

2454
01:54:40,620 --> 01:54:47,340
<font color="#E5E5E5">um great so you can then put all of that</font>

2455
01:54:47,340 --> 01:54:49,440
<font color="#E5E5E5">computation</font><font color="#CCCCCC"> under the</font><font color="#E5E5E5"> GPU by calling</font>

2456
01:54:49,440 --> 01:54:51,420
<font color="#CCCCCC">Kuna</font>

2457
01:54:51,420 --> 01:54:55,710
um<font color="#E5E5E5"> now you can then take some input put</font>

2458
01:54:55,710 --> 01:54:59,690
down the GPU with<font color="#CCCCCC"> Doc</font><font color="#E5E5E5"> CUDA you can then</font>

2459
01:54:59,690 --> 01:55:04,110
calculate your derivatives<font color="#CCCCCC"> calculate</font>

2460
01:55:04,110 --> 01:55:10,450
<font color="#CCCCCC">your loss and then later on</font><font color="#E5E5E5"> you can</font>

2461
01:55:10,450 --> 01:55:12,710
<font color="#CCCCCC">optimiser</font>

2462
01:55:12,710 --> 01:55:15,090
this is just one step of the optimizer

2463
01:55:15,090 --> 01:55:17,610
<font color="#CCCCCC">so we have to</font><font color="#E5E5E5"> kind of put</font><font color="#CCCCCC"> that in word</font>

2464
01:55:17,610 --> 01:55:20,970
so<font color="#CCCCCC"> there's the basic pieces at the</font><font color="#E5E5E5"> end</font>

2465
01:55:20,970 --> 01:55:23,430
here there's a complete<font color="#E5E5E5"> process but I</font>

2466
01:55:23,430 --> 01:55:24,600
think<font color="#E5E5E5"> more fun will be to see the</font>

2467
01:55:24,600 --> 01:55:28,110
process in the<font color="#CCCCCC"> stone again</font><font color="#E5E5E5"> so here it is</font>

2468
01:55:28,110 --> 01:55:32,100
<font color="#CCCCCC">I've</font><font color="#E5E5E5"> kind of got this torch</font><font color="#CCCCCC"> utils thing</font>

2469
01:55:32,100 --> 01:55:35,310
which refining github which has the

2470
01:55:35,310 --> 01:55:37,920
basic stuff<font color="#E5E5E5"> you'll want for torch</font><font color="#CCCCCC"> all</font>

2471
01:55:37,920 --> 01:55:44,490
there<font color="#CCCCCC"> so you can just import that same</font>

2472
01:55:44,490 --> 01:55:46,910
<font color="#CCCCCC">can working</font><font color="#E5E5E5"> so we set up the batch size</font>

2473
01:55:46,910 --> 01:55:50,190
<font color="#E5E5E5">the size of each image the size of our</font>

2474
01:55:50,190 --> 01:55:53,370
noise vector<font color="#CCCCCC"> and look how cool it is</font><font color="#E5E5E5"> I</font>

2475
01:55:53,370 --> 01:55:55,980
<font color="#E5E5E5">really like</font><font color="#CCCCCC"> this this</font><font color="#E5E5E5"> is how you import</font>

2476
01:55:55,980 --> 01:55:59,040
data sets it has a data sets module

2477
01:55:59,040 --> 01:56:03,420
<font color="#E5E5E5">already in the torch vision library is</font>

2478
01:56:03,420 --> 01:56:06,360
<font color="#CCCCCC">the</font><font color="#E5E5E5"> sci-fi 10 data set</font><font color="#CCCCCC"> it will</font>

2479
01:56:06,360 --> 01:56:07,890
automatically download it to this path

2480
01:56:07,890 --> 01:56:09,660
for you if you say download equals true

2481
01:56:09,660 --> 01:56:13,830
and rather<font color="#E5E5E5"> than having to figure out how</font>

2482
01:56:13,830 --> 01:56:17,010
to do the pre-processing<font color="#E5E5E5"> you can create</font>

2483
01:56:17,010 --> 01:56:20,490
a list of transforms<font color="#CCCCCC"> alright so I think</font>

2484
01:56:20,490 --> 01:56:23,520
<font color="#E5E5E5">it is</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> lovely API the reason that</font>

2485
01:56:23,520 --> 01:56:26,550
this is so new it<font color="#E5E5E5"> has such a nice API is</font>

2486
01:56:26,550 --> 01:56:28,830
because this comes from<font color="#E5E5E5"> a lower library</font>

2487
01:56:28,830 --> 01:56:30,360
<font color="#CCCCCC">called torch that's</font><font color="#E5E5E5"> been around for many</font>

2488
01:56:30,360 --> 01:56:32,280
<font color="#CCCCCC">years and so these guys are basically</font>

2489
01:56:32,280 --> 01:56:35,130
started off by copying what they<font color="#E5E5E5"> already</font>

2490
01:56:35,130 --> 01:56:37,920
had and<font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> already works well</font><font color="#CCCCCC"> so I</font>

2491
01:56:37,920 --> 01:56:41,130
think<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is very elegant there's another</font>

2492
01:56:41,130 --> 01:56:44,100
so I've got two<font color="#CCCCCC"> different things</font><font color="#E5E5E5"> you can</font>

2493
01:56:44,100 --> 01:56:45,470
look<font color="#E5E5E5"> at here they're both from the paper</font>

2494
01:56:45,470 --> 01:56:48,210
<font color="#E5E5E5">-</font><font color="#CCCCCC"> a 5/10 which are the tiny little</font>

2495
01:56:48,210 --> 01:56:50,100
images<font color="#E5E5E5"> another is something</font><font color="#CCCCCC"> we haven't</font>

2496
01:56:50,100 --> 01:56:53,760
seen<font color="#E5E5E5"> before which is called</font><font color="#CCCCCC"> Elston which</font>

2497
01:56:53,760 --> 01:56:56,010
is a really nice data set it's a huge

2498
01:56:56,010 --> 01:57:01,040
data set with

2499
01:57:01,130 --> 01:57:03,710
millions<font color="#E5E5E5"> of images</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> million bedroom</font>

2500
01:57:03,710 --> 01:57:09,020
images for example so we<font color="#E5E5E5"> can use either</font>

2501
01:57:09,020 --> 01:57:11,200
one

2502
01:57:11,710 --> 01:57:13,960
this is pretty cool we can then call up

2503
01:57:13,960 --> 01:57:15,970
create a data loader<font color="#E5E5E5"> see how many</font>

2504
01:57:15,970 --> 01:57:17,800
workers use we already know what workers

2505
01:57:17,800 --> 01:57:19,510
are right this<font color="#E5E5E5"> is all built into</font><font color="#CCCCCC"> the</font>

2506
01:57:19,510 --> 01:57:23,110
<font color="#E5E5E5">framework</font><font color="#CCCCCC"> okay so now that you know how</font>

2507
01:57:23,110 --> 01:57:25,030
many workers your GP<font color="#CCCCCC"> your CPU likes to</font>

2508
01:57:25,030 --> 01:57:26,530
use you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> just go ahead</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> put that</font>

2509
01:57:26,530 --> 01:57:27,430
<font color="#CCCCCC">number in here</font>

2510
01:57:27,430 --> 01:57:30,880
use your CPU to load in this data in

2511
01:57:30,880 --> 01:57:34,780
<font color="#CCCCCC">parallel in the background okay</font><font color="#E5E5E5"> so we're</font>

2512
01:57:34,780 --> 01:57:36,250
going<font color="#E5E5E5"> to start with say</font><font color="#CCCCCC"> five ten</font><font color="#E5E5E5"> so</font>

2513
01:57:36,250 --> 01:57:39,720
we've got<font color="#CCCCCC"> 47</font><font color="#E5E5E5"> thousand of those images</font>

2514
01:57:39,720 --> 01:57:42,630
[Music]

2515
01:57:42,630 --> 01:57:45,430
definition of the discriminator and the

2516
01:57:45,430 --> 01:57:47,230
generator architectures into a separate

2517
01:57:47,230 --> 01:57:52,450
place info<font color="#CCCCCC"> bck and up a rata skip over</font>

2518
01:57:52,450 --> 01:57:53,770
very<font color="#CCCCCC"> quickly because it's really</font>

2519
01:57:53,770 --> 01:57:56,950
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> here's a cons</font><font color="#E5E5E5"> block that</font>

2520
01:57:56,950 --> 01:58:00,340
consists of a come to<font color="#E5E5E5"> D the batch</font><font color="#CCCCCC"> non 2d</font>

2521
01:58:00,340 --> 01:58:05,080
and a leaky<font color="#E5E5E5"> value</font><font color="#CCCCCC"> so in my initializer I</font>

2522
01:58:05,080 --> 01:58:07,000
can go ahead<font color="#E5E5E5"> and say</font><font color="#CCCCCC"> okay we'll start</font>

2523
01:58:07,000 --> 01:58:11,650
<font color="#E5E5E5">with a current block</font><font color="#CCCCCC"> optionally have a</font>

2524
01:58:11,650 --> 01:58:14,560
few extra comic blocks<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is really</font>

2525
01:58:14,560 --> 01:58:18,100
nice here's a while loop that<font color="#CCCCCC"> says keep</font>

2526
01:58:18,100 --> 01:58:20,820
adding more<font color="#E5E5E5"> downsampling blocks until</font>

2527
01:58:20,820 --> 01:58:26,890
<font color="#CCCCCC">you've</font><font color="#E5E5E5"> varied up sampling blocks until</font>

2528
01:58:26,890 --> 01:58:29,770
you've got as many<font color="#E5E5E5"> as you need</font><font color="#CCCCCC"> so that's</font>

2529
01:58:29,770 --> 01:58:31,510
<font color="#CCCCCC">really nice</font><font color="#E5E5E5"> kind of use of a while</font><font color="#CCCCCC"> loop</font>

2530
01:58:31,510 --> 01:58:35,610
to simplify<font color="#CCCCCC"> our getting our architecture</font>

2531
01:58:35,610 --> 01:58:38,050
and then<font color="#CCCCCC"> a final</font><font color="#E5E5E5"> comic block at the end</font>

2532
01:58:38,050 --> 01:58:41,800
to actually<font color="#E5E5E5"> create the thing we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> and</font>

2533
01:58:41,800 --> 01:58:45,790
then this is pretty<font color="#E5E5E5"> nifty</font><font color="#CCCCCC"> if you could</font>

2534
01:58:45,790 --> 01:58:50,530
pass in<font color="#CCCCCC"> ng</font><font color="#E5E5E5"> to you greater than one</font>

2535
01:58:50,530 --> 01:58:53,260
then it will call<font color="#E5E5E5"> parallel</font><font color="#CCCCCC"> data parallel</font>

2536
01:58:53,260 --> 01:58:56,139
passing in those GPU<font color="#CCCCCC"> IDs</font><font color="#E5E5E5"> and it will do</font>

2537
01:58:56,139 --> 01:59:00,340
automatic multi-gpu<font color="#E5E5E5"> training so this is</font>

2538
01:59:00,340 --> 01:59:02,260
like by far the easiest multi-gpu

2539
01:59:02,260 --> 01:59:07,119
training I've ever seen<font color="#CCCCCC"> so yeah that's</font>

2540
01:59:07,119 --> 01:59:08,770
it<font color="#E5E5E5"> that's the that's the forward pass</font>

2541
01:59:08,770 --> 01:59:12,179
<font color="#E5E5E5">behind huge</font>

2542
01:59:13,270 --> 01:59:16,780
the reason

2543
01:59:19,770 --> 01:59:23,550
<font color="#E5E5E5">um we'll learn more about this over the</font>

2544
01:59:23,550 --> 01:59:26,400
<font color="#CCCCCC">next couple</font><font color="#E5E5E5"> of weeks</font><font color="#CCCCCC"> in fact given</font><font color="#E5E5E5"> we're</font>

2545
01:59:26,400 --> 01:59:29,550
a little<font color="#CCCCCC"> short of time</font><font color="#E5E5E5"> let let's discuss</font>

2546
01:59:29,550 --> 01:59:31,500
that<font color="#CCCCCC"> next week and let me</font><font color="#E5E5E5"> know if you</font>

2547
01:59:31,500 --> 01:59:34,350
don't<font color="#E5E5E5"> think you cover it</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> okay here's</font>

2548
01:59:34,350 --> 01:59:36,300
<font color="#CCCCCC">a generator looks very very similar</font>

2549
01:59:36,300 --> 01:59:38,790
<font color="#CCCCCC">again</font><font color="#E5E5E5"> as a while loop</font><font color="#CCCCCC"> to make sure that</font>

2550
01:59:38,790 --> 01:59:39,930
we've gone<font color="#CCCCCC"> through them great number of</font>

2551
01:59:39,930 --> 01:59:46,170
decomp blocks so this is actually

2552
01:59:46,170 --> 01:59:47,820
interesting<font color="#CCCCCC"> this</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> probably</font><font color="#E5E5E5"> be</font>

2553
01:59:47,820 --> 01:59:49,590
better<font color="#E5E5E5"> off with an up sampling</font><font color="#CCCCCC"> blocks</font>

2554
01:59:49,590 --> 01:59:52,050
<font color="#CCCCCC">followed by a one-by-one convolution</font><font color="#E5E5E5"> so</font>

2555
01:59:52,050 --> 01:59:53,970
maybe at<font color="#CCCCCC"> home</font><font color="#E5E5E5"> you could try this and see</font>

2556
01:59:53,970 --> 01:59:55,170
if<font color="#E5E5E5"> you get better</font><font color="#CCCCCC"> results because</font><font color="#E5E5E5"> this</font>

2557
01:59:55,170 --> 01:59:57,080
is<font color="#E5E5E5"> probably got the checkerboard</font><font color="#CCCCCC"> pattern</font>

2558
01:59:57,080 --> 02:00:01,200
problem<font color="#E5E5E5"> okay so there's a generator and</font>

2559
02:00:01,200 --> 02:00:04,700
<font color="#E5E5E5">our discriminator</font><font color="#CCCCCC"> 20 75 lines of code</font>

2560
02:00:04,700 --> 02:00:08,000
<font color="#CCCCCC">nice and easy</font>

2561
02:00:09,420 --> 02:00:10,440
<font color="#E5E5E5">you know everything is a little</font><font color="#CCCCCC"> bit</font>

2562
02:00:10,440 --> 02:00:11,820
different implied torch if we want to

2563
02:00:11,820 --> 02:00:14,699
<font color="#E5E5E5">say what initializer to use again we're</font>

2564
02:00:14,699 --> 02:00:17,840
going to kind<font color="#E5E5E5"> of use a little bit more</font>

2565
02:00:17,840 --> 02:00:20,730
<font color="#E5E5E5">it's kind of more decoupled</font><font color="#CCCCCC"> maybe at</font>

2566
02:00:20,730 --> 02:00:22,620
<font color="#CCCCCC">first it's a little</font><font color="#E5E5E5"> more complex</font><font color="#CCCCCC"> there's</font>

2567
02:00:22,620 --> 02:00:24,840
<font color="#E5E5E5">less things you have</font><font color="#CCCCCC"> to learn</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

2568
02:00:24,840 --> 02:00:26,070
cut through in this case we can call

2569
02:00:26,070 --> 02:00:28,140
something<font color="#E5E5E5"> called apply which takes some</font>

2570
02:00:28,140 --> 02:00:32,429
<font color="#E5E5E5">function and asses it to everything</font><font color="#CCCCCC"> in</font>

2571
02:00:32,429 --> 02:00:34,710
our architecture<font color="#E5E5E5"> so this function is</font>

2572
02:00:34,710 --> 02:00:37,110
something<font color="#E5E5E5"> that says oh is this a comp</font><font color="#CCCCCC"> to</font>

2573
02:00:37,110 --> 02:00:40,590
<font color="#CCCCCC">D your</font><font color="#E5E5E5"> comm transpose to D if so use</font>

2574
02:00:40,590 --> 02:00:43,170
this initialization<font color="#E5E5E5"> function or if it's</font>

2575
02:00:43,170 --> 02:00:45,300
a batch norm<font color="#CCCCCC"> use this initialization</font>

2576
02:00:45,300 --> 02:00:48,570
<font color="#E5E5E5">function</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so again you know</font>

2577
02:00:48,570 --> 02:00:49,890
<font color="#CCCCCC">everything's a little bit different you</font>

2578
02:00:49,890 --> 02:00:51,300
<font color="#E5E5E5">there isn't a separate initialize a</font>

2579
02:00:51,300 --> 02:00:54,360
parameter this<font color="#E5E5E5"> is in my opinion much</font>

2580
02:00:54,360 --> 02:01:01,019
more flexible I really like it<font color="#CCCCCC"> okay</font>

2581
02:01:01,019 --> 02:01:04,530
so as before<font color="#CCCCCC"> we need</font><font color="#E5E5E5"> something to create</font>

2582
02:01:04,530 --> 02:01:09,449
some noise<font color="#E5E5E5"> so let's go ahead and</font>

2583
02:01:09,449 --> 02:01:12,059
<font color="#CCCCCC">creating some fixed noise we're going to</font>

2584
02:01:12,059 --> 02:01:13,499
have an optimizer for<font color="#E5E5E5"> the discriminator</font>

2585
02:01:13,499 --> 02:01:16,070
<font color="#CCCCCC">we've got an optimizer for the generator</font>

2586
02:01:16,070 --> 02:01:18,659
<font color="#CCCCCC">here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> something that does one step of</font>

2587
02:01:18,659 --> 02:01:20,190
the discriminator<font color="#CCCCCC"> right so we're going</font>

2588
02:01:20,190 --> 02:01:22,499
<font color="#E5E5E5">to call the forward</font><font color="#CCCCCC"> pass and then we</font>

2589
02:01:22,499 --> 02:01:23,940
call the backward pass<font color="#E5E5E5"> and then we</font>

2590
02:01:23,940 --> 02:01:27,179
<font color="#E5E5E5">return the error</font><font color="#CCCCCC"> just like before we've</font>

2591
02:01:27,179 --> 02:01:29,940
got<font color="#E5E5E5"> something called make trainable</font><font color="#CCCCCC"> so</font>

2592
02:01:29,940 --> 02:01:32,429
this is how we make something trainable

2593
02:01:32,429 --> 02:01:35,940
or not trainable<font color="#CCCCCC"> in play torch and just</font>

2594
02:01:35,940 --> 02:01:38,280
like<font color="#E5E5E5"> before we have a</font><font color="#CCCCCC"> train loop the</font>

2595
02:01:38,280 --> 02:01:42,300
<font color="#CCCCCC">Train loop has got a little bit more</font>

2596
02:01:42,300 --> 02:01:42,960
<font color="#CCCCCC">going on</font>

2597
02:01:42,960 --> 02:01:44,550
partly<font color="#E5E5E5"> because of the</font><font color="#CCCCCC"> vs.</font><font color="#E5E5E5"> playing again</font>

2598
02:01:44,550 --> 02:01:46,260
partly<font color="#E5E5E5"> because of high torch but the</font>

2599
02:01:46,260 --> 02:01:52,889
basic idea is<font color="#E5E5E5"> the same for each epoch or</font>

2600
02:01:52,889 --> 02:01:57,290
each batch

2601
02:01:57,290 --> 02:02:00,730
make the<font color="#CCCCCC"> discriminative trainable</font>

2602
02:02:01,250 --> 02:02:04,340
and then this is<font color="#CCCCCC"> the number of</font>

2603
02:02:04,340 --> 02:02:06,710
<font color="#E5E5E5">iterations to train the discriminator</font>

2604
02:02:06,710 --> 02:02:08,960
<font color="#E5E5E5">for so remember I told you one of the</font>

2605
02:02:08,960 --> 02:02:10,880
nice things<font color="#CCCCCC"> about the Vasa so again is</font>

2606
02:02:10,880 --> 02:02:13,160
that we don't<font color="#E5E5E5"> have to do one best</font>

2607
02:02:13,160 --> 02:02:14,900
<font color="#E5E5E5">estimator one best generator one better</font>

2608
02:02:14,900 --> 02:02:16,220
<font color="#E5E5E5">scream it</font><font color="#CCCCCC"> at one best generator</font><font color="#E5E5E5"> but we</font>

2609
02:02:16,220 --> 02:02:17,770
can<font color="#CCCCCC"> actually train the discriminator</font>

2610
02:02:17,770 --> 02:02:21,140
<font color="#E5E5E5">properly for a bunch of batches and in</font>

2611
02:02:21,140 --> 02:02:24,610
the paper<font color="#E5E5E5"> they suggest</font><font color="#CCCCCC"> using</font>

2612
02:02:24,610 --> 02:02:27,720
[Music]

2613
02:02:27,790 --> 02:02:31,090
<font color="#E5E5E5">five iterations</font><font color="#CCCCCC"> or five batches</font><font color="#E5E5E5"> of</font>

2614
02:02:31,090 --> 02:02:34,060
discriminator training<font color="#E5E5E5"> each time through</font>

2615
02:02:34,060 --> 02:02:36,460
the<font color="#E5E5E5"> loop unless it's one of less you're</font>

2616
02:02:36,460 --> 02:02:37,480
still in the first twenty five

2617
02:02:37,480 --> 02:02:39,490
generations<font color="#E5E5E5"> to twenty five</font><font color="#CCCCCC"> iterations</font>

2618
02:02:39,490 --> 02:02:40,870
<font color="#E5E5E5">and say if you're in the first twenty</font>

2619
02:02:40,870 --> 02:02:43,000
five<font color="#CCCCCC"> iterations</font><font color="#E5E5E5"> through our hundred</font>

2620
02:02:43,000 --> 02:02:45,970
matches and then they also say from time

2621
02:02:45,970 --> 02:02:49,630
<font color="#E5E5E5">to time through</font><font color="#CCCCCC"> 100 batches so it's kind</font>

2622
02:02:49,630 --> 02:02:50,110
<font color="#CCCCCC">of nice</font>

2623
02:02:50,110 --> 02:02:53,310
by having the<font color="#E5E5E5"> flexibility here to really</font>

2624
02:02:53,310 --> 02:02:55,570
change things<font color="#E5E5E5"> we can do</font><font color="#CCCCCC"> exactly what the</font>

2625
02:02:55,570 --> 02:02:58,120
paper wants<font color="#E5E5E5"> us to do so basically at</font>

2626
02:02:58,120 --> 02:02:59,320
first we're going<font color="#E5E5E5"> to train the</font>

2627
02:02:59,320 --> 02:03:03,070
discriminator<font color="#E5E5E5"> carefully and</font><font color="#CCCCCC"> we're also</font>

2628
02:03:03,070 --> 02:03:04,690
from time to time<font color="#CCCCCC"> train</font><font color="#E5E5E5"> the</font>

2629
02:03:04,690 --> 02:03:06,340
discriminator<font color="#E5E5E5"> very carefully otherwise</font>

2630
02:03:06,340 --> 02:03:09,639
<font color="#CCCCCC">we'll just do five batches</font>

2631
02:03:09,639 --> 02:03:13,000
so this is where we go ahead<font color="#CCCCCC"> and pain</font>

2632
02:03:13,000 --> 02:03:15,630
the discriminator<font color="#CCCCCC"> and you'll see here we</font>

2633
02:03:15,630 --> 02:03:19,929
<font color="#E5E5E5">plant</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> it's the same as clip the</font>

2634
02:03:19,929 --> 02:03:23,230
weights in the discriminator<font color="#E5E5E5"> to fall in</font>

2635
02:03:23,230 --> 02:03:25,840
this range<font color="#E5E5E5"> and if you're interested in</font>

2636
02:03:25,840 --> 02:03:27,400
reading the paper the<font color="#E5E5E5"> paper explains</font>

2637
02:03:27,400 --> 02:03:29,350
that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> basically the</font><font color="#CCCCCC"> reason that is is</font>

2638
02:03:29,350 --> 02:03:34,380
<font color="#CCCCCC">that they're</font><font color="#E5E5E5"> their assumptions are only</font>

2639
02:03:34,380 --> 02:03:38,230
only true in this kind of small area

2640
02:03:38,230 --> 02:03:39,850
that's that's why we have to<font color="#E5E5E5"> make sure</font>

2641
02:03:39,850 --> 02:03:43,960
that<font color="#CCCCCC"> the way to stay in a small</font><font color="#E5E5E5"> area</font><font color="#CCCCCC"> so</font>

2642
02:03:43,960 --> 02:03:45,820
then we go ahead<font color="#CCCCCC"> and do a</font><font color="#E5E5E5"> single step of</font>

2643
02:03:45,820 --> 02:03:49,659
<font color="#E5E5E5">the discriminator</font><font color="#CCCCCC"> then we create the</font>

2644
02:03:49,659 --> 02:03:51,580
noise and<font color="#E5E5E5"> to a single step</font><font color="#CCCCCC"> at the</font>

2645
02:03:51,580 --> 02:03:59,830
generator we get our fake data for the

2646
02:03:59,830 --> 02:04:02,500
discriminator<font color="#E5E5E5"> that we can subtract the</font>

2647
02:04:02,500 --> 02:04:05,469
fake from the<font color="#E5E5E5"> real to get our error the</font>

2648
02:04:05,469 --> 02:04:07,239
<font color="#E5E5E5">discriminator so there's one step of the</font>

2649
02:04:07,239 --> 02:04:12,760
discriminator<font color="#E5E5E5"> we do that either 5</font><font color="#CCCCCC"> or 5</font>

2650
02:04:12,760 --> 02:04:18,100
or<font color="#E5E5E5"> 100 times</font><font color="#CCCCCC"> make our discriminator</font><font color="#E5E5E5"> not</font>

2651
02:04:18,100 --> 02:04:21,250
trainable<font color="#E5E5E5"> and then do one step of the</font>

2652
02:04:21,250 --> 02:04:23,949
generator<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see here we call</font>

2653
02:04:23,949 --> 02:04:26,830
generator with some noise<font color="#E5E5E5"> and then pass</font>

2654
02:04:26,830 --> 02:04:28,810
it<font color="#E5E5E5"> into the discriminator</font><font color="#CCCCCC"> to see if we</font>

2655
02:04:28,810 --> 02:04:32,139
tricked it or not so<font color="#E5E5E5"> during the week you</font>

2656
02:04:32,139 --> 02:04:34,179
<font color="#E5E5E5">can look at this these two different</font>

2657
02:04:34,179 --> 02:04:35,770
<font color="#CCCCCC">versions and you're going to see</font>

2658
02:04:35,770 --> 02:04:38,530
basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> pi torch</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> carrot</font>

2659
02:04:38,530 --> 02:04:40,659
version of<font color="#E5E5E5"> basically the same thing and</font>

2660
02:04:40,659 --> 02:04:44,530
<font color="#E5E5E5">the only</font><font color="#CCCCCC"> difference</font><font color="#E5E5E5"> is in the two things</font>

2661
02:04:44,530 --> 02:04:47,199
one is the presence of this clamping<font color="#E5E5E5"> and</font>

2662
02:04:47,199 --> 02:04:50,070
the second is<font color="#E5E5E5"> that the loss function is</font>

2663
02:04:50,070 --> 02:04:53,650
mean squared error rather than cross

2664
02:04:53,650 --> 02:04:55,060
interview

2665
02:04:55,060 --> 02:05:00,960
so let's see what happens here<font color="#CCCCCC"> is</font>

2666
02:05:04,139 --> 02:05:07,249
samples from<font color="#E5E5E5"> 510</font>

2667
02:05:07,249 --> 02:05:09,530
so they're like certainly a lot<font color="#CCCCCC"> better</font>

2668
02:05:09,530 --> 02:05:16,510
than<font color="#E5E5E5"> our crappy DT game</font><font color="#CCCCCC"> mm</font><font color="#E5E5E5"> most examples</font>

2669
02:05:17,070 --> 02:05:19,650
but they're not great<font color="#CCCCCC"> why are they</font><font color="#E5E5E5"> not</font>

2670
02:05:19,650 --> 02:05:22,290
great<font color="#E5E5E5"> so probably the reason they're not</font>

2671
02:05:22,290 --> 02:05:26,909
great is<font color="#E5E5E5"> because say</font><font color="#CCCCCC"> 510 has quite a few</font>

2672
02:05:26,909 --> 02:05:28,650
categories different kinds<font color="#CCCCCC"> of</font><font color="#E5E5E5"> categories</font>

2673
02:05:28,650 --> 02:05:31,469
of<font color="#CCCCCC"> different</font><font color="#E5E5E5"> kinds of</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> and so it</font>

2674
02:05:31,469 --> 02:05:32,550
doesn't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> know what it's meant to</font>

2675
02:05:32,550 --> 02:05:34,829
be drawing a picture<font color="#E5E5E5"> of sometimes I</font>

2676
02:05:34,829 --> 02:05:36,060
guess it kind of<font color="#CCCCCC"> pickets it out like</font>

2677
02:05:36,060 --> 02:05:39,420
this must be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> plan I think</font><font color="#CCCCCC"> but a lot of</font>

2678
02:05:39,420 --> 02:05:42,119
the time it's kind<font color="#E5E5E5"> of it hatches</font><font color="#CCCCCC"> and</font>

2679
02:05:42,119 --> 02:05:43,619
kind<font color="#E5E5E5"> of draws a</font><font color="#CCCCCC"> picture of something</font>

2680
02:05:43,619 --> 02:05:44,790
<font color="#CCCCCC">that looks like</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> might be a reasonable</font>

2681
02:05:44,790 --> 02:05:46,260
<font color="#E5E5E5">picture but it's not a picture of</font>

2682
02:05:46,260 --> 02:05:48,690
<font color="#E5E5E5">anything in particular on the other hand</font>

2683
02:05:48,690 --> 02:05:54,150
<font color="#E5E5E5">the elf son</font><font color="#CCCCCC"> data set as 3 million</font>

2684
02:05:54,150 --> 02:05:57,690
<font color="#E5E5E5">bedrooms so we would hope that when</font><font color="#CCCCCC"> we</font>

2685
02:05:57,690 --> 02:06:01,199
<font color="#CCCCCC">train the vastest and</font><font color="#E5E5E5"> Gannon else on</font>

2686
02:06:01,199 --> 02:06:04,360
bedrooms we might get<font color="#CCCCCC"> better results</font>

2687
02:06:04,360 --> 02:06:07,510
so but here's the real<font color="#E5E5E5"> side by</font><font color="#CCCCCC"> 10 by the</font>

2688
02:06:07,510 --> 02:06:09,720
way

2689
02:06:11,110 --> 02:06:16,180
so here are a fake<font color="#CCCCCC"> victims</font>

2690
02:06:16,180 --> 02:06:20,260
and they are<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> freaking awesome so</font>

2691
02:06:20,260 --> 02:06:23,440
<font color="#E5E5E5">literally they started out as random</font>

2692
02:06:23,440 --> 02:06:27,280
noise<font color="#E5E5E5"> and everyone has</font><font color="#CCCCCC"> been turned in</font>

2693
02:06:27,280 --> 02:06:29,710
like<font color="#E5E5E5"> that definitely a bedroom when</font>

2694
02:06:29,710 --> 02:06:31,330
they're all definitely<font color="#CCCCCC"> different and so</font>

2695
02:06:31,330 --> 02:06:34,930
and then here is<font color="#E5E5E5"> the real victims to</font>

2696
02:06:34,930 --> 02:06:40,690
compare you<font color="#CCCCCC"> can kind of see here that</font>

2697
02:06:40,690 --> 02:06:43,080
<font color="#E5E5E5">like imagine if you talk</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this and</font>

2698
02:06:43,080 --> 02:06:46,640
stuck it on<font color="#CCCCCC"> the end of</font>

2699
02:06:46,640 --> 02:06:50,240
kind of<font color="#E5E5E5"> generator</font><font color="#CCCCCC"> you could you</font><font color="#E5E5E5"> know I</font>

2700
02:06:50,240 --> 02:06:52,190
<font color="#CCCCCC">think really use this to make your</font>

2701
02:06:52,190 --> 02:06:55,910
generator<font color="#CCCCCC"> much more believable you know</font>

2702
02:06:55,910 --> 02:06:58,760
like whatever<font color="#CCCCCC"> any</font><font color="#E5E5E5"> time you kind of look</font>

2703
02:06:58,760 --> 02:07:00,230
at it you say oh<font color="#CCCCCC"> that doesn't look like</font>

2704
02:07:00,230 --> 02:07:04,520
the real X maybe you could<font color="#E5E5E5"> try using a</font><font color="#CCCCCC"> W</font>

2705
02:07:04,520 --> 02:07:07,280
<font color="#E5E5E5">again to try to make</font><font color="#CCCCCC"> it look</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> like a</font>

2706
02:07:07,280 --> 02:07:10,480
real<font color="#CCCCCC"> next</font>

2707
02:07:12,250 --> 02:07:18,910
so this paper is<font color="#CCCCCC"> that and like so</font>

2708
02:07:18,910 --> 02:07:21,430
important<font color="#E5E5E5"> like this is basically</font><font color="#CCCCCC"> so</font>

2709
02:07:21,430 --> 02:07:26,140
here's the<font color="#E5E5E5"> other</font><font color="#CCCCCC"> thing the last</font><font color="#E5E5E5"> the lost</font>

2710
02:07:26,140 --> 02:07:28,150
<font color="#CCCCCC">function for these</font><font color="#E5E5E5"> actually makes sense</font>

2711
02:07:28,150 --> 02:07:29,740
like the discriminator and the generator

2712
02:07:29,740 --> 02:07:33,160
<font color="#CCCCCC">loss functions actually decrease as they</font>

2713
02:07:33,160 --> 02:07:35,380
<font color="#E5E5E5">get better so you can actually tell if</font>

2714
02:07:35,380 --> 02:07:37,960
your thing is<font color="#E5E5E5"> training properly</font><font color="#CCCCCC"> you can</font>

2715
02:07:37,960 --> 02:07:39,640
<font color="#CCCCCC">actually kind of you can't</font><font color="#E5E5E5"> exactly</font>

2716
02:07:39,640 --> 02:07:42,670
compare<font color="#E5E5E5"> through different architectures</font>

2717
02:07:42,670 --> 02:07:45,370
to each other still<font color="#E5E5E5"> but you can</font>

2718
02:07:45,370 --> 02:07:46,750
certainly<font color="#E5E5E5"> see that the training code</font>

2719
02:07:46,750 --> 02:07:49,770
sort of working<font color="#E5E5E5"> so</font><font color="#CCCCCC"> now that we like</font><font color="#E5E5E5"> have</font>

2720
02:07:49,770 --> 02:07:53,380
you<font color="#E5E5E5"> know in my</font><font color="#CCCCCC"> opinion</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> gain</font><font color="#E5E5E5"> that</font>

2721
02:07:53,380 --> 02:07:56,740
<font color="#E5E5E5">actually really works reliably for the</font>

2722
02:07:56,740 --> 02:07:59,290
first time ever<font color="#CCCCCC"> I thought like</font><font color="#E5E5E5"> this</font>

2723
02:07:59,290 --> 02:08:03,280
changes the<font color="#CCCCCC"> whole kind</font><font color="#E5E5E5"> of changes the</font>

2724
02:08:03,280 --> 02:08:05,230
equation for what generators can and

2725
02:08:05,230 --> 02:08:07,570
can't do and this has not<font color="#CCCCCC"> been applied</font>

2726
02:08:07,570 --> 02:08:13,090
<font color="#E5E5E5">to anything yet so you can take any old</font>

2727
02:08:13,090 --> 02:08:18,450
paper that produces 3d outputs or

2728
02:08:18,450 --> 02:08:21,070
segmentations or depth outputs oil

2729
02:08:21,070 --> 02:08:23,740
<font color="#E5E5E5">colorization or whatever and add this</font>

2730
02:08:23,740 --> 02:08:25,960
and it<font color="#E5E5E5"> would be great</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see what</font>

2731
02:08:25,960 --> 02:08:28,330
happens<font color="#E5E5E5"> right because none</font><font color="#CCCCCC"> of that's</font>

2732
02:08:28,330 --> 02:08:30,370
been done<font color="#E5E5E5"> before and it's not been</font><font color="#CCCCCC"> done</font>

2733
02:08:30,370 --> 02:08:32,440
before<font color="#E5E5E5"> because we haven't had</font><font color="#CCCCCC"> a good way</font>

2734
02:08:32,440 --> 02:08:36,990
to<font color="#CCCCCC"> train</font><font color="#E5E5E5"> can swivel so</font>

2735
02:08:38,800 --> 02:08:41,710
you know this is kind of I think

2736
02:08:41,710 --> 02:08:44,920
something where anybody who's<font color="#CCCCCC"> interested</font>

2737
02:08:44,920 --> 02:08:47,530
in in a project<font color="#CCCCCC"> yeah this</font><font color="#E5E5E5"> would be a</font>

2738
02:08:47,530 --> 02:08:49,600
great project and something<font color="#E5E5E5"> that maybe</font>

2739
02:08:49,600 --> 02:08:53,950
you<font color="#E5E5E5"> can do reasonably quickly</font><font color="#CCCCCC"> another</font>

2740
02:08:53,950 --> 02:08:56,050
thing you could do<font color="#CCCCCC"> as a project is to</font>

2741
02:08:56,050 --> 02:08:58,870
convert this into chaos

2742
02:08:58,870 --> 02:09:02,530
like so you<font color="#E5E5E5"> can take the</font><font color="#CCCCCC"> care of dcen</font>

2743
02:09:02,530 --> 02:09:04,560
notebook that we've already<font color="#E5E5E5"> got and</font>

2744
02:09:04,560 --> 02:09:07,330
change the<font color="#CCCCCC"> loss function at the weight</font>

2745
02:09:07,330 --> 02:09:10,720
<font color="#CCCCCC">tipping and try training on this elf own</font>

2746
02:09:10,720 --> 02:09:13,330
bedroom data set and you<font color="#CCCCCC"> should</font><font color="#E5E5E5"> get the</font>

2747
02:09:13,330 --> 02:09:15,640
<font color="#E5E5E5">same results and then you can add this</font>

2748
02:09:15,640 --> 02:09:19,500
on top<font color="#CCCCCC"> of your any of your care of stuff</font>

2749
02:09:19,500 --> 02:09:22,390
<font color="#CCCCCC">so yeah there's so much you could do</font>

2750
02:09:22,390 --> 02:09:25,360
this week<font color="#CCCCCC"> I'm I don't</font><font color="#E5E5E5"> feel like I want</font>

2751
02:09:25,360 --> 02:09:28,710
to give<font color="#CCCCCC"> you a assignment per se because</font>

2752
02:09:28,710 --> 02:09:30,790
<font color="#E5E5E5">there's a thousand assignments you</font><font color="#CCCCCC"> could</font>

2753
02:09:30,790 --> 02:09:32,920
do I<font color="#CCCCCC"> think you know as per usual</font><font color="#E5E5E5"> you</font>

2754
02:09:32,920 --> 02:09:36,060
should go back and look<font color="#CCCCCC"> at the papers</font>

2755
02:09:36,060 --> 02:09:40,690
<font color="#CCCCCC">the original Dan paper is a fairly</font><font color="#E5E5E5"> easy</font>

2756
02:09:40,690 --> 02:09:42,250
<font color="#E5E5E5">read there's a section called</font>

2757
02:09:42,250 --> 02:09:44,440
theoretical<font color="#E5E5E5"> results which is</font><font color="#CCCCCC"> like this</font>

2758
02:09:44,440 --> 02:09:48,670
is kind of like the pointless<font color="#E5E5E5"> math bit</font>

2759
02:09:48,670 --> 02:09:50,500
you know<font color="#E5E5E5"> like here's some theoretical</font>

2760
02:09:50,500 --> 02:09:52,390
<font color="#E5E5E5">stuff it's actually</font><font color="#CCCCCC"> interesting to</font><font color="#E5E5E5"> read</font>

2761
02:09:52,390 --> 02:09:54,790
this now<font color="#E5E5E5"> because like you go</font><font color="#CCCCCC"> back and</font>

2762
02:09:54,790 --> 02:09:56,200
<font color="#CCCCCC">you look at this stuff</font><font color="#E5E5E5"> where they like</font>

2763
02:09:56,200 --> 02:09:58,780
prove various nice things about<font color="#E5E5E5"> their</font>

2764
02:09:58,780 --> 02:10:02,200
game<font color="#CCCCCC"> so like they're talking</font><font color="#E5E5E5"> about how</font>

2765
02:10:02,200 --> 02:10:03,280
the<font color="#E5E5E5"> generative model perfectly</font>

2766
02:10:03,280 --> 02:10:05,100
replicates the data generating process

2767
02:10:05,100 --> 02:10:07,570
<font color="#CCCCCC">it's interesting to</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> back and</font><font color="#E5E5E5"> look and</font>

2768
02:10:07,570 --> 02:10:10,660
say like<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so they like prove these</font>

2769
02:10:10,660 --> 02:10:14,170
things<font color="#E5E5E5"> but it turned out to</font><font color="#CCCCCC"> be totally</font>

2770
02:10:14,170 --> 02:10:17,080
pointless like like it still didn't work

2771
02:10:17,080 --> 02:10:20,050
<font color="#CCCCCC">like it didn't really work so it's kind</font>

2772
02:10:20,050 --> 02:10:21,250
of interesting<font color="#CCCCCC"> to look back</font><font color="#E5E5E5"> and say oh</font>

2773
02:10:21,250 --> 02:10:23,620
<font color="#E5E5E5">so how you know how is it the people we</font>

2774
02:10:23,620 --> 02:10:24,850
<font color="#CCCCCC">just</font><font color="#E5E5E5"> doesn't say this isn't a good paper</font>

2775
02:10:24,850 --> 02:10:27,010
it is<font color="#E5E5E5"> a good paper but it is interesting</font>

2776
02:10:27,010 --> 02:10:29,080
to<font color="#CCCCCC"> see like</font><font color="#E5E5E5"> when when is the theoretical</font>

2777
02:10:29,080 --> 02:10:31,660
<font color="#E5E5E5">stuff useful and we're not</font><font color="#CCCCCC"> well then you</font>

2778
02:10:31,660 --> 02:10:33,660
look at the<font color="#CCCCCC"> Buffett sign Gann</font>

2779
02:10:33,660 --> 02:10:36,850
<font color="#E5E5E5">theoretical sections and it spends a lot</font>

2780
02:10:36,850 --> 02:10:39,790
of time<font color="#E5E5E5"> talking about why their</font><font color="#CCCCCC"> Theory</font>

2781
02:10:39,790 --> 02:10:42,190
<font color="#CCCCCC">actually matters</font><font color="#E5E5E5"> so they have this</font>

2782
02:10:42,190 --> 02:10:44,050
<font color="#E5E5E5">really cool example for example that</font>

2783
02:10:44,050 --> 02:10:46,360
<font color="#E5E5E5">they say that's creating really simple</font>

2784
02:10:46,360 --> 02:10:49,030
what if you want to<font color="#E5E5E5"> learn like</font><font color="#CCCCCC"> let's</font>

2785
02:10:49,030 --> 02:10:50,590
just<font color="#E5E5E5"> parallel lines</font>

2786
02:10:50,590 --> 02:10:53,770
and they show like why it is that<font color="#E5E5E5"> the</font>

2787
02:10:53,770 --> 02:10:55,990
kind of old way of doing games<font color="#E5E5E5"> can't</font>

2788
02:10:55,990 --> 02:10:58,450
mine parallel lines<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then they show</font>

2789
02:10:58,450 --> 02:11:01,330
how their different<font color="#E5E5E5"> objective function</font>

2790
02:11:01,330 --> 02:11:06,340
<font color="#CCCCCC">Emlyn</font><font color="#E5E5E5"> parallel was so I think anybody</font><font color="#CCCCCC"> is</font>

2791
02:11:06,340 --> 02:11:08,590
interested in kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> getting into the</font>

2792
02:11:08,590 --> 02:11:10,840
theory a<font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> very</font>

2793
02:11:10,840 --> 02:11:12,850
interesting<font color="#E5E5E5"> to look</font><font color="#CCCCCC"> at kind of like ok</font>

2794
02:11:12,850 --> 02:11:15,760
why did<font color="#CCCCCC"> the you know</font><font color="#E5E5E5"> proof of</font>

2795
02:11:15,760 --> 02:11:16,630
convergence

2796
02:11:16,630 --> 02:11:19,390
you know like showed something<font color="#E5E5E5"> that</font>

2797
02:11:19,390 --> 02:11:20,890
didn't show something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> really turned</font>

2798
02:11:20,890 --> 02:11:22,780
out<font color="#CCCCCC"> to matter</font><font color="#E5E5E5"> where else in this paper</font>

2799
02:11:22,780 --> 02:11:25,450
<font color="#E5E5E5">the theory turned out to be super</font>

2800
02:11:25,450 --> 02:11:27,040
important and<font color="#E5E5E5"> basically created</font>

2801
02:11:27,040 --> 02:11:29,260
something<font color="#E5E5E5"> that allowed</font><font color="#CCCCCC"> gangs to work for</font>

2802
02:11:29,260 --> 02:11:31,990
the first<font color="#E5E5E5"> time</font><font color="#CCCCCC"> so there's lots of</font><font color="#E5E5E5"> stuff</font>

2803
02:11:31,990 --> 02:11:33,250
you<font color="#E5E5E5"> can get out of these papers if</font>

2804
02:11:33,250 --> 02:11:37,270
you're if you're interested in terms of

2805
02:11:37,270 --> 02:11:40,480
the notation<font color="#E5E5E5"> we might look at some of</font>

2806
02:11:40,480 --> 02:11:41,710
the notation a bit a<font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> more</font>

2807
02:11:41,710 --> 02:11:46,390
next week<font color="#E5E5E5"> but if we look for</font><font color="#CCCCCC"> example at</font>

2808
02:11:46,390 --> 02:11:48,720
<font color="#CCCCCC">the</font>

2809
02:11:50,920 --> 02:11:53,030
<font color="#CCCCCC">see</font><font color="#E5E5E5"> if we can find the algorithm</font>

2810
02:11:53,030 --> 02:11:54,970
sections

2811
02:11:54,970 --> 02:11:57,030
you

2812
02:11:59,350 --> 02:12:02,200
I think in<font color="#CCCCCC"> general like the most the</font><font color="#E5E5E5"> bid</font>

2813
02:12:02,200 --> 02:12:04,000
I find the most<font color="#E5E5E5"> useful nothing nothing</font>

2814
02:12:04,000 --> 02:12:06,040
much<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> math guy is the bit</font><font color="#CCCCCC"> where they</font>

2815
02:12:06,040 --> 02:12:08,440
actually<font color="#E5E5E5"> write the pseudocode and even</font>

2816
02:12:08,440 --> 02:12:13,300
that it's<font color="#CCCCCC"> useful to learn some kind of</font>

2817
02:12:13,300 --> 02:12:17,440
nomenclature<font color="#CCCCCC"> so for each iteration</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> h</font>

2818
02:12:17,440 --> 02:12:20,920
step easy what does it mean<font color="#E5E5E5"> sample noise</font>

2819
02:12:20,920 --> 02:12:27,490
samples from noise prior probability<font color="#E5E5E5"> no</font>

2820
02:12:27,490 --> 02:12:28,840
main structure which you<font color="#E5E5E5"> can very</font>

2821
02:12:28,840 --> 02:12:33,010
quickly<font color="#E5E5E5"> translate but a prior simply</font>

2822
02:12:33,010 --> 02:12:39,040
means<font color="#E5E5E5"> NP random dot nothing right so in</font>

2823
02:12:39,040 --> 02:12:41,410
this<font color="#E5E5E5"> case you know we probably like you</font>

2824
02:12:41,410 --> 02:12:45,100
know<font color="#E5E5E5"> NP random normal so this just means</font>

2825
02:12:45,100 --> 02:12:46,630
you know some random<font color="#E5E5E5"> number generator</font>

2826
02:12:46,630 --> 02:12:49,720
<font color="#E5E5E5">that you get to pick this</font><font color="#CCCCCC"> one here</font>

2827
02:12:49,720 --> 02:12:52,120
<font color="#E5E5E5">sample from a data generating</font>

2828
02:12:52,120 --> 02:12:55,030
distribution that means<font color="#E5E5E5"> randomly pick</font>

2829
02:12:55,030 --> 02:12:57,610
some stuff<font color="#CCCCCC"> from</font><font color="#E5E5E5"> your array okay so these</font>

2830
02:12:57,610 --> 02:12:59,950
are<font color="#E5E5E5"> the two steps right generate</font><font color="#CCCCCC"> some</font>

2831
02:12:59,950 --> 02:13:02,710
<font color="#CCCCCC">random numbers and then randomly</font><font color="#E5E5E5"> select</font>

2832
02:13:02,710 --> 02:13:05,680
<font color="#CCCCCC">some things from</font><font color="#E5E5E5"> your array</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> actually</font>

2833
02:13:05,680 --> 02:13:08,620
in the and there's a bit where<font color="#CCCCCC"> you</font>

2834
02:13:08,620 --> 02:13:10,630
talked about<font color="#E5E5E5"> the gradient</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> kind</font>

2835
02:13:10,630 --> 02:13:13,270
of<font color="#E5E5E5"> lightly ignore except the bit in</font><font color="#CCCCCC"> the</font>

2836
02:13:13,270 --> 02:13:15,700
<font color="#CCCCCC">middle is your loss function they can</font>

2837
02:13:15,700 --> 02:13:19,180
here you see here this said these things

2838
02:13:19,180 --> 02:13:21,370
here is your noise<font color="#CCCCCC"> sets your noise okay</font>

2839
02:13:21,370 --> 02:13:24,330
so noise generator on noise

2840
02:13:24,330 --> 02:13:27,040
discriminator<font color="#CCCCCC"> on generator on noise</font><font color="#E5E5E5"> okay</font>

2841
02:13:27,040 --> 02:13:27,910
so<font color="#E5E5E5"> there's the bit where we're trying to</font>

2842
02:13:27,910 --> 02:13:30,430
<font color="#E5E5E5">fool the discriminator and we're trying</font>

2843
02:13:30,430 --> 02:13:32,110
to make that trigger<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's why we</font>

2844
02:13:32,110 --> 02:13:34,300
<font color="#CCCCCC">drew one minus and then here's</font><font color="#E5E5E5"> the</font>

2845
02:13:34,300 --> 02:13:36,340
getting the discriminator to be accurate

2846
02:13:36,340 --> 02:13:39,430
<font color="#E5E5E5">because these</font><font color="#CCCCCC"> x's is the real data</font><font color="#E5E5E5"> okay</font>

2847
02:13:39,430 --> 02:13:42,580
so<font color="#E5E5E5"> that's a math version that will be</font>

2848
02:13:42,580 --> 02:13:48,130
<font color="#CCCCCC">displayed</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Bossip sign can also has a</font>

2849
02:13:48,130 --> 02:13:51,490
algorithm<font color="#E5E5E5"> section and so it's kind of</font>

2850
02:13:51,490 --> 02:13:54,750
interesting<font color="#CCCCCC"> to compare</font><font color="#E5E5E5"> the two</font>

2851
02:13:57,160 --> 02:13:59,830
so here we go<font color="#E5E5E5"> mr. Stein</font><font color="#CCCCCC"> GAD is the</font>

2852
02:13:59,830 --> 02:14:01,750
<font color="#CCCCCC">algorithm and basically</font><font color="#E5E5E5"> this says</font>

2853
02:14:01,750 --> 02:14:03,370
exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same thing as the last</font><font color="#E5E5E5"> one</font>

2854
02:14:03,370 --> 02:14:06,880
said<font color="#E5E5E5"> but you know I actually find this</font>

2855
02:14:06,880 --> 02:14:08,770
one a big<font color="#CCCCCC"> Stara sample from the real</font>

2856
02:14:08,770 --> 02:14:14,020
data sample from your priors<font color="#E5E5E5"> okay so</font>

2857
02:14:14,020 --> 02:14:15,910
hopefully<font color="#E5E5E5"> that's enough to get going and</font>

2858
02:14:15,910 --> 02:14:17,980
yeah<font color="#E5E5E5"> look</font><font color="#CCCCCC"> forward to talking on the</font>

2859
02:14:17,980 --> 02:14:19,650
forums and<font color="#E5E5E5"> see how everybody gets along</font>

2860
02:14:19,650 --> 02:14:22,860
thanks everybody

2861
02:14:22,940 --> 00:00:00,000
[Applause]

