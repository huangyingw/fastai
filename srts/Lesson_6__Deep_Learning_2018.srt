1
00:00:00,060 --> 00:00:02,970
welcome back<font color="#E5E5E5"> less than</font><font color="#CCCCCC"> six so this</font><font color="#E5E5E5"> is</font>

2
00:00:02,970 --> 00:00:09,719
our penultimate<font color="#E5E5E5"> lesson</font><font color="#CCCCCC"> and believe it</font><font color="#E5E5E5"> or</font>

3
00:00:09,719 --> 00:00:15,929
not<font color="#E5E5E5"> a couple of weeks ago in Lesson four</font>

4
00:00:15,929 --> 00:00:17,699
<font color="#E5E5E5">I mentioned I was</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> share that</font>

5
00:00:17,699 --> 00:00:19,980
lesson<font color="#E5E5E5"> with this terrific</font><font color="#CCCCCC"> you know P</font>

6
00:00:19,980 --> 00:00:22,800
researcher Sebastian<font color="#E5E5E5"> Reuter which I did</font>

7
00:00:22,800 --> 00:00:25,529
and he he said he<font color="#E5E5E5"> loved it and he's gone</font>

8
00:00:25,529 --> 00:00:29,189
on to yesterday<font color="#E5E5E5"> released this new post</font>

9
00:00:29,189 --> 00:00:31,050
he called<font color="#CCCCCC"> optimization for deep learning</font>

10
00:00:31,050 --> 00:00:34,579
highlights in 2017<font color="#E5E5E5"> in which he covered</font>

11
00:00:34,579 --> 00:00:36,510
<font color="#CCCCCC">basically everything that we talked</font>

12
00:00:36,510 --> 00:00:40,290
<font color="#E5E5E5">about in that lesson</font><font color="#CCCCCC"> and with some</font><font color="#E5E5E5"> very</font>

13
00:00:40,290 --> 00:00:42,090
nice<font color="#E5E5E5"> shout outs to some of the work</font><font color="#CCCCCC"> that</font>

14
00:00:42,090 --> 00:00:43,710
some of the students<font color="#E5E5E5"> here</font><font color="#CCCCCC"> have done</font>

15
00:00:43,710 --> 00:00:46,920
including<font color="#CCCCCC"> when he talked about</font><font color="#E5E5E5"> this</font>

16
00:00:46,920 --> 00:00:53,910
<font color="#E5E5E5">separation of the separation of weight</font>

17
00:00:53,910 --> 00:00:58,020
decay from the<font color="#E5E5E5"> momentum term and so he</font>

18
00:00:58,020 --> 00:01:01,410
actually mentions here<font color="#E5E5E5"> the opportunities</font>

19
00:01:01,410 --> 00:01:04,199
in terms of improved<font color="#E5E5E5"> kind of software</font>

20
00:01:04,199 --> 00:01:06,000
decoupling this allows and actually

21
00:01:06,000 --> 00:01:11,909
links to the<font color="#E5E5E5"> commits from an answer</font><font color="#CCCCCC"> hah</font>

22
00:01:11,909 --> 00:01:13,799
actually<font color="#E5E5E5"> showing</font><font color="#CCCCCC"> how to implement this</font>

23
00:01:13,799 --> 00:01:16,710
<font color="#E5E5E5">in fast AI so first</font><font color="#CCCCCC"> a eyes code is</font>

24
00:01:16,710 --> 00:01:18,060
<font color="#E5E5E5">actually being</font><font color="#CCCCCC"> used as a bit of a role</font>

25
00:01:18,060 --> 00:01:23,520
<font color="#CCCCCC">model now he then covers some of these</font>

26
00:01:23,520 --> 00:01:25,170
<font color="#E5E5E5">learning rate</font><font color="#CCCCCC"> tuning techniques</font><font color="#E5E5E5"> that</font>

27
00:01:25,170 --> 00:01:31,829
we've talked about and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the SGD</font>

28
00:01:31,829 --> 00:01:33,720
<font color="#E5E5E5">our schedule it looks a bit different</font><font color="#CCCCCC"> to</font>

29
00:01:33,720 --> 00:01:34,950
what<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> used to seeing</font><font color="#E5E5E5"> this is on a</font>

30
00:01:34,950 --> 00:01:36,780
log curve<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the way that they show</font>

31
00:01:36,780 --> 00:01:40,439
it on<font color="#E5E5E5"> the paper</font><font color="#CCCCCC"> and for</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> information</font>

32
00:01:40,439 --> 00:01:44,270
again links to<font color="#E5E5E5"> two blog posts</font><font color="#CCCCCC"> one from</font>

33
00:01:44,270 --> 00:01:49,649
<font color="#CCCCCC">vitaly about this topic and and</font><font color="#E5E5E5"> again</font>

34
00:01:49,649 --> 00:01:53,430
<font color="#CCCCCC">ananza ha is blog post on</font><font color="#E5E5E5"> this topic</font><font color="#CCCCCC"> so</font>

35
00:01:53,430 --> 00:01:55,920
it's great to<font color="#E5E5E5"> see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> some of the work</font>

36
00:01:55,920 --> 00:01:58,280
from<font color="#CCCCCC"> faster our students</font><font color="#E5E5E5"> is already</font>

37
00:01:58,280 --> 00:02:00,659
getting noticed and<font color="#E5E5E5"> picked up and shared</font>

38
00:02:00,659 --> 00:02:02,490
and<font color="#E5E5E5"> this blog post went on to get on the</font>

39
00:02:02,490 --> 00:02:06,990
front<font color="#E5E5E5"> page of hacker news so that's</font>

40
00:02:06,990 --> 00:02:09,750
pretty<font color="#E5E5E5"> cool and hopefully more</font><font color="#CCCCCC"> and more</font>

41
00:02:09,750 --> 00:02:11,610
of this work or be picked up on sisters

42
00:02:11,610 --> 00:02:12,740
released

43
00:02:12,740 --> 00:02:19,910
publicly so last<font color="#E5E5E5"> week</font><font color="#CCCCCC"> we were kind of</font>

44
00:02:19,910 --> 00:02:21,620
doing a deep dive<font color="#CCCCCC"> into collaborative</font>

45
00:02:21,620 --> 00:02:27,290
filtering<font color="#E5E5E5"> and let's remind ourselves of</font>

46
00:02:27,290 --> 00:02:31,090
kind<font color="#E5E5E5"> of what our final model</font><font color="#CCCCCC"> looked</font><font color="#E5E5E5"> like</font>

47
00:02:34,300 --> 00:02:36,710
so in the end we kind<font color="#E5E5E5"> of ended up</font>

48
00:02:36,710 --> 00:02:42,200
rebuilding<font color="#E5E5E5"> the model that's actually in</font>

49
00:02:42,200 --> 00:02:47,630
<font color="#CCCCCC">the first a</font><font color="#E5E5E5"> a library where</font><font color="#CCCCCC"> we had an</font>

50
00:02:47,630 --> 00:02:49,610
embedding so we had this little get

51
00:02:49,610 --> 00:02:51,500
embedding function that grabbed<font color="#E5E5E5"> an</font>

52
00:02:51,500 --> 00:02:54,470
embedding and randomly initialize the

53
00:02:54,470 --> 00:02:59,360
weights for the users<font color="#E5E5E5"> and for the items</font>

54
00:02:59,360 --> 00:03:01,160
that's the kind<font color="#CCCCCC"> of generic term in our</font>

55
00:03:01,160 --> 00:03:02,480
<font color="#E5E5E5">case the items</font><font color="#CCCCCC"> are movies</font>

56
00:03:02,480 --> 00:03:04,610
and the bias for<font color="#E5E5E5"> the users the bias for</font>

57
00:03:04,610 --> 00:03:09,260
<font color="#E5E5E5">the items</font><font color="#CCCCCC"> and we had n factors embedding</font>

58
00:03:09,260 --> 00:03:11,540
size for each for<font color="#CCCCCC"> each one</font><font color="#E5E5E5"> of course the</font>

59
00:03:11,540 --> 00:03:14,210
biases just had a single<font color="#E5E5E5"> one and</font><font color="#CCCCCC"> then we</font>

60
00:03:14,210 --> 00:03:15,980
grabbed the users<font color="#E5E5E5"> and item in weddings</font>

61
00:03:15,980 --> 00:03:18,980
multiply them together<font color="#E5E5E5"> summed it up each</font>

62
00:03:18,980 --> 00:03:22,730
row and add it on<font color="#CCCCCC"> the bias terms pop</font>

63
00:03:22,730 --> 00:03:24,560
that<font color="#E5E5E5"> through a sigmoid to put it into</font>

64
00:03:24,560 --> 00:03:27,430
the range that<font color="#CCCCCC"> we wanted so that was our</font>

65
00:03:27,430 --> 00:03:33,020
model and<font color="#E5E5E5"> one of you asked if</font><font color="#CCCCCC"> we can</font>

66
00:03:33,020 --> 00:03:35,420
<font color="#E5E5E5">kind of interpret this</font><font color="#CCCCCC"> information in</font>

67
00:03:35,420 --> 00:03:37,490
some way and I<font color="#E5E5E5"> promised this week we</font>

68
00:03:37,490 --> 00:03:39,590
would see how to do<font color="#E5E5E5"> that so let's take a</font>

69
00:03:39,590 --> 00:03:42,340
look so we're going to<font color="#E5E5E5"> start with the</font>

70
00:03:42,340 --> 00:03:44,870
model we<font color="#CCCCCC"> built here where we</font><font color="#E5E5E5"> just used</font>

71
00:03:44,870 --> 00:03:46,550
that<font color="#CCCCCC"> fast AI library</font>

72
00:03:46,550 --> 00:03:49,460
collaborative data set from<font color="#CCCCCC"> CSP</font><font color="#E5E5E5"> and then</font>

73
00:03:49,460 --> 00:03:52,850
that<font color="#E5E5E5"> get learner</font><font color="#CCCCCC"> and then we fitted it</font>

74
00:03:52,850 --> 00:03:58,430
in three epochs<font color="#CCCCCC"> 19 seconds we've got a</font>

75
00:03:58,430 --> 00:04:02,180
pretty<font color="#E5E5E5"> good result</font><font color="#CCCCCC"> so what we can now do</font>

76
00:04:02,180 --> 00:04:09,770
is<font color="#CCCCCC"> to analyze</font><font color="#E5E5E5"> that model</font><font color="#CCCCCC"> so you may</font>

77
00:04:09,770 --> 00:04:11,690
<font color="#CCCCCC">remember right back when we</font><font color="#E5E5E5"> started we</font>

78
00:04:11,690 --> 00:04:15,650
read in the movies CSV file<font color="#CCCCCC"> but that's</font>

79
00:04:15,650 --> 00:04:17,779
just a mapping<font color="#E5E5E5"> from the ID of the movie</font>

80
00:04:17,779 --> 00:04:19,880
to<font color="#E5E5E5"> the name of</font><font color="#CCCCCC"> the movie</font><font color="#E5E5E5"> and so we're</font>

81
00:04:19,880 --> 00:04:21,048
just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use that</font><font color="#CCCCCC"> for display</font>

82
00:04:21,048 --> 00:04:24,370
purposes so we<font color="#E5E5E5"> can see what we're doing</font>

83
00:04:24,640 --> 00:04:25,780
<font color="#CCCCCC">because</font>

84
00:04:25,780 --> 00:04:27,639
not all<font color="#E5E5E5"> of us have watched every movie</font>

85
00:04:27,639 --> 00:04:30,070
I'm just going<font color="#CCCCCC"> to limit</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> to the top</font>

86
00:04:30,070 --> 00:04:33,520
<font color="#CCCCCC">500 most populous</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> 3,000 most popular</font>

87
00:04:33,520 --> 00:04:34,930
movies so<font color="#CCCCCC"> we might have more chance of</font>

88
00:04:34,930 --> 00:04:36,660
<font color="#E5E5E5">recognizing the movies we're looking at</font>

89
00:04:36,660 --> 00:04:39,850
<font color="#E5E5E5">and then I'll go ahead and change it</font>

90
00:04:39,850 --> 00:04:43,270
from<font color="#E5E5E5"> the movie IDs from movie lens to</font>

91
00:04:43,270 --> 00:04:46,330
those unique IDs that we're using the

92
00:04:46,330 --> 00:04:47,710
contiguous IDs<font color="#E5E5E5"> because that's what a</font>

93
00:04:47,710 --> 00:04:57,340
model<font color="#CCCCCC"> has alright so inside the</font><font color="#E5E5E5"> learn</font>

94
00:04:57,340 --> 00:05:00,790
object that we create inside<font color="#E5E5E5"> alona</font><font color="#CCCCCC"> we</font>

95
00:05:00,790 --> 00:05:03,130
can always grab the<font color="#E5E5E5"> PI torch model</font>

96
00:05:03,130 --> 00:05:07,690
itself just by saying<font color="#E5E5E5"> learn model</font><font color="#CCCCCC"> okay</font>

97
00:05:07,690 --> 00:05:09,790
<font color="#CCCCCC">and like I'm going</font><font color="#E5E5E5"> to kind of show</font><font color="#CCCCCC"> you</font>

98
00:05:09,790 --> 00:05:12,820
more<font color="#E5E5E5"> and more</font><font color="#CCCCCC"> of the code</font><font color="#E5E5E5"> at the moment</font>

99
00:05:12,820 --> 00:05:14,680
so let's take a look at the<font color="#E5E5E5"> definition</font>

100
00:05:14,680 --> 00:05:20,169
of model<font color="#E5E5E5"> and so a model is a property so</font>

101
00:05:20,169 --> 00:05:21,700
if you<font color="#E5E5E5"> haven't seen a property before a</font>

102
00:05:21,700 --> 00:05:23,830
property is just something in Python

103
00:05:23,830 --> 00:05:26,979
which looks like<font color="#E5E5E5"> a method</font><font color="#CCCCCC"> when you</font>

104
00:05:26,979 --> 00:05:29,490
define it that<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> call it without</font>

105
00:05:29,490 --> 00:05:32,800
<font color="#E5E5E5">parentheses as we do here</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> and so</font>

106
00:05:32,800 --> 00:05:34,690
<font color="#CCCCCC">it</font><font color="#E5E5E5"> kind of looks when you call it like</font>

107
00:05:34,690 --> 00:05:36,520
it's a<font color="#E5E5E5"> regular attribute but it looks</font>

108
00:05:36,520 --> 00:05:37,960
<font color="#E5E5E5">like when you define it like it's a</font>

109
00:05:37,960 --> 00:05:40,240
method<font color="#E5E5E5"> so every time you call it it</font>

110
00:05:40,240 --> 00:05:42,669
<font color="#E5E5E5">actually runs this code okay and so in</font>

111
00:05:42,669 --> 00:05:44,380
this<font color="#E5E5E5"> case it's just a shortcut to grab</font>

112
00:05:44,380 --> 00:05:48,789
something<font color="#E5E5E5"> called</font><font color="#CCCCCC"> dot models model so</font><font color="#E5E5E5"> you</font>

113
00:05:48,789 --> 00:05:49,900
may be interested<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> what that</font>

114
00:05:49,900 --> 00:05:50,460
<font color="#E5E5E5">looks like</font>

115
00:05:50,460 --> 00:05:54,940
<font color="#E5E5E5">learn about models and so this is</font>

116
00:05:54,940 --> 00:05:59,979
there's a<font color="#E5E5E5"> fast AI model type is a very</font>

117
00:05:59,979 --> 00:06:03,310
thin wrapper for<font color="#CCCCCC"> pite</font><font color="#E5E5E5"> watch models so we</font>

118
00:06:03,310 --> 00:06:06,160
<font color="#CCCCCC">could take a look</font><font color="#E5E5E5"> at this code filter</font>

119
00:06:06,160 --> 00:06:13,690
model and see what that is it's only one

120
00:06:13,690 --> 00:06:19,720
line<font color="#CCCCCC"> of code</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and yeah we'll talk</font>

121
00:06:19,720 --> 00:06:21,820
<font color="#E5E5E5">more about these</font><font color="#CCCCCC"> in part</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> right but</font>

122
00:06:21,820 --> 00:06:23,770
basically<font color="#CCCCCC"> that there's this</font><font color="#E5E5E5"> very thin</font>

123
00:06:23,770 --> 00:06:25,210
wrapper and the main thing<font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the</font>

124
00:06:25,210 --> 00:06:26,830
<font color="#E5E5E5">main things that fast i</font><font color="#CCCCCC"> out does is we</font>

125
00:06:26,830 --> 00:06:28,690
have this concept of layer groups where

126
00:06:28,690 --> 00:06:30,250
basically<font color="#E5E5E5"> when you say here though</font>

127
00:06:30,250 --> 00:06:31,840
different<font color="#E5E5E5"> learning rates and they're</font>

128
00:06:31,840 --> 00:06:33,100
<font color="#E5E5E5">going to apply</font><font color="#CCCCCC"> two different sets of</font>

129
00:06:33,100 --> 00:06:35,020
layers and<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> something that's</font><font color="#CCCCCC"> not</font>

130
00:06:35,020 --> 00:06:36,970
<font color="#CCCCCC">in</font><font color="#E5E5E5"> paid watch so when you say I want to</font>

131
00:06:36,970 --> 00:06:39,070
<font color="#E5E5E5">use this</font><font color="#CCCCCC"> PI torch model</font>

132
00:06:39,070 --> 00:06:41,230
all this with one thing we have<font color="#E5E5E5"> to do</font>

133
00:06:41,230 --> 00:06:42,820
which is<font color="#CCCCCC"> to say like okay one hour</font><font color="#E5E5E5"> later</font>

134
00:06:42,820 --> 00:06:44,500
groups yeah<font color="#E5E5E5"> so the details aren't</font>

135
00:06:44,500 --> 00:06:47,260
terribly important<font color="#CCCCCC"> but in general if you</font>

136
00:06:47,260 --> 00:06:49,600
<font color="#CCCCCC">want to create</font><font color="#E5E5E5"> a little wrapper for some</font>

137
00:06:49,600 --> 00:06:51,400
other<font color="#CCCCCC"> pipe watch model you could just</font>

138
00:06:51,400 --> 00:06:56,590
write something<font color="#CCCCCC"> like this so</font><font color="#E5E5E5"> to get to</font>

139
00:06:56,590 --> 00:06:58,600
get inside<font color="#CCCCCC"> that to grab the actual PI</font>

140
00:06:58,600 --> 00:07:02,050
<font color="#E5E5E5">torch model itself its models dot model</font>

141
00:07:02,050 --> 00:07:04,720
that's the<font color="#E5E5E5"> PI torch model and then the</font>

142
00:07:04,720 --> 00:07:07,390
learn object has a shortcut<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay</font>

143
00:07:07,390 --> 00:07:11,020
<font color="#E5E5E5">so we're going to set</font><font color="#CCCCCC"> m to be the</font><font color="#E5E5E5"> PI</font>

144
00:07:11,020 --> 00:07:14,350
torch model and so when you print out<font color="#E5E5E5"> a</font>

145
00:07:14,350 --> 00:07:16,000
pipe<font color="#CCCCCC"> watch model it prints it</font><font color="#E5E5E5"> out</font>

146
00:07:16,000 --> 00:07:19,000
basically<font color="#CCCCCC"> by listing out all of the</font>

147
00:07:19,000 --> 00:07:22,060
layers that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> created in the</font>

148
00:07:22,060 --> 00:07:24,730
constructor<font color="#CCCCCC"> it's quite it's quite nifty</font>

149
00:07:24,730 --> 00:07:26,320
actually when you<font color="#E5E5E5"> kind of think about</font>

150
00:07:26,320 --> 00:07:28,900
<font color="#E5E5E5">the way this works thanks to kind of</font>

151
00:07:28,900 --> 00:07:32,560
some very handy stuff in Python<font color="#CCCCCC"> we're</font>

152
00:07:32,560 --> 00:07:34,900
actually able<font color="#E5E5E5"> to use standard -</font><font color="#CCCCCC"> oh wow</font>

153
00:07:34,900 --> 00:07:39,460
<font color="#CCCCCC">to kind of define these modules in these</font>

154
00:07:39,460 --> 00:07:41,800
layers<font color="#E5E5E5"> and they basically automatically</font>

155
00:07:41,800 --> 00:07:44,110
<font color="#E5E5E5">kind of register themselves with pipe</font>

156
00:07:44,110 --> 00:07:48,040
<font color="#CCCCCC">which so back in our embedding bias we</font>

157
00:07:48,040 --> 00:07:49,480
just had a bunch<font color="#E5E5E5"> of things where we said</font>

158
00:07:49,480 --> 00:07:52,510
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> each of these things are equal to</font>

159
00:07:52,510 --> 00:07:54,850
these things<font color="#E5E5E5"> and then it automatically</font>

160
00:07:54,850 --> 00:07:57,820
<font color="#CCCCCC">knows how to represent that so you can</font>

161
00:07:57,820 --> 00:08:00,640
see there's the<font color="#CCCCCC"> name is you and so the</font>

162
00:08:00,640 --> 00:08:02,170
name<font color="#CCCCCC"> is just</font><font color="#E5E5E5"> literally whatever we</font>

163
00:08:02,170 --> 00:08:05,290
called it<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> you</font>

164
00:08:05,290 --> 00:08:07,960
and then the<font color="#CCCCCC"> definition is it's this</font>

165
00:08:07,960 --> 00:08:12,910
kind of layer<font color="#E5E5E5"> okay so that's our height</font>

166
00:08:12,910 --> 00:08:18,310
watch model<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can look inside</font><font color="#E5E5E5"> that</font>

167
00:08:18,310 --> 00:08:21,490
<font color="#E5E5E5">basically use</font><font color="#CCCCCC"> that so if</font><font color="#E5E5E5"> we say m</font><font color="#CCCCCC"> dot</font><font color="#E5E5E5"> I</font>

168
00:08:21,490 --> 00:08:24,630
be then that's referring<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

169
00:08:24,630 --> 00:08:28,660
embedding layer for an<font color="#E5E5E5"> item which is the</font>

170
00:08:28,660 --> 00:08:31,150
bias layer<font color="#E5E5E5"> so an item bias in this case</font>

171
00:08:31,150 --> 00:08:34,000
is the movie bias<font color="#E5E5E5"> so each move either</font><font color="#CCCCCC"> a</font>

172
00:08:34,000 --> 00:08:38,200
9000 of them has a single bias element

173
00:08:38,200 --> 00:08:40,990
okay now the really nice thing about

174
00:08:40,990 --> 00:08:45,610
<font color="#CCCCCC">high</font><font color="#E5E5E5"> torch layers and models is that</font>

175
00:08:45,610 --> 00:08:48,130
<font color="#E5E5E5">they all look the</font><font color="#CCCCCC"> same they basically</font>

176
00:08:48,130 --> 00:08:50,320
<font color="#E5E5E5">got to use them you call them as if they</font>

177
00:08:50,320 --> 00:08:50,710
were

178
00:08:50,710 --> 00:08:54,190
action<font color="#E5E5E5"> so we can go m.i.b</font><font color="#CCCCCC"> parenthesis</font>

179
00:08:54,190 --> 00:08:57,340
right<font color="#E5E5E5"> and that basically says I want you</font>

180
00:08:57,340 --> 00:09:00,820
<font color="#E5E5E5">to return the</font><font color="#CCCCCC"> value of</font><font color="#E5E5E5"> that layer and</font>

181
00:09:00,820 --> 00:09:03,160
that layer could be a<font color="#E5E5E5"> full-on model</font>

182
00:09:03,160 --> 00:09:06,220
<font color="#E5E5E5">right so to</font><font color="#CCCCCC"> actually get a prediction</font>

183
00:09:06,220 --> 00:09:08,200
<font color="#CCCCCC">from a</font><font color="#E5E5E5"> play torch model you just I would</font>

184
00:09:08,200 --> 00:09:12,520
go<font color="#E5E5E5"> m and pass in my variable okay and so</font>

185
00:09:12,520 --> 00:09:17,500
in this<font color="#E5E5E5"> case my B and pass in</font><font color="#CCCCCC"> my top</font>

186
00:09:17,500 --> 00:09:22,570
movie indexes now models remember<font color="#E5E5E5"> layers</font>

187
00:09:22,570 --> 00:09:26,980
<font color="#E5E5E5">they require variables not tensors</font>

188
00:09:26,980 --> 00:09:29,140
<font color="#E5E5E5">because it needs to keep</font><font color="#CCCCCC"> track of the</font>

189
00:09:29,140 --> 00:09:31,900
derivatives<font color="#E5E5E5"> okay and so we use this</font>

190
00:09:31,900 --> 00:09:34,720
<font color="#CCCCCC">capital V to turn the tensor into</font><font color="#E5E5E5"> a</font>

191
00:09:34,720 --> 00:09:37,870
variable<font color="#E5E5E5"> and</font><font color="#CCCCCC"> was just announced</font><font color="#E5E5E5"> this</font>

192
00:09:37,870 --> 00:09:42,400
week that<font color="#CCCCCC"> PI</font><font color="#E5E5E5"> torch 0.4 which is the</font>

193
00:09:42,400 --> 00:09:44,260
version<font color="#CCCCCC"> after the one that's just</font><font color="#E5E5E5"> about</font>

194
00:09:44,260 --> 00:09:46,600
<font color="#E5E5E5">to be released</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to get rid of</font>

195
00:09:46,600 --> 00:09:49,330
variables and<font color="#CCCCCC"> will actually</font><font color="#E5E5E5"> be able to</font>

196
00:09:49,330 --> 00:09:51,610
use tensors directly to keep track of

197
00:09:51,610 --> 00:09:53,170
<font color="#CCCCCC">derivatives</font><font color="#E5E5E5"> so if you're watching this</font>

198
00:09:53,170 --> 00:09:55,270
on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> MOOC</font><font color="#E5E5E5"> and you're looking at point</font>

199
00:09:55,270 --> 00:09:57,010
<font color="#E5E5E5">four then you'll probably notice that</font>

200
00:09:57,010 --> 00:09:58,540
<font color="#E5E5E5">the code doesn't have this</font><font color="#CCCCCC"> V unit</font>

201
00:09:58,540 --> 00:09:59,610
anymore

202
00:09:59,610 --> 00:10:02,410
and so that<font color="#CCCCCC"> would</font><font color="#E5E5E5"> be pretty</font><font color="#CCCCCC"> exciting</font>

203
00:10:02,410 --> 00:10:04,090
when<font color="#E5E5E5"> that happens but for now we have to</font>

204
00:10:04,090 --> 00:10:05,050
remember<font color="#E5E5E5"> if we're going to pass</font>

205
00:10:05,050 --> 00:10:06,820
<font color="#E5E5E5">something into a model to turn it into a</font>

206
00:10:06,820 --> 00:10:09,100
variable<font color="#CCCCCC"> first</font><font color="#E5E5E5"> and remember</font><font color="#CCCCCC"> a variable</font>

207
00:10:09,100 --> 00:10:12,730
has a strict superset<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> of a</font>

208
00:10:12,730 --> 00:10:14,110
tensor<font color="#E5E5E5"> so anything you can</font><font color="#CCCCCC"> do to a</font>

209
00:10:14,110 --> 00:10:16,750
tensor<font color="#CCCCCC"> you can do to a variable</font><font color="#E5E5E5"> and it</font>

210
00:10:16,750 --> 00:10:20,140
up will<font color="#CCCCCC"> take its log or whatever</font><font color="#E5E5E5"> okay so</font>

211
00:10:20,140 --> 00:10:23,260
that's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> return a variable which</font>

212
00:10:23,260 --> 00:10:24,730
consists of going<font color="#E5E5E5"> through each of these</font>

213
00:10:24,730 --> 00:10:26,920
movie IDs<font color="#E5E5E5"> putting it through this</font>

214
00:10:26,920 --> 00:10:30,910
embedding layer to get its bias<font color="#E5E5E5"> okay and</font>

215
00:10:30,910 --> 00:10:36,430
that's<font color="#E5E5E5"> going to return a variable let's</font>

216
00:10:36,430 --> 00:10:38,820
take a look

217
00:10:41,790 --> 00:10:46,540
so before I press shift<font color="#CCCCCC"> down to here</font><font color="#E5E5E5"> you</font>

218
00:10:46,540 --> 00:10:47,680
can have a think about<font color="#CCCCCC"> what</font><font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font>

219
00:10:47,680 --> 00:10:50,410
have I've<font color="#CCCCCC"> got a list of 3,000</font><font color="#E5E5E5"> movies</font>

220
00:10:50,410 --> 00:10:53,200
going in<font color="#E5E5E5"> turning into</font><font color="#CCCCCC"> variable putting</font>

221
00:10:53,200 --> 00:10:55,840
it through<font color="#E5E5E5"> this embedding layer so just</font>

222
00:10:55,840 --> 00:10:56,950
have a think<font color="#CCCCCC"> about what we expect to</font>

223
00:10:56,950 --> 00:11:01,240
<font color="#CCCCCC">come out</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and we have a variable of</font>

224
00:11:01,240 --> 00:11:03,580
size<font color="#CCCCCC"> 3,000 by one</font><font color="#E5E5E5"> hopefully that doesn't</font>

225
00:11:03,580 --> 00:11:04,720
surprise<font color="#E5E5E5"> you</font>

226
00:11:04,720 --> 00:11:06,550
we had<font color="#CCCCCC"> 3000</font><font color="#E5E5E5"> movies that we are looking</font>

227
00:11:06,550 --> 00:11:08,830
<font color="#E5E5E5">up</font><font color="#CCCCCC"> each one hadn't had a one long</font>

228
00:11:08,830 --> 00:11:11,380
<font color="#E5E5E5">embedding okay so there's our three</font>

229
00:11:11,380 --> 00:11:12,940
<font color="#E5E5E5">thousand</font><font color="#CCCCCC"> one you'll</font><font color="#E5E5E5"> notice it's a</font>

230
00:11:12,940 --> 00:11:15,220
<font color="#E5E5E5">variable just not surprising because we</font>

231
00:11:15,220 --> 00:11:16,510
fed<font color="#CCCCCC"> it a variable so we've got a</font>

232
00:11:16,510 --> 00:11:18,640
variable back and it's a variable<font color="#E5E5E5"> that's</font>

233
00:11:18,640 --> 00:11:24,040
on the GPU<font color="#CCCCCC"> right doc CUDA okay</font><font color="#E5E5E5"> so we</font>

234
00:11:24,040 --> 00:11:26,230
have a<font color="#E5E5E5"> little shortcut in fast AI</font>

235
00:11:26,230 --> 00:11:28,540
because<font color="#E5E5E5"> we we very often when I take</font>

236
00:11:28,540 --> 00:11:31,000
variables turn them into tensors<font color="#E5E5E5"> and</font>

237
00:11:31,000 --> 00:11:33,190
move them<font color="#E5E5E5"> back to the</font><font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> so we can play</font>

238
00:11:33,190 --> 00:11:33,910
<font color="#CCCCCC">with</font><font color="#E5E5E5"> them more easily</font>

239
00:11:33,910 --> 00:11:38,110
so<font color="#CCCCCC"> two</font><font color="#E5E5E5"> NP is is</font><font color="#CCCCCC"> two numpy</font><font color="#E5E5E5"> okay and that</font>

240
00:11:38,110 --> 00:11:39,670
does all<font color="#CCCCCC"> of those things and</font><font color="#E5E5E5"> it works</font>

241
00:11:39,670 --> 00:11:41,530
<font color="#CCCCCC">regardless of whether it's a tensor or a</font>

242
00:11:41,530 --> 00:11:43,450
<font color="#E5E5E5">variable it works</font><font color="#CCCCCC"> regardless</font><font color="#E5E5E5"> of whether</font>

243
00:11:43,450 --> 00:11:45,790
it's on the CPU or GPU<font color="#CCCCCC"> it'll end up</font>

244
00:11:45,790 --> 00:11:49,150
<font color="#E5E5E5">giving you a a numpy array from that</font>

245
00:11:49,150 --> 00:11:53,140
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so if we do that that gives us</font>

246
00:11:53,140 --> 00:11:54,670
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> the same thing as we just looked</font>

247
00:11:54,670 --> 00:11:58,930
<font color="#E5E5E5">at but</font><font color="#CCCCCC"> now in</font><font color="#E5E5E5"> numpy form okay so that's</font>

248
00:11:58,930 --> 00:12:01,540
a super handy thing to<font color="#E5E5E5"> use when</font><font color="#CCCCCC"> you're</font>

249
00:12:01,540 --> 00:12:04,180
playing<font color="#CCCCCC"> around with pi torch my approach</font>

250
00:12:04,180 --> 00:12:09,580
<font color="#CCCCCC">to things is I try</font><font color="#E5E5E5"> to use numpy for</font>

251
00:12:09,580 --> 00:12:12,940
everything except when<font color="#E5E5E5"> I explicit and</font>

252
00:12:12,940 --> 00:12:14,470
you need something to run on the GPU<font color="#CCCCCC"> or</font>

253
00:12:14,470 --> 00:12:17,170
<font color="#CCCCCC">I need its derivatives</font><font color="#E5E5E5"> right in which</font>

254
00:12:17,170 --> 00:12:19,330
case I use<font color="#CCCCCC"> PI torch</font><font color="#E5E5E5"> because like none</font>

255
00:12:19,330 --> 00:12:22,210
<font color="#E5E5E5">part like I kind of find none PI's often</font>

256
00:12:22,210 --> 00:12:24,220
easier<font color="#CCCCCC"> to work with</font><font color="#E5E5E5"> it's been around</font>

257
00:12:24,220 --> 00:12:29,290
<font color="#E5E5E5">many years longer than</font><font color="#CCCCCC"> PI torch so you</font>

258
00:12:29,290 --> 00:12:32,620
know and lots of things like the<font color="#CCCCCC"> Python</font>

259
00:12:32,620 --> 00:12:35,530
<font color="#E5E5E5">imaging library</font><font color="#CCCCCC"> OpenCV and lots and lots</font>

260
00:12:35,530 --> 00:12:39,700
of stuff<font color="#CCCCCC"> like pandas</font><font color="#E5E5E5"> it works with numpy</font>

261
00:12:39,700 --> 00:12:41,530
so my approach is kind<font color="#E5E5E5"> of like do as</font>

262
00:12:41,530 --> 00:12:45,460
much as<font color="#CCCCCC"> I can in num pile and finally</font>

263
00:12:45,460 --> 00:12:46,630
when I'm ready to do something<font color="#CCCCCC"> on the</font>

264
00:12:46,630 --> 00:12:49,120
GPU or<font color="#E5E5E5"> take its derivative to PI torch</font>

265
00:12:49,120 --> 00:12:51,339
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> as soon as I</font><font color="#CCCCCC"> can I put it</font><font color="#E5E5E5"> back</font>

266
00:12:51,339 --> 00:12:53,410
<font color="#E5E5E5">in vampire and you'll see that the first</font>

267
00:12:53,410 --> 00:12:55,990
<font color="#E5E5E5">AI library really works this way like</font>

268
00:12:55,990 --> 00:12:57,970
all the transformations and stuff happen

269
00:12:57,970 --> 00:13:00,370
<font color="#E5E5E5">in</font><font color="#CCCCCC"> lamb pie which is different to most</font>

270
00:13:00,370 --> 00:13:03,430
<font color="#E5E5E5">high torch computer vision libraries</font>

271
00:13:03,430 --> 00:13:05,830
which tend<font color="#E5E5E5"> to do it all as much as</font>

272
00:13:05,830 --> 00:13:07,930
possible in<font color="#E5E5E5"> pi torch</font><font color="#CCCCCC"> I try to</font><font color="#E5E5E5"> do as much</font>

273
00:13:07,930 --> 00:13:13,780
<font color="#E5E5E5">as possible</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> non pipe</font><font color="#CCCCCC"> so let's say we</font>

274
00:13:13,780 --> 00:13:15,910
wanted to transfer build a model in the

275
00:13:15,910 --> 00:13:17,950
GPU with the GPU and train it

276
00:13:17,950 --> 00:13:21,070
then we want to<font color="#E5E5E5"> bring this to</font><font color="#CCCCCC"> production</font>

277
00:13:21,070 --> 00:13:24,580
<font color="#CCCCCC">so would we call</font><font color="#E5E5E5"> to numpy on the model</font>

278
00:13:24,580 --> 00:13:26,500
itself<font color="#E5E5E5"> or would we have</font><font color="#CCCCCC"> to iterate</font>

279
00:13:26,500 --> 00:13:28,330
<font color="#CCCCCC">through all the different layers and</font>

280
00:13:28,330 --> 00:13:31,660
<font color="#E5E5E5">then call to NP yeah good question</font><font color="#CCCCCC"> so</font>

281
00:13:31,660 --> 00:13:33,310
it's<font color="#E5E5E5"> very likely</font><font color="#CCCCCC"> that you want to do</font>

282
00:13:33,310 --> 00:13:36,310
inference on a<font color="#E5E5E5"> cpu rather than a GPU</font>

283
00:13:36,310 --> 00:13:38,230
<font color="#CCCCCC">it's it's more scalable</font><font color="#E5E5E5"> you don't have</font>

284
00:13:38,230 --> 00:13:39,970
to worry<font color="#CCCCCC"> about putting things</font><font color="#E5E5E5"> in batches</font>

285
00:13:39,970 --> 00:13:44,010
<font color="#E5E5E5">you know and so forth</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can move a</font>

286
00:13:44,010 --> 00:13:48,220
model<font color="#CCCCCC"> onto the cpu just by</font><font color="#E5E5E5"> typing m dot</font>

287
00:13:48,220 --> 00:13:52,870
CPU and that model is now on the<font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> and</font>

288
00:13:52,870 --> 00:13:55,660
so therefore<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can also</font><font color="#E5E5E5"> then put</font><font color="#CCCCCC"> your</font>

289
00:13:55,660 --> 00:13:59,170
variable on<font color="#CCCCCC"> the CPU</font><font color="#E5E5E5"> by doing</font><font color="#CCCCCC"> exactly the</font>

290
00:13:59,170 --> 00:14:05,830
same<font color="#E5E5E5"> thing so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can say like so now</font>

291
00:14:05,830 --> 00:14:08,170
having<font color="#E5E5E5"> said that if you're if you'll</font>

292
00:14:08,170 --> 00:14:10,650
serve it doesn't have a<font color="#E5E5E5"> GPU or CUDA GPU</font>

293
00:14:10,650 --> 00:14:12,880
<font color="#CCCCCC">you don't have to do this because it</font>

294
00:14:12,880 --> 00:14:17,290
won't put it on<font color="#E5E5E5"> the GPU</font><font color="#CCCCCC"> at all so if</font><font color="#E5E5E5"> for</font>

295
00:14:17,290 --> 00:14:19,390
inferencing<font color="#E5E5E5"> on the server if you're</font>

296
00:14:19,390 --> 00:14:22,540
<font color="#E5E5E5">running it on you know some t2 instance</font>

297
00:14:22,540 --> 00:14:24,460
or something it'll<font color="#E5E5E5"> work fine</font><font color="#CCCCCC"> and will</font>

298
00:14:24,460 --> 00:14:27,300
run on the on the<font color="#E5E5E5"> cpu automatically</font>

299
00:14:27,300 --> 00:14:30,760
quick<font color="#E5E5E5"> follow-up and if we train the</font>

300
00:14:30,760 --> 00:14:33,850
model<font color="#E5E5E5"> on the GPU and then we save those</font>

301
00:14:33,850 --> 00:14:37,840
embeddings and<font color="#E5E5E5"> the weights would we have</font>

302
00:14:37,840 --> 00:14:40,180
to do<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> special to</font><font color="#E5E5E5"> load you know</font>

303
00:14:40,180 --> 00:14:45,040
you won't we have something well it kind

304
00:14:45,040 --> 00:14:46,990
of depends how much of<font color="#E5E5E5"> faster I you're</font>

305
00:14:46,990 --> 00:14:49,660
using so I'll show<font color="#E5E5E5"> you how you can do</font>

306
00:14:49,660 --> 00:14:51,990
that in<font color="#E5E5E5"> case you have to do it manually</font>

307
00:14:51,990 --> 00:14:54,160
<font color="#CCCCCC">one of the students</font><font color="#E5E5E5"> figure this out</font>

308
00:14:54,160 --> 00:15:02,170
which is really<font color="#CCCCCC"> handy when</font><font color="#E5E5E5"> we there's a</font>

309
00:15:02,170 --> 00:15:05,170
load model function<font color="#E5E5E5"> and you'll see what</font>

310
00:15:05,170 --> 00:15:07,570
it<font color="#E5E5E5"> does but it does torch</font><font color="#CCCCCC"> dot load</font><font color="#E5E5E5"> is it</font>

311
00:15:07,570 --> 00:15:09,430
basically<font color="#CCCCCC"> this is like some magic</font>

312
00:15:09,430 --> 00:15:12,250
incantation<font color="#E5E5E5"> that like normally it</font><font color="#CCCCCC"> has to</font>

313
00:15:12,250 --> 00:15:14,140
load<font color="#CCCCCC"> it onto the same GPU or</font><font color="#E5E5E5"> saved on</font>

314
00:15:14,140 --> 00:15:16,300
but this will like load it<font color="#CCCCCC"> into what</font><font color="#E5E5E5"> it</font>

315
00:15:16,300 --> 00:15:19,440
was what it<font color="#CCCCCC"> is available so there's a</font>

316
00:15:19,440 --> 00:15:24,160
<font color="#CCCCCC">Andy discovery thanks for the great</font>

317
00:15:24,160 --> 00:15:27,960
questions<font color="#E5E5E5"> and</font>

318
00:15:28,819 --> 00:15:32,869
<font color="#E5E5E5">to put that back on the GPU I'll need to</font>

319
00:15:32,869 --> 00:15:36,619
say doc CUDA<font color="#E5E5E5"> and now there we go I can</font>

320
00:15:36,619 --> 00:15:41,600
<font color="#CCCCCC">run it again</font><font color="#E5E5E5"> okay so it's really</font>

321
00:15:41,600 --> 00:15:44,299
important to<font color="#CCCCCC"> know about the zip function</font>

322
00:15:44,299 --> 00:15:46,939
in<font color="#E5E5E5"> Python which iterates through a</font>

323
00:15:46,939 --> 00:15:50,509
<font color="#CCCCCC">number of</font><font color="#E5E5E5"> lists</font><font color="#CCCCCC"> at the same time so in</font>

324
00:15:50,509 --> 00:15:52,809
this case I want<font color="#E5E5E5"> to grab each movie</font>

325
00:15:52,809 --> 00:15:56,179
along<font color="#E5E5E5"> with its bias term so that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can</font>

326
00:15:56,179 --> 00:15:58,279
<font color="#E5E5E5">just pop it into</font><font color="#CCCCCC"> our list</font><font color="#E5E5E5"> of tuples</font><font color="#CCCCCC"> so</font>

327
00:15:58,279 --> 00:16:00,259
if I just go zip like that that's going

328
00:16:00,259 --> 00:16:02,869
to<font color="#CCCCCC"> iterate through each movie ID and</font>

329
00:16:02,869 --> 00:16:06,319
each bias term<font color="#E5E5E5"> and so then I can use</font>

330
00:16:06,319 --> 00:16:08,629
<font color="#CCCCCC">that in a list comprehension to grab the</font>

331
00:16:08,629 --> 00:16:11,289
name of each movie along with<font color="#CCCCCC"> its place</font>

332
00:16:11,289 --> 00:16:16,850
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so having done</font><font color="#E5E5E5"> that I can</font><font color="#CCCCCC"> then sort</font>

333
00:16:16,850 --> 00:16:20,239
and so here<font color="#CCCCCC"> are I</font><font color="#E5E5E5"> told you that John</font>

334
00:16:20,239 --> 00:16:24,259
John<font color="#E5E5E5"> Travolta Scientology movie at the</font>

335
00:16:24,259 --> 00:16:26,720
most negative of<font color="#E5E5E5"> the quiet by a lot if</font>

336
00:16:26,720 --> 00:16:28,759
<font color="#E5E5E5">this was a</font><font color="#CCCCCC"> cable competition Battlefield</font>

337
00:16:28,759 --> 00:16:30,799
Earth would have<font color="#CCCCCC"> like won by miles or</font>

338
00:16:30,799 --> 00:16:34,419
this<font color="#E5E5E5"> seven seven seven</font><font color="#CCCCCC"> ninety six</font><font color="#E5E5E5"> so</font>

339
00:16:34,419 --> 00:16:36,379
<font color="#E5E5E5">here's</font><font color="#CCCCCC"> the worst</font><font color="#E5E5E5"> movie of all time</font>

340
00:16:36,379 --> 00:16:39,019
according<font color="#CCCCCC"> to IMDB</font><font color="#E5E5E5"> and like it's</font>

341
00:16:39,019 --> 00:16:40,939
interesting when<font color="#CCCCCC"> you think about</font><font color="#E5E5E5"> what</font>

342
00:16:40,939 --> 00:16:42,439
this means<font color="#E5E5E5"> right because</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is like a</font>

343
00:16:42,439 --> 00:16:44,329
much more<font color="#CCCCCC"> authentic way to find out how</font>

344
00:16:44,329 --> 00:16:47,419
bad this movie is because<font color="#E5E5E5"> like some</font>

345
00:16:47,419 --> 00:16:49,459
people are<font color="#E5E5E5"> just more negative about</font>

346
00:16:49,459 --> 00:16:51,589
movies right and like it more of them

347
00:16:51,589 --> 00:16:53,869
<font color="#CCCCCC">watch your movie</font><font color="#E5E5E5"> like you know highly</font>

348
00:16:53,869 --> 00:16:55,489
critical<font color="#CCCCCC"> audience</font><font color="#E5E5E5"> they're gonna read it</font>

349
00:16:55,489 --> 00:16:57,319
<font color="#E5E5E5">badly so if you take an average it's not</font>

350
00:16:57,319 --> 00:17:02,149
quite fair right<font color="#CCCCCC"> and so what this is you</font>

351
00:17:02,149 --> 00:17:04,309
know<font color="#E5E5E5"> what this is doing is saying once</font>

352
00:17:04,309 --> 00:17:06,470
we you know remove the fact<font color="#CCCCCC"> that</font>

353
00:17:06,470 --> 00:17:08,689
<font color="#E5E5E5">different people have</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> overall</font>

354
00:17:08,689 --> 00:17:10,398
positive<font color="#E5E5E5"> or negative experiences and</font>

355
00:17:10,398 --> 00:17:11,689
<font color="#CCCCCC">different people</font><font color="#E5E5E5"> watch different kinds</font>

356
00:17:11,689 --> 00:17:13,490
of<font color="#E5E5E5"> movies and we correct</font><font color="#CCCCCC"> for all that</font>

357
00:17:13,490 --> 00:17:17,269
this<font color="#E5E5E5"> is the worst movie</font><font color="#CCCCCC"> of all time so</font>

358
00:17:17,269 --> 00:17:20,169
that's a good<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to know</font>

359
00:17:21,638 --> 00:17:24,829
<font color="#E5E5E5">so this is how we can yeah</font><font color="#CCCCCC"> look inside</font>

360
00:17:24,829 --> 00:17:29,360
our our model and and interpret the bias

361
00:17:29,360 --> 00:17:33,070
vectors you'll see here I've sorted by

362
00:17:33,070 --> 00:17:36,559
the zeroth element of each tuple<font color="#E5E5E5"> by</font>

363
00:17:36,559 --> 00:17:39,529
<font color="#CCCCCC">using a lambda originally I used this</font>

364
00:17:39,529 --> 00:17:42,680
special item<font color="#CCCCCC"> ghetto this is part</font>

365
00:17:42,680 --> 00:17:45,560
of<font color="#CCCCCC"> pythons operator library and this</font>

366
00:17:45,560 --> 00:17:47,450
creates a function<font color="#CCCCCC"> that returns</font><font color="#E5E5E5"> the</font>

367
00:17:47,450 --> 00:17:50,300
<font color="#E5E5E5">zeroth element of something</font><font color="#CCCCCC"> in order to</font>

368
00:17:50,300 --> 00:17:52,550
<font color="#E5E5E5">save time and then I actually realize</font>

369
00:17:52,550 --> 00:17:54,830
that<font color="#CCCCCC"> the lambda</font><font color="#E5E5E5"> is only one more</font>

370
00:17:54,830 --> 00:17:57,350
character to<font color="#CCCCCC"> write then the</font><font color="#E5E5E5"> item get us</font>

371
00:17:57,350 --> 00:17:58,670
so maybe<font color="#E5E5E5"> we don't need to know this</font>

372
00:17:58,670 --> 00:18:01,790
after<font color="#E5E5E5"> all so yeah really useful to make</font>

373
00:18:01,790 --> 00:18:03,980
sure you know how<font color="#E5E5E5"> to write lambdas in</font>

374
00:18:03,980 --> 00:18:06,290
<font color="#E5E5E5">Python so this is this</font><font color="#CCCCCC"> is a function</font>

375
00:18:06,290 --> 00:18:09,740
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> and so sort the sort is</font><font color="#E5E5E5"> going to</font>

376
00:18:09,740 --> 00:18:11,540
call this function every time<font color="#CCCCCC"> it decides</font>

377
00:18:11,540 --> 00:18:13,310
like is this thing higher or lower than

378
00:18:13,310 --> 00:18:15,560
<font color="#CCCCCC">that other thing and this fact this is</font>

379
00:18:15,560 --> 00:18:19,060
<font color="#E5E5E5">going to return the zeroth element okay</font>

380
00:18:19,060 --> 00:18:21,410
<font color="#CCCCCC">so here's the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> and item get a</font>

381
00:18:21,410 --> 00:18:25,900
format<font color="#CCCCCC"> and here is the</font><font color="#E5E5E5"> reverse and</font>

382
00:18:25,900 --> 00:18:27,890
<font color="#E5E5E5">Shawshank Redemption right at the top</font>

383
00:18:27,890 --> 00:18:29,000
I'll definitely<font color="#E5E5E5"> agree with that</font>

384
00:18:29,000 --> 00:18:31,340
Godfather usual suspects yeah<font color="#E5E5E5"> these are</font>

385
00:18:31,340 --> 00:18:35,120
all pretty great movies<font color="#CCCCCC"> twelve Angry Men</font>

386
00:18:35,120 --> 00:18:39,890
absolutely<font color="#CCCCCC"> so there you</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> there's how</font>

387
00:18:39,890 --> 00:18:43,100
we can<font color="#E5E5E5"> look at the</font><font color="#CCCCCC"> base so then the</font>

388
00:18:43,100 --> 00:18:45,470
second<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at would</font><font color="#CCCCCC"> be the the</font>

389
00:18:45,470 --> 00:18:47,330
embeddings how can we look<font color="#E5E5E5"> at the</font>

390
00:18:47,330 --> 00:18:50,270
embeddings<font color="#CCCCCC"> so we can do the</font><font color="#E5E5E5"> same thing</font>

391
00:18:50,270 --> 00:18:53,180
<font color="#E5E5E5">so remember I was the item embeddings</font>

392
00:18:53,180 --> 00:18:55,940
<font color="#E5E5E5">rather than</font><font color="#CCCCCC"> IV with the item bias</font><font color="#E5E5E5"> we can</font>

393
00:18:55,940 --> 00:18:58,030
pass in<font color="#E5E5E5"> our list of movies as a variable</font>

394
00:18:58,030 --> 00:19:01,340
<font color="#E5E5E5">turn it into numpy and here's our movie</font>

395
00:19:01,340 --> 00:19:04,700
embedding so for each<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> 3,000 most</font>

396
00:19:04,700 --> 00:19:07,700
popular movies here are<font color="#CCCCCC"> its</font><font color="#E5E5E5"> 50</font>

397
00:19:07,700 --> 00:19:12,740
embeddings so it's<font color="#E5E5E5"> very hard unless</font>

398
00:19:12,740 --> 00:19:14,600
you're Geoffrey Hinton to visualize a<font color="#E5E5E5"> 50</font>

399
00:19:14,600 --> 00:19:17,330
dimensional space<font color="#E5E5E5"> so what we'll do is</font>

400
00:19:17,330 --> 00:19:19,310
<font color="#CCCCCC">we'll turn it into a</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> dimensional</font>

401
00:19:19,310 --> 00:19:23,480
<font color="#CCCCCC">space so we can</font><font color="#E5E5E5"> compress high</font>

402
00:19:23,480 --> 00:19:25,220
dimensional spaces down into lower

403
00:19:25,220 --> 00:19:26,690
dimensional spaces using<font color="#E5E5E5"> lots of</font>

404
00:19:26,690 --> 00:19:29,240
<font color="#E5E5E5">different techniques perhaps one of the</font>

405
00:19:29,240 --> 00:19:31,720
most common and popular is called<font color="#E5E5E5"> PCA</font>

406
00:19:31,720 --> 00:19:34,040
<font color="#E5E5E5">PCA stands for principle components</font>

407
00:19:34,040 --> 00:19:38,380
analysis it's a linear technique<font color="#CCCCCC"> but</font>

408
00:19:38,380 --> 00:19:41,300
when<font color="#E5E5E5"> your techniques generally work fine</font>

409
00:19:41,300 --> 00:19:44,870
for<font color="#E5E5E5"> this kind of embedding I'm not going</font>

410
00:19:44,870 --> 00:19:46,460
to<font color="#E5E5E5"> teach you about PCA now but I will</font>

411
00:19:46,460 --> 00:19:48,890
say in Rachel's computation or linear

412
00:19:48,890 --> 00:19:50,810
algebra class which you can get<font color="#CCCCCC"> to you</font>

413
00:19:50,810 --> 00:19:55,610
<font color="#E5E5E5">from first at AI we cover PCA in</font>

414
00:19:55,610 --> 00:19:58,310
detail<font color="#CCCCCC"> and it's a</font><font color="#E5E5E5"> really important</font>

415
00:19:58,310 --> 00:19:59,690
technique it actually it turns out to be

416
00:19:59,690 --> 00:20:02,030
almost identical<font color="#E5E5E5"> to something called</font>

417
00:20:02,030 --> 00:20:04,670
singular value decomposition<font color="#E5E5E5"> which is a</font>

418
00:20:04,670 --> 00:20:06,790
type of<font color="#E5E5E5"> matrix decomposition which</font>

419
00:20:06,790 --> 00:20:10,370
actually does turn up<font color="#CCCCCC"> in deep learning a</font>

420
00:20:10,370 --> 00:20:13,880
<font color="#CCCCCC">little bit from time</font><font color="#E5E5E5"> to time</font><font color="#CCCCCC"> it's kind</font>

421
00:20:13,880 --> 00:20:16,790
of<font color="#E5E5E5"> somewhat worth knowing</font><font color="#CCCCCC"> if you were</font>

422
00:20:16,790 --> 00:20:18,740
<font color="#E5E5E5">going to dig more into linear algebra</font>

423
00:20:18,740 --> 00:20:22,400
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> SPD and PCA along with</font>

424
00:20:22,400 --> 00:20:24,440
eigenvalues and eigenvectors which are

425
00:20:24,440 --> 00:20:26,000
all slightly<font color="#CCCCCC"> different versions is</font><font color="#E5E5E5"> this</font>

426
00:20:26,000 --> 00:20:28,100
kind of the same thing<font color="#E5E5E5"> or all worth</font>

427
00:20:28,100 --> 00:20:30,770
knowing<font color="#CCCCCC"> but for now just know that you</font>

428
00:20:30,770 --> 00:20:33,650
can<font color="#E5E5E5"> grab</font><font color="#CCCCCC"> PCA from SK learn to calm</font>

429
00:20:33,650 --> 00:20:36,830
position say how much<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> reduce</font>

430
00:20:36,830 --> 00:20:39,200
<font color="#E5E5E5">the dimensionality</font><font color="#CCCCCC"> too so I want to find</font>

431
00:20:39,200 --> 00:20:41,540
three components and what this is<font color="#E5E5E5"> going</font>

432
00:20:41,540 --> 00:20:44,690
<font color="#E5E5E5">to do is it's going to find three linear</font>

433
00:20:44,690 --> 00:20:48,380
combinations of the<font color="#CCCCCC"> 50 dimensions which</font>

434
00:20:48,380 --> 00:20:50,150
capture as much as the variation<font color="#E5E5E5"> as</font>

435
00:20:50,150 --> 00:20:52,280
possible<font color="#CCCCCC"> Badar is</font><font color="#E5E5E5"> different to each</font>

436
00:20:52,280 --> 00:20:53,690
other<font color="#E5E5E5"> as</font><font color="#CCCCCC"> possible</font>

437
00:20:53,690 --> 00:20:58,120
<font color="#E5E5E5">okay so we would call this</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lower rank</font>

438
00:20:58,120 --> 00:21:02,270
approximation of<font color="#CCCCCC"> our</font><font color="#E5E5E5"> matrix all right</font>

439
00:21:02,270 --> 00:21:04,970
so then we can<font color="#E5E5E5"> grab the components so</font>

440
00:21:04,970 --> 00:21:06,490
that's<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> their three</font>

441
00:21:06,490 --> 00:21:08,390
dimensions and so once we've<font color="#CCCCCC"> done that</font>

442
00:21:08,390 --> 00:21:11,620
we've now got three by three thousand

443
00:21:11,620 --> 00:21:15,320
<font color="#CCCCCC">and so we can</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> a look at</font><font color="#CCCCCC"> the</font>

444
00:21:15,320 --> 00:21:16,820
first of them and we'll do the<font color="#CCCCCC"> same</font>

445
00:21:16,820 --> 00:21:18,980
thing of<font color="#E5E5E5"> using zip to look at each</font><font color="#CCCCCC"> one</font>

446
00:21:18,980 --> 00:21:21,470
along with<font color="#E5E5E5"> its movie and so here's the</font>

447
00:21:21,470 --> 00:21:24,350
thing<font color="#CCCCCC"> right we we don't know</font><font color="#E5E5E5"> ahead of</font>

448
00:21:24,350 --> 00:21:28,430
time what this<font color="#E5E5E5"> PCA thing is it's just</font>

449
00:21:28,430 --> 00:21:33,650
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> just a bunch</font><font color="#E5E5E5"> of latent factors</font><font color="#CCCCCC"> you</font>

450
00:21:33,650 --> 00:21:37,310
know it's it's kind of the<font color="#E5E5E5"> the main axis</font>

451
00:21:37,310 --> 00:21:39,650
in this<font color="#CCCCCC"> space of latent factors</font><font color="#E5E5E5"> and so</font>

452
00:21:39,650 --> 00:21:41,680
<font color="#E5E5E5">what we can do is we can</font><font color="#CCCCCC"> look at it and</font>

453
00:21:41,680 --> 00:21:45,290
see<font color="#CCCCCC"> if</font><font color="#E5E5E5"> we can figure out what it's about</font>

454
00:21:45,290 --> 00:21:49,550
<font color="#CCCCCC">right so given that police academy</font><font color="#E5E5E5"> for</font>

455
00:21:49,550 --> 00:21:51,940
is high up here along<font color="#E5E5E5"> with water world</font>

456
00:21:51,940 --> 00:21:54,800
<font color="#E5E5E5">where else Fargo Pulp Fiction</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> God</font>

457
00:21:54,800 --> 00:21:57,770
<font color="#E5E5E5">further a high up here I'm gonna guess</font>

458
00:21:57,770 --> 00:22:00,200
that a high value is not<font color="#E5E5E5"> going to</font>

459
00:22:00,200 --> 00:22:02,270
<font color="#CCCCCC">represent like critically acclaimed</font>

460
00:22:02,270 --> 00:22:06,200
movies<font color="#CCCCCC"> or serious watching</font><font color="#E5E5E5"> so I kind of</font>

461
00:22:06,200 --> 00:22:08,510
<font color="#CCCCCC">like all</font><font color="#E5E5E5"> this yeah okay I call this easy</font>

462
00:22:08,510 --> 00:22:09,280
what she

463
00:22:09,280 --> 00:22:11,770
<font color="#E5E5E5">is serious all right but like this is</font>

464
00:22:11,770 --> 00:22:13,450
kind of how you have<font color="#E5E5E5"> to interpret your</font>

465
00:22:13,450 --> 00:22:15,460
embeddings is like<font color="#E5E5E5"> take a look at what</font>

466
00:22:15,460 --> 00:22:18,910
they seem<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be showing and decide what</font>

467
00:22:18,910 --> 00:22:20,410
you<font color="#CCCCCC"> think it means so this is the kind</font>

468
00:22:20,410 --> 00:22:25,060
of the the<font color="#CCCCCC"> principal</font><font color="#E5E5E5"> axis</font><font color="#CCCCCC"> in this set of</font>

469
00:22:25,060 --> 00:22:27,910
embedding so we can<font color="#E5E5E5"> look at the next one</font>

470
00:22:27,910 --> 00:22:30,580
so do the<font color="#E5E5E5"> same thing and</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> at the the</font>

471
00:22:30,580 --> 00:22:34,000
<font color="#E5E5E5">first index one embedding this one's a</font>

472
00:22:34,000 --> 00:22:35,590
little bit<font color="#CCCCCC"> harder to kind</font><font color="#E5E5E5"> of figure out</font>

473
00:22:35,590 --> 00:22:37,030
<font color="#E5E5E5">what's going on but with things like</font>

474
00:22:37,030 --> 00:22:38,920
<font color="#E5E5E5">Mulholland Drive and Purple Rose of</font>

475
00:22:38,920 --> 00:22:42,310
Cairo<font color="#E5E5E5"> these look more kind of</font><font color="#CCCCCC"> dialog II</font>

476
00:22:42,310 --> 00:22:45,010
kind<font color="#E5E5E5"> of ones or else things like Lord of</font>

477
00:22:45,010 --> 00:22:46,480
<font color="#E5E5E5">the Rings in the Latin and</font><font color="#CCCCCC"> Star Wars</font>

478
00:22:46,480 --> 00:22:48,490
these<font color="#E5E5E5"> book more like kind</font><font color="#CCCCCC"> of modern</font><font color="#E5E5E5"> CGI</font>

479
00:22:48,490 --> 00:22:50,260
<font color="#E5E5E5">II kind of ones so you could kind of</font>

480
00:22:50,260 --> 00:22:53,260
imagine that<font color="#E5E5E5"> on that pair of dimensions</font>

481
00:22:53,260 --> 00:22:57,000
it probably represents<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of you know</font>

482
00:22:57,000 --> 00:22:59,140
<font color="#CCCCCC">differences between how people read</font>

483
00:22:59,140 --> 00:23:02,440
movies you know some people<font color="#E5E5E5"> like you</font>

484
00:23:02,440 --> 00:23:05,290
<font color="#CCCCCC">know purple rise of</font><font color="#E5E5E5"> Cairo</font>

485
00:23:05,290 --> 00:23:09,070
type movies you know Woody Allen<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font>

486
00:23:09,070 --> 00:23:11,140
<font color="#E5E5E5">classic and some people like these you</font>

487
00:23:11,140 --> 00:23:15,340
know big Hollywood spectacles some

488
00:23:15,340 --> 00:23:17,530
people presumably like<font color="#E5E5E5"> police academy</font>

489
00:23:17,530 --> 00:23:22,810
for more than they like Fargo<font color="#CCCCCC"> so yeah so</font>

490
00:23:22,810 --> 00:23:24,280
I'm<font color="#E5E5E5"> like you can kind of get the idea of</font>

491
00:23:24,280 --> 00:23:26,380
what's happened it's it's done<font color="#CCCCCC"> a you</font>

492
00:23:26,380 --> 00:23:33,880
know through a model which was you know

493
00:23:33,880 --> 00:23:36,730
<font color="#E5E5E5">for a model which was literally multiply</font>

494
00:23:36,730 --> 00:23:41,380
two things<font color="#E5E5E5"> together and</font><font color="#CCCCCC"> Adam hop it's</font>

495
00:23:41,380 --> 00:23:43,990
learnt quite a lot<font color="#CCCCCC"> you know which is</font>

496
00:23:43,990 --> 00:23:49,300
<font color="#E5E5E5">kind of cool so that's what we can do</font>

497
00:23:49,300 --> 00:23:53,110
with with that<font color="#E5E5E5"> and then we could we</font>

498
00:23:53,110 --> 00:23:55,810
<font color="#E5E5E5">could plot them if we wanted to I just</font>

499
00:23:55,810 --> 00:24:00,370
<font color="#E5E5E5">grabbed a small subset</font><font color="#CCCCCC"> to plot on those</font>

500
00:24:00,370 --> 00:24:04,510
first<font color="#E5E5E5"> two</font><font color="#CCCCCC"> asses</font><font color="#E5E5E5"> all right so that's that</font>

501
00:24:04,510 --> 00:24:09,010
<font color="#E5E5E5">so I wanted to next kind of dig in a</font>

502
00:24:09,010 --> 00:24:12,010
layer deeper into what<font color="#CCCCCC"> actually happens</font>

503
00:24:12,010 --> 00:24:18,300
<font color="#E5E5E5">when</font><font color="#CCCCCC"> we say fit alright</font><font color="#E5E5E5"> so when we said</font>

504
00:24:18,300 --> 00:24:23,700
<font color="#CCCCCC">learn fit what's it doing</font>

505
00:24:24,850 --> 00:24:27,520
for<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like the store model is it</font>

506
00:24:27,520 --> 00:24:30,790
a way to interpret the embeddings<font color="#E5E5E5"> for</font>

507
00:24:30,790 --> 00:24:33,100
something like this<font color="#CCCCCC"> the rustman one</font><font color="#E5E5E5"> yes</font>

508
00:24:33,100 --> 00:24:35,230
yeah we'll see that in a moment<font color="#CCCCCC"> well</font>

509
00:24:35,230 --> 00:24:36,580
let's jump straight<font color="#E5E5E5"> there what the hell</font>

510
00:24:36,580 --> 00:24:51,310
<font color="#E5E5E5">okay so so for the rustman</font><font color="#CCCCCC"> how much are</font>

511
00:24:51,310 --> 00:24:52,930
we<font color="#E5E5E5"> going to sell at each store on each</font>

512
00:24:52,930 --> 00:25:04,270
date model we this is from the paper

513
00:25:04,270 --> 00:25:06,310
<font color="#CCCCCC">gore and burke on it so it's a</font><font color="#E5E5E5"> great</font>

514
00:25:06,310 --> 00:25:09,340
<font color="#E5E5E5">paper by the way well worth you</font><font color="#CCCCCC"> know</font>

515
00:25:09,340 --> 00:25:12,430
like pretty accessible<font color="#E5E5E5"> I think any of</font>

516
00:25:12,430 --> 00:25:14,950
you would at this<font color="#CCCCCC"> point be able to at</font>

517
00:25:14,950 --> 00:25:16,810
<font color="#CCCCCC">least get</font><font color="#E5E5E5"> the gist of it if you know and</font>

518
00:25:16,810 --> 00:25:18,790
much of<font color="#CCCCCC"> the detail as well</font><font color="#E5E5E5"> particularly</font>

519
00:25:18,790 --> 00:25:20,380
as you've also done<font color="#E5E5E5"> the machine learning</font>

520
00:25:20,380 --> 00:25:23,260
<font color="#E5E5E5">course</font><font color="#CCCCCC"> and they actually make this</font><font color="#E5E5E5"> point</font>

521
00:25:23,260 --> 00:25:25,500
in the paper this is<font color="#E5E5E5"> in the paper that</font>

522
00:25:25,500 --> 00:25:28,090
the equivalent of what they call entity

523
00:25:28,090 --> 00:25:30,850
embedding layers<font color="#E5E5E5"> so an embedding of a</font>

524
00:25:30,850 --> 00:25:33,370
categorical variable is identical to<font color="#CCCCCC"> a</font>

525
00:25:33,370 --> 00:25:37,600
one hot encoding followed by a matrix

526
00:25:37,600 --> 00:25:39,550
multiply<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> why they're basically</font>

527
00:25:39,550 --> 00:25:41,710
<font color="#E5E5E5">saying if you've got three embeddings</font>

528
00:25:41,710 --> 00:25:44,140
that's the same as doing<font color="#E5E5E5"> three one hot</font>

529
00:25:44,140 --> 00:25:45,700
encodings putting each<font color="#E5E5E5"> through one</font>

530
00:25:45,700 --> 00:25:48,370
<font color="#E5E5E5">through a matrix multiply and then put</font>

531
00:25:48,370 --> 00:25:50,680
<font color="#CCCCCC">that through</font><font color="#E5E5E5"> a a dense layer</font>

532
00:25:50,680 --> 00:25:53,500
well what<font color="#CCCCCC"> pi torch</font><font color="#E5E5E5"> would call a linear</font>

533
00:25:53,500 --> 00:25:56,040
<font color="#E5E5E5">oh yeah right</font>

534
00:25:56,040 --> 00:25:58,210
one of the nice things<font color="#E5E5E5"> here is because</font>

535
00:25:58,210 --> 00:26:00,220
this<font color="#E5E5E5"> is kind of like well they thought</font>

536
00:26:00,220 --> 00:26:01,870
<font color="#E5E5E5">it was the first paper is actually the</font>

537
00:26:01,870 --> 00:26:03,730
second I<font color="#E5E5E5"> think paper to show</font><font color="#CCCCCC"> the idea of</font>

538
00:26:03,730 --> 00:26:06,760
using categorical embeddings<font color="#E5E5E5"> for this</font>

539
00:26:06,760 --> 00:26:08,500
kind of<font color="#E5E5E5"> data set they really go to clean</font>

540
00:26:08,500 --> 00:26:10,810
<font color="#CCCCCC">too quite a lot of</font><font color="#E5E5E5"> detail</font><font color="#CCCCCC"> to you know</font>

541
00:26:10,810 --> 00:26:13,510
<font color="#CCCCCC">right back</font><font color="#E5E5E5"> to the the detailed stuff</font>

542
00:26:13,510 --> 00:26:15,010
that we<font color="#E5E5E5"> learnt about so it's kind of a</font>

543
00:26:15,010 --> 00:26:15,520
second

544
00:26:15,520 --> 00:26:17,050
you know a second<font color="#CCCCCC"> cat of thinking about</font>

545
00:26:17,050 --> 00:26:21,610
what embeddings are doing so one of<font color="#E5E5E5"> the</font>

546
00:26:21,610 --> 00:26:23,710
interesting<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> they did was</font>

547
00:26:23,710 --> 00:26:25,420
they said<font color="#CCCCCC"> okay after</font><font color="#E5E5E5"> we've trained a</font>

548
00:26:25,420 --> 00:26:31,300
neural net with these embeddings what

549
00:26:31,300 --> 00:26:34,930
else could we<font color="#E5E5E5"> do with</font><font color="#CCCCCC"> it so</font>

550
00:26:34,930 --> 00:26:37,900
they got a winning result with a neural

551
00:26:37,900 --> 00:26:41,170
network<font color="#CCCCCC"> where</font><font color="#E5E5E5"> the entity meetings</font><font color="#CCCCCC"> but</font>

552
00:26:41,170 --> 00:26:42,430
<font color="#E5E5E5">then they said hey you know what</font>

553
00:26:42,430 --> 00:26:45,070
we could take those empty embeddings and

554
00:26:45,070 --> 00:26:48,070
replace each categorical variable with

555
00:26:48,070 --> 00:26:50,320
the<font color="#E5E5E5"> learnt entity embeddings and then</font>

556
00:26:50,320 --> 00:26:54,310
feed that<font color="#CCCCCC"> into a GBM right so in other</font>

557
00:26:54,310 --> 00:26:56,170
words like rather<font color="#E5E5E5"> than passing into the</font>

558
00:26:56,170 --> 00:26:58,840
GBM a one<font color="#E5E5E5"> modern coded</font><font color="#CCCCCC"> version or an</font>

559
00:26:58,840 --> 00:27:01,870
ordinal version<font color="#E5E5E5"> let's actually replace</font>

560
00:27:01,870 --> 00:27:04,540
the categorical variable<font color="#E5E5E5"> with its</font>

561
00:27:04,540 --> 00:27:08,260
embedding for the appropriate level for

562
00:27:08,260 --> 00:27:11,400
<font color="#CCCCCC">that row right</font><font color="#E5E5E5"> so it's actually a way of</font>

563
00:27:11,400 --> 00:27:13,570
create you know feature engineering<font color="#CCCCCC"> and</font>

564
00:27:13,570 --> 00:27:18,250
so the main average percent error

565
00:27:18,250 --> 00:27:23,080
<font color="#E5E5E5">without that</font><font color="#CCCCCC"> for gbms I'm using just 100</font>

566
00:27:23,080 --> 00:27:25,960
<font color="#CCCCCC">codings was 0.15 but with that it was</font>

567
00:27:25,960 --> 00:27:30,220
0.11<font color="#CCCCCC"> that random forests without</font><font color="#E5E5E5"> that</font>

568
00:27:30,220 --> 00:27:34,180
was point<font color="#CCCCCC"> one six with that 0.108</font><font color="#E5E5E5"> nearly</font>

569
00:27:34,180 --> 00:27:37,690
as good<font color="#E5E5E5"> as the neural net right so this</font>

570
00:27:37,690 --> 00:27:39,220
<font color="#E5E5E5">is</font><font color="#CCCCCC"> kind of an interesting</font><font color="#E5E5E5"> technique</font>

571
00:27:39,220 --> 00:27:42,030
<font color="#E5E5E5">because what it means is in your</font>

572
00:27:42,030 --> 00:27:45,190
organization<font color="#E5E5E5"> you can train a neural net</font>

573
00:27:45,190 --> 00:27:47,410
that<font color="#CCCCCC"> has an embedding</font><font color="#E5E5E5"> of stores and an</font>

574
00:27:47,410 --> 00:27:50,050
embedding<font color="#E5E5E5"> of product types and an</font>

575
00:27:50,050 --> 00:27:52,660
embedding of I<font color="#E5E5E5"> don't know whatever kind</font>

576
00:27:52,660 --> 00:27:54,340
<font color="#E5E5E5">of high cardinality or</font><font color="#CCCCCC"> even medium</font>

577
00:27:54,340 --> 00:27:56,110
<font color="#E5E5E5">cardinality categorical variables you</font>

578
00:27:56,110 --> 00:27:58,150
have<font color="#CCCCCC"> and then everybody else</font><font color="#E5E5E5"> in the</font>

579
00:27:58,150 --> 00:28:00,640
<font color="#CCCCCC">organization can</font><font color="#E5E5E5"> now like</font><font color="#CCCCCC"> chuck</font><font color="#E5E5E5"> those</font>

580
00:28:00,640 --> 00:28:03,580
into<font color="#CCCCCC"> their</font><font color="#E5E5E5"> you know JVM or random</font><font color="#CCCCCC"> forest</font>

581
00:28:03,580 --> 00:28:07,210
or whatever and<font color="#E5E5E5"> I'm use them and what</font>

582
00:28:07,210 --> 00:28:09,820
this is saying<font color="#E5E5E5"> is they won't get in fact</font>

583
00:28:09,820 --> 00:28:11,670
you can<font color="#E5E5E5"> even use K nearest neighbors</font>

584
00:28:11,670 --> 00:28:13,990
<font color="#CCCCCC">with this technique and get nearly</font><font color="#E5E5E5"> as</font>

585
00:28:13,990 --> 00:28:17,770
good<font color="#E5E5E5"> a result right so this is a good</font>

586
00:28:17,770 --> 00:28:19,360
way of kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> giving the power of</font>

587
00:28:19,360 --> 00:28:21,370
neural<font color="#CCCCCC"> nets</font><font color="#E5E5E5"> to everybody in your</font>

588
00:28:21,370 --> 00:28:24,090
organization<font color="#CCCCCC"> without</font><font color="#E5E5E5"> having them do the</font>

589
00:28:24,090 --> 00:28:26,470
<font color="#CCCCCC">faster idea of learning</font><font color="#E5E5E5"> course first you</font>

590
00:28:26,470 --> 00:28:28,060
<font color="#CCCCCC">know they</font><font color="#E5E5E5"> can just</font><font color="#CCCCCC"> use whatever SK learn</font>

591
00:28:28,060 --> 00:28:30,730
<font color="#E5E5E5">or R</font><font color="#CCCCCC"> or whatever that they're used to</font>

592
00:28:30,730 --> 00:28:33,310
<font color="#CCCCCC">and like those those embeddings could</font>

593
00:28:33,310 --> 00:28:35,740
literally be in a database<font color="#E5E5E5"> table because</font>

594
00:28:35,740 --> 00:28:37,300
if you think<font color="#E5E5E5"> about an embedding is just</font>

595
00:28:37,300 --> 00:28:40,210
an index lookup<font color="#E5E5E5"> right which is the same</font>

596
00:28:40,210 --> 00:28:43,630
as an inner join in SQL right so if

597
00:28:43,630 --> 00:28:45,940
you've<font color="#E5E5E5"> got a table</font><font color="#CCCCCC"> on each product</font><font color="#E5E5E5"> along</font>

598
00:28:45,940 --> 00:28:48,340
<font color="#E5E5E5">with</font><font color="#CCCCCC"> its embedding vector then you can</font>

599
00:28:48,340 --> 00:28:48,830
literally do

600
00:28:48,830 --> 00:28:51,830
in a joint<font color="#E5E5E5"> and now you have every row in</font>

601
00:28:51,830 --> 00:28:53,240
<font color="#CCCCCC">your</font><font color="#E5E5E5"> table along with its product</font>

602
00:28:53,240 --> 00:28:55,880
<font color="#CCCCCC">embedding vector so that's</font><font color="#E5E5E5"> a really this</font>

603
00:28:55,880 --> 00:28:59,500
<font color="#E5E5E5">is</font><font color="#CCCCCC"> this is a really useful idea and</font>

604
00:28:59,500 --> 00:29:02,930
gbm's and random forests learn a lot

605
00:29:02,930 --> 00:29:05,600
quicker<font color="#E5E5E5"> than neural</font><font color="#CCCCCC"> nets do all right so</font>

606
00:29:05,600 --> 00:29:07,400
that's like even<font color="#CCCCCC"> if you do know how to</font>

607
00:29:07,400 --> 00:29:08,650
<font color="#E5E5E5">train your on</font><font color="#CCCCCC"> its this</font><font color="#E5E5E5"> is still</font>

608
00:29:08,650 --> 00:29:12,530
potentially quite handy so here's what

609
00:29:12,530 --> 00:29:14,120
happened when<font color="#CCCCCC"> they took the various</font>

610
00:29:14,120 --> 00:29:17,300
different states of<font color="#CCCCCC"> Germany</font><font color="#E5E5E5"> and plotted</font>

611
00:29:17,300 --> 00:29:19,400
the first two<font color="#E5E5E5"> principal components</font><font color="#CCCCCC"> of</font>

612
00:29:19,400 --> 00:29:21,380
<font color="#E5E5E5">their embedding vectors and they</font>

613
00:29:21,380 --> 00:29:23,420
basically here is where they were in

614
00:29:23,420 --> 00:29:26,990
that<font color="#E5E5E5"> 2d space and</font><font color="#CCCCCC"> wacken lee enough i've</font>

615
00:29:26,990 --> 00:29:30,260
circled in red<font color="#E5E5E5"> three cities and i've</font>

616
00:29:30,260 --> 00:29:31,880
circled here the three cities in<font color="#E5E5E5"> Germany</font>

617
00:29:31,880 --> 00:29:34,790
<font color="#CCCCCC">and here</font><font color="#E5E5E5"> I've circled in purple so</font><font color="#CCCCCC"> blue</font>

618
00:29:34,790 --> 00:29:38,000
here at the blue here's the green<font color="#E5E5E5"> here's</font>

619
00:29:38,000 --> 00:29:41,600
the green<font color="#E5E5E5"> so it's actually</font><font color="#CCCCCC"> drawn a</font><font color="#E5E5E5"> map</font>

620
00:29:41,600 --> 00:29:44,660
<font color="#E5E5E5">of Germany even though it never was told</font>

621
00:29:44,660 --> 00:29:47,870
anything<font color="#CCCCCC"> about how far these states are</font>

622
00:29:47,870 --> 00:29:49,730
<font color="#E5E5E5">away from each other or</font><font color="#CCCCCC"> the very concept</font>

623
00:29:49,730 --> 00:29:52,460
of geography didn't exist<font color="#CCCCCC"> so that's</font>

624
00:29:52,460 --> 00:29:57,740
<font color="#E5E5E5">pretty crazy</font><font color="#CCCCCC"> so that was from there</font>

625
00:29:57,740 --> 00:30:01,610
paper<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I went ahead and looked well</font>

626
00:30:01,610 --> 00:30:03,290
<font color="#E5E5E5">here's another thing I</font><font color="#CCCCCC"> think this is</font>

627
00:30:03,290 --> 00:30:05,090
also<font color="#E5E5E5"> from their paper they</font><font color="#CCCCCC"> took every</font>

628
00:30:05,090 --> 00:30:10,190
pair of places and they looked at how

629
00:30:10,190 --> 00:30:13,580
far away they are on a map versus how

630
00:30:13,580 --> 00:30:15,980
far away are<font color="#CCCCCC"> they in embedding space and</font>

631
00:30:15,980 --> 00:30:19,700
they've got this beautiful<font color="#E5E5E5"> correlation</font>

632
00:30:19,700 --> 00:30:23,240
<font color="#CCCCCC">alright so again it</font><font color="#E5E5E5"> kind of apparently</font>

633
00:30:23,240 --> 00:30:24,710
<font color="#E5E5E5">you know it's doors that are near by</font>

634
00:30:24,710 --> 00:30:30,340
each other physically have similar

635
00:30:30,340 --> 00:30:32,780
<font color="#E5E5E5">characteristics in</font><font color="#CCCCCC"> terms of when people</font>

636
00:30:32,780 --> 00:30:36,050
<font color="#E5E5E5">buy</font><font color="#CCCCCC"> more or less stuff from them so I</font>

637
00:30:36,050 --> 00:30:38,780
looked at the same thing<font color="#CCCCCC"> four days of</font>

638
00:30:38,780 --> 00:30:41,060
the week<font color="#E5E5E5"> right so here's an embedding of</font>

639
00:30:41,060 --> 00:30:43,550
the days of the week<font color="#CCCCCC"> from our model</font><font color="#E5E5E5"> and</font>

640
00:30:43,550 --> 00:30:45,260
I just kind of joined up Monday Tuesday

641
00:30:45,260 --> 00:30:46,250
<font color="#CCCCCC">Wednesday Tuesday</font><font color="#E5E5E5"> Thursday Friday</font>

642
00:30:46,250 --> 00:30:48,170
<font color="#E5E5E5">Saturday Sunday</font><font color="#CCCCCC"> I did</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> thing for</font>

643
00:30:48,170 --> 00:30:51,200
<font color="#CCCCCC">the months of the</font><font color="#E5E5E5"> year</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right again</font>

644
00:30:51,200 --> 00:30:52,850
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> see you</font><font color="#E5E5E5"> know here's here's</font>

645
00:30:52,850 --> 00:30:58,640
winter here's summer<font color="#CCCCCC"> so yeah I think</font>

646
00:30:58,640 --> 00:31:01,120
<font color="#CCCCCC">like</font><font color="#E5E5E5"> visualize</font>

647
00:31:01,120 --> 00:31:03,100
embeddings can be interesting like it's

648
00:31:03,100 --> 00:31:06,070
good to like first of all<font color="#E5E5E5"> check you can</font>

649
00:31:06,070 --> 00:31:08,320
see things<font color="#E5E5E5"> you would</font><font color="#CCCCCC"> expect to see you</font>

650
00:31:08,320 --> 00:31:10,720
know and then you could like try<font color="#CCCCCC"> and see</font>

651
00:31:10,720 --> 00:31:12,580
like maybe things you didn't expect<font color="#CCCCCC"> to</font>

652
00:31:12,580 --> 00:31:14,280
see<font color="#E5E5E5"> so you could try all</font><font color="#CCCCCC"> kinds of</font>

653
00:31:14,280 --> 00:31:20,950
clusterings or<font color="#CCCCCC"> or whatever and this</font><font color="#E5E5E5"> is</font>

654
00:31:20,950 --> 00:31:23,559
not<font color="#E5E5E5"> something which has</font><font color="#CCCCCC"> been widely</font>

655
00:31:23,559 --> 00:31:25,510
<font color="#E5E5E5">studied at all right so</font><font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> going to</font>

656
00:31:25,510 --> 00:31:27,100
<font color="#E5E5E5">tell you what the limitations are of</font>

657
00:31:27,100 --> 00:31:32,260
this technique or whatever<font color="#CCCCCC"> oh yes so</font>

658
00:31:32,260 --> 00:31:34,210
I've<font color="#CCCCCC"> heard of other ways to generate</font>

659
00:31:34,210 --> 00:31:37,210
<font color="#E5E5E5">embeddings like skip</font><font color="#CCCCCC"> grams uh-huh</font>

660
00:31:37,210 --> 00:31:40,059
wondering<font color="#E5E5E5"> if you could say is there one</font>

661
00:31:40,059 --> 00:31:41,410
better than the other using your own

662
00:31:41,410 --> 00:31:44,830
<font color="#CCCCCC">Network sir skip grams so screwed</font><font color="#E5E5E5"> grams</font>

663
00:31:44,830 --> 00:31:49,679
is quite specific<font color="#CCCCCC"> to NLP</font><font color="#E5E5E5"> right so like</font>

664
00:31:49,860 --> 00:31:51,940
<font color="#E5E5E5">I'm not sure if</font><font color="#CCCCCC"> we'll cover it in this</font>

665
00:31:51,940 --> 00:31:56,410
course<font color="#E5E5E5"> but basically the the approach to</font>

666
00:31:56,410 --> 00:31:58,750
original kind<font color="#E5E5E5"> of word to</font><font color="#CCCCCC"> vac approach to</font>

667
00:31:58,750 --> 00:32:01,600
generating embeddings was to say you

668
00:32:01,600 --> 00:32:07,300
<font color="#CCCCCC">know what we actually</font><font color="#E5E5E5"> don't have we</font>

669
00:32:07,300 --> 00:32:10,540
don't actually<font color="#CCCCCC"> have our labelled data</font>

670
00:32:10,540 --> 00:32:12,400
<font color="#E5E5E5">set you know they said all we have is</font>

671
00:32:12,400 --> 00:32:15,400
like<font color="#E5E5E5"> google books and so they have an</font>

672
00:32:15,400 --> 00:32:16,720
unsupervised learning problem

673
00:32:16,720 --> 00:32:19,000
<font color="#E5E5E5">unlabeled problem and so the</font><font color="#CCCCCC"> best way in</font>

674
00:32:19,000 --> 00:32:21,190
<font color="#CCCCCC">my opinion to turn an unlabeled problem</font>

675
00:32:21,190 --> 00:32:23,290
into a<font color="#CCCCCC"> labelled problem is to kind</font><font color="#E5E5E5"> of</font>

676
00:32:23,290 --> 00:32:25,570
invent some labels and so what they did

677
00:32:25,570 --> 00:32:27,700
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> word to vet case</font><font color="#E5E5E5"> was they said</font>

678
00:32:27,700 --> 00:32:30,520
okay here's a sentence with<font color="#E5E5E5"> 11 words in</font>

679
00:32:30,520 --> 00:32:33,490
it<font color="#E5E5E5"> right and then they said</font><font color="#CCCCCC"> okay let's</font>

680
00:32:33,490 --> 00:32:39,570
delete the middle word and replace<font color="#E5E5E5"> it</font>

681
00:32:39,570 --> 00:32:44,500
for<font color="#E5E5E5"> the random word and so you know</font>

682
00:32:44,500 --> 00:32:48,160
originally it said cat and they say no

683
00:32:48,160 --> 00:32:53,500
let's replace that<font color="#E5E5E5"> with justice all</font>

684
00:32:53,500 --> 00:32:55,960
<font color="#E5E5E5">right so before</font><font color="#CCCCCC"> it said</font><font color="#E5E5E5"> the cute little</font>

685
00:32:55,960 --> 00:32:58,929
cat sat on<font color="#E5E5E5"> the fuzzy mat and now it says</font>

686
00:32:58,929 --> 00:33:01,360
<font color="#CCCCCC">the cute little justice sat on the fuzzy</font>

687
00:33:01,360 --> 00:33:01,840
<font color="#E5E5E5">man</font>

688
00:33:01,840 --> 00:33:03,970
right and what they do is they do that

689
00:33:03,970 --> 00:33:06,760
so they have<font color="#E5E5E5"> one sentence where they</font>

690
00:33:06,760 --> 00:33:10,170
keep exactly as is

691
00:33:12,120 --> 00:33:14,610
and then they make a copy of<font color="#E5E5E5"> it and they</font>

692
00:33:14,610 --> 00:33:16,710
do the replacement<font color="#CCCCCC"> and so then they have</font>

693
00:33:16,710 --> 00:33:20,730
a label where they say it's a<font color="#CCCCCC"> one if it</font>

694
00:33:20,730 --> 00:33:22,680
was unchanged it was the original and

695
00:33:22,680 --> 00:33:27,210
zero otherwise<font color="#CCCCCC"> okay and so basically</font>

696
00:33:27,210 --> 00:33:29,280
<font color="#CCCCCC">then you</font><font color="#E5E5E5"> now have</font><font color="#CCCCCC"> something you can</font>

697
00:33:29,280 --> 00:33:32,280
build<font color="#CCCCCC"> a machine</font><font color="#E5E5E5"> learning model</font><font color="#CCCCCC"> on and so</font>

698
00:33:32,280 --> 00:33:33,330
they went<font color="#CCCCCC"> and build a machine</font><font color="#E5E5E5"> learning</font>

699
00:33:33,330 --> 00:33:35,370
model on this<font color="#E5E5E5"> so the model was like try</font>

700
00:33:35,370 --> 00:33:40,800
<font color="#CCCCCC">and find the effect</font><font color="#E5E5E5"> sentences</font><font color="#CCCCCC"> not</font>

701
00:33:40,800 --> 00:33:42,930
<font color="#E5E5E5">because they were interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> a fake</font>

702
00:33:42,930 --> 00:33:44,910
sentence<font color="#CCCCCC"> binder but because as a</font><font color="#E5E5E5"> result</font>

703
00:33:44,910 --> 00:33:46,530
they now have embeddings that just like

704
00:33:46,530 --> 00:33:48,360
we discussed<font color="#E5E5E5"> you can now use for other</font>

705
00:33:48,360 --> 00:33:50,720
<font color="#CCCCCC">purposes and that became word to vet now</font>

706
00:33:50,720 --> 00:33:55,200
<font color="#CCCCCC">it turns out that if you do this as</font><font color="#E5E5E5"> just</font>

707
00:33:55,200 --> 00:33:58,290
a kind of a effectively like a single

708
00:33:58,290 --> 00:33:59,850
<font color="#CCCCCC">matrix</font><font color="#E5E5E5"> multiply rather than make</font><font color="#CCCCCC"> it a</font>

709
00:33:59,850 --> 00:34:01,860
deep neural net you<font color="#E5E5E5"> can train this super</font>

710
00:34:01,860 --> 00:34:05,520
quickly<font color="#CCCCCC"> and so that's basically</font><font color="#E5E5E5"> what</font>

711
00:34:05,520 --> 00:34:06,720
they did<font color="#E5E5E5"> with they'd met there though</font>

712
00:34:06,720 --> 00:34:08,460
<font color="#E5E5E5">they kind of decided we're going to make</font>

713
00:34:08,460 --> 00:34:11,699
a pretty crappy<font color="#E5E5E5"> model like a shallow</font>

714
00:34:11,699 --> 00:34:13,760
<font color="#CCCCCC">learning model rather than</font><font color="#E5E5E5"> a deep model</font>

715
00:34:13,760 --> 00:34:15,989
<font color="#CCCCCC">you know with the downside it's a less</font>

716
00:34:15,989 --> 00:34:18,150
powerful model but a<font color="#E5E5E5"> number of upsides</font>

717
00:34:18,150 --> 00:34:20,159
<font color="#E5E5E5">the first thing we can train it on a</font>

718
00:34:20,159 --> 00:34:22,860
<font color="#E5E5E5">really large data set and then also</font>

719
00:34:22,860 --> 00:34:24,480
<font color="#E5E5E5">really importantly we're</font><font color="#CCCCCC"> going to end up</font>

720
00:34:24,480 --> 00:34:27,710
with embeddings<font color="#E5E5E5"> which have really very</font>

721
00:34:27,710 --> 00:34:30,150
<font color="#E5E5E5">linear characteristics so we can like</font>

722
00:34:30,150 --> 00:34:32,190
add them together<font color="#E5E5E5"> and subtract them and</font>

723
00:34:32,190 --> 00:34:37,380
stuff<font color="#CCCCCC"> like that okay so that so there's</font>

724
00:34:37,380 --> 00:34:39,330
a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of stuff we can learn about</font><font color="#E5E5E5"> there</font>

725
00:34:39,330 --> 00:34:41,610
from like for other types of embedding

726
00:34:41,610 --> 00:34:44,250
like categorical embeddings<font color="#E5E5E5"> and</font>

727
00:34:44,250 --> 00:34:45,929
specifically<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we want categorical</font>

728
00:34:45,929 --> 00:34:48,810
embeddings which we can kind of draw

729
00:34:48,810 --> 00:34:51,120
nicely and expect them<font color="#CCCCCC"> to us</font><font color="#E5E5E5"> to be able</font>

730
00:34:51,120 --> 00:34:52,710
<font color="#E5E5E5">to add and subtract them and behave</font>

731
00:34:52,710 --> 00:34:56,010
linearly<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> probably if we want to</font>

732
00:34:56,010 --> 00:34:57,810
use<font color="#E5E5E5"> them in</font><font color="#CCCCCC"> k-nearest neighbors</font><font color="#E5E5E5"> and</font>

733
00:34:57,810 --> 00:35:00,330
stuff<font color="#E5E5E5"> we should probably use shallow</font>

734
00:35:00,330 --> 00:35:03,990
learning<font color="#CCCCCC"> if we want something that's</font>

735
00:35:03,990 --> 00:35:06,000
going to be more predictive we<font color="#CCCCCC"> probably</font>

736
00:35:06,000 --> 00:35:09,300
want to use a<font color="#E5E5E5"> neural net</font><font color="#CCCCCC"> and so actually</font>

737
00:35:09,300 --> 00:35:14,670
<font color="#CCCCCC">an NLP I'm really pushing</font><font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> that</font>

738
00:35:14,670 --> 00:35:17,130
we<font color="#E5E5E5"> need to move past word to</font><font color="#CCCCCC"> backhand</font>

739
00:35:17,130 --> 00:35:19,440
<font color="#CCCCCC">glove these linear based methods because</font>

740
00:35:19,440 --> 00:35:21,960
it turns out<font color="#E5E5E5"> that those embeddings are</font>

741
00:35:21,960 --> 00:35:24,450
way less predictive than embeddings

742
00:35:24,450 --> 00:35:25,260
learnt from

743
00:35:25,260 --> 00:35:27,900
models<font color="#E5E5E5"> and so the language</font><font color="#CCCCCC"> model that we</font>

744
00:35:27,900 --> 00:35:29,220
learned about which ended up getting a

745
00:35:29,220 --> 00:35:30,750
<font color="#CCCCCC">state-of-the-art on sentiment analysis</font>

746
00:35:30,750 --> 00:35:33,210
didn't<font color="#CCCCCC"> used a lot</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> work to</font><font color="#E5E5E5"> vet that</font>

747
00:35:33,210 --> 00:35:35,790
instead we<font color="#E5E5E5"> pre trained a deep recurrent</font>

748
00:35:35,790 --> 00:35:38,220
neural network<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> ended up with not</font>

749
00:35:38,220 --> 00:35:40,470
<font color="#CCCCCC">just</font><font color="#E5E5E5"> a pre trained word vectors but a</font>

750
00:35:40,470 --> 00:35:46,350
for pre-trained model so it looks like

751
00:35:46,350 --> 00:35:48,870
<font color="#E5E5E5">Duke creates embeddings for entities we</font>

752
00:35:48,870 --> 00:35:51,570
need like a dummy<font color="#E5E5E5"> task not necessarily a</font>

753
00:35:51,570 --> 00:35:53,250
dummy task like in this case we had a

754
00:35:53,250 --> 00:35:55,140
real task<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so we created the</font>

755
00:35:55,140 --> 00:35:56,820
embeddings for<font color="#CCCCCC"> Rossmann by trying</font><font color="#E5E5E5"> to</font>

756
00:35:56,820 --> 00:36:01,260
predict store sales you only need this

757
00:36:01,260 --> 00:36:02,900
isn't just in this<font color="#E5E5E5"> isn't just for</font>

758
00:36:02,900 --> 00:36:05,850
learning embeddings for learning<font color="#E5E5E5"> any</font>

759
00:36:05,850 --> 00:36:09,870
kind<font color="#E5E5E5"> of feature space</font><font color="#CCCCCC"> you either need</font>

760
00:36:09,870 --> 00:36:14,550
label data<font color="#E5E5E5"> or you need to invent some</font>

761
00:36:14,550 --> 00:36:16,200
kind<font color="#CCCCCC"> of fake</font><font color="#E5E5E5"> task</font>

762
00:36:16,200 --> 00:36:18,960
so does<font color="#E5E5E5"> that</font><font color="#CCCCCC"> task matter like if I</font>

763
00:36:18,960 --> 00:36:20,640
choose a task and train and lettings if

764
00:36:20,640 --> 00:36:22,050
I choose another task and train and

765
00:36:22,050 --> 00:36:26,550
lettings like which one is it's a great

766
00:36:26,550 --> 00:36:28,380
question<font color="#E5E5E5"> and it's not</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> that's</font>

767
00:36:28,380 --> 00:36:31,050
been<font color="#E5E5E5"> studied nearly enough right I'm not</font>

768
00:36:31,050 --> 00:36:32,730
<font color="#CCCCCC">sure that many people even</font><font color="#E5E5E5"> quite</font>

769
00:36:32,730 --> 00:36:34,850
understand that<font color="#E5E5E5"> when they say</font>

770
00:36:34,850 --> 00:36:37,500
unsupervised learning<font color="#E5E5E5"> now about nowadays</font>

771
00:36:37,500 --> 00:36:40,800
they almost<font color="#E5E5E5"> nearly always mean fake</font>

772
00:36:40,800 --> 00:36:45,030
<font color="#CCCCCC">tasks</font><font color="#E5E5E5"> labeled learning and so the idea</font>

773
00:36:45,030 --> 00:36:48,300
of<font color="#E5E5E5"> like what</font><font color="#CCCCCC"> makes a good fake</font><font color="#E5E5E5"> task</font><font color="#CCCCCC"> I</font>

774
00:36:48,300 --> 00:36:49,650
don't know that I've seen<font color="#E5E5E5"> a paper on</font>

775
00:36:49,650 --> 00:36:54,210
<font color="#E5E5E5">that</font><font color="#CCCCCC"> right that intuitively you know we</font>

776
00:36:54,210 --> 00:36:56,780
need<font color="#E5E5E5"> something where the kinds of</font>

777
00:36:56,780 --> 00:36:59,850
<font color="#E5E5E5">relationships it's going to learn likely</font>

778
00:36:59,850 --> 00:37:01,500
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be the kinds of</font><font color="#CCCCCC"> relationships that</font>

779
00:37:01,500 --> 00:37:05,130
you probably<font color="#E5E5E5"> care about right so for</font>

780
00:37:05,130 --> 00:37:09,930
example in in computer vision<font color="#E5E5E5"> one kind</font>

781
00:37:09,930 --> 00:37:13,820
of fake<font color="#CCCCCC"> task</font><font color="#E5E5E5"> people use is to</font><font color="#CCCCCC"> say like</font>

782
00:37:13,820 --> 00:37:16,770
<font color="#E5E5E5">let's take some</font><font color="#CCCCCC"> images and use some</font><font color="#E5E5E5"> kind</font>

783
00:37:16,770 --> 00:37:20,010
of like unreal and unreasonable data

784
00:37:20,010 --> 00:37:23,190
<font color="#E5E5E5">augmentation like like recolor them too</font>

785
00:37:23,190 --> 00:37:25,470
much<font color="#E5E5E5"> or</font><font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> and then we'll ask the</font>

786
00:37:25,470 --> 00:37:27,390
neural net<font color="#CCCCCC"> to like predict which one was</font>

787
00:37:27,390 --> 00:37:29,130
the<font color="#E5E5E5"> Augmented which one</font><font color="#CCCCCC"> was not</font><font color="#E5E5E5"> you</font>

788
00:37:29,130 --> 00:37:37,200
admitted yeah<font color="#E5E5E5"> so it's I think it's a</font>

789
00:37:37,200 --> 00:37:38,520
fascinating<font color="#E5E5E5"> area</font>

790
00:37:38,520 --> 00:37:41,100
one which<font color="#CCCCCC"> you know would be really</font>

791
00:37:41,100 --> 00:37:43,140
interesting<font color="#E5E5E5"> for people to you</font><font color="#CCCCCC"> know maybe</font>

792
00:37:43,140 --> 00:37:44,130
some of<font color="#CCCCCC"> the students here they're</font>

793
00:37:44,130 --> 00:37:45,869
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> to further</font><font color="#CCCCCC"> it's like take</font><font color="#E5E5E5"> some</font>

794
00:37:45,869 --> 00:37:47,310
interesting semi-supervised<font color="#CCCCCC"> tour</font>

795
00:37:47,310 --> 00:37:49,080
unsupervised<font color="#E5E5E5"> datasets and try and come</font>

796
00:37:49,080 --> 00:37:54,150
up<font color="#E5E5E5"> with some like more clever fake tasks</font>

797
00:37:54,150 --> 00:37:56,760
<font color="#E5E5E5">and see like does it matter</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> how</font>

798
00:37:56,760 --> 00:37:59,640
much does<font color="#CCCCCC"> it matter in</font><font color="#E5E5E5"> general like if</font>

799
00:37:59,640 --> 00:38:01,619
you can't come<font color="#CCCCCC"> up with a fake task that</font>

800
00:38:01,619 --> 00:38:04,100
<font color="#E5E5E5">you think seems great</font><font color="#CCCCCC"> I would say use it</font>

801
00:38:04,100 --> 00:38:06,420
<font color="#E5E5E5">use the best you can it's an often</font>

802
00:38:06,420 --> 00:38:09,869
surprising how how little you need<font color="#E5E5E5"> like</font>

803
00:38:09,869 --> 00:38:12,570
the ultimately crappy fake<font color="#E5E5E5"> task is</font>

804
00:38:12,570 --> 00:38:15,119
called the auto encoder and the auto

805
00:38:15,119 --> 00:38:19,050
encoder is the thing which which one the

806
00:38:19,050 --> 00:38:20,940
<font color="#E5E5E5">claims prediction competition that just</font>

807
00:38:20,940 --> 00:38:23,760
finished<font color="#CCCCCC"> on cattle</font><font color="#E5E5E5"> they had lots of</font>

808
00:38:23,760 --> 00:38:27,090
examples of insurance policies where we

809
00:38:27,090 --> 00:38:28,800
knew this<font color="#E5E5E5"> was how much was claimed and</font>

810
00:38:28,800 --> 00:38:30,360
then lots of examples of<font color="#E5E5E5"> insurance</font>

811
00:38:30,360 --> 00:38:32,220
policies where I<font color="#E5E5E5"> guess there must</font><font color="#CCCCCC"> have</font>

812
00:38:32,220 --> 00:38:34,560
<font color="#E5E5E5">been still still open we didn't yet know</font>

813
00:38:34,560 --> 00:38:36,960
<font color="#E5E5E5">how much they claimed right</font><font color="#CCCCCC"> and so what</font>

814
00:38:36,960 --> 00:38:39,720
they did<font color="#E5E5E5"> was</font><font color="#CCCCCC"> they said okay</font><font color="#E5E5E5"> so for all</font>

815
00:38:39,720 --> 00:38:41,940
<font color="#CCCCCC">of the ones so</font><font color="#E5E5E5"> let's basically start off</font>

816
00:38:41,940 --> 00:38:44,130
by<font color="#CCCCCC"> grabbing every</font><font color="#E5E5E5"> policy right and we'll</font>

817
00:38:44,130 --> 00:38:46,200
<font color="#E5E5E5">take a single policy and we'll put it</font>

818
00:38:46,200 --> 00:38:50,940
through a<font color="#E5E5E5"> neural net right and we'll try</font>

819
00:38:50,940 --> 00:38:55,830
<font color="#E5E5E5">and have it reconstruct itself</font><font color="#CCCCCC"> but in</font>

820
00:38:55,830 --> 00:38:57,990
these intermediate layers and at<font color="#E5E5E5"> least</font>

821
00:38:57,990 --> 00:38:59,580
one of those intermediate layers<font color="#E5E5E5"> will</font>

822
00:38:59,580 --> 00:39:01,530
make sure there's less activations<font color="#E5E5E5"> and</font>

823
00:39:01,530 --> 00:39:03,690
<font color="#CCCCCC">there were</font><font color="#E5E5E5"> inputs so let's say if there</font>

824
00:39:03,690 --> 00:39:06,150
was a hundred variables on the insurance

825
00:39:06,150 --> 00:39:08,580
policy<font color="#E5E5E5"> you know we'll have something</font><font color="#CCCCCC"> in</font>

826
00:39:08,580 --> 00:39:09,869
the<font color="#CCCCCC"> middle that</font><font color="#E5E5E5"> only has like</font><font color="#CCCCCC"> twenty</font>

827
00:39:09,869 --> 00:39:13,590
activations<font color="#E5E5E5"> all right and so when you</font>

828
00:39:13,590 --> 00:39:16,020
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> are saying</font><font color="#E5E5E5"> hey reconstruct</font>

829
00:39:16,020 --> 00:39:18,090
your<font color="#E5E5E5"> own</font><font color="#CCCCCC"> input like it's not</font><font color="#E5E5E5"> a different</font>

830
00:39:18,090 --> 00:39:20,070
kind of<font color="#CCCCCC"> model</font><font color="#E5E5E5"> doesn't require any</font>

831
00:39:20,070 --> 00:39:23,970
<font color="#CCCCCC">special code it's</font><font color="#E5E5E5"> literally just passing</font>

832
00:39:23,970 --> 00:39:25,619
you can use any standard<font color="#E5E5E5"> pipe torch or</font>

833
00:39:25,619 --> 00:39:28,650
<font color="#E5E5E5">fast AI learner you just say my output</font>

834
00:39:28,650 --> 00:39:31,710
<font color="#E5E5E5">equals my input</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and that's that's</font>

835
00:39:31,710 --> 00:39:35,670
<font color="#E5E5E5">like the the most uncreated you know</font>

836
00:39:35,670 --> 00:39:37,650
invented<font color="#E5E5E5"> task you can create and that's</font>

837
00:39:37,650 --> 00:39:38,700
called an<font color="#CCCCCC"> autoencoder</font>

838
00:39:38,700 --> 00:39:41,430
and it works surprisingly well<font color="#CCCCCC"> in fact</font>

839
00:39:41,430 --> 00:39:43,590
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> point that it</font><font color="#E5E5E5"> literally just</font><font color="#CCCCCC"> won</font>

840
00:39:43,590 --> 00:39:45,030
a cackle competition they took the

841
00:39:45,030 --> 00:39:47,100
features that<font color="#CCCCCC"> it learnt and chucked it</font>

842
00:39:47,100 --> 00:39:49,980
into another neural net<font color="#E5E5E5"> and</font>

843
00:39:49,980 --> 00:39:54,270
yeah<font color="#E5E5E5"> and one you know maybe if we have</font>

844
00:39:54,270 --> 00:39:56,430
enough students<font color="#CCCCCC"> taking an interest in</font>

845
00:39:56,430 --> 00:39:59,609
<font color="#E5E5E5">this then you know we'll</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font>

846
00:39:59,609 --> 00:40:01,560
cover covered unsupervised learning in

847
00:40:01,560 --> 00:40:03,450
more detail in in part<font color="#CCCCCC"> two specially</font>

848
00:40:03,450 --> 00:40:10,589
given<font color="#E5E5E5"> this cattle</font><font color="#CCCCCC"> have a win I think</font>

849
00:40:10,589 --> 00:40:11,880
<font color="#CCCCCC">this may be</font><font color="#E5E5E5"> related to the previous</font>

850
00:40:11,880 --> 00:40:15,740
<font color="#E5E5E5">question</font><font color="#CCCCCC"> when training language models</font>

851
00:40:15,740 --> 00:40:18,150
is the language<font color="#E5E5E5"> model</font><font color="#CCCCCC"> example trained on</font>

852
00:40:18,150 --> 00:40:19,980
<font color="#CCCCCC">the</font><font color="#E5E5E5"> archive data is that</font><font color="#CCCCCC"> useful at all</font>

853
00:40:19,980 --> 00:40:26,070
in the movie<font color="#CCCCCC"> great question you know I</font>

854
00:40:26,070 --> 00:40:29,640
was just<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> to Sebastian about this</font>

855
00:40:29,640 --> 00:40:31,170
<font color="#E5E5E5">question read about this this week and</font>

856
00:40:31,170 --> 00:40:32,670
we thought would try and do some

857
00:40:32,670 --> 00:40:35,520
<font color="#CCCCCC">research on this in January it's it's</font>

858
00:40:35,520 --> 00:40:36,839
<font color="#E5E5E5">again</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> done</font>

859
00:40:36,839 --> 00:40:39,420
we know that in computer vision it's

860
00:40:39,420 --> 00:40:42,900
shockingly effective<font color="#E5E5E5"> to</font><font color="#CCCCCC"> train on cats</font>

861
00:40:42,900 --> 00:40:45,119
and dogs<font color="#E5E5E5"> and use that</font><font color="#CCCCCC"> fruit train</font>

862
00:40:45,119 --> 00:40:47,970
network to do lung cancer diagnosis and

863
00:40:47,970 --> 00:40:52,230
<font color="#E5E5E5">CT scans</font><font color="#CCCCCC"> in the NLP world</font><font color="#E5E5E5"> nobody much</font>

864
00:40:52,230 --> 00:40:54,480
<font color="#CCCCCC">seems to</font><font color="#E5E5E5"> have tried this the NLP</font>

865
00:40:54,480 --> 00:40:56,490
<font color="#E5E5E5">research as I've spoken to other than</font>

866
00:40:56,490 --> 00:40:58,950
Sebastian about<font color="#CCCCCC"> this</font><font color="#E5E5E5"> assume that it</font>

867
00:40:58,950 --> 00:41:00,329
<font color="#E5E5E5">wouldn't work and they generally haven't</font>

868
00:41:00,329 --> 00:41:01,680
<font color="#CCCCCC">bother</font><font color="#E5E5E5"> trying I think it would work</font>

869
00:41:01,680 --> 00:41:07,079
<font color="#CCCCCC">great</font><font color="#E5E5E5"> so so since we're talking about</font>

870
00:41:07,079 --> 00:41:12,420
ruspin I just mentioned<font color="#E5E5E5"> during the week</font>

871
00:41:12,420 --> 00:41:14,460
I was<font color="#CCCCCC"> interested to see like how</font><font color="#E5E5E5"> good</font>

872
00:41:14,460 --> 00:41:17,810
this<font color="#E5E5E5"> solution actually</font><font color="#CCCCCC"> actually was</font>

873
00:41:17,810 --> 00:41:20,040
<font color="#E5E5E5">because</font><font color="#CCCCCC"> I noticed</font><font color="#E5E5E5"> that on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> public</font>

874
00:41:20,040 --> 00:41:21,150
leader board it didn't look like it was

875
00:41:21,150 --> 00:41:23,550
<font color="#E5E5E5">going to be that great and I also</font>

876
00:41:23,550 --> 00:41:25,770
thought it'd<font color="#E5E5E5"> be good to see like what</font>

877
00:41:25,770 --> 00:41:28,560
<font color="#CCCCCC">does</font><font color="#E5E5E5"> it actually take to use a test set</font>

878
00:41:28,560 --> 00:41:30,690
properly<font color="#E5E5E5"> with this kind of structured</font>

879
00:41:30,690 --> 00:41:32,700
data<font color="#CCCCCC"> so if you have a look at ruspin now</font>

880
00:41:32,700 --> 00:41:34,380
<font color="#E5E5E5">I've pushed some changes that</font><font color="#CCCCCC"> actually</font>

881
00:41:34,380 --> 00:41:36,900
run the test set through as well and so

882
00:41:36,900 --> 00:41:38,430
<font color="#E5E5E5">you can get a sense of how to do this</font>

883
00:41:38,430 --> 00:41:40,440
so you'll see basically every line

884
00:41:40,440 --> 00:41:44,150
appears twice<font color="#CCCCCC"> one for tests and one-foot</font>

885
00:41:44,150 --> 00:41:46,650
one for train when we<font color="#E5E5E5"> get there yeah</font>

886
00:41:46,650 --> 00:41:48,720
test train test trains history<font color="#E5E5E5"> obviously</font>

887
00:41:48,720 --> 00:41:50,609
<font color="#CCCCCC">you could do this on a lot fewer lines</font>

888
00:41:50,609 --> 00:41:53,460
of code<font color="#E5E5E5"> by putting all</font><font color="#CCCCCC"> of the steps</font><font color="#E5E5E5"> into</font>

889
00:41:53,460 --> 00:41:55,410
a<font color="#E5E5E5"> method and then pass either the</font><font color="#CCCCCC"> train</font>

890
00:41:55,410 --> 00:41:57,390
data set<font color="#E5E5E5"> well the test data set up</font>

891
00:41:57,390 --> 00:42:00,380
<font color="#CCCCCC">dataframe to it</font><font color="#E5E5E5"> in this case</font><font color="#CCCCCC"> i wanted</font><font color="#E5E5E5"> to</font>

892
00:42:00,380 --> 00:42:02,970
kind<font color="#CCCCCC"> of put for teaching</font><font color="#E5E5E5"> purposes you'd</font>

893
00:42:02,970 --> 00:42:03,750
be able<font color="#CCCCCC"> to see</font>

894
00:42:03,750 --> 00:42:05,700
step<font color="#E5E5E5"> and to experiment</font><font color="#CCCCCC"> to see what each</font>

895
00:42:05,700 --> 00:42:08,010
step looks like<font color="#E5E5E5"> but you could certainly</font>

896
00:42:08,010 --> 00:42:12,510
simplify<font color="#CCCCCC"> this code</font><font color="#E5E5E5"> so yeah so we do</font><font color="#CCCCCC"> this</font>

897
00:42:12,510 --> 00:42:16,470
<font color="#E5E5E5">for</font><font color="#CCCCCC"> every data frame and</font><font color="#E5E5E5"> then some of</font>

898
00:42:16,470 --> 00:42:17,580
these you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> kind of lived</font>

899
00:42:17,580 --> 00:42:20,160
through the data frame<font color="#E5E5E5"> in joined and the</font>

900
00:42:20,160 --> 00:42:24,480
<font color="#E5E5E5">joint test right training just this</font>

901
00:42:24,480 --> 00:42:27,780
whole<font color="#CCCCCC"> thing about</font><font color="#E5E5E5"> the durations</font><font color="#CCCCCC"> I</font>

902
00:42:27,780 --> 00:42:30,150
basically put two lines<font color="#E5E5E5"> here one that</font>

903
00:42:30,150 --> 00:42:32,400
<font color="#E5E5E5">said data frame equals</font><font color="#CCCCCC"> train columns</font><font color="#E5E5E5"> one</font>

904
00:42:32,400 --> 00:42:34,140
that says data frame equals test columns

905
00:42:34,140 --> 00:42:36,150
<font color="#E5E5E5">and so my you know basically</font><font color="#CCCCCC"> ideas you'd</font>

906
00:42:36,150 --> 00:42:39,060
run this line first<font color="#E5E5E5"> and then you would</font>

907
00:42:39,060 --> 00:42:40,770
skip the next<font color="#E5E5E5"> one and you'd run</font>

908
00:42:40,770 --> 00:42:42,600
everything<font color="#CCCCCC"> beneath it and then you'd go</font>

909
00:42:42,600 --> 00:42:45,000
back<font color="#CCCCCC"> and run this line</font><font color="#E5E5E5"> and then run</font>

910
00:42:45,000 --> 00:42:45,900
everything believe it

911
00:42:45,900 --> 00:42:48,000
so some<font color="#CCCCCC"> people on the forum were asking</font>

912
00:42:48,000 --> 00:42:49,950
how come this code<font color="#E5E5E5"> wasn't working this</font>

913
00:42:49,950 --> 00:42:52,260
week which<font color="#E5E5E5"> is a good reminder</font><font color="#CCCCCC"> that the</font>

914
00:42:52,260 --> 00:42:54,330
<font color="#CCCCCC">code is not designed to be code that you</font>

915
00:42:54,330 --> 00:42:56,340
always run top to bottom<font color="#CCCCCC"> without</font>

916
00:42:56,340 --> 00:42:57,840
thinking right you're meant to like

917
00:42:57,840 --> 00:43:00,180
think<font color="#CCCCCC"> like what is this</font><font color="#E5E5E5"> code here should</font>

918
00:43:00,180 --> 00:43:03,960
I be running<font color="#E5E5E5"> it right now okay</font><font color="#CCCCCC"> and so</font>

919
00:43:03,960 --> 00:43:05,550
like the early<font color="#E5E5E5"> lessons I tried to make</font>

920
00:43:05,550 --> 00:43:07,560
<font color="#E5E5E5">it so you can</font><font color="#CCCCCC"> run it top to bottom</font><font color="#E5E5E5"> but</font>

921
00:43:07,560 --> 00:43:09,480
<font color="#E5E5E5">increasingly as</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> go along</font><font color="#CCCCCC"> I kind of</font>

922
00:43:09,480 --> 00:43:10,800
make it<font color="#CCCCCC"> more and</font><font color="#E5E5E5"> more that like you</font>

923
00:43:10,800 --> 00:43:11,790
actually<font color="#E5E5E5"> have to think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> what's</font>

924
00:43:11,790 --> 00:43:17,340
<font color="#CCCCCC">going on so Jimmy you're talking about</font>

925
00:43:17,340 --> 00:43:20,190
<font color="#CCCCCC">shadow learning and deep learning could</font>

926
00:43:20,190 --> 00:43:22,620
<font color="#E5E5E5">you define that a bit better by</font><font color="#CCCCCC"> sure I'm</font>

927
00:43:22,620 --> 00:43:24,000
<font color="#E5E5E5">learning I think</font><font color="#CCCCCC"> I just mean anything</font>

928
00:43:24,000 --> 00:43:25,830
<font color="#CCCCCC">that doesn't</font><font color="#E5E5E5"> have a hidden layer so</font>

929
00:43:25,830 --> 00:43:28,260
something<font color="#CCCCCC"> that's like a dot product</font>

930
00:43:28,260 --> 00:43:40,800
<font color="#E5E5E5">matrix</font><font color="#CCCCCC"> multiplier</font><font color="#E5E5E5"> basically okay so so</font>

931
00:43:40,800 --> 00:43:43,590
we end<font color="#E5E5E5"> up with a training and a test</font>

932
00:43:43,590 --> 00:43:46,230
version<font color="#E5E5E5"> and then everything else</font><font color="#CCCCCC"> is</font>

933
00:43:46,230 --> 00:43:50,040
basically<font color="#E5E5E5"> the same one thing to note</font><font color="#CCCCCC"> on</font>

934
00:43:50,040 --> 00:43:51,840
<font color="#E5E5E5">a lot of</font><font color="#CCCCCC"> these details of</font><font color="#E5E5E5"> this we cover</font>

935
00:43:51,840 --> 00:43:53,190
in the machine learning<font color="#E5E5E5"> course</font><font color="#CCCCCC"> by the</font>

936
00:43:53,190 --> 00:43:54,180
<font color="#E5E5E5">way because it's not really deep</font>

937
00:43:54,180 --> 00:43:55,650
<font color="#CCCCCC">learning specific so check that</font><font color="#E5E5E5"> out if</font>

938
00:43:55,650 --> 00:43:58,110
<font color="#CCCCCC">you're just in</font><font color="#E5E5E5"> the details</font>

939
00:43:58,110 --> 00:44:00,450
<font color="#CCCCCC">I should mention you</font><font color="#E5E5E5"> know we use apply</font>

940
00:44:00,450 --> 00:44:02,970
<font color="#CCCCCC">cats rather than train cats to make sure</font>

941
00:44:02,970 --> 00:44:04,770
the test set<font color="#CCCCCC"> and the training</font><font color="#E5E5E5"> set have</font>

942
00:44:04,770 --> 00:44:09,540
<font color="#E5E5E5">the same categorical codes and that they</font>

943
00:44:09,540 --> 00:44:14,040
join<font color="#CCCCCC"> too we also need to make sure</font><font color="#E5E5E5"> that</font>

944
00:44:14,040 --> 00:44:15,990
we keep track<font color="#CCCCCC"> of the mapper</font><font color="#E5E5E5"> this is the</font>

945
00:44:15,990 --> 00:44:17,180
thing which basically says

946
00:44:17,180 --> 00:44:18,500
what's the mean and standard<font color="#E5E5E5"> deviation</font>

947
00:44:18,500 --> 00:44:22,069
<font color="#CCCCCC">of each continuous column</font><font color="#E5E5E5"> and then apply</font>

948
00:44:22,069 --> 00:44:27,440
that<font color="#CCCCCC"> same</font><font color="#E5E5E5"> method test set</font><font color="#CCCCCC"> and so when we</font>

949
00:44:27,440 --> 00:44:28,880
do all that<font color="#E5E5E5"> that's basically it then the</font>

950
00:44:28,880 --> 00:44:30,950
rest<font color="#CCCCCC"> is easy we just have to pass you in</font>

951
00:44:30,950 --> 00:44:33,609
the test data frame in the usual way

952
00:44:33,609 --> 00:44:39,099
<font color="#CCCCCC">when we create our model</font><font color="#E5E5E5"> data object</font><font color="#CCCCCC"> and</font>

953
00:44:39,099 --> 00:44:42,050
<font color="#CCCCCC">there's no changes</font><font color="#E5E5E5"> through all here we</font>

954
00:44:42,050 --> 00:44:43,970
trained it in the same<font color="#E5E5E5"> way and then once</font>

955
00:44:43,970 --> 00:44:51,380
we finish training<font color="#E5E5E5"> it</font><font color="#CCCCCC"> we can then call</font>

956
00:44:51,380 --> 00:44:55,700
predict<font color="#CCCCCC"> as per usual</font><font color="#E5E5E5"> passing in true to</font>

957
00:44:55,700 --> 00:44:57,710
say this is the test set<font color="#E5E5E5"> rather than the</font>

958
00:44:57,710 --> 00:45:00,700
validation set<font color="#E5E5E5"> and pass that off to</font>

959
00:45:00,700 --> 00:45:03,650
<font color="#E5E5E5">cattle and so it was really</font><font color="#CCCCCC"> interesting</font>

960
00:45:03,650 --> 00:45:08,869
<font color="#E5E5E5">because this was my submission</font><font color="#CCCCCC"> it got a</font>

961
00:45:08,869 --> 00:45:14,839
public score of 103<font color="#E5E5E5"> which would put us</font>

962
00:45:14,839 --> 00:45:21,109
<font color="#E5E5E5">in about</font><font color="#CCCCCC"> 300</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> some things place which</font>

963
00:45:21,109 --> 00:45:25,339
<font color="#E5E5E5">looks awful right and our private score</font>

964
00:45:25,339 --> 00:45:37,880
of 107<font color="#E5E5E5"> need a board private</font><font color="#CCCCCC"> here's about</font>

965
00:45:37,880 --> 00:45:38,890
<font color="#CCCCCC">fifth</font>

966
00:45:38,890 --> 00:45:42,290
right<font color="#E5E5E5"> so like if you're competing in a</font>

967
00:45:42,290 --> 00:45:45,799
<font color="#CCCCCC">cable competition and you don't haven't</font>

968
00:45:45,799 --> 00:45:47,990
thoughtfully created<font color="#E5E5E5"> a validation set of</font>

969
00:45:47,990 --> 00:45:49,819
your<font color="#E5E5E5"> own and you're relying on</font><font color="#CCCCCC"> publicly</font>

970
00:45:49,819 --> 00:45:52,040
<font color="#CCCCCC">the board feedback</font><font color="#E5E5E5"> this could totally</font>

971
00:45:52,040 --> 00:45:53,510
<font color="#CCCCCC">happen to you but the other way around</font>

972
00:45:53,510 --> 00:45:55,700
<font color="#CCCCCC">you'll be like oh I'm in the top ten I'm</font>

973
00:45:55,700 --> 00:45:56,420
doing great

974
00:45:56,420 --> 00:45:59,079
and then<font color="#CCCCCC"> oh for example at the moment</font>

975
00:45:59,079 --> 00:46:01,970
<font color="#E5E5E5">the ice Berg's competition recognizing</font>

976
00:46:01,970 --> 00:46:04,940
icebergs<font color="#CCCCCC"> a very large percentage</font><font color="#E5E5E5"> of the</font>

977
00:46:04,940 --> 00:46:07,730
<font color="#CCCCCC">public leaderboard set is synthetically</font>

978
00:46:07,730 --> 00:46:10,640
generated data augmentation data<font color="#E5E5E5"> like</font>

979
00:46:10,640 --> 00:46:13,490
totally meaningless<font color="#E5E5E5"> and so your</font>

980
00:46:13,490 --> 00:46:15,290
validation<font color="#E5E5E5"> set is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be much more</font>

981
00:46:15,290 --> 00:46:17,270
helpful<font color="#E5E5E5"> and the public leaderboard</font>

982
00:46:17,270 --> 00:46:21,859
<font color="#CCCCCC">feedback</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so yeah be very careful</font>

983
00:46:21,859 --> 00:46:24,380
so our<font color="#E5E5E5"> final score here</font><font color="#CCCCCC"> is kind</font><font color="#E5E5E5"> of</font>

984
00:46:24,380 --> 00:46:26,270
within statistical noise of the actual

985
00:46:26,270 --> 00:46:28,460
<font color="#CCCCCC">third-place getters so I'm pretty</font>

986
00:46:28,460 --> 00:46:31,040
confident<font color="#CCCCCC"> that we've we've captured</font>

987
00:46:31,040 --> 00:46:35,830
their approach<font color="#CCCCCC"> and so that's that's</font>

988
00:46:35,830 --> 00:46:40,700
<font color="#CCCCCC">pretty interesting something to</font><font color="#E5E5E5"> mention</font>

989
00:46:40,700 --> 00:46:43,340
<font color="#E5E5E5">there's a nice kernel about the</font><font color="#CCCCCC"> rustman</font>

990
00:46:43,340 --> 00:46:45,020
<font color="#CCCCCC">I quite a few nice kernels actually but</font>

991
00:46:45,020 --> 00:46:46,070
you can go<font color="#E5E5E5"> back and see like</font>

992
00:46:46,070 --> 00:46:47,150
<font color="#E5E5E5">particularly if you're doing the</font>

993
00:46:47,150 --> 00:46:48,680
groceries competition go and have a look

994
00:46:48,680 --> 00:46:50,180
<font color="#E5E5E5">at the</font><font color="#CCCCCC"> Rossmann kernels because actually</font>

995
00:46:50,180 --> 00:46:51,890
quite a few<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> a higher quality</font>

996
00:46:51,890 --> 00:46:53,720
<font color="#E5E5E5">than the ones for the</font><font color="#CCCCCC"> Ecuadorian</font>

997
00:46:53,720 --> 00:46:56,090
groceries competition<font color="#CCCCCC"> one of them for</font>

998
00:46:56,090 --> 00:46:58,460
example showed how on<font color="#CCCCCC"> four particular</font>

999
00:46:58,460 --> 00:47:02,480
stores<font color="#E5E5E5"> like straw</font><font color="#CCCCCC"> eighty five</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> sales</font>

1000
00:47:02,480 --> 00:47:05,210
for non<font color="#E5E5E5"> Sundays and the sale for</font>

1001
00:47:05,210 --> 00:47:08,330
<font color="#E5E5E5">Sunday's looked very different</font><font color="#CCCCCC"> where</font>

1002
00:47:08,330 --> 00:47:09,860
else<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are some other stores where</font>

1003
00:47:09,860 --> 00:47:11,870
the sales on Sunday<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> look any</font>

1004
00:47:11,870 --> 00:47:13,400
<font color="#E5E5E5">different and it can kind of like get</font><font color="#CCCCCC"> a</font>

1005
00:47:13,400 --> 00:47:14,720
sense<font color="#E5E5E5"> of why you need these kind of</font>

1006
00:47:14,720 --> 00:47:16,310
interactions<font color="#CCCCCC"> the one I particularly</font>

1007
00:47:16,310 --> 00:47:18,290
wanted to point out is the one<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think I</font>

1008
00:47:18,290 --> 00:47:20,360
briefly mentioned<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> third-place</font>

1009
00:47:20,360 --> 00:47:22,850
winners whose approach we used they

1010
00:47:22,850 --> 00:47:25,520
didn't notice is this one and here's a

1011
00:47:25,520 --> 00:47:29,990
really cool visualization<font color="#E5E5E5"> here you can</font>

1012
00:47:29,990 --> 00:47:33,280
see that the store this store is closed

1013
00:47:33,280 --> 00:47:37,280
<font color="#E5E5E5">right and just</font><font color="#CCCCCC"> after</font><font color="#E5E5E5"> oh my god we run</font><font color="#CCCCCC"> a</font>

1014
00:47:37,280 --> 00:47:38,330
<font color="#CCCCCC">we run out of eggs</font>

1015
00:47:38,330 --> 00:47:41,540
<font color="#E5E5E5">and just before oh my god go and get the</font>

1016
00:47:41,540 --> 00:47:44,870
milk<font color="#CCCCCC"> before the store closes alright</font>

1017
00:47:44,870 --> 00:47:48,800
and here again<font color="#E5E5E5"> closed bang right so this</font>

1018
00:47:48,800 --> 00:47:52,190
<font color="#CCCCCC">third-place winner</font><font color="#E5E5E5"> actually deleted all</font>

1019
00:47:52,190 --> 00:47:55,100
of<font color="#E5E5E5"> the closed store rows before</font><font color="#CCCCCC"> they</font>

1020
00:47:55,100 --> 00:47:57,230
<font color="#E5E5E5">started doing any analysis right so</font>

1021
00:47:57,230 --> 00:47:59,360
<font color="#E5E5E5">remember how we talked</font><font color="#CCCCCC"> about like don't</font>

1022
00:47:59,360 --> 00:48:02,380
touch your data<font color="#E5E5E5"> unless you first of all</font>

1023
00:48:02,380 --> 00:48:04,970
<font color="#CCCCCC">analyze to see</font><font color="#E5E5E5"> whether that thing you're</font>

1024
00:48:04,970 --> 00:48:08,720
<font color="#CCCCCC">doing is actually okay no assumptions</font>

1025
00:48:08,720 --> 00:48:11,780
right so in this<font color="#E5E5E5"> case I am sure like I</font>

1026
00:48:11,780 --> 00:48:13,160
<font color="#E5E5E5">haven't tried it but I'm sure</font><font color="#CCCCCC"> they would</font>

1027
00:48:13,160 --> 00:48:15,260
<font color="#CCCCCC">have one otherwise</font><font color="#E5E5E5"> right because like</font>

1028
00:48:15,260 --> 00:48:16,850
well though<font color="#E5E5E5"> there weren't actually</font><font color="#CCCCCC"> any</font>

1029
00:48:16,850 --> 00:48:19,670
store closures to my<font color="#CCCCCC"> knowledge in the</font>

1030
00:48:19,670 --> 00:48:22,670
<font color="#CCCCCC">test set period the problem is</font><font color="#E5E5E5"> that</font>

1031
00:48:22,670 --> 00:48:25,100
their model was trying to fit to these

1032
00:48:25,100 --> 00:48:27,560
like<font color="#E5E5E5"> really extreme things and so and</font>

1033
00:48:27,560 --> 00:48:28,550
<font color="#E5E5E5">because it wasn't able to do</font><font color="#CCCCCC"> it very</font>

1034
00:48:28,550 --> 00:48:30,680
<font color="#CCCCCC">well</font><font color="#E5E5E5"> it was gonna end up getting a</font>

1035
00:48:30,680 --> 00:48:32,720
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> confused it's not gonna</font><font color="#E5E5E5"> break</font>

1036
00:48:32,720 --> 00:48:34,880
<font color="#E5E5E5">the model but it's definitely gonna harm</font>

1037
00:48:34,880 --> 00:48:36,410
it because it's<font color="#E5E5E5"> kind of trying to do</font>

1038
00:48:36,410 --> 00:48:38,480
computations to<font color="#E5E5E5"> fit something which it</font>

1039
00:48:38,480 --> 00:48:40,700
literally<font color="#E5E5E5"> doesn't have the data for your</font>

1040
00:48:40,700 --> 00:48:42,869
neck can<font color="#E5E5E5"> you pass</font><font color="#CCCCCC"> that back there</font>

1041
00:48:42,869 --> 00:48:50,739
all right so that<font color="#CCCCCC"> Russman</font><font color="#E5E5E5"> model again</font>

1042
00:48:50,739 --> 00:48:52,779
like it's nice to<font color="#CCCCCC"> kind of look</font><font color="#E5E5E5"> inside to</font>

1043
00:48:52,779 --> 00:48:54,819
<font color="#CCCCCC">see what's actually going on right and</font>

1044
00:48:54,819 --> 00:49:02,559
so that<font color="#CCCCCC"> Russman model I want to make</font>

1045
00:49:02,559 --> 00:49:04,029
sure<font color="#E5E5E5"> you kind of know how to find your</font>

1046
00:49:04,029 --> 00:49:05,170
<font color="#E5E5E5">way</font><font color="#CCCCCC"> around the code so you can</font><font color="#E5E5E5"> answer</font>

1047
00:49:05,170 --> 00:49:06,489
these questions<font color="#CCCCCC"> for yourself</font><font color="#E5E5E5"> so it's</font>

1048
00:49:06,489 --> 00:49:12,309
inside columnar model data<font color="#E5E5E5"> now um we</font>

1049
00:49:12,309 --> 00:49:13,839
<font color="#E5E5E5">started out</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> kind of saying hey if you</font>

1050
00:49:13,839 --> 00:49:15,190
want<font color="#E5E5E5"> to look at the code for something</font>

1051
00:49:15,190 --> 00:49:17,890
<font color="#E5E5E5">you</font><font color="#CCCCCC"> couldn't like</font><font color="#E5E5E5"> a question</font><font color="#CCCCCC"> mark</font>

1052
00:49:17,890 --> 00:49:21,999
<font color="#CCCCCC">question mark</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> this and oh</font><font color="#E5E5E5"> okay I</font>

1053
00:49:21,999 --> 00:49:23,829
need<font color="#CCCCCC"> to I</font><font color="#E5E5E5"> haven't got this</font><font color="#CCCCCC"> reading but</font>

1054
00:49:23,829 --> 00:49:25,269
<font color="#E5E5E5">you can use question mark question</font><font color="#CCCCCC"> mark</font>

1055
00:49:25,269 --> 00:49:27,999
to get<font color="#E5E5E5"> the source</font><font color="#CCCCCC"> code for something</font>

1056
00:49:27,999 --> 00:49:31,259
<font color="#E5E5E5">right</font><font color="#CCCCCC"> but obviously like that's not</font>

1057
00:49:31,259 --> 00:49:33,579
really<font color="#CCCCCC"> a great</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> because often you</font>

1058
00:49:33,579 --> 00:49:35,229
look at that source<font color="#CCCCCC"> code and</font><font color="#E5E5E5"> it turns</font>

1059
00:49:35,229 --> 00:49:36,190
out<font color="#E5E5E5"> you need to look at something else</font>

1060
00:49:36,190 --> 00:49:38,170
<font color="#E5E5E5">right and so for those of you that</font>

1061
00:49:38,170 --> 00:49:40,930
haven't<font color="#E5E5E5"> done much coding you might not</font>

1062
00:49:40,930 --> 00:49:43,349
be<font color="#E5E5E5"> aware that almost certainly</font><font color="#CCCCCC"> the</font>

1063
00:49:43,349 --> 00:49:45,880
editor you're using probably has the

1064
00:49:45,880 --> 00:49:48,219
ability to<font color="#E5E5E5"> both open up stuff directly</font>

1065
00:49:48,219 --> 00:49:51,940
off SSH and to<font color="#E5E5E5"> navigate through it so</font>

1066
00:49:51,940 --> 00:49:53,229
<font color="#CCCCCC">you can jump</font><font color="#E5E5E5"> straight from place to</font>

1067
00:49:53,229 --> 00:49:55,029
place<font color="#E5E5E5"> right so want to show</font><font color="#CCCCCC"> you what I</font>

1068
00:49:55,029 --> 00:49:57,160
mean<font color="#E5E5E5"> so if I were to find columnar model</font>

1069
00:49:57,160 --> 00:50:00,130
data and I have to be using<font color="#E5E5E5"> vim here I</font>

1070
00:50:00,130 --> 00:50:03,369
can basically say tag columnar model

1071
00:50:03,369 --> 00:50:05,710
data and it<font color="#E5E5E5"> will jump straight to</font><font color="#CCCCCC"> the</font>

1072
00:50:05,710 --> 00:50:09,279
<font color="#E5E5E5">definition of that</font><font color="#CCCCCC"> plus right and so</font>

1073
00:50:09,279 --> 00:50:10,960
then I notice here that<font color="#E5E5E5"> like oh it's</font>

1074
00:50:10,960 --> 00:50:12,460
actually building<font color="#E5E5E5"> up a data loader</font>

1075
00:50:12,460 --> 00:50:15,069
<font color="#E5E5E5">that's interesting if I get control</font>

1076
00:50:15,069 --> 00:50:17,589
<font color="#E5E5E5">right square bracket</font><font color="#CCCCCC"> it'll jump to the</font>

1077
00:50:17,589 --> 00:50:19,569
definition of the thing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was under</font>

1078
00:50:19,569 --> 00:50:21,430
my cursor and after I finished reading

1079
00:50:21,430 --> 00:50:22,450
<font color="#E5E5E5">it for a while</font>

1080
00:50:22,450 --> 00:50:25,329
I can<font color="#E5E5E5"> hit ctrl T to jump back up to</font>

1081
00:50:25,329 --> 00:50:26,170
where<font color="#E5E5E5"> I came from</font>

1082
00:50:26,170 --> 00:50:28,450
right<font color="#E5E5E5"> and you kind of get</font><font color="#CCCCCC"> the idea right</font>

1083
00:50:28,450 --> 00:50:30,729
<font color="#CCCCCC">or if I want to</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> it for usage of</font>

1084
00:50:30,729 --> 00:50:34,710
this in this file of columnar model data

1085
00:50:34,710 --> 00:50:38,619
<font color="#CCCCCC">I can hit star to jump to the next place</font>

1086
00:50:38,619 --> 00:50:41,140
<font color="#CCCCCC">it's new used you know</font><font color="#E5E5E5"> and so forth</font>

1087
00:50:41,140 --> 00:50:46,660
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so in this case get learner was</font>

1088
00:50:46,660 --> 00:50:49,739
the thing which actually<font color="#E5E5E5"> got the model</font>

1089
00:50:49,739 --> 00:50:51,670
<font color="#E5E5E5">and we want to find out what kind of</font>

1090
00:50:51,670 --> 00:50:55,880
model it is<font color="#E5E5E5"> and apparently</font><font color="#CCCCCC"> it uses a</font>

1091
00:50:55,880 --> 00:50:56,990
I'm not using collaborative filtering

1092
00:50:56,990 --> 00:50:59,420
<font color="#E5E5E5">are we were using columnar model data</font>

1093
00:50:59,420 --> 00:51:08,079
sorry columnar model data<font color="#E5E5E5"> okay learner</font>

1094
00:51:08,079 --> 00:51:10,970
<font color="#E5E5E5">which</font><font color="#CCCCCC"> users and so here</font><font color="#E5E5E5"> you can see</font>

1095
00:51:10,970 --> 00:51:13,549
mixed input model<font color="#E5E5E5"> is the PI torch model</font>

1096
00:51:13,549 --> 00:51:16,970
and then it wraps it in the structured

1097
00:51:16,970 --> 00:51:20,990
<font color="#E5E5E5">learner</font><font color="#CCCCCC"> which is the the first day I</font>

1098
00:51:20,990 --> 00:51:23,240
learn a type which wraps the data and

1099
00:51:23,240 --> 00:51:25,369
the<font color="#E5E5E5"> model together</font><font color="#CCCCCC"> so if we want</font><font color="#E5E5E5"> to see</font>

1100
00:51:25,369 --> 00:51:27,470
the<font color="#E5E5E5"> definition of this actual PI torch</font>

1101
00:51:27,470 --> 00:51:30,200
model<font color="#CCCCCC"> I can go to control</font><font color="#E5E5E5"> right square</font>

1102
00:51:30,200 --> 00:51:34,519
bracket<font color="#E5E5E5"> to see it right and so here is</font>

1103
00:51:34,519 --> 00:51:39,769
the model right and nearly<font color="#E5E5E5"> all of this</font>

1104
00:51:39,769 --> 00:51:42,890
we can now understand<font color="#E5E5E5"> right so we got</font>

1105
00:51:42,890 --> 00:51:52,009
<font color="#CCCCCC">past we got past a list of embedding</font>

1106
00:51:52,009 --> 00:52:04,819
sizes in the mixed model that we saw

1107
00:52:04,819 --> 00:52:09,380
does it always<font color="#CCCCCC"> expect categorical and</font>

1108
00:52:09,380 --> 00:52:15,410
continuous<font color="#E5E5E5"> together yes it does</font>

1109
00:52:15,410 --> 00:52:19,460
and the the model<font color="#CCCCCC"> data behind</font><font color="#E5E5E5"> the scenes</font>

1110
00:52:19,460 --> 00:52:21,859
if there are no none<font color="#CCCCCC"> of the other type</font>

1111
00:52:21,859 --> 00:52:26,000
it creates a column of ones or<font color="#E5E5E5"> zeros or</font>

1112
00:52:26,000 --> 00:52:30,079
something<font color="#CCCCCC"> okay so if it is null</font><font color="#E5E5E5"> it can</font>

1113
00:52:30,079 --> 00:52:35,000
still work<font color="#CCCCCC"> yeah yeah yeah it's kind</font><font color="#E5E5E5"> of</font>

1114
00:52:35,000 --> 00:52:36,950
ugly and<font color="#E5E5E5"> hacky and will you know</font>

1115
00:52:36,950 --> 00:52:39,289
<font color="#E5E5E5">hopefully improve it but yeah you can</font>

1116
00:52:39,289 --> 00:52:42,140
<font color="#E5E5E5">pass in an empty list of categorical or</font>

1117
00:52:42,140 --> 00:52:43,759
continuous variables to the model data

1118
00:52:43,759 --> 00:52:46,369
and it will basically<font color="#E5E5E5"> yeah it'll</font>

1119
00:52:46,369 --> 00:52:49,720
<font color="#CCCCCC">basically pass an unused column of zeros</font>

1120
00:52:49,720 --> 00:52:54,650
<font color="#E5E5E5">to avoid things</font><font color="#CCCCCC"> breaking</font><font color="#E5E5E5"> and I'm I'm</font>

1121
00:52:54,650 --> 00:52:56,599
leaving fixing some of<font color="#E5E5E5"> these slightly</font>

1122
00:52:56,599 --> 00:52:59,990
hacky edge<font color="#E5E5E5"> cases because height or 0.4</font>

1123
00:52:59,990 --> 00:53:01,970
as well as<font color="#CCCCCC"> you're getting rid of</font>

1124
00:53:01,970 --> 00:53:04,789
variables they're going to also add rank

1125
00:53:04,789 --> 00:53:08,180
<font color="#CCCCCC">0 tensors</font><font color="#E5E5E5"> which is to say if</font><font color="#CCCCCC"> you grab a</font>

1126
00:53:08,180 --> 00:53:08,839
single

1127
00:53:08,839 --> 00:53:11,479
thing out<font color="#CCCCCC"> of like a rent</font><font color="#E5E5E5"> 110 sir rather</font>

1128
00:53:11,479 --> 00:53:14,059
than<font color="#E5E5E5"> getting back at a</font><font color="#CCCCCC"> number which is</font>

1129
00:53:14,059 --> 00:53:16,819
like qualitatively different<font color="#E5E5E5"> you're</font>

1130
00:53:16,819 --> 00:53:18,349
actually going to<font color="#E5E5E5"> get back</font><font color="#CCCCCC"> like a tensor</font>

1131
00:53:18,349 --> 00:53:20,509
<font color="#CCCCCC">that just happens to have no rank</font><font color="#E5E5E5"> now it</font>

1132
00:53:20,509 --> 00:53:21,680
turns out<font color="#E5E5E5"> that a lot of this kind of</font>

1133
00:53:21,680 --> 00:53:23,210
<font color="#E5E5E5">codes</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> actually easier to write</font>

1134
00:53:23,210 --> 00:53:25,489
then so<font color="#E5E5E5"> and for now it's it's a little</font>

1135
00:53:25,489 --> 00:53:29,019
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> happier than it needs to</font><font color="#E5E5E5"> be</font>

1136
00:53:30,400 --> 00:53:33,349
<font color="#CCCCCC">Jeremy you talk</font><font color="#E5E5E5"> about this a little bit</font>

1137
00:53:33,349 --> 00:53:35,269
<font color="#CCCCCC">before</font><font color="#E5E5E5"> where maybe it's a good time</font><font color="#CCCCCC"> at</font>

1138
00:53:35,269 --> 00:53:38,960
some points<font color="#E5E5E5"> talk about how can</font><font color="#CCCCCC"> we write</font>

1139
00:53:38,960 --> 00:53:41,059
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that is slightly</font><font color="#E5E5E5"> different for</font>

1140
00:53:41,059 --> 00:53:44,749
worries in<font color="#E5E5E5"> the library yeah I think</font>

1141
00:53:44,749 --> 00:53:47,329
<font color="#E5E5E5">we'll cover that a little</font><font color="#CCCCCC"> bit next week</font>

1142
00:53:47,329 --> 00:53:49,339
<font color="#CCCCCC">that I'm mainly going</font><font color="#E5E5E5"> to do that in part</font>

1143
00:53:49,339 --> 00:53:53,779
<font color="#CCCCCC">to like Pat who's going to cover quite a</font>

1144
00:53:53,779 --> 00:53:55,549
lot<font color="#E5E5E5"> of stuff</font><font color="#CCCCCC"> one of the main things</font><font color="#E5E5E5"> were</font>

1145
00:53:55,549 --> 00:53:57,079
<font color="#E5E5E5">cover in part</font><font color="#CCCCCC"> two is what it called</font>

1146
00:53:57,079 --> 00:53:59,059
<font color="#E5E5E5">generative models so things where the</font>

1147
00:53:59,059 --> 00:54:00,710
output<font color="#CCCCCC"> is a whole sentence or a whole</font>

1148
00:54:00,710 --> 00:54:03,469
image but you<font color="#E5E5E5"> know I also dig into like</font>

1149
00:54:03,469 --> 00:54:08,930
powder really either<font color="#CCCCCC"> customize the first</font>

1150
00:54:08,930 --> 00:54:11,869
day<font color="#E5E5E5"> I library or use it on</font><font color="#CCCCCC"> more custom</font>

1151
00:54:11,869 --> 00:54:16,249
models but if we have time we'll touch

1152
00:54:16,249 --> 00:54:22,400
on it a little<font color="#E5E5E5"> bit next</font><font color="#CCCCCC"> week okay so the</font>

1153
00:54:22,400 --> 00:54:25,069
the<font color="#CCCCCC"> learner we were passing in a list of</font>

1154
00:54:25,069 --> 00:54:27,319
embedding sizes and as you can see that

1155
00:54:27,319 --> 00:54:28,999
embedding sizes<font color="#E5E5E5"> list was literally just</font>

1156
00:54:28,999 --> 00:54:30,349
<font color="#E5E5E5">the number of rows</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of</font>

1157
00:54:30,349 --> 00:54:32,569
columns<font color="#CCCCCC"> in each embedding right and the</font>

1158
00:54:32,569 --> 00:54:35,559
<font color="#E5E5E5">number of code</font><font color="#CCCCCC"> rose was just coming from</font>

1159
00:54:35,559 --> 00:54:38,809
literally how<font color="#CCCCCC"> many stores are there in</font>

1160
00:54:38,809 --> 00:54:42,049
the store<font color="#CCCCCC"> category for example and the</font>

1161
00:54:42,049 --> 00:54:44,299
number of<font color="#E5E5E5"> columns was just a quarter</font>

1162
00:54:44,299 --> 00:54:47,329
<font color="#E5E5E5">that divided by</font><font color="#CCCCCC"> two and a maximum</font><font color="#E5E5E5"> of 50</font>

1163
00:54:47,329 --> 00:54:49,309
so<font color="#CCCCCC"> that thing</font><font color="#E5E5E5"> that list of tuples was</font>

1164
00:54:49,309 --> 00:54:51,469
coming in and so<font color="#E5E5E5"> you can see here how we</font>

1165
00:54:51,469 --> 00:54:53,210
use it<font color="#E5E5E5"> right we go through each of</font><font color="#CCCCCC"> those</font>

1166
00:54:53,210 --> 00:54:57,229
tuples<font color="#E5E5E5"> grab the number of categories and</font>

1167
00:54:57,229 --> 00:55:00,200
the size of the embedding and construct

1168
00:55:00,200 --> 00:55:03,079
an embedding<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right and so that's a</font>

1169
00:55:03,079 --> 00:55:05,869
that's a list right one minor thing

1170
00:55:05,869 --> 00:55:07,700
<font color="#E5E5E5">height or specific thing we haven't</font>

1171
00:55:07,700 --> 00:55:11,269
<font color="#E5E5E5">talked</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> before is for</font><font color="#CCCCCC"> it to</font><font color="#E5E5E5"> be able</font>

1172
00:55:11,269 --> 00:55:13,759
<font color="#E5E5E5">to like register remember how we kind of</font>

1173
00:55:13,759 --> 00:55:15,619
said like it registers your parameters

1174
00:55:15,619 --> 00:55:18,109
it registers your your layers<font color="#E5E5E5"> like</font>

1175
00:55:18,109 --> 00:55:19,700
someone we like listed the model it

1176
00:55:19,700 --> 00:55:21,200
actually printed out the<font color="#CCCCCC"> Novation</font>

1177
00:55:21,200 --> 00:55:24,620
varying<font color="#CCCCCC"> an age bias it can't do that if</font>

1178
00:55:24,620 --> 00:55:27,020
they're hidden inside a list<font color="#E5E5E5"> right they</font>

1179
00:55:27,020 --> 00:55:29,360
have to be like a there have to be<font color="#CCCCCC"> a an</font>

1180
00:55:29,360 --> 00:55:33,470
actual<font color="#CCCCCC"> n</font><font color="#E5E5E5"> n dot module subclass</font><font color="#CCCCCC"> so</font>

1181
00:55:33,470 --> 00:55:35,060
there's a<font color="#CCCCCC"> special thing called an N</font><font color="#E5E5E5"> n</font>

1182
00:55:35,060 --> 00:55:38,120
dot<font color="#CCCCCC"> module list which takes a</font><font color="#E5E5E5"> list</font><font color="#CCCCCC"> and</font>

1183
00:55:38,120 --> 00:55:40,070
it basically<font color="#E5E5E5"> says I want you to register</font>

1184
00:55:40,070 --> 00:55:42,650
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> in here has been part</font><font color="#E5E5E5"> of this</font>

1185
00:55:42,650 --> 00:55:47,360
model<font color="#CCCCCC"> okay so it's</font><font color="#E5E5E5"> just a minor tweak</font><font color="#CCCCCC"> so</font>

1186
00:55:47,360 --> 00:55:49,370
yeah so our mixed input model<font color="#E5E5E5"> has a list</font>

1187
00:55:49,370 --> 00:55:53,540
of embeddings<font color="#CCCCCC"> and then I do the</font><font color="#E5E5E5"> same</font>

1188
00:55:53,540 --> 00:55:56,960
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> for a list of linear layers right</font>

1189
00:55:56,960 --> 00:56:03,920
so when I said here<font color="#E5E5E5"> 1000 comma 500 this</font>

1190
00:56:03,920 --> 00:56:06,320
<font color="#E5E5E5">was saying how many activations I wanted</font>

1191
00:56:06,320 --> 00:56:09,980
featured my lineal is<font color="#E5E5E5"> okay and so here I</font>

1192
00:56:09,980 --> 00:56:13,400
just<font color="#E5E5E5"> go</font><font color="#CCCCCC"> through that list and</font><font color="#E5E5E5"> create a</font>

1193
00:56:13,400 --> 00:56:16,850
linear layer that goes from<font color="#E5E5E5"> this size to</font>

1194
00:56:16,850 --> 00:56:19,610
the<font color="#E5E5E5"> next size okay so you can see</font><font color="#CCCCCC"> like</font>

1195
00:56:19,610 --> 00:56:21,620
<font color="#CCCCCC">how</font><font color="#E5E5E5"> easy it is to</font><font color="#CCCCCC"> kind of construct your</font>

1196
00:56:21,620 --> 00:56:24,710
own<font color="#E5E5E5"> not just</font><font color="#CCCCCC"> your own model but a kind</font>

1197
00:56:24,710 --> 00:56:26,390
of a model<font color="#E5E5E5"> which you can pass parameters</font>

1198
00:56:26,390 --> 00:56:28,220
to have a constructed on<font color="#CCCCCC"> the fly</font>

1199
00:56:28,220 --> 00:56:30,830
<font color="#E5E5E5">dynamically and that's</font><font color="#CCCCCC"> normal</font><font color="#E5E5E5"> talk about</font>

1200
00:56:30,830 --> 00:56:34,460
next<font color="#E5E5E5"> week this is initialization we've</font>

1201
00:56:34,460 --> 00:56:36,380
mentioned climbing her initialization

1202
00:56:36,380 --> 00:56:40,700
before and we mentioned<font color="#E5E5E5"> it</font><font color="#CCCCCC"> last week and</font>

1203
00:56:40,700 --> 00:56:44,750
<font color="#CCCCCC">then drop out</font><font color="#E5E5E5"> same thing</font><font color="#CCCCCC"> right we have</font>

1204
00:56:44,750 --> 00:56:46,370
here a list<font color="#E5E5E5"> of how much drop out to</font>

1205
00:56:46,370 --> 00:56:48,920
apply to each<font color="#CCCCCC"> layer right so again here</font>

1206
00:56:48,920 --> 00:56:50,630
it's<font color="#CCCCCC"> just like go through each thing in</font>

1207
00:56:50,630 --> 00:56:52,970
that list and<font color="#E5E5E5"> create a drop out layer</font>

1208
00:56:52,970 --> 00:56:55,910
for it<font color="#E5E5E5"> okay so this constructor we</font>

1209
00:56:55,910 --> 00:56:57,980
understand<font color="#E5E5E5"> everything in it except</font><font color="#CCCCCC"> for</font>

1210
00:56:57,980 --> 00:57:00,470
<font color="#E5E5E5">batch norm which we don't</font><font color="#CCCCCC"> have to worry</font>

1211
00:57:00,470 --> 00:57:03,350
about<font color="#CCCCCC"> for now so that's the</font><font color="#E5E5E5"> constructor</font>

1212
00:57:03,350 --> 00:57:08,180
and so then the forward<font color="#E5E5E5"> also you know</font>

1213
00:57:08,180 --> 00:57:10,550
<font color="#E5E5E5">all stuff we're aware of go through each</font>

1214
00:57:10,550 --> 00:57:11,900
<font color="#CCCCCC">of those embedding layers that we just</font>

1215
00:57:11,900 --> 00:57:14,300
saw<font color="#E5E5E5"> and remember we've just treated like</font>

1216
00:57:14,300 --> 00:57:16,550
as a function<font color="#CCCCCC"> so call it with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ithe</font>

1217
00:57:16,550 --> 00:57:18,890
categorical variable<font color="#E5E5E5"> and then</font>

1218
00:57:18,890 --> 00:57:22,250
concatenate them all together<font color="#E5E5E5"> put that</font>

1219
00:57:22,250 --> 00:57:26,420
through drop out<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then go through</font>

1220
00:57:26,420 --> 00:57:29,240
each one<font color="#CCCCCC"> of our linear layers</font><font color="#E5E5E5"> and call</font>

1221
00:57:29,240 --> 00:57:32,170
it apply<font color="#CCCCCC"> relia</font><font color="#E5E5E5"> to it</font>

1222
00:57:32,170 --> 00:57:33,940
apply<font color="#CCCCCC"> dropout</font>

1223
00:57:33,940 --> 00:57:36,710
<font color="#E5E5E5">and then finally apply the final linear</font>

1224
00:57:36,710 --> 00:57:40,160
layer and the final<font color="#CCCCCC"> linear layer has</font>

1225
00:57:40,160 --> 00:57:47,030
this as its size<font color="#E5E5E5"> which is here right</font>

1226
00:57:47,030 --> 00:57:49,880
<font color="#E5E5E5">size one there's a single unit sales</font>

1227
00:57:49,880 --> 00:57:52,250
<font color="#E5E5E5">okay so we're kind</font><font color="#CCCCCC"> of getting to the</font>

1228
00:57:52,250 --> 00:57:55,010
<font color="#CCCCCC">point where oh and then of course at the</font>

1229
00:57:55,010 --> 00:57:57,170
end<font color="#E5E5E5"> if this I mentioned would come back</font>

1230
00:57:57,170 --> 00:57:59,960
<font color="#E5E5E5">to</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> if you passed in a</font><font color="#CCCCCC"> Y underscore</font>

1231
00:57:59,960 --> 00:58:02,030
range parameter then we're going to<font color="#E5E5E5"> do</font>

1232
00:58:02,030 --> 00:58:03,260
the thing we<font color="#CCCCCC"> just learned about last</font>

1233
00:58:03,260 --> 00:58:06,050
week which is<font color="#CCCCCC"> to use a sigmoid right and</font>

1234
00:58:06,050 --> 00:58:07,730
this is a<font color="#E5E5E5"> cool little trick to make</font>

1235
00:58:07,730 --> 00:58:09,260
you're not just to make<font color="#E5E5E5"> your</font>

1236
00:58:09,260 --> 00:58:11,120
<font color="#E5E5E5">collaborative filtering better but in</font>

1237
00:58:11,120 --> 00:58:14,660
<font color="#E5E5E5">this case my basic idea</font><font color="#CCCCCC"> was you know</font>

1238
00:58:14,660 --> 00:58:17,890
sales are going<font color="#E5E5E5"> to be greater than zero</font>

1239
00:58:17,890 --> 00:58:21,380
<font color="#E5E5E5">and probably less</font><font color="#CCCCCC"> than the</font><font color="#E5E5E5"> largest sale</font>

1240
00:58:21,380 --> 00:58:25,730
they've ever had<font color="#E5E5E5"> so I just pass in that</font>

1241
00:58:25,730 --> 00:58:29,000
<font color="#E5E5E5">as Y range and so we do a sigmoid and</font>

1242
00:58:29,000 --> 00:58:30,950
multiply with<font color="#CCCCCC"> the sigmoid by the range</font>

1243
00:58:30,950 --> 00:58:33,790
that<font color="#E5E5E5"> I passed it</font><font color="#CCCCCC"> all right</font><font color="#E5E5E5"> and so</font>

1244
00:58:33,790 --> 00:58:37,580
hopefully<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> find that here</font><font color="#E5E5E5"> yeah</font>

1245
00:58:37,580 --> 00:58:39,740
here<font color="#E5E5E5"> it is right so</font><font color="#CCCCCC"> I actually</font><font color="#E5E5E5"> said hey</font>

1246
00:58:39,740 --> 00:58:43,250
<font color="#E5E5E5">maybe the range is between</font><font color="#CCCCCC"> zero and you</font>

1247
00:58:43,250 --> 00:58:45,530
know the highest<font color="#CCCCCC"> x one point</font><font color="#E5E5E5"> two you</font>

1248
00:58:45,530 --> 00:58:47,960
know cuz maybe maybe the next two weeks

1249
00:58:47,960 --> 00:58:49,670
we have one bigger but this<font color="#E5E5E5"> is kind of</font>

1250
00:58:49,670 --> 00:58:51,200
like<font color="#E5E5E5"> again</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> to make it a little bit</font>

1251
00:58:51,200 --> 00:58:53,900
easier for<font color="#E5E5E5"> it to</font><font color="#CCCCCC"> give us the</font><font color="#E5E5E5"> kind of</font>

1252
00:58:53,900 --> 00:58:56,630
results that<font color="#E5E5E5"> it thinks is right so like</font>

1253
00:58:56,630 --> 00:58:59,810
increasingly<font color="#E5E5E5"> you know I'd love your wall</font>

1254
00:58:59,810 --> 00:59:04,210
to kind<font color="#CCCCCC"> of try to not treat these</font>

1255
00:59:04,210 --> 00:59:07,580
<font color="#E5E5E5">learners and models as black</font><font color="#CCCCCC"> boxes</font><font color="#E5E5E5"> but</font>

1256
00:59:07,580 --> 00:59:09,320
to feel like you now have the

1257
00:59:09,320 --> 00:59:10,910
<font color="#E5E5E5">information you need</font><font color="#CCCCCC"> to look inside</font><font color="#E5E5E5"> them</font>

1258
00:59:10,910 --> 00:59:12,500
<font color="#E5E5E5">and remember you could then copy and</font>

1259
00:59:12,500 --> 00:59:16,030
<font color="#CCCCCC">paste this</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> paste it into a cell in</font>

1260
00:59:16,030 --> 00:59:19,400
<font color="#CCCCCC">duple notebook</font><font color="#E5E5E5"> and start fiddling with</font>

1261
00:59:19,400 --> 00:59:27,580
<font color="#CCCCCC">it to create</font><font color="#E5E5E5"> your own versions</font><font color="#CCCCCC"> okay</font>

1262
00:59:30,640 --> 00:59:33,130
I think what I might<font color="#E5E5E5"> do is we might take</font>

1263
00:59:33,130 --> 00:59:35,319
a bit<font color="#CCCCCC"> of a early break because</font><font color="#E5E5E5"> we've got</font>

1264
00:59:35,319 --> 00:59:37,150
a lot<font color="#CCCCCC"> to cover and I want to do it all</font>

1265
00:59:37,150 --> 00:59:42,160
<font color="#CCCCCC">in one big</font><font color="#E5E5E5"> go so let's take a let's take</font>

1266
00:59:42,160 --> 00:59:46,150
a break<font color="#E5E5E5"> until 7:45</font><font color="#CCCCCC"> and then we're</font><font color="#E5E5E5"> going</font>

1267
00:59:46,150 --> 00:59:47,650
<font color="#E5E5E5">to come</font><font color="#CCCCCC"> back and</font><font color="#E5E5E5"> talk about recurrent</font>

1268
00:59:47,650 --> 00:59:56,160
neural networks<font color="#E5E5E5"> all right</font>

1269
00:59:56,670 --> 00:59:58,750
so we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about Aaron ends</font>

1270
00:59:58,750 --> 01:00:02,079
before<font color="#CCCCCC"> we do we've got</font><font color="#E5E5E5"> to kind of dig a</font>

1271
01:00:02,079 --> 01:00:05,829
little bit deeper into SGD<font color="#CCCCCC"> because I</font>

1272
01:00:05,829 --> 01:00:06,760
<font color="#E5E5E5">just want to make</font><font color="#CCCCCC"> sure everybody's</font>

1273
01:00:06,760 --> 01:00:11,579
totally<font color="#E5E5E5"> comfortable with with</font><font color="#CCCCCC"> SGD and so</font>

1274
01:00:11,579 --> 01:00:13,390
what we're going<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at is we're</font>

1275
01:00:13,390 --> 01:00:17,549
going<font color="#E5E5E5"> to look at lesson</font><font color="#CCCCCC"> six SGD notebook</font>

1276
01:00:17,549 --> 01:00:19,480
and<font color="#E5E5E5"> we're going to look at a really</font>

1277
01:00:19,480 --> 01:00:26,500
simple example<font color="#CCCCCC"> of</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> SGD to learn y</font>

1278
01:00:26,500 --> 01:00:29,529
equals ax plus<font color="#CCCCCC"> B and so what we're going</font>

1279
01:00:29,529 --> 01:00:32,160
<font color="#E5E5E5">to do here is we're going</font><font color="#CCCCCC"> to create like</font>

1280
01:00:32,160 --> 01:00:36,700
the simplest possible<font color="#CCCCCC"> model y</font><font color="#E5E5E5"> equals ax</font>

1281
01:00:36,700 --> 01:00:38,710
<font color="#E5E5E5">plus B okay and then we're going to</font>

1282
01:00:38,710 --> 01:00:43,509
generate<font color="#CCCCCC"> some random data that looks</font>

1283
01:00:43,509 --> 01:00:46,750
<font color="#CCCCCC">like so so here's our X</font><font color="#E5E5E5"> and here's our</font><font color="#CCCCCC"> Y</font>

1284
01:00:46,750 --> 01:00:52,779
we<font color="#E5E5E5"> want to predict Y from X and we</font>

1285
01:00:52,779 --> 01:00:56,019
passed in<font color="#CCCCCC"> 3 & 8 as our a</font><font color="#E5E5E5"> and B so we're</font>

1286
01:00:56,019 --> 01:00:57,069
going to<font color="#E5E5E5"> kind of try</font><font color="#CCCCCC"> and recover that</font>

1287
01:00:57,069 --> 01:01:00,609
right and so the idea is<font color="#CCCCCC"> that if we</font><font color="#E5E5E5"> can</font>

1288
01:01:00,609 --> 01:01:03,099
solve something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> this which has two</font>

1289
01:01:03,099 --> 01:01:05,500
parameters<font color="#CCCCCC"> we can use the same technique</font>

1290
01:01:05,500 --> 01:01:09,490
to<font color="#E5E5E5"> solve we can use the same technique</font>

1291
01:01:09,490 --> 01:01:10,990
to<font color="#E5E5E5"> solve something with a hundred</font>

1292
01:01:10,990 --> 01:01:14,069
<font color="#E5E5E5">million</font><font color="#CCCCCC"> parameters</font><font color="#E5E5E5"> right without</font><font color="#CCCCCC"> any</font>

1293
01:01:14,069 --> 01:01:22,000
changes at all<font color="#E5E5E5"> so in order to find a and</font>

1294
01:01:22,000 --> 01:01:23,559
a B that<font color="#E5E5E5"> fits this we need a loss</font>

1295
01:01:23,559 --> 01:01:25,990
function<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is a regression</font>

1296
01:01:25,990 --> 01:01:27,819
problem<font color="#CCCCCC"> because we</font><font color="#E5E5E5"> have a continuous</font>

1297
01:01:27,819 --> 01:01:30,130
output<font color="#CCCCCC"> so for continuous output</font>

1298
01:01:30,130 --> 01:01:31,839
regression we tend to use mean<font color="#CCCCCC"> squared</font>

1299
01:01:31,839 --> 01:01:33,849
error<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right and obviously all of</font>

1300
01:01:33,849 --> 01:01:34,869
this stuff there's there's

1301
01:01:34,869 --> 01:01:36,339
implementations in<font color="#CCCCCC"> non pious</font>

1302
01:01:36,339 --> 01:01:37,809
implementations in flight<font color="#CCCCCC"> or we're just</font>

1303
01:01:37,809 --> 01:01:39,970
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> stuff by hand so you can</font><font color="#CCCCCC"> see all</font>

1304
01:01:39,970 --> 01:01:42,640
the steps<font color="#E5E5E5"> right so there's</font><font color="#CCCCCC"> MSE</font><font color="#E5E5E5"> okay</font>

1305
01:01:42,640 --> 01:01:44,020
<font color="#E5E5E5">y hat is</font>

1306
01:01:44,020 --> 01:01:45,940
we<font color="#E5E5E5"> often call our predictions</font><font color="#CCCCCC"> Y hat</font>

1307
01:01:45,940 --> 01:01:48,250
<font color="#CCCCCC">mitis y squared</font><font color="#E5E5E5"> mean there's I meant</font>

1308
01:01:48,250 --> 01:01:50,980
whatever<font color="#E5E5E5"> okay so for</font><font color="#CCCCCC"> example if we had</font>

1309
01:01:50,980 --> 01:01:54,160
<font color="#CCCCCC">ten and five where a and</font><font color="#E5E5E5"> B then there's</font>

1310
01:01:54,160 --> 01:01:56,710
<font color="#E5E5E5">our</font><font color="#CCCCCC"> mean square R squared error three</font>

1311
01:01:56,710 --> 01:01:59,110
<font color="#E5E5E5">point two five okay so if we've</font><font color="#CCCCCC"> got an A</font>

1312
01:01:59,110 --> 01:02:00,790
<font color="#E5E5E5">and a B and we've got an x and a y then</font>

1313
01:02:00,790 --> 01:02:02,500
our mean<font color="#CCCCCC"> square error loss is just the</font>

1314
01:02:02,500 --> 01:02:05,740
mean<font color="#CCCCCC"> squared error of</font><font color="#E5E5E5"> our linear that's</font>

1315
01:02:05,740 --> 01:02:07,420
our predictions and our way<font color="#CCCCCC"> okay so</font>

1316
01:02:07,420 --> 01:02:11,200
there's a<font color="#CCCCCC"> last four</font><font color="#E5E5E5"> ten five</font><font color="#CCCCCC"> X Y</font><font color="#E5E5E5"> all</font>

1317
01:02:11,200 --> 01:02:13,510
right<font color="#E5E5E5"> so that's a loss function right</font>

1318
01:02:13,510 --> 01:02:18,750
<font color="#E5E5E5">and so when we talk about combining</font>

1319
01:02:18,750 --> 01:02:21,520
linear layers and loss functions and

1320
01:02:21,520 --> 01:02:24,520
optionally nonlinear layers<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is all</font>

1321
01:02:24,520 --> 01:02:26,590
we're doing right is we're<font color="#CCCCCC"> putting a</font>

1322
01:02:26,590 --> 01:02:29,560
function<font color="#E5E5E5"> inside a function yeah that's</font>

1323
01:02:29,560 --> 01:02:31,500
that's<font color="#E5E5E5"> all like I know people draw these</font>

1324
01:02:31,500 --> 01:02:35,350
clever looking dots and lines all over

1325
01:02:35,350 --> 01:02:36,670
<font color="#CCCCCC">the</font><font color="#E5E5E5"> screen when they're saying this is</font>

1326
01:02:36,670 --> 01:02:38,110
what a neural<font color="#E5E5E5"> network is but it's</font><font color="#CCCCCC"> just</font>

1327
01:02:38,110 --> 01:02:39,730
<font color="#E5E5E5">it's just a function of a</font><font color="#CCCCCC"> function of</font><font color="#E5E5E5"> a</font>

1328
01:02:39,730 --> 01:02:41,260
function<font color="#E5E5E5"> okay so here we've got</font><font color="#CCCCCC"> a</font>

1329
01:02:41,260 --> 01:02:43,060
prediction<font color="#E5E5E5"> function being a linear layer</font>

1330
01:02:43,060 --> 01:02:45,700
<font color="#E5E5E5">followed by a loss function being MSE</font>

1331
01:02:45,700 --> 01:02:47,440
and now we can say like<font color="#E5E5E5"> oh well let's</font>

1332
01:02:47,440 --> 01:02:49,270
<font color="#CCCCCC">just define this as MSA Lost's and we'll</font>

1333
01:02:49,270 --> 01:02:51,970
use<font color="#CCCCCC"> that in the future okay so there's</font>

1334
01:02:51,970 --> 01:02:53,980
our loss function<font color="#E5E5E5"> which incorporates our</font>

1335
01:02:53,980 --> 01:02:57,010
prediction function okay<font color="#CCCCCC"> so let's</font>

1336
01:02:57,010 --> 01:03:00,550
generate 10,000<font color="#CCCCCC"> items</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> thick data and</font>

1337
01:03:00,550 --> 01:03:02,500
let's show<font color="#E5E5E5"> them in two variables so</font><font color="#CCCCCC"> we</font>

1338
01:03:02,500 --> 01:03:03,940
<font color="#CCCCCC">can use them with</font><font color="#E5E5E5"> PI torch because</font>

1339
01:03:03,940 --> 01:03:05,440
<font color="#E5E5E5">Jeremy doesn't like taking derivatives</font>

1340
01:03:05,440 --> 01:03:07,140
<font color="#E5E5E5">so we're going to use</font><font color="#CCCCCC"> PI torch for that</font>

1341
01:03:07,140 --> 01:03:11,320
<font color="#CCCCCC">and let's</font><font color="#E5E5E5"> create random wait for a and B</font>

1342
01:03:11,320 --> 01:03:14,530
so a single<font color="#CCCCCC"> random number</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> want</font>

1343
01:03:14,530 --> 01:03:16,480
the gradients<font color="#E5E5E5"> of these to be calculated</font>

1344
01:03:16,480 --> 01:03:19,060
as we start computing with them<font color="#E5E5E5"> because</font>

1345
01:03:19,060 --> 01:03:20,560
these are<font color="#CCCCCC"> the actual things we need to</font>

1346
01:03:20,560 --> 01:03:24,340
update in our<font color="#E5E5E5"> SGD okay so here's our a</font>

1347
01:03:24,340 --> 01:03:31,090
<font color="#CCCCCC">and</font><font color="#E5E5E5"> B</font><font color="#CCCCCC"> 0.029</font><font color="#E5E5E5"> 0.111 all right so let's</font>

1348
01:03:31,090 --> 01:03:34,360
pick a learning rate<font color="#E5E5E5"> okay and let let's</font>

1349
01:03:34,360 --> 01:03:40,600
do 10,000 epochs of<font color="#CCCCCC"> SGD in fact this</font>

1350
01:03:40,600 --> 01:03:42,520
isn't<font color="#E5E5E5"> really SGD it's not stochastic</font>

1351
01:03:42,520 --> 01:03:43,690
gradient it said<font color="#E5E5E5"> this is actually</font><font color="#CCCCCC"> full</font>

1352
01:03:43,690 --> 01:03:45,570
gradient descent<font color="#E5E5E5"> we're going to each</font>

1353
01:03:45,570 --> 01:03:48,730
each loop is going<font color="#E5E5E5"> to look at all</font><font color="#CCCCCC"> of the</font>

1354
01:03:48,730 --> 01:03:52,390
data<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> stochastic gradient descent</font>

1355
01:03:52,390 --> 01:03:56,330
would<font color="#E5E5E5"> be looking at a subset each time</font>

1356
01:03:56,330 --> 01:03:58,370
so to do gradient<font color="#E5E5E5"> descent</font><font color="#CCCCCC"> we basically</font>

1357
01:03:58,370 --> 01:04:01,040
<font color="#E5E5E5">calculate loss right so remember we've</font>

1358
01:04:01,040 --> 01:04:03,800
started out with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> random a and B okay</font>

1359
01:04:03,800 --> 01:04:05,420
and so this<font color="#E5E5E5"> is going to compute some</font>

1360
01:04:05,420 --> 01:04:08,270
amount of loss and then it's nice from

1361
01:04:08,270 --> 01:04:10,160
time to time<font color="#CCCCCC"> so one way of</font><font color="#E5E5E5"> saying from</font>

1362
01:04:10,160 --> 01:04:13,580
time to time is if the epoch number<font color="#CCCCCC"> mod</font>

1363
01:04:13,580 --> 01:04:15,950
a thousand is<font color="#E5E5E5"> zero right so every</font>

1364
01:04:15,950 --> 01:04:17,900
thousand epochs<font color="#E5E5E5"> just print out the</font><font color="#CCCCCC"> loss</font>

1365
01:04:17,900 --> 01:04:21,050
<font color="#E5E5E5">so you have it do it okay</font>

1366
01:04:21,050 --> 01:04:23,690
so now that we've computed the loss we

1367
01:04:23,690 --> 01:04:26,090
<font color="#CCCCCC">can compute our gradients</font><font color="#E5E5E5"> right and so</font>

1368
01:04:26,090 --> 01:04:28,840
you just<font color="#E5E5E5"> remember this thing here is</font>

1369
01:04:28,840 --> 01:04:32,180
both a number a<font color="#E5E5E5"> single number</font><font color="#CCCCCC"> that is</font>

1370
01:04:32,180 --> 01:04:34,130
our lost something we can print but it's

1371
01:04:34,130 --> 01:04:35,900
also a<font color="#E5E5E5"> variable because we passed</font>

1372
01:04:35,900 --> 01:04:38,210
variables into it and therefore it<font color="#CCCCCC"> also</font>

1373
01:04:38,210 --> 01:04:41,060
has a method<font color="#E5E5E5"> type backward which means</font>

1374
01:04:41,060 --> 01:04:43,790
calculate the gradients<font color="#CCCCCC"> of everything</font>

1375
01:04:43,790 --> 01:04:45,410
that we asked it to everything<font color="#E5E5E5"> where we</font>

1376
01:04:45,410 --> 01:04:48,830
said requires radical is true okay<font color="#E5E5E5"> so at</font>

1377
01:04:48,830 --> 01:04:52,940
this<font color="#E5E5E5"> point we now have a dot grad</font>

1378
01:04:52,940 --> 01:04:57,620
property inside a<font color="#E5E5E5"> and inside</font><font color="#CCCCCC"> P and here</font>

1379
01:04:57,620 --> 01:04:59,620
they<font color="#CCCCCC"> are here is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> grant grad</font>

1380
01:04:59,620 --> 01:05:02,390
property<font color="#CCCCCC"> okay so now</font><font color="#E5E5E5"> that we've</font>

1381
01:05:02,390 --> 01:05:04,610
calculated the gradients<font color="#E5E5E5"> for a and B we</font>

1382
01:05:04,610 --> 01:05:07,880
<font color="#CCCCCC">can update them by saying</font><font color="#E5E5E5"> a is equal to</font>

1383
01:05:07,880 --> 01:05:10,280
<font color="#E5E5E5">whatever it used to be - the learning</font>

1384
01:05:10,280 --> 01:05:14,530
<font color="#CCCCCC">rate times</font><font color="#E5E5E5"> the gradient</font><font color="#CCCCCC"> okay dot data</font>

1385
01:05:14,530 --> 01:05:18,590
because a is a variable and a variable

1386
01:05:18,590 --> 01:05:21,380
contains a tensor<font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> dot data</font>

1387
01:05:21,380 --> 01:05:24,410
property and we again<font color="#E5E5E5"> this is going to</font>

1388
01:05:24,410 --> 01:05:26,750
disappear in<font color="#E5E5E5"> height which point</font><font color="#CCCCCC"> four but</font>

1389
01:05:26,750 --> 01:05:28,760
for now it's actually<font color="#CCCCCC"> the ten so</font><font color="#E5E5E5"> that we</font>

1390
01:05:28,760 --> 01:05:31,340
need<font color="#E5E5E5"> to update okay so update</font><font color="#CCCCCC"> the tensor</font>

1391
01:05:31,340 --> 01:05:33,560
inside here with whatever it used to be

1392
01:05:33,560 --> 01:05:37,030
<font color="#E5E5E5">- the learning</font><font color="#CCCCCC"> rate times</font><font color="#E5E5E5"> the gradient</font>

1393
01:05:37,030 --> 01:05:40,400
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> and that's basically it</font>

1394
01:05:40,400 --> 01:05:43,220
<font color="#CCCCCC">all right that's basically all gradient</font>

1395
01:05:43,220 --> 01:05:45,980
descent is okay so it's<font color="#E5E5E5"> it's as simple</font>

1396
01:05:45,980 --> 01:05:49,310
as we claimed there's one<font color="#CCCCCC"> extra step in</font>

1397
01:05:49,310 --> 01:05:51,950
<font color="#CCCCCC">pi torch which is that you might</font><font color="#E5E5E5"> have</font>

1398
01:05:51,950 --> 01:05:54,110
like<font color="#E5E5E5"> multiple different loss functions</font>

1399
01:05:54,110 --> 01:05:56,560
or like lots of lots of output layers

1400
01:05:56,560 --> 01:05:59,600
all contributing<font color="#E5E5E5"> to the gradient and you</font>

1401
01:05:59,600 --> 01:06:00,830
<font color="#E5E5E5">like to</font><font color="#CCCCCC"> have to add them all together</font>

1402
01:06:00,830 --> 01:06:04,280
and so if you've got<font color="#E5E5E5"> multiple loss</font>

1403
01:06:04,280 --> 01:06:05,960
functions you could<font color="#E5E5E5"> be calling loss stop</font>

1404
01:06:05,960 --> 01:06:07,640
backward on each of them<font color="#E5E5E5"> and what it</font>

1405
01:06:07,640 --> 01:06:08,430
does is an ad

1406
01:06:08,430 --> 01:06:10,890
sit<font color="#E5E5E5"> to the gradients right and so you</font>

1407
01:06:10,890 --> 01:06:12,510
<font color="#E5E5E5">have to tell it when to set the</font>

1408
01:06:12,510 --> 01:06:15,390
gradients back to zero<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so that's</font>

1409
01:06:15,390 --> 01:06:18,860
where you just<font color="#E5E5E5"> go okay set a to zero and</font>

1410
01:06:18,860 --> 01:06:21,630
gradients<font color="#E5E5E5"> in set B gradients to</font><font color="#CCCCCC"> zero</font>

1411
01:06:21,630 --> 01:06:25,710
<font color="#E5E5E5">okay and so this is wrapped up inside</font>

1412
01:06:25,710 --> 01:06:31,440
the you know<font color="#CCCCCC"> op TMS JD</font><font color="#E5E5E5"> class right so</font>

1413
01:06:31,440 --> 01:06:34,260
<font color="#CCCCCC">when</font><font color="#E5E5E5"> we say</font><font color="#CCCCCC"> up Tim dot</font><font color="#E5E5E5"> SGD and we just</font>

1414
01:06:34,260 --> 01:06:37,050
say you know dot step it's<font color="#E5E5E5"> just doing</font>

1415
01:06:37,050 --> 01:06:38,850
these<font color="#E5E5E5"> for us so when we say dot zero</font>

1416
01:06:38,850 --> 01:06:41,850
gradients<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> doing this</font><font color="#E5E5E5"> force and</font>

1417
01:06:41,850 --> 01:06:46,380
<font color="#E5E5E5">this underscore here</font><font color="#CCCCCC"> every</font><font color="#E5E5E5"> pretty much</font>

1418
01:06:46,380 --> 01:06:48,600
every function<font color="#CCCCCC"> that applies to</font><font color="#E5E5E5"> a tensor</font>

1419
01:06:48,600 --> 01:06:50,970
in<font color="#E5E5E5"> pi torch</font><font color="#CCCCCC"> if you stick an underscore</font>

1420
01:06:50,970 --> 01:06:53,430
on the end<font color="#E5E5E5"> it means</font><font color="#CCCCCC"> do it in place</font><font color="#E5E5E5"> okay</font>

1421
01:06:53,430 --> 01:06:54,810
so this is<font color="#CCCCCC"> actually going to not return</font>

1422
01:06:54,810 --> 01:06:56,730
<font color="#E5E5E5">a bunch of zeros but it's going to</font>

1423
01:06:56,730 --> 01:06:58,290
<font color="#CCCCCC">change this in place to be a bunch of</font>

1424
01:06:58,290 --> 01:07:04,320
<font color="#E5E5E5">zeros so that's basically it</font><font color="#CCCCCC"> we can look</font>

1425
01:07:04,320 --> 01:07:09,420
<font color="#E5E5E5">at the same thing without</font><font color="#CCCCCC"> PI torch which</font>

1426
01:07:09,420 --> 01:07:10,740
means we<font color="#CCCCCC"> actually do</font><font color="#E5E5E5"> have to do some</font>

1427
01:07:10,740 --> 01:07:12,960
calculus so if we generate<font color="#CCCCCC"> some fake</font>

1428
01:07:12,960 --> 01:07:16,590
data<font color="#E5E5E5"> again</font><font color="#CCCCCC"> we're just</font><font color="#E5E5E5"> going to create</font><font color="#CCCCCC"> 50</font>

1429
01:07:16,590 --> 01:07:18,060
data points this time<font color="#E5E5E5"> just to make this</font>

1430
01:07:18,060 --> 01:07:21,660
fast<font color="#E5E5E5"> and easy to look at and so let's</font>

1431
01:07:21,660 --> 01:07:23,970
<font color="#E5E5E5">create a</font><font color="#CCCCCC"> function called update right</font>

1432
01:07:23,970 --> 01:07:25,440
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> going to use numpy</font><font color="#CCCCCC"> no pi</font>

1433
01:07:25,440 --> 01:07:28,230
torch okay so<font color="#E5E5E5"> our predictions is equal</font>

1434
01:07:28,230 --> 01:07:31,530
to again<font color="#CCCCCC"> linear and in this case we</font>

1435
01:07:31,530 --> 01:07:32,760
<font color="#CCCCCC">actually gonna calculate the derivatives</font>

1436
01:07:32,760 --> 01:07:34,980
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> derivative of the square of the</font>

1437
01:07:34,980 --> 01:07:37,920
<font color="#E5E5E5">loss is</font><font color="#CCCCCC"> just two times and then</font><font color="#E5E5E5"> the</font>

1438
01:07:37,920 --> 01:07:39,540
derivative<font color="#E5E5E5"> is the vector a is just that</font>

1439
01:07:39,540 --> 01:07:41,400
<font color="#E5E5E5">you can confirm that yourself if you</font>

1440
01:07:41,400 --> 01:07:44,220
want to<font color="#E5E5E5"> and so here our we're going to</font>

1441
01:07:44,220 --> 01:07:46,260
update<font color="#E5E5E5"> a minus equals learning rate</font>

1442
01:07:46,260 --> 01:07:49,470
times<font color="#CCCCCC"> the derivative of loss with</font>

1443
01:07:49,470 --> 01:07:52,770
respect<font color="#CCCCCC"> to a and for B it's learning</font>

1444
01:07:52,770 --> 01:07:54,810
<font color="#E5E5E5">rate times derivative with respect to B</font>

1445
01:07:54,810 --> 01:07:59,130
<font color="#E5E5E5">okay and so what we can do</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> just</font>

1446
01:07:59,130 --> 01:08:02,670
run all this<font color="#CCCCCC"> so just</font><font color="#E5E5E5"> for fun</font>

1447
01:08:02,670 --> 01:08:04,740
rather than<font color="#E5E5E5"> looping through manually we</font>

1448
01:08:04,740 --> 01:08:07,590
can use the map<font color="#E5E5E5"> flop matplotlib</font><font color="#CCCCCC"> func</font>

1449
01:08:07,590 --> 01:08:12,750
animation command to run the animate

1450
01:08:12,750 --> 01:08:14,820
<font color="#E5E5E5">function a bunch of times and the</font>

1451
01:08:14,820 --> 01:08:16,790
animate<font color="#CCCCCC"> function is going</font><font color="#E5E5E5"> to run</font><font color="#CCCCCC"> 30</font>

1452
01:08:16,790 --> 01:08:20,370
epochs<font color="#E5E5E5"> and at the end of</font><font color="#CCCCCC"> each epoch it's</font>

1453
01:08:20,370 --> 01:08:22,049
going to print<font color="#E5E5E5"> out</font>

1454
01:08:22,049 --> 01:08:24,029
on the plot where<font color="#CCCCCC"> the line currently is</font>

1455
01:08:24,029 --> 01:08:27,509
<font color="#E5E5E5">and that creates this at all movie okay</font>

1456
01:08:27,509 --> 01:08:30,118
so you can actually see that the line

1457
01:08:30,118 --> 01:08:33,238
<font color="#E5E5E5">moving at a place right</font><font color="#CCCCCC"> so if you want</font>

1458
01:08:33,238 --> 01:08:35,969
<font color="#E5E5E5">to play</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> with like understanding</font>

1459
01:08:35,969 --> 01:08:40,250
how high<font color="#CCCCCC"> torque gradients actually work</font>

1460
01:08:40,250 --> 01:08:42,238
<font color="#CCCCCC">step-by-step here's like the</font><font color="#E5E5E5"> world's</font>

1461
01:08:42,238 --> 01:08:46,738
simplest<font color="#E5E5E5"> at all example okay</font><font color="#CCCCCC"> and you</font>

1462
01:08:46,738 --> 01:08:49,799
know it's kind of<font color="#E5E5E5"> like it's</font><font color="#CCCCCC"> kind of</font>

1463
01:08:49,799 --> 01:08:52,198
weird<font color="#CCCCCC"> to say like that's that's</font><font color="#E5E5E5"> it like</font>

1464
01:08:52,198 --> 01:08:53,729
when you're optimizing<font color="#E5E5E5"> a hundred million</font>

1465
01:08:53,729 --> 01:08:55,408
<font color="#E5E5E5">parameters in a</font><font color="#CCCCCC"> neural</font><font color="#E5E5E5"> net it's doing</font>

1466
01:08:55,408 --> 01:08:57,299
the<font color="#CCCCCC"> same thing but it it actually</font><font color="#E5E5E5"> is</font>

1467
01:08:57,299 --> 01:08:59,219
<font color="#CCCCCC">alright you can actually</font><font color="#E5E5E5"> look at the PI</font>

1468
01:08:59,219 --> 01:09:01,948
<font color="#E5E5E5">torch code and see</font><font color="#CCCCCC"> it's this is it right</font>

1469
01:09:01,948 --> 01:09:04,710
there's<font color="#CCCCCC"> no trick</font>

1470
01:09:04,710 --> 01:09:07,078
well we load a couple<font color="#E5E5E5"> of minor tricks</font>

1471
01:09:07,078 --> 01:09:09,779
<font color="#CCCCCC">last</font><font color="#E5E5E5"> time which</font><font color="#CCCCCC"> was like momentum</font><font color="#E5E5E5"> and</font>

1472
01:09:09,779 --> 01:09:13,290
<font color="#CCCCCC">atom</font><font color="#E5E5E5"> right that if you could do it in</font>

1473
01:09:13,290 --> 01:09:15,839
Excel<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> do it invite them so</font><font color="#E5E5E5"> okay</font>

1474
01:09:15,839 --> 01:09:19,439
<font color="#CCCCCC">so let's do talk about our lens so we're</font>

1475
01:09:19,439 --> 01:09:20,839
now in<font color="#E5E5E5"> less than six hour and in</font>

1476
01:09:20,839 --> 01:09:29,630
notebook<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to study</font>

1477
01:09:29,630 --> 01:09:34,520
<font color="#E5E5E5">Nietzsche</font><font color="#CCCCCC"> as you should</font>

1478
01:09:34,549 --> 01:09:38,939
so Nietzsche says supposing that<font color="#E5E5E5"> truth</font>

1479
01:09:38,939 --> 01:09:41,960
is a woman what then<font color="#CCCCCC"> I love this</font>

1480
01:09:41,960 --> 01:09:46,319
<font color="#CCCCCC">apparently all philosophers have failed</font>

1481
01:09:46,319 --> 01:09:47,339
<font color="#CCCCCC">to understand women</font>

1482
01:09:47,339 --> 01:09:48,448
so<font color="#CCCCCC"> apparently at the point that</font>

1483
01:09:48,448 --> 01:09:49,799
Nietzsche was alive there<font color="#E5E5E5"> was no female</font>

1484
01:09:49,799 --> 01:09:52,049
philosophers or at least those that were

1485
01:09:52,049 --> 01:09:54,599
around didn't understand women either<font color="#CCCCCC"> so</font>

1486
01:09:54,599 --> 01:09:56,159
anyway so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> philosopher</font>

1487
01:09:56,159 --> 01:09:59,909
apparently we've chosen to study it

1488
01:09:59,909 --> 01:10:02,159
<font color="#CCCCCC">leech is actually much less worse than</font>

1489
01:10:02,159 --> 01:10:05,190
<font color="#E5E5E5">people think he is but it's a different</font>

1490
01:10:05,190 --> 01:10:07,800
<font color="#E5E5E5">era</font><font color="#CCCCCC"> I guess alright so we're going to</font>

1491
01:10:07,800 --> 01:10:13,070
<font color="#E5E5E5">learn to write</font><font color="#CCCCCC"> philosophy</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> Nietzsche</font>

1492
01:10:13,070 --> 01:10:16,110
<font color="#E5E5E5">and so we're going to do it one</font>

1493
01:10:16,110 --> 01:10:18,119
character at a<font color="#CCCCCC"> time so this</font><font color="#E5E5E5"> is like the</font>

1494
01:10:18,119 --> 01:10:20,099
language<font color="#E5E5E5"> model that we did in Lesson</font>

1495
01:10:20,099 --> 01:10:21,570
<font color="#E5E5E5">four where we did it a</font><font color="#CCCCCC"> word at the time</font>

1496
01:10:21,570 --> 01:10:22,949
but<font color="#E5E5E5"> this</font><font color="#CCCCCC"> time we're</font><font color="#E5E5E5"> going to do a</font>

1497
01:10:22,949 --> 01:10:26,760
<font color="#E5E5E5">character at a</font><font color="#CCCCCC"> time and so the main</font>

1498
01:10:26,760 --> 01:10:28,320
<font color="#E5E5E5">thing I'm going to try and convince</font><font color="#CCCCCC"> you</font>

1499
01:10:28,320 --> 01:10:31,469
<font color="#E5E5E5">is an RNN is no different to anything</font>

1500
01:10:31,469 --> 01:10:34,260
you've already learned<font color="#E5E5E5"> okay and so to</font>

1501
01:10:34,260 --> 01:10:35,700
show<font color="#CCCCCC"> you that</font>

1502
01:10:35,700 --> 01:10:39,630
going to build it from<font color="#CCCCCC"> plain PI torch</font>

1503
01:10:39,630 --> 01:10:41,130
layers all of which are<font color="#CCCCCC"> extremely</font>

1504
01:10:41,130 --> 01:10:43,680
familiar<font color="#E5E5E5"> already</font><font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> eventually</font>

1505
01:10:43,680 --> 01:10:44,370
we're<font color="#E5E5E5"> going to use something really</font>

1506
01:10:44,370 --> 01:10:47,190
<font color="#E5E5E5">complex which is a</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> loop okay so</font>

1507
01:10:47,190 --> 01:10:48,780
that's when we're<font color="#E5E5E5"> going to make a really</font>

1508
01:10:48,780 --> 01:10:52,170
sophisticated<font color="#CCCCCC"> so the basic idea of</font><font color="#E5E5E5"> our n</font>

1509
01:10:52,170 --> 01:10:55,640
ends<font color="#E5E5E5"> is that you want to keep track of</font>

1510
01:10:55,640 --> 01:10:57,660
<font color="#CCCCCC">the main thing is you want to</font><font color="#E5E5E5"> keep track</font>

1511
01:10:57,660 --> 01:10:59,790
<font color="#CCCCCC">of kind of</font><font color="#E5E5E5"> state over long term</font>

1512
01:10:59,790 --> 01:11:01,890
dependencies<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example if you're</font>

1513
01:11:01,890 --> 01:11:04,620
<font color="#E5E5E5">trying to model</font><font color="#CCCCCC"> something like this kind</font>

1514
01:11:04,620 --> 01:11:08,430
<font color="#E5E5E5">of template language</font><font color="#CCCCCC"> right then at the</font>

1515
01:11:08,430 --> 01:11:10,620
end<font color="#E5E5E5"> of</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> percent comment</font><font color="#CCCCCC"> blue percent</font>

1516
01:11:10,620 --> 01:11:13,020
you need<font color="#CCCCCC"> a percent common end percent</font>

1517
01:11:13,020 --> 01:11:15,630
right and so somehow<font color="#E5E5E5"> your model needs to</font>

1518
01:11:15,630 --> 01:11:16,920
<font color="#E5E5E5">keep track</font><font color="#CCCCCC"> of the fact that it's like</font>

1519
01:11:16,920 --> 01:11:19,710
<font color="#E5E5E5">inside a comment over</font><font color="#CCCCCC"> all of these</font>

1520
01:11:19,710 --> 01:11:21,930
different characters<font color="#E5E5E5"> right and so this</font>

1521
01:11:21,930 --> 01:11:23,550
<font color="#CCCCCC">is</font><font color="#E5E5E5"> this idea of state it's kind of</font>

1522
01:11:23,550 --> 01:11:25,860
memory<font color="#CCCCCC"> right and this</font><font color="#E5E5E5"> is quite a</font>

1523
01:11:25,860 --> 01:11:29,670
difficult thing<font color="#E5E5E5"> to do with like just a</font>

1524
01:11:29,670 --> 01:11:31,830
calm confident<font color="#E5E5E5"> it turns out actually to</font>

1525
01:11:31,830 --> 01:11:34,890
be possible but it's it's you know<font color="#E5E5E5"> a</font>

1526
01:11:34,890 --> 01:11:36,240
<font color="#E5E5E5">little bit tricky</font>

1527
01:11:36,240 --> 01:11:38,520
<font color="#CCCCCC">where</font><font color="#E5E5E5"> elsewhere as an iron in it turns</font>

1528
01:11:38,520 --> 01:11:40,620
out to be pretty straightforward<font color="#CCCCCC"> all</font>

1529
01:11:40,620 --> 01:11:42,030
<font color="#E5E5E5">right so these are the basic ideas if</font>

1530
01:11:42,030 --> 01:11:43,530
you want the stateful representation

1531
01:11:43,530 --> 01:11:44,730
<font color="#E5E5E5">where you kind of</font><font color="#CCCCCC"> keeping track of</font><font color="#E5E5E5"> like</font>

1532
01:11:44,730 --> 01:11:47,370
where are we now have memory have<font color="#E5E5E5"> long</font>

1533
01:11:47,370 --> 01:11:49,740
<font color="#E5E5E5">term dependencies and potentially even</font>

1534
01:11:49,740 --> 01:11:53,310
<font color="#E5E5E5">have variable length sequences these are</font>

1535
01:11:53,310 --> 01:11:54,540
all difficult<font color="#E5E5E5"> things to do with</font>

1536
01:11:54,540 --> 01:11:57,030
<font color="#E5E5E5">confidence</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> very straightforward</font>

1537
01:11:57,030 --> 01:12:02,250
with<font color="#CCCCCC"> arid ends</font><font color="#E5E5E5"> so for example SwiftKey a</font>

1538
01:12:02,250 --> 01:12:04,530
year or so<font color="#E5E5E5"> ago did a blog post</font><font color="#CCCCCC"> about how</font>

1539
01:12:04,530 --> 01:12:06,840
<font color="#E5E5E5">they had a new language model where they</font>

1540
01:12:06,840 --> 01:12:08,430
basically<font color="#E5E5E5"> this is from</font><font color="#CCCCCC"> their blog post</font>

1541
01:12:08,430 --> 01:12:10,950
we basically said like of<font color="#E5E5E5"> course this is</font>

1542
01:12:10,950 --> 01:12:14,190
what their neural net looks like somehow

1543
01:12:14,190 --> 01:12:15,780
<font color="#E5E5E5">they always look like this on the</font>

1544
01:12:15,780 --> 01:12:17,940
<font color="#CCCCCC">internet you know you've got a</font><font color="#E5E5E5"> bunch of</font>

1545
01:12:17,940 --> 01:12:19,530
<font color="#E5E5E5">words and it's basically going to take</font>

1546
01:12:19,530 --> 01:12:21,540
your particular words in their

1547
01:12:21,540 --> 01:12:23,190
particular orders and try and figure out

1548
01:12:23,190 --> 01:12:25,020
<font color="#E5E5E5">what the next words going to</font><font color="#CCCCCC"> be which is</font>

1549
01:12:25,020 --> 01:12:27,180
<font color="#CCCCCC">to</font><font color="#E5E5E5"> say they built a language model</font><font color="#CCCCCC"> they</font>

1550
01:12:27,180 --> 01:12:28,020
<font color="#E5E5E5">actually have a pretty good language</font>

1551
01:12:28,020 --> 01:12:30,600
model<font color="#CCCCCC"> if you've used SwiftKey they seem</font>

1552
01:12:30,600 --> 01:12:31,920
to do<font color="#CCCCCC"> better predictions than anybody</font>

1553
01:12:31,920 --> 01:12:35,310
else still another cool example was

1554
01:12:35,310 --> 01:12:36,690
<font color="#CCCCCC">andre capaci a couple of years ago</font>

1555
01:12:36,690 --> 01:12:39,630
showed<font color="#E5E5E5"> that he could</font><font color="#CCCCCC"> use character level</font>

1556
01:12:39,630 --> 01:12:42,260
are a<font color="#E5E5E5"> 10 to actually create an entire</font>

1557
01:12:42,260 --> 01:12:45,420
<font color="#CCCCCC">latex document</font><font color="#E5E5E5"> so he didn't actually</font>

1558
01:12:45,420 --> 01:12:48,000
tell it in any way what<font color="#E5E5E5"> life looks</font><font color="#CCCCCC"> like</font>

1559
01:12:48,000 --> 01:12:49,550
<font color="#E5E5E5">he just</font><font color="#CCCCCC"> passed the</font>

1560
01:12:49,550 --> 01:12:52,890
some<font color="#CCCCCC"> may tech text like this and said</font>

1561
01:12:52,890 --> 01:12:54,600
generate more<font color="#CCCCCC"> low text text and it</font>

1562
01:12:54,600 --> 01:12:56,460
literally started<font color="#E5E5E5"> writing</font><font color="#CCCCCC"> something</font>

1563
01:12:56,460 --> 01:12:58,890
which means<font color="#E5E5E5"> about as much to me as most</font>

1564
01:12:58,890 --> 01:13:05,489
<font color="#E5E5E5">math papers do this</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so we're gonna</font>

1565
01:13:05,489 --> 01:13:07,890
<font color="#E5E5E5">start with</font><font color="#CCCCCC"> something that's</font><font color="#E5E5E5"> not an RN</font>

1566
01:13:07,890 --> 01:13:11,489
and<font color="#E5E5E5"> I'm going to introduce Jeremy's</font>

1567
01:13:11,489 --> 01:13:15,330
patented<font color="#E5E5E5"> neural network notation</font>

1568
01:13:15,330 --> 01:13:20,760
involving boxes circles and triangles<font color="#CCCCCC"> so</font>

1569
01:13:20,760 --> 01:13:23,969
let<font color="#CCCCCC"> me</font><font color="#E5E5E5"> explain what's going on</font><font color="#CCCCCC"> as a</font>

1570
01:13:23,969 --> 01:13:29,460
rectangle is an input<font color="#CCCCCC"> an arrow is a</font>

1571
01:13:29,460 --> 01:13:35,489
layer as a circle<font color="#CCCCCC"> in fact every square</font>

1572
01:13:35,489 --> 01:13:38,670
is a bunch of activate<font color="#E5E5E5"> so every shape is</font>

1573
01:13:38,670 --> 01:13:41,340
a bunch of activations right the

1574
01:13:41,340 --> 01:13:43,980
rectangle is<font color="#CCCCCC"> the input activations</font><font color="#E5E5E5"> the</font>

1575
01:13:43,980 --> 01:13:47,960
circle is a hidden activations<font color="#E5E5E5"> and a</font>

1576
01:13:47,960 --> 01:13:51,320
<font color="#E5E5E5">triangle is an output activations</font><font color="#CCCCCC"> and</font>

1577
01:13:51,320 --> 01:13:56,340
arrow<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> layer operation right or</font>

1578
01:13:56,340 --> 01:13:58,650
possibly<font color="#CCCCCC"> more than</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so here</font>

1579
01:13:58,650 --> 01:14:02,340
my rectangle is an<font color="#E5E5E5"> input of number of</font>

1580
01:14:02,340 --> 01:14:04,620
rows equal a batch size and number<font color="#CCCCCC"> of</font>

1581
01:14:04,620 --> 01:14:06,660
<font color="#CCCCCC">columns</font><font color="#E5E5E5"> equal to the number</font><font color="#CCCCCC"> of number of</font>

1582
01:14:06,660 --> 01:14:08,489
inputs number of variables<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right and</font>

1583
01:14:08,489 --> 01:14:11,969
<font color="#E5E5E5">so my first arrow my first operation is</font>

1584
01:14:11,969 --> 01:14:13,620
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> represent a matrix product</font>

1585
01:14:13,620 --> 01:14:17,040
<font color="#E5E5E5">followed</font><font color="#CCCCCC"> by our Lu and that's</font><font color="#E5E5E5"> going to</font>

1586
01:14:17,040 --> 01:14:20,989
generate<font color="#CCCCCC"> a set of activation remember</font>

1587
01:14:20,989 --> 01:14:23,940
activations<font color="#E5E5E5"> like an activation is a</font>

1588
01:14:23,940 --> 01:14:27,210
number that<font color="#E5E5E5"> an activation is a number a</font>

1589
01:14:27,210 --> 01:14:29,670
<font color="#CCCCCC">number that's</font><font color="#E5E5E5"> being calculated by a</font>

1590
01:14:29,670 --> 01:14:32,699
value<font color="#CCCCCC"> or</font><font color="#E5E5E5"> a matrix product or whatever</font>

1591
01:14:32,699 --> 01:14:35,760
it's a number right so this circle<font color="#E5E5E5"> here</font>

1592
01:14:35,760 --> 01:14:39,510
represents<font color="#E5E5E5"> a matrix of activations all</font>

1593
01:14:39,510 --> 01:14:41,250
of the numbers that<font color="#E5E5E5"> come out when we</font>

1594
01:14:41,250 --> 01:14:43,410
take<font color="#E5E5E5"> the inputs we do a matrix product</font>

1595
01:14:43,410 --> 01:14:45,120
<font color="#E5E5E5">followed by a value so we started with</font>

1596
01:14:45,120 --> 01:14:47,580
batch size<font color="#CCCCCC"> byte number of inputs</font><font color="#E5E5E5"> and so</font>

1597
01:14:47,580 --> 01:14:50,190
after we<font color="#CCCCCC"> do this matrix operation we now</font>

1598
01:14:50,190 --> 01:14:54,210
have batch size by you know<font color="#E5E5E5"> whatever the</font>

1599
01:14:54,210 --> 01:14:56,940
number of<font color="#E5E5E5"> columns in our matrix product</font>

1600
01:14:56,940 --> 01:15:00,090
was by number<font color="#E5E5E5"> of hidden units okay</font><font color="#CCCCCC"> and</font>

1601
01:15:00,090 --> 01:15:02,520
so if we now take these activations

1602
01:15:02,520 --> 01:15:04,950
but it's the matrix<font color="#E5E5E5"> and we put it</font>

1603
01:15:04,950 --> 01:15:06,540
<font color="#CCCCCC">through another operation in this</font><font color="#E5E5E5"> case</font>

1604
01:15:06,540 --> 01:15:08,450
another<font color="#CCCCCC"> matrix product and the softmax</font>

1605
01:15:08,450 --> 01:15:10,740
<font color="#E5E5E5">we get a triangle that's our output</font>

1606
01:15:10,740 --> 01:15:12,540
activations another matrix<font color="#E5E5E5"> of</font>

1607
01:15:12,540 --> 01:15:14,850
activations<font color="#E5E5E5"> and again number of roses</font>

1608
01:15:14,850 --> 01:15:17,520
batch size number<font color="#E5E5E5"> of columns number</font><font color="#CCCCCC"> is</font>

1609
01:15:17,520 --> 01:15:18,960
equal<font color="#E5E5E5"> to the number</font><font color="#CCCCCC"> of classes again</font>

1610
01:15:18,960 --> 01:15:21,300
<font color="#E5E5E5">however many columns our matrix in this</font>

1611
01:15:21,300 --> 01:15:27,330
<font color="#CCCCCC">matrix product head</font><font color="#E5E5E5"> so that's a that's a</font>

1612
01:15:27,330 --> 01:15:29,520
<font color="#CCCCCC">neuro net right that's our basic kind of</font>

1613
01:15:29,520 --> 01:15:34,320
one hidden layer neural<font color="#E5E5E5"> net and if you</font>

1614
01:15:34,320 --> 01:15:35,910
haven't<font color="#E5E5E5"> written one</font><font color="#CCCCCC"> of these from</font>

1615
01:15:35,910 --> 01:15:39,720
<font color="#E5E5E5">scratch try it you know and in fact</font><font color="#CCCCCC"> in</font>

1616
01:15:39,720 --> 01:15:41,580
lessons<font color="#CCCCCC"> nine ten and eleven</font><font color="#E5E5E5"> of the</font>

1617
01:15:41,580 --> 01:15:43,950
machine<font color="#CCCCCC"> learning course we do this right</font>

1618
01:15:43,950 --> 01:15:46,800
we create one of these<font color="#E5E5E5"> from scratch so</font>

1619
01:15:46,800 --> 01:15:47,910
if you're not<font color="#E5E5E5"> quite sure how</font><font color="#CCCCCC"> to do it</font>

1620
01:15:47,910 --> 01:15:49,530
<font color="#E5E5E5">you can check out the machine learning</font>

1621
01:15:49,530 --> 01:15:51,900
<font color="#CCCCCC">costs</font><font color="#E5E5E5"> yeah in general the machine</font>

1622
01:15:51,900 --> 01:15:54,000
learning cost is much more<font color="#E5E5E5"> like building</font>

1623
01:15:54,000 --> 01:15:56,070
stuff<font color="#E5E5E5"> up from the</font><font color="#CCCCCC"> foundations</font><font color="#E5E5E5"> where else</font>

1624
01:15:56,070 --> 01:15:58,200
this course is much<font color="#E5E5E5"> more like best</font>

1625
01:15:58,200 --> 01:16:02,880
<font color="#E5E5E5">practices</font><font color="#CCCCCC"> kind of top-down all right so</font>

1626
01:16:02,880 --> 01:16:05,760
if<font color="#E5E5E5"> we were</font><font color="#CCCCCC"> doing like</font><font color="#E5E5E5"> a cognate with a</font>

1627
01:16:05,760 --> 01:16:08,460
single dense hidden layer<font color="#E5E5E5"> our input</font>

1628
01:16:08,460 --> 01:16:11,820
would<font color="#E5E5E5"> be equal</font><font color="#CCCCCC"> to actually number yeah</font>

1629
01:16:11,820 --> 01:16:13,380
<font color="#CCCCCC">that's very</font><font color="#E5E5E5"> implied watch number of</font>

1630
01:16:13,380 --> 01:16:16,740
channels by height by<font color="#E5E5E5"> width right and</font>

1631
01:16:16,740 --> 01:16:18,720
notice that here batch size appeared

1632
01:16:18,720 --> 01:16:20,700
every time so I'm<font color="#CCCCCC"> not gonna I'm not</font>

1633
01:16:20,700 --> 01:16:21,570
gonna<font color="#E5E5E5"> write</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> anymore</font>

1634
01:16:21,570 --> 01:16:26,070
<font color="#E5E5E5">okay so I've removed the batch size also</font>

1635
01:16:26,070 --> 01:16:28,620
<font color="#CCCCCC">the activation function it's</font><font color="#E5E5E5"> always</font>

1636
01:16:28,620 --> 01:16:30,780
basically<font color="#CCCCCC"> value</font><font color="#E5E5E5"> or something similar for</font>

1637
01:16:30,780 --> 01:16:33,060
<font color="#E5E5E5">all the hidden layers and softmax at the</font>

1638
01:16:33,060 --> 01:16:34,620
end for classification<font color="#E5E5E5"> so I'm not going</font>

1639
01:16:34,620 --> 01:16:36,450
<font color="#E5E5E5">to write</font><font color="#CCCCCC"> that either okay so I'm kind of</font>

1640
01:16:36,450 --> 01:16:38,670
edge picture I'm going<font color="#E5E5E5"> to simplify it a</font>

1641
01:16:38,670 --> 01:16:41,100
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> alright so I'm</font><font color="#E5E5E5"> not gonna</font>

1642
01:16:41,100 --> 01:16:42,720
<font color="#E5E5E5">mention batch size</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> still there</font>

1643
01:16:42,720 --> 01:16:43,950
we're not going<font color="#E5E5E5"> to mention real you or</font>

1644
01:16:43,950 --> 01:16:45,960
softmax but it's still there<font color="#E5E5E5"> so here's</font>

1645
01:16:45,960 --> 01:16:47,910
our input<font color="#CCCCCC"> and so in this</font><font color="#E5E5E5"> case rather</font>

1646
01:16:47,910 --> 01:16:50,430
than<font color="#CCCCCC"> a matrix</font><font color="#E5E5E5"> product will do a</font>

1647
01:16:50,430 --> 01:16:53,190
convolution let's drive to convolution

1648
01:16:53,190 --> 01:16:56,100
so we'll skip<font color="#CCCCCC"> over every second one or</font>

1649
01:16:56,100 --> 01:16:58,380
could be a convolution followed by a<font color="#CCCCCC"> mac</font>

1650
01:16:58,380 --> 01:17:01,320
<font color="#CCCCCC">spool</font><font color="#E5E5E5"> in either case we end up with</font>

1651
01:17:01,320 --> 01:17:03,390
<font color="#E5E5E5">something which is replaced number of</font>

1652
01:17:03,390 --> 01:17:05,880
channels with number<font color="#E5E5E5"> of filters right</font>

1653
01:17:05,880 --> 01:17:08,070
<font color="#E5E5E5">and we have now height divided by two</font>

1654
01:17:08,070 --> 01:17:09,270
and<font color="#E5E5E5"> width divided by 2</font>

1655
01:17:09,270 --> 01:17:12,750
okay and then<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can flatten</font><font color="#E5E5E5"> that out</font>

1656
01:17:12,750 --> 01:17:15,420
<font color="#E5E5E5">somehow we'll talk next week about the</font>

1657
01:17:15,420 --> 01:17:15,870
main way

1658
01:17:15,870 --> 01:17:17,580
we do that nowadays<font color="#E5E5E5"> which is basically</font>

1659
01:17:17,580 --> 01:17:19,350
to do something called an adaptive max

1660
01:17:19,350 --> 01:17:21,810
<font color="#E5E5E5">pooling</font><font color="#CCCCCC"> where we basically</font><font color="#E5E5E5"> get an</font>

1661
01:17:21,810 --> 01:17:24,770
average<font color="#E5E5E5"> across the height and the width</font>

1662
01:17:24,770 --> 01:17:28,020
<font color="#CCCCCC">and turn</font><font color="#E5E5E5"> that into a vector anyway</font>

1663
01:17:28,020 --> 01:17:29,700
somehow we flatten it out into<font color="#CCCCCC"> a vector</font>

1664
01:17:29,700 --> 01:17:33,240
<font color="#E5E5E5">we can do a matrix</font><font color="#CCCCCC"> product</font><font color="#E5E5E5"> or a couple</font>

1665
01:17:33,240 --> 01:17:34,920
of matrix products<font color="#E5E5E5"> we actually tend to</font>

1666
01:17:34,920 --> 01:17:38,760
do in<font color="#E5E5E5"> fast AI</font><font color="#CCCCCC"> so that'll be our fully</font>

1667
01:17:38,760 --> 01:17:40,770
connected layer with some<font color="#CCCCCC"> number of</font>

1668
01:17:40,770 --> 01:17:43,500
activations<font color="#CCCCCC"> final matrix product give us</font>

1669
01:17:43,500 --> 01:17:46,260
some number of classes<font color="#E5E5E5"> okay so this is</font>

1670
01:17:46,260 --> 01:17:48,980
our basic<font color="#E5E5E5"> component remembering</font>

1671
01:17:48,980 --> 01:17:51,800
rectangles input circle is hidden

1672
01:17:51,800 --> 01:17:54,840
triangle is output<font color="#E5E5E5"> all</font><font color="#CCCCCC"> other shapes</font>

1673
01:17:54,840 --> 01:17:59,190
represent<font color="#E5E5E5"> a tensor of activations</font><font color="#CCCCCC"> all of</font>

1674
01:17:59,190 --> 01:18:02,220
the arrows<font color="#E5E5E5"> represent a operation or</font><font color="#CCCCCC"> lay</font>

1675
01:18:02,220 --> 01:18:04,560
operation<font color="#CCCCCC"> all right</font>

1676
01:18:04,560 --> 01:18:06,360
so now<font color="#E5E5E5"> that's going</font><font color="#CCCCCC"> to jump to</font><font color="#E5E5E5"> the one</font>

1677
01:18:06,360 --> 01:18:07,500
the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> one that we're going</font><font color="#CCCCCC"> to</font>

1678
01:18:07,500 --> 01:18:12,210
actually try to try<font color="#E5E5E5"> to create for NLP</font>

1679
01:18:12,210 --> 01:18:14,250
<font color="#E5E5E5">and we're going to basically do exactly</font>

1680
01:18:14,250 --> 01:18:17,460
the same<font color="#E5E5E5"> thing as here right</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we're</font>

1681
01:18:17,460 --> 01:18:18,930
<font color="#E5E5E5">going to try and</font><font color="#CCCCCC"> predict the third</font>

1682
01:18:18,930 --> 01:18:21,480
character<font color="#E5E5E5"> in a three character sequence</font>

1683
01:18:21,480 --> 01:18:25,640
based on<font color="#CCCCCC"> the previous two characters</font><font color="#E5E5E5"> so</font>

1684
01:18:25,640 --> 01:18:29,220
our input<font color="#E5E5E5"> and again remember we've</font>

1685
01:18:29,220 --> 01:18:33,810
removed the batch size dimension<font color="#E5E5E5"> we're</font>

1686
01:18:33,810 --> 01:18:35,700
not saying that<font color="#E5E5E5"> we're still here okay</font>

1687
01:18:35,700 --> 01:18:39,390
<font color="#CCCCCC">and also here I've removed the names of</font>

1688
01:18:39,390 --> 01:18:41,100
the layer operations entirely

1689
01:18:41,100 --> 01:18:43,680
<font color="#E5E5E5">okay just keeping simplifying things so</font>

1690
01:18:43,680 --> 01:18:46,110
for example our first import would be

1691
01:18:46,110 --> 01:18:50,700
the first character of each string<font color="#E5E5E5"> in</font>

1692
01:18:50,700 --> 01:18:54,660
our mini batch<font color="#E5E5E5"> okay and assuming this is</font>

1693
01:18:54,660 --> 01:18:57,870
one hot encoded then the width is<font color="#CCCCCC"> just</font>

1694
01:18:57,870 --> 01:18:59,490
however<font color="#E5E5E5"> many items there are in the</font>

1695
01:18:59,490 --> 01:19:01,110
vocabulary how many unique characters

1696
01:19:01,110 --> 01:19:04,020
could we have<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> we probably</font><font color="#E5E5E5"> won't</font>

1697
01:19:04,020 --> 01:19:06,420
really<font color="#E5E5E5"> one hot encoder will feed it in</font>

1698
01:19:06,420 --> 01:19:08,400
as an integer<font color="#E5E5E5"> and pretend it's one hot</font>

1699
01:19:08,400 --> 01:19:09,720
encoded by using an embedding layer

1700
01:19:09,720 --> 01:19:12,270
which<font color="#CCCCCC"> is mathematically</font><font color="#E5E5E5"> identical okay</font>

1701
01:19:12,270 --> 01:19:15,000
and then we that's going to give<font color="#E5E5E5"> us some</font>

1702
01:19:15,000 --> 01:19:16,770
activations which we can stick<font color="#E5E5E5"> through a</font>

1703
01:19:16,770 --> 01:19:23,880
fully connected<font color="#E5E5E5"> layer okay so we we put</font>

1704
01:19:23,880 --> 01:19:25,740
<font color="#E5E5E5">that through if we click through a fully</font>

1705
01:19:25,740 --> 01:19:27,030
connected<font color="#E5E5E5"> layer to get some activations</font>

1706
01:19:27,030 --> 01:19:29,030
<font color="#E5E5E5">we can then put that</font>

1707
01:19:29,030 --> 01:19:31,670
another fully connected layer<font color="#E5E5E5"> and now</font>

1708
01:19:31,670 --> 01:19:34,010
we're going<font color="#E5E5E5"> to bring in the input of</font>

1709
01:19:34,010 --> 01:19:36,410
character<font color="#CCCCCC"> to alright so the character to</font>

1710
01:19:36,410 --> 01:19:37,730
input will<font color="#CCCCCC"> be exactly</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font>

1711
01:19:37,730 --> 01:19:39,410
dimensionality as the character<font color="#CCCCCC"> one</font>

1712
01:19:39,410 --> 01:19:42,380
input<font color="#E5E5E5"> and we now need to somehow</font><font color="#CCCCCC"> combine</font>

1713
01:19:42,380 --> 01:19:45,050
these two arrows<font color="#CCCCCC"> together so we could</font>

1714
01:19:45,050 --> 01:19:47,990
<font color="#CCCCCC">just</font><font color="#E5E5E5"> add them up for instance right</font>

1715
01:19:47,990 --> 01:19:50,230
because remember<font color="#E5E5E5"> this arrow here</font>

1716
01:19:50,230 --> 01:19:53,600
represents a matrix product<font color="#E5E5E5"> so this</font>

1717
01:19:53,600 --> 01:19:55,250
matrix product is going<font color="#CCCCCC"> to spit out</font><font color="#E5E5E5"> the</font>

1718
01:19:55,250 --> 01:19:56,600
same dimensionality as this<font color="#E5E5E5"> matrix</font>

1719
01:19:56,600 --> 01:19:59,480
<font color="#E5E5E5">product so we could just add them up to</font>

1720
01:19:59,480 --> 01:20:02,960
create<font color="#E5E5E5"> these activations</font><font color="#CCCCCC"> and so now we</font>

1721
01:20:02,960 --> 01:20:04,250
<font color="#E5E5E5">can put</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> through another</font><font color="#CCCCCC"> matrix</font>

1722
01:20:04,250 --> 01:20:05,690
product<font color="#E5E5E5"> and of course</font><font color="#CCCCCC"> remember all these</font>

1723
01:20:05,690 --> 01:20:08,060
metrics products have a<font color="#E5E5E5"> RAL you as well</font>

1724
01:20:08,060 --> 01:20:10,520
and this<font color="#E5E5E5"> final one will have a softmax</font>

1725
01:20:10,520 --> 01:20:13,850
<font color="#E5E5E5">instead to</font><font color="#CCCCCC"> create our predicted set of</font>

1726
01:20:13,850 --> 01:20:18,350
characters<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so it's a standard you</font>

1727
01:20:18,350 --> 01:20:20,330
<font color="#E5E5E5">know</font><font color="#CCCCCC"> two hidden layer</font>

1728
01:20:20,330 --> 01:20:23,090
<font color="#E5E5E5">I guess it's</font><font color="#CCCCCC"> actually three matrix</font>

1729
01:20:23,090 --> 01:20:27,050
products<font color="#E5E5E5"> neural net this first one is</font>

1730
01:20:27,050 --> 01:20:29,240
<font color="#E5E5E5">coming through an embedding layer</font><font color="#CCCCCC"> the</font>

1731
01:20:29,240 --> 01:20:32,240
<font color="#CCCCCC">only difference is that</font><font color="#E5E5E5"> we're also got a</font>

1732
01:20:32,240 --> 01:20:34,760
second<font color="#CCCCCC"> input coming</font><font color="#E5E5E5"> in here that</font><font color="#CCCCCC"> we're</font>

1733
01:20:34,760 --> 01:20:36,620
just<font color="#E5E5E5"> adding in</font><font color="#CCCCCC"> right but it's kind of</font>

1734
01:20:36,620 --> 01:20:39,530
<font color="#E5E5E5">conceptually identical so let's let's</font>

1735
01:20:39,530 --> 01:20:46,160
implement that<font color="#E5E5E5"> for Nietzsche</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

1736
01:20:46,160 --> 01:20:48,980
so I'm not<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to use torch text I'm</font>

1737
01:20:48,980 --> 01:20:51,050
gonna try<font color="#E5E5E5"> not</font><font color="#CCCCCC"> to use almost any fast</font><font color="#E5E5E5"> AI</font>

1738
01:20:51,050 --> 01:20:53,450
<font color="#E5E5E5">so we can see it all kind of again from</font>

1739
01:20:53,450 --> 01:20:56,030
raw right<font color="#E5E5E5"> so here's the first</font><font color="#CCCCCC"> 400</font>

1740
01:20:56,030 --> 01:20:59,180
characters of the collected works<font color="#CCCCCC"> let's</font>

1741
01:20:59,180 --> 01:21:02,390
grab a set of<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> the letters that</font><font color="#E5E5E5"> we</font>

1742
01:21:02,390 --> 01:21:06,230
see there<font color="#E5E5E5"> and sort them okay</font><font color="#CCCCCC"> and so a</font>

1743
01:21:06,230 --> 01:21:08,090
set creates all the unique letters<font color="#CCCCCC"> so</font>

1744
01:21:08,090 --> 01:21:12,460
we've got 85 unique<font color="#E5E5E5"> letters in our vocab</font>

1745
01:21:12,460 --> 01:21:15,110
let's pop<font color="#E5E5E5"> up it's nice to put an empty</font>

1746
01:21:15,110 --> 01:21:17,210
<font color="#E5E5E5">kind of a null or some some kind</font><font color="#CCCCCC"> of</font>

1747
01:21:17,210 --> 01:21:18,860
padding character in there for padding

1748
01:21:18,860 --> 01:21:20,180
so we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> put a</font><font color="#CCCCCC"> parenting character</font>

1749
01:21:20,180 --> 01:21:23,590
at the start right<font color="#E5E5E5"> and so here is what</font>

1750
01:21:23,590 --> 01:21:29,030
<font color="#CCCCCC">our vocab</font><font color="#E5E5E5"> looks like okay so so Kars is</font>

1751
01:21:29,030 --> 01:21:33,350
our bouquet<font color="#CCCCCC"> so as per usual we want some</font>

1752
01:21:33,350 --> 01:21:37,460
way<font color="#CCCCCC"> to map every character to a unique</font>

1753
01:21:37,460 --> 01:21:41,200
ID<font color="#E5E5E5"> and every unique ID to a character</font>

1754
01:21:41,200 --> 01:21:42,600
and

1755
01:21:42,600 --> 01:21:44,210
so now we can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> through our</font>

1756
01:21:44,210 --> 01:21:48,390
collected works of niche and<font color="#E5E5E5"> grab the</font>

1757
01:21:48,390 --> 01:21:51,120
index of each one<font color="#E5E5E5"> of those characters</font><font color="#CCCCCC"> so</font>

1758
01:21:51,120 --> 01:21:54,720
now we've just<font color="#CCCCCC"> turned</font><font color="#E5E5E5"> it into this right</font>

1759
01:21:54,720 --> 01:22:01,140
so rather than quote PR<font color="#E5E5E5"> e we now have 40</font>

1760
01:22:01,140 --> 01:22:08,010
<font color="#E5E5E5">42 29</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so so that's basically the</font>

1761
01:22:08,010 --> 01:22:10,500
<font color="#CCCCCC">first step and</font><font color="#E5E5E5"> just to confirm</font><font color="#CCCCCC"> we can</font>

1762
01:22:10,500 --> 01:22:13,560
now take each of those indexes<font color="#E5E5E5"> and turn</font>

1763
01:22:13,560 --> 01:22:15,540
them back<font color="#CCCCCC"> into characters</font><font color="#E5E5E5"> and join them</font>

1764
01:22:15,540 --> 01:22:20,060
together<font color="#E5E5E5"> and</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> there it is okay</font><font color="#CCCCCC"> so</font>

1765
01:22:20,060 --> 01:22:21,930
<font color="#CCCCCC">from now on we're just</font><font color="#E5E5E5"> going to work</font>

1766
01:22:21,930 --> 01:22:23,430
<font color="#E5E5E5">with this</font><font color="#CCCCCC"> IDX</font>

1767
01:22:23,430 --> 01:22:26,310
list the list of character members in

1768
01:22:26,310 --> 01:22:30,330
the connected works of Nietzsche<font color="#E5E5E5"> yes so</font>

1769
01:22:30,330 --> 01:22:33,360
Jeremy why are we<font color="#E5E5E5"> doing like a model of</font>

1770
01:22:33,360 --> 01:22:36,540
characters and<font color="#E5E5E5"> not a model of words</font><font color="#CCCCCC"> I</font>

1771
01:22:36,540 --> 01:22:38,430
<font color="#E5E5E5">just</font><font color="#CCCCCC"> thought it seemed simpler you know</font>

1772
01:22:38,430 --> 01:22:42,180
<font color="#E5E5E5">with a vocab of</font><font color="#CCCCCC"> 80-ish</font><font color="#E5E5E5"> items we can kind</font>

1773
01:22:42,180 --> 01:22:47,510
of see it<font color="#E5E5E5"> better</font><font color="#CCCCCC"> character level models</font>

1774
01:22:47,510 --> 01:22:50,100
<font color="#CCCCCC">turn out to be potentially</font><font color="#E5E5E5"> quite useful</font>

1775
01:22:50,100 --> 01:22:51,600
in a<font color="#CCCCCC"> number of situations but we'll</font>

1776
01:22:51,600 --> 01:22:54,390
cover that<font color="#CCCCCC"> in part two the short answer</font>

1777
01:22:54,390 --> 01:22:57,030
is<font color="#E5E5E5"> like you generally want</font><font color="#CCCCCC"> to combine</font>

1778
01:22:57,030 --> 01:22:58,560
both<font color="#E5E5E5"> the word level model and</font><font color="#CCCCCC"> a connect</font>

1779
01:22:58,560 --> 01:22:59,850
character level model like if you're

1780
01:22:59,850 --> 01:23:02,250
doing<font color="#E5E5E5"> say translation</font><font color="#CCCCCC"> it's a great way</font>

1781
01:23:02,250 --> 01:23:04,140
to deal with<font color="#E5E5E5"> unknown like unusual</font><font color="#CCCCCC"> words</font>

1782
01:23:04,140 --> 01:23:05,970
rather<font color="#E5E5E5"> than treating it as unknown</font>

1783
01:23:05,970 --> 01:23:07,440
anytime you see a word you haven't seen

1784
01:23:07,440 --> 01:23:09,390
before<font color="#E5E5E5"> you could use a character level</font>

1785
01:23:09,390 --> 01:23:11,820
model for<font color="#E5E5E5"> that and there's actually</font>

1786
01:23:11,820 --> 01:23:13,200
something<font color="#E5E5E5"> in between the</font><font color="#CCCCCC"> two quarter</font>

1787
01:23:13,200 --> 01:23:15,810
byte pair and coding vpe<font color="#E5E5E5"> which basically</font>

1788
01:23:15,810 --> 01:23:18,570
looks<font color="#E5E5E5"> at at all engrams of characters</font>

1789
01:23:18,570 --> 01:23:22,830
<font color="#CCCCCC">but we'll cover all that in part two</font><font color="#E5E5E5"> if</font>

1790
01:23:22,830 --> 01:23:24,020
you<font color="#E5E5E5"> want to look at it right now</font>

1791
01:23:24,020 --> 01:23:27,030
then<font color="#E5E5E5"> part two of the existing course</font>

1792
01:23:27,030 --> 01:23:30,540
<font color="#E5E5E5">already has this stuff taught and part</font>

1793
01:23:30,540 --> 01:23:33,170
two of the version 1 of<font color="#E5E5E5"> this course</font>

1794
01:23:33,170 --> 01:23:35,820
<font color="#CCCCCC">although</font><font color="#E5E5E5"> the NLP stuff is in</font><font color="#CCCCCC"> flight</font>

1795
01:23:35,820 --> 01:23:38,430
<font color="#E5E5E5">which by</font><font color="#CCCCCC"> the way so you'll understand it</font>

1796
01:23:38,430 --> 01:23:41,640
straight<font color="#E5E5E5"> away</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> actually the thing</font>

1797
01:23:41,640 --> 01:23:43,110
<font color="#E5E5E5">that inspired us</font><font color="#CCCCCC"> to move</font><font color="#E5E5E5"> to piped watch</font>

1798
01:23:43,110 --> 01:23:44,940
because trying to do it<font color="#E5E5E5"> in chaos</font><font color="#CCCCCC"> turned</font>

1799
01:23:44,940 --> 01:23:48,750
<font color="#E5E5E5">out to be a nightmare</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so let's</font>

1800
01:23:48,750 --> 01:23:52,650
create the inputs to this we're actually

1801
01:23:52,650 --> 01:23:53,940
going<font color="#E5E5E5"> to do something slightly different</font>

1802
01:23:53,940 --> 01:23:55,679
<font color="#CCCCCC">what I said we're actually going</font><font color="#E5E5E5"> to</font>

1803
01:23:55,679 --> 01:23:58,019
<font color="#CCCCCC">I predict the fourth character that</font>

1804
01:23:58,019 --> 01:24:00,659
actually<font color="#E5E5E5"> this the fifth character using</font>

1805
01:24:00,659 --> 01:24:02,340
the first<font color="#E5E5E5"> four so the index four</font>

1806
01:24:02,340 --> 01:24:04,559
character using the index<font color="#E5E5E5"> zero one two</font>

1807
01:24:04,559 --> 01:24:06,539
<font color="#E5E5E5">and three okay</font><font color="#CCCCCC"> so it was exactly the</font>

1808
01:24:06,539 --> 01:24:08,459
<font color="#CCCCCC">same</font><font color="#E5E5E5"> thing but with just a couple more</font>

1809
01:24:08,459 --> 01:24:11,610
layers<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that means that we</font><font color="#E5E5E5"> need a list</font>

1810
01:24:11,610 --> 01:24:17,909
of the zeroth first second and third

1811
01:24:17,909 --> 01:24:19,650
characters<font color="#E5E5E5"> that's why I'm just cutting</font>

1812
01:24:19,650 --> 01:24:21,929
every character from<font color="#E5E5E5"> the start from the</font>

1813
01:24:21,929 --> 01:24:24,979
one from<font color="#E5E5E5"> two from three skipping over</font>

1814
01:24:24,979 --> 01:24:28,559
three at a time<font color="#CCCCCC"> okay</font>

1815
01:24:28,559 --> 01:24:32,610
so hmm

1816
01:24:32,610 --> 01:24:36,840
this is<font color="#CCCCCC"> I I said this wrong</font><font color="#E5E5E5"> so we're</font>

1817
01:24:36,840 --> 01:24:39,179
going<font color="#E5E5E5"> to predict the third character the</font>

1818
01:24:39,179 --> 01:24:41,070
fourth character from the third for the

1819
01:24:41,070 --> 01:24:42,479
first<font color="#CCCCCC"> story okay</font>

1820
01:24:42,479 --> 01:24:46,110
the fourth character<font color="#E5E5E5"> is history</font>

1821
01:24:46,110 --> 01:24:50,489
all right so<font color="#CCCCCC"> our inputs will be</font><font color="#E5E5E5"> these</font>

1822
01:24:50,489 --> 01:24:53,909
three lists right so we<font color="#E5E5E5"> can just use n P</font>

1823
01:24:53,909 --> 01:24:57,539
dot stack to pop them together<font color="#E5E5E5"> all right</font>

1824
01:24:57,539 --> 01:25:01,639
<font color="#E5E5E5">so here's the zero one and two</font>

1825
01:25:01,639 --> 01:25:04,050
<font color="#CCCCCC">characters that are going</font><font color="#E5E5E5"> to feed into a</font>

1826
01:25:04,050 --> 01:25:05,519
model and then here is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next</font>

1827
01:25:05,519 --> 01:25:13,729
character in the list so for<font color="#E5E5E5"> example X 1</font>

1828
01:25:13,729 --> 01:25:23,249
X<font color="#CCCCCC"> 2 X 3 and Y all right so you can see</font>

1829
01:25:23,249 --> 01:25:25,829
for<font color="#CCCCCC"> example we start off the first</font><font color="#E5E5E5"> the</font>

1830
01:25:25,829 --> 01:25:33,749
<font color="#CCCCCC">very first item would be 40 42</font><font color="#E5E5E5"> and 29</font>

1831
01:25:33,749 --> 01:25:36,539
right so that's characters naught 1<font color="#E5E5E5"> and</font>

1832
01:25:36,539 --> 01:25:40,949
2 and then<font color="#E5E5E5"> we'd be predicting 30 that's</font>

1833
01:25:40,949 --> 01:25:44,789
<font color="#E5E5E5">the fourth character which is the start</font>

1834
01:25:44,789 --> 01:25:46,289
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next row</font>

1835
01:25:46,289 --> 01:25:49,979
all right so then 30 25 27<font color="#CCCCCC"> we need to</font>

1836
01:25:49,979 --> 01:25:52,739
predict 29 which is<font color="#E5E5E5"> the start of</font><font color="#CCCCCC"> next</font>

1837
01:25:52,739 --> 01:25:54,900
<font color="#E5E5E5">row and so forth so we're always using</font>

1838
01:25:54,900 --> 01:25:59,030
<font color="#E5E5E5">three characters</font><font color="#CCCCCC"> to predict the</font><font color="#E5E5E5"> fourth</font>

1839
01:25:59,030 --> 01:26:05,189
<font color="#CCCCCC">so there</font><font color="#E5E5E5"> are 200,000 of these that we're</font>

1840
01:26:05,189 --> 01:26:08,550
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to try and model right so we're</font>

1841
01:26:08,550 --> 01:26:09,299
going<font color="#E5E5E5"> to build this</font>

1842
01:26:09,299 --> 01:26:11,159
<font color="#E5E5E5">which means we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to decide how many</font>

1843
01:26:11,159 --> 01:26:18,299
activations<font color="#CCCCCC"> so I'm going to</font><font color="#E5E5E5"> use 256</font><font color="#CCCCCC"> okay</font>

1844
01:26:18,299 --> 01:26:19,949
and we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> decide how big our</font>

1845
01:26:19,949 --> 01:26:21,899
embeddings are going to be and<font color="#CCCCCC"> so I</font>

1846
01:26:21,899 --> 01:26:24,029
<font color="#E5E5E5">decided to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> 42 so about half the</font>

1847
01:26:24,029 --> 01:26:27,449
number<font color="#CCCCCC"> of characters I have</font><font color="#E5E5E5"> and you can</font>

1848
01:26:27,449 --> 01:26:28,709
play around<font color="#CCCCCC"> these so you can</font><font color="#E5E5E5"> come up</font>

1849
01:26:28,709 --> 01:26:30,149
<font color="#CCCCCC">with</font><font color="#E5E5E5"> better numbers it's just a kind</font><font color="#CCCCCC"> of</font>

1850
01:26:30,149 --> 01:26:32,729
<font color="#E5E5E5">experimental and now we're going to</font>

1851
01:26:32,729 --> 01:26:35,579
build<font color="#E5E5E5"> our model now I'm gonna change my</font>

1852
01:26:35,579 --> 01:26:38,579
model slightly<font color="#CCCCCC"> and so here is the</font><font color="#E5E5E5"> the</font>

1853
01:26:38,579 --> 01:26:41,249
full version<font color="#E5E5E5"> so predicting character for</font>

1854
01:26:41,249 --> 01:26:44,399
using characters<font color="#CCCCCC"> 1 2 & 3 as you can see</font>

1855
01:26:44,399 --> 01:26:45,869
it's the<font color="#CCCCCC"> same picture</font><font color="#E5E5E5"> as a previous page</font>

1856
01:26:45,869 --> 01:26:48,299
<font color="#E5E5E5">but I put some</font><font color="#CCCCCC"> very important coloured</font>

1857
01:26:48,299 --> 01:26:51,299
arrows here all the arrows of the<font color="#E5E5E5"> same</font>

1858
01:26:51,299 --> 01:26:54,629
color are going to use the same matrix

1859
01:26:54,629 --> 01:26:58,319
the<font color="#CCCCCC"> same weight matrix right so</font><font color="#E5E5E5"> all of</font>

1860
01:26:58,319 --> 01:27:00,959
our input embeddings are going to use

1861
01:27:00,959 --> 01:27:05,609
the same matrix<font color="#E5E5E5"> all of our layers that</font>

1862
01:27:05,609 --> 01:27:07,529
go<font color="#E5E5E5"> from one layer to the next they're</font>

1863
01:27:07,529 --> 01:27:09,689
going to use the same orange arrow

1864
01:27:09,689 --> 01:27:13,199
<font color="#E5E5E5">weight matrix and then our output will</font>

1865
01:27:13,199 --> 01:27:15,359
have<font color="#CCCCCC"> its own</font><font color="#E5E5E5"> matrix so we're going to</font>

1866
01:27:15,359 --> 01:27:19,859
<font color="#E5E5E5">have</font><font color="#CCCCCC"> one two three weight matrices right</font>

1867
01:27:19,859 --> 01:27:22,499
<font color="#E5E5E5">and the idea here is the reason I'm not</font>

1868
01:27:22,499 --> 01:27:24,089
<font color="#E5E5E5">gonna have a separate one but every</font>

1869
01:27:24,089 --> 01:27:27,359
everything here is that like why would

1870
01:27:27,359 --> 01:27:29,369
kind of semantically<font color="#E5E5E5"> a carrot to have a</font>

1871
01:27:29,369 --> 01:27:31,049
different<font color="#CCCCCC"> meaning depending if it's</font><font color="#E5E5E5"> the</font>

1872
01:27:31,049 --> 01:27:33,029
first<font color="#E5E5E5"> or the second or the third item in</font>

1873
01:27:33,029 --> 01:27:34,559
a sequence like<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> like we're even</font>

1874
01:27:34,559 --> 01:27:36,599
<font color="#CCCCCC">starting every</font><font color="#E5E5E5"> sequence at the start of</font>

1875
01:27:36,599 --> 01:27:37,949
<font color="#CCCCCC">a sentence we're just arbitrarily</font>

1876
01:27:37,949 --> 01:27:39,959
<font color="#E5E5E5">chopped it into</font><font color="#CCCCCC"> groups of</font><font color="#E5E5E5"> three right so</font>

1877
01:27:39,959 --> 01:27:41,339
<font color="#E5E5E5">you would</font><font color="#CCCCCC"> expect these to</font><font color="#E5E5E5"> all have the</font>

1878
01:27:41,339 --> 01:27:44,189
same kind of conceptual mapping and

1879
01:27:44,189 --> 01:27:45,809
<font color="#CCCCCC">ditto</font><font color="#E5E5E5"> like when we're moving</font><font color="#CCCCCC"> from</font>

1880
01:27:45,809 --> 01:27:48,659
claritin or character<font color="#CCCCCC"> one you know to</font>

1881
01:27:48,659 --> 01:27:51,149
kind<font color="#CCCCCC"> of say build up some state here</font><font color="#E5E5E5"> why</font>

1882
01:27:51,149 --> 01:27:52,499
would<font color="#E5E5E5"> that be any different</font><font color="#CCCCCC"> kind of</font>

1883
01:27:52,499 --> 01:27:53,819
operation<font color="#E5E5E5"> to moving from</font><font color="#CCCCCC"> character</font>

1884
01:27:53,819 --> 01:27:56,939
wonder character<font color="#CCCCCC"> to so that's</font><font color="#E5E5E5"> the basic</font>

1885
01:27:56,939 --> 01:28:00,599
idea<font color="#CCCCCC"> so let's create a three character</font>

1886
01:28:00,599 --> 01:28:04,260
<font color="#E5E5E5">model and so we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> create one</font>

1887
01:28:04,260 --> 01:28:06,899
linear layer for our<font color="#CCCCCC"> Green Arrow one</font>

1888
01:28:06,899 --> 01:28:09,269
linear layer<font color="#CCCCCC"> fat orange</font><font color="#E5E5E5"> arrow and one</font>

1889
01:28:09,269 --> 01:28:11,819
linear layer for<font color="#CCCCCC"> our blue arrow</font><font color="#E5E5E5"> and then</font>

1890
01:28:11,819 --> 01:28:16,529
<font color="#CCCCCC">also one embedding</font><font color="#E5E5E5"> okay so the embedding</font>

1891
01:28:16,529 --> 01:28:18,959
is going to bring in<font color="#E5E5E5"> something with size</font>

1892
01:28:18,959 --> 01:28:20,609
<font color="#E5E5E5">whatever</font><font color="#CCCCCC"> it was</font><font color="#E5E5E5"> 84</font>

1893
01:28:20,609 --> 01:28:22,139
I think vocab size and spit out

1894
01:28:22,139 --> 01:28:23,010
something<font color="#E5E5E5"> with an</font>

1895
01:28:23,010 --> 01:28:26,429
factors in the embedding<font color="#CCCCCC"> well then put</font>

1896
01:28:26,429 --> 01:28:29,519
that<font color="#E5E5E5"> through a linear layer</font><font color="#CCCCCC"> and then</font>

1897
01:28:29,519 --> 01:28:30,750
we've<font color="#E5E5E5"> got our hidden layers before</font><font color="#CCCCCC"> the</font>

1898
01:28:30,750 --> 01:28:34,650
<font color="#E5E5E5">output layer so when we call forward</font>

1899
01:28:34,650 --> 01:28:37,110
they're going<font color="#CCCCCC"> to be passing in</font><font color="#E5E5E5"> one two</font>

1900
01:28:37,110 --> 01:28:40,260
three characters so if each one<font color="#E5E5E5"> will</font>

1901
01:28:40,260 --> 01:28:42,480
stick it through an embedding<font color="#E5E5E5"> we'll</font>

1902
01:28:42,480 --> 01:28:44,639
stick it<font color="#CCCCCC"> through a linear layer</font><font color="#E5E5E5"> and</font>

1903
01:28:44,639 --> 01:28:46,769
<font color="#E5E5E5">we'll stick it through a value just to</font>

1904
01:28:46,769 --> 01:28:48,599
do<font color="#CCCCCC"> it</font><font color="#E5E5E5"> the character one character</font><font color="#CCCCCC"> - and</font>

1905
01:28:48,599 --> 01:28:51,920
character<font color="#E5E5E5"> three okay</font>

1906
01:28:51,920 --> 01:29:05,099
then I'm going to<font color="#E5E5E5"> create this circle of</font>

1907
01:29:05,099 --> 01:29:07,769
activations here okay and that<font color="#CCCCCC"> matrix</font>

1908
01:29:07,769 --> 01:29:10,320
I'm<font color="#CCCCCC"> going to call</font><font color="#E5E5E5"> H right and so it's</font>

1909
01:29:10,320 --> 01:29:12,539
going to<font color="#E5E5E5"> be equal</font><font color="#CCCCCC"> to my input</font>

1910
01:29:12,539 --> 01:29:17,250
activations<font color="#E5E5E5"> okay after</font><font color="#CCCCCC"> going through</font><font color="#E5E5E5"> the</font>

1911
01:29:17,250 --> 01:29:19,590
value<font color="#E5E5E5"> and the linear layer and the</font>

1912
01:29:19,590 --> 01:29:21,510
embedding<font color="#E5E5E5"> right and then I'm going to</font>

1913
01:29:21,510 --> 01:29:26,820
<font color="#CCCCCC">apply this l hidden so</font><font color="#E5E5E5"> the orange arrow</font>

1914
01:29:26,820 --> 01:29:30,239
and that's going to<font color="#E5E5E5"> get me to here okay</font>

1915
01:29:30,239 --> 01:29:32,489
so that's what this layer here does and

1916
01:29:32,489 --> 01:29:34,710
then to get<font color="#E5E5E5"> to the next one</font><font color="#CCCCCC"> I need to</font>

1917
01:29:34,710 --> 01:29:36,960
<font color="#CCCCCC">reply the</font><font color="#E5E5E5"> same thing and it apply the</font>

1918
01:29:36,960 --> 01:29:40,170
orange<font color="#E5E5E5"> arrow to that okay but</font><font color="#CCCCCC"> I also</font>

1919
01:29:40,170 --> 01:29:43,710
have to<font color="#E5E5E5"> add in this second input right</font>

1920
01:29:43,710 --> 01:29:48,480
so take my second input<font color="#E5E5E5"> and add in okay</font>

1921
01:29:48,480 --> 01:29:52,619
my previous layer<font color="#CCCCCC"> your neck could you</font>

1922
01:29:52,619 --> 01:29:58,860
pass it back<font color="#CCCCCC"> three rows I don't really</font>

1923
01:29:58,860 --> 01:30:01,980
see how these dimensions are the<font color="#CCCCCC"> same</font>

1924
01:30:01,980 --> 01:30:05,250
from<font color="#E5E5E5"> eight and in2 from literature which</font>

1925
01:30:05,250 --> 01:30:07,980
from yeah<font color="#E5E5E5"> okay let's go</font><font color="#CCCCCC"> through so</font><font color="#E5E5E5"> let's</font>

1926
01:30:07,980 --> 01:30:10,309
figure out<font color="#E5E5E5"> the</font><font color="#CCCCCC"> dimensions together</font><font color="#E5E5E5"> so</font>

1927
01:30:10,309 --> 01:30:16,079
self dot E<font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna be of length 42</font><font color="#E5E5E5"> okay</font>

1928
01:30:16,079 --> 01:30:18,480
and then it's gonna go through L in I'm

1929
01:30:18,480 --> 01:30:24,000
<font color="#E5E5E5">just gonna make</font><font color="#CCCCCC"> it of size n hidden</font><font color="#E5E5E5"> okay</font>

1930
01:30:24,000 --> 01:30:26,460
and so then we're<font color="#E5E5E5"> going to pass that</font>

1931
01:30:26,460 --> 01:30:30,869
which is now<font color="#E5E5E5"> size n hidden through this</font>

1932
01:30:30,869 --> 01:30:34,349
which is<font color="#E5E5E5"> also going to return something</font>

1933
01:30:34,349 --> 01:30:35,970
of size n hidden

1934
01:30:35,970 --> 01:30:37,620
<font color="#CCCCCC">okay so it's a really important to</font>

1935
01:30:37,620 --> 01:30:39,180
notice<font color="#CCCCCC"> that this is square</font><font color="#E5E5E5"> this is a</font>

1936
01:30:39,180 --> 01:30:43,230
square weight matrix okay so we now know

1937
01:30:43,230 --> 01:30:46,290
<font color="#CCCCCC">that this is</font><font color="#E5E5E5"> of size n hidden</font><font color="#CCCCCC"> into it's</font>

1938
01:30:46,290 --> 01:30:47,850
<font color="#E5E5E5">going to be exactly the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> size as in</font>

1939
01:30:47,850 --> 01:30:50,460
one was which<font color="#CCCCCC"> is n hidden</font><font color="#E5E5E5"> so we can now</font>

1940
01:30:50,460 --> 01:30:53,670
sum together two sets of activations

1941
01:30:53,670 --> 01:30:56,400
both<font color="#E5E5E5"> the size n hidden passing it into</font>

1942
01:30:56,400 --> 01:30:59,190
here<font color="#E5E5E5"> and again it returns something</font><font color="#CCCCCC"> of</font>

1943
01:30:59,190 --> 01:31:01,770
size<font color="#E5E5E5"> n hidden so basically the trick was</font>

1944
01:31:01,770 --> 01:31:03,780
to<font color="#E5E5E5"> make this a square matrix</font><font color="#CCCCCC"> and to make</font>

1945
01:31:03,780 --> 01:31:05,250
sure<font color="#CCCCCC"> that it's square</font><font color="#E5E5E5"> matrix was the</font>

1946
01:31:05,250 --> 01:31:06,900
same size<font color="#E5E5E5"> as the output</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> hidden</font>

1947
01:31:06,900 --> 01:31:09,330
<font color="#CCCCCC">well thanks for</font><font color="#E5E5E5"> the great question can</font>

1948
01:31:09,330 --> 01:31:16,730
you pass that<font color="#CCCCCC"> out to you</font><font color="#E5E5E5"> now Jeremy is</font>

1949
01:31:16,730 --> 01:31:19,920
summing the only thing<font color="#E5E5E5"> people can do in</font>

1950
01:31:19,920 --> 01:31:21,960
these cases<font color="#CCCCCC"> I'll come back</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> that in a</font>

1951
01:31:21,960 --> 01:31:25,500
moment that's great<font color="#E5E5E5"> point okay um</font><font color="#CCCCCC"> I</font>

1952
01:31:25,500 --> 01:31:28,260
don't<font color="#CCCCCC"> like it when I</font><font color="#E5E5E5"> have like three</font>

1953
01:31:28,260 --> 01:31:29,790
bits of code<font color="#E5E5E5"> that look identical and</font>

1954
01:31:29,790 --> 01:31:31,050
<font color="#E5E5E5">then three bits of codes that look</font>

1955
01:31:31,050 --> 01:31:32,970
nearly<font color="#E5E5E5"> identical but aren't quiet</font>

1956
01:31:32,970 --> 01:31:35,400
<font color="#E5E5E5">because it's harder to refactor</font><font color="#CCCCCC"> so I'm</font>

1957
01:31:35,400 --> 01:31:40,200
going to put a make<font color="#E5E5E5"> H into a bunch of</font>

1958
01:31:40,200 --> 01:31:45,390
<font color="#CCCCCC">zeros</font><font color="#E5E5E5"> so that I can then</font><font color="#CCCCCC"> put H here and</font>

1959
01:31:45,390 --> 01:31:49,110
these<font color="#CCCCCC"> are now identical okay</font><font color="#E5E5E5"> so that the</font>

1960
01:31:49,110 --> 01:31:51,600
hugely complex<font color="#E5E5E5"> trick that we're going to</font>

1961
01:31:51,600 --> 01:31:54,360
do very<font color="#E5E5E5"> shortly</font><font color="#CCCCCC"> is to replace these</font>

1962
01:31:54,360 --> 01:31:57,270
three things<font color="#E5E5E5"> with a for loop okay and</font>

1963
01:31:57,270 --> 01:32:00,810
it's going to loop through<font color="#CCCCCC"> one</font><font color="#E5E5E5"> two and</font>

1964
01:32:00,810 --> 01:32:02,940
<font color="#E5E5E5">three that's that's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be the for</font>

1965
01:32:02,940 --> 01:32:05,130
loop<font color="#E5E5E5"> or actually</font><font color="#CCCCCC"> zero one two</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> at</font>

1966
01:32:05,130 --> 01:32:06,330
<font color="#E5E5E5">that point we'll be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to call it a</font>

1967
01:32:06,330 --> 01:32:09,000
recurrent neural network okay so just to

1968
01:32:09,000 --> 01:32:12,120
skip ahead a<font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so we</font>

1969
01:32:12,120 --> 01:32:16,470
create that that model<font color="#E5E5E5"> make sure</font><font color="#CCCCCC"> I've</font>

1970
01:32:16,470 --> 01:32:17,640
run all<font color="#CCCCCC"> these so we</font><font color="#E5E5E5"> can actually run</font>

1971
01:32:17,640 --> 01:32:24,870
<font color="#E5E5E5">this thing okay</font><font color="#CCCCCC"> so we can now just use</font>

1972
01:32:24,870 --> 01:32:26,730
the same columnar model data<font color="#E5E5E5"> class that</font>

1973
01:32:26,730 --> 01:32:28,710
we've used<font color="#CCCCCC"> before</font><font color="#E5E5E5"> and if we use from</font>

1974
01:32:28,710 --> 01:32:31,650
<font color="#CCCCCC">arrays then it's basically it's</font><font color="#E5E5E5"> going to</font>

1975
01:32:31,650 --> 01:32:33,570
spit<font color="#CCCCCC"> back the exact arrays we gave it</font>

1976
01:32:33,570 --> 01:32:36,030
<font color="#E5E5E5">right so if we pass if we stack</font><font color="#CCCCCC"> together</font>

1977
01:32:36,030 --> 01:32:38,490
those three arrays<font color="#E5E5E5"> then it's going to</font>

1978
01:32:38,490 --> 01:32:40,620
feed us<font color="#E5E5E5"> those three things back to our</font>

1979
01:32:40,620 --> 01:32:43,430
forward<font color="#E5E5E5"> method so if you want to like</font>

1980
01:32:43,430 --> 01:32:47,640
play<font color="#CCCCCC"> around with training models</font><font color="#E5E5E5"> using</font>

1981
01:32:47,640 --> 01:32:49,889
like you know as<font color="#E5E5E5"> roar</font>

1982
01:32:49,889 --> 01:32:51,840
<font color="#E5E5E5">approach as possible but</font><font color="#CCCCCC"> without writing</font>

1983
01:32:51,840 --> 01:32:53,579
<font color="#E5E5E5">lots of boilerplate</font><font color="#CCCCCC"> this is kind of how</font>

1984
01:32:53,579 --> 01:32:55,649
<font color="#E5E5E5">to do it here's column</font><font color="#CCCCCC"> Namit model data</font>

1985
01:32:55,649 --> 01:32:58,349
from arrays and<font color="#CCCCCC"> then if you pass in</font>

1986
01:32:58,349 --> 01:33:01,530
whatever you pass in here right you're

1987
01:33:01,530 --> 01:33:06,959
going to get back here<font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> I've</font>

1988
01:33:06,959 --> 01:33:09,090
passed in three things<font color="#E5E5E5"> which means I'm</font>

1989
01:33:09,090 --> 01:33:11,369
going<font color="#E5E5E5"> to get sent three things</font><font color="#CCCCCC"> okay so</font>

1990
01:33:11,369 --> 01:33:14,059
<font color="#E5E5E5">that's how</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> works</font>

1991
01:33:14,189 --> 01:33:16,590
<font color="#E5E5E5">batch size 512 because this is you know</font>

1992
01:33:16,590 --> 01:33:18,209
this data<font color="#E5E5E5"> is tiny so I can use a bigger</font>

1993
01:33:18,209 --> 01:33:23,309
batch size<font color="#E5E5E5"> so I'm not using really much</font>

1994
01:33:23,309 --> 01:33:25,229
<font color="#E5E5E5">faster</font><font color="#CCCCCC"> i stuff at</font><font color="#E5E5E5"> all I'm using fast AI</font>

1995
01:33:25,229 --> 01:33:27,059
stuff just<font color="#E5E5E5"> to save me fiddling around</font>

1996
01:33:27,059 --> 01:33:28,530
with data loaders and<font color="#CCCCCC"> data sets and</font>

1997
01:33:28,530 --> 01:33:30,239
<font color="#E5E5E5">stuff but I'm actually going to</font><font color="#CCCCCC"> create a</font>

1998
01:33:30,239 --> 01:33:33,209
standard<font color="#E5E5E5"> ply torch model I'm not going</font>

1999
01:33:33,209 --> 01:33:35,130
to create a<font color="#CCCCCC"> loner</font><font color="#E5E5E5"> okay so this is a</font>

2000
01:33:35,130 --> 01:33:36,929
<font color="#CCCCCC">standard paper</font><font color="#E5E5E5"> model and because I'm</font>

2001
01:33:36,929 --> 01:33:38,249
<font color="#E5E5E5">using ply towards that means I have to</font>

2002
01:33:38,249 --> 01:33:40,619
remember to<font color="#CCCCCC"> write</font><font color="#E5E5E5"> CUDA</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> let's</font><font color="#CCCCCC"> tick</font>

2003
01:33:40,619 --> 01:33:49,019
it on the GPU so here is<font color="#E5E5E5"> how we can</font><font color="#CCCCCC"> look</font>

2004
01:33:49,019 --> 01:33:50,939
inside<font color="#E5E5E5"> at what's going on</font><font color="#CCCCCC"> right so we</font>

2005
01:33:50,939 --> 01:33:54,269
<font color="#CCCCCC">can say it</font><font color="#E5E5E5"> er MD train data loader to</font>

2006
01:33:54,269 --> 01:33:56,429
grab the iterator to<font color="#E5E5E5"> iterate</font><font color="#CCCCCC"> through the</font>

2007
01:33:56,429 --> 01:33:59,309
<font color="#E5E5E5">training set we can then call</font><font color="#CCCCCC"> next on</font>

2008
01:33:59,309 --> 01:34:01,530
that<font color="#E5E5E5"> to grab a mini batch and that's</font>

2009
01:34:01,530 --> 01:34:05,369
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> return all of our X's and why</font>

2010
01:34:05,369 --> 01:34:08,280
<font color="#E5E5E5">tensor and so we can then take a look at</font>

2011
01:34:08,280 --> 01:34:13,619
you<font color="#E5E5E5"> know here's our X's for example</font><font color="#CCCCCC"> all</font>

2012
01:34:13,619 --> 01:34:16,169
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and so you would expect have a</font>

2013
01:34:16,169 --> 01:34:17,489
think about what<font color="#E5E5E5"> you would expect for</font>

2014
01:34:17,489 --> 01:34:22,050
this length<font color="#E5E5E5"> three not surprisingly</font>

2015
01:34:22,050 --> 01:34:24,300
<font color="#CCCCCC">because these are the three things okay</font>

2016
01:34:24,300 --> 01:34:32,459
<font color="#E5E5E5">and so then XS 0 not surprisingly</font><font color="#CCCCCC"> okay</font>

2017
01:34:32,459 --> 01:34:37,110
<font color="#CCCCCC">is of length 512</font><font color="#E5E5E5"> and it's not actually</font>

2018
01:34:37,110 --> 01:34:38,579
<font color="#CCCCCC">one hot</font><font color="#E5E5E5"> encoded because we use an</font>

2019
01:34:38,579 --> 01:34:41,399
embedding to pretend it is<font color="#E5E5E5"> okay and so</font>

2020
01:34:41,399 --> 01:34:42,959
then<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> use a model as if it's a</font>

2021
01:34:42,959 --> 01:34:46,099
function<font color="#CCCCCC"> okay by passing to it</font>

2022
01:34:46,099 --> 01:34:49,079
the variable eyes version of our tensors

2023
01:34:49,079 --> 01:34:51,959
<font color="#E5E5E5">and so have a think about what you would</font>

2024
01:34:51,959 --> 01:34:56,280
expect<font color="#E5E5E5"> to be returned here okay so</font><font color="#CCCCCC"> not</font>

2025
01:34:56,280 --> 01:34:58,349
surprisingly we had a mini batch of 512

2026
01:34:58,349 --> 01:35:01,439
so we still have<font color="#E5E5E5"> 5 12 and then 85 is the</font>

2027
01:35:01,439 --> 01:35:03,460
<font color="#E5E5E5">probability of each of</font><font color="#CCCCCC"> the possible</font>

2028
01:35:03,460 --> 01:35:05,739
vocab items and of course we've got<font color="#E5E5E5"> the</font>

2029
01:35:05,739 --> 01:35:07,480
log of them because that's<font color="#CCCCCC"> kind of what</font>

2030
01:35:07,480 --> 01:35:09,820
<font color="#E5E5E5">we do in</font><font color="#CCCCCC"> pi torch okay you can see here</font>

2031
01:35:09,820 --> 01:35:12,250
the softmax<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so that's how you</font>

2032
01:35:12,250 --> 01:35:14,290
can<font color="#E5E5E5"> look inside</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so you can</font><font color="#CCCCCC"> see</font>

2033
01:35:14,290 --> 01:35:15,880
<font color="#CCCCCC">here how to do everything really</font><font color="#E5E5E5"> very</font>

2034
01:35:15,880 --> 01:35:19,630
much<font color="#E5E5E5"> by hand so we can create an</font>

2035
01:35:19,630 --> 01:35:22,270
optimizer<font color="#CCCCCC"> again using standard pipe</font>

2036
01:35:22,270 --> 01:35:24,969
torch<font color="#E5E5E5"> so with PI torch</font><font color="#CCCCCC"> when you</font><font color="#E5E5E5"> use a</font>

2037
01:35:24,969 --> 01:35:27,160
plate or optimizer<font color="#CCCCCC"> you have to pass in a</font>

2038
01:35:27,160 --> 01:35:29,739
list of<font color="#E5E5E5"> the things to optimize and so if</font>

2039
01:35:29,739 --> 01:35:31,510
you call<font color="#CCCCCC"> m dot parameters that</font><font color="#E5E5E5"> will</font>

2040
01:35:31,510 --> 01:35:34,719
return<font color="#E5E5E5"> that list for you</font><font color="#CCCCCC"> and then we can</font>

2041
01:35:34,719 --> 01:35:37,750
fit and there it goes

2042
01:35:37,750 --> 01:35:43,900
<font color="#CCCCCC">okay and so we don't have learning</font><font color="#E5E5E5"> rate</font>

2043
01:35:43,900 --> 01:35:46,180
finders<font color="#CCCCCC"> and</font><font color="#E5E5E5"> sttr and all that stuff</font>

2044
01:35:46,180 --> 01:35:47,469
<font color="#CCCCCC">because we're not using a learner so</font>

2045
01:35:47,469 --> 01:35:48,940
we'll have to manually do learning rate

2046
01:35:48,940 --> 01:35:50,530
annealing<font color="#E5E5E5"> so set the learning rate a</font>

2047
01:35:50,530 --> 01:35:57,630
little<font color="#CCCCCC"> bit lower</font><font color="#E5E5E5"> and fit again okay and</font>

2048
01:35:57,630 --> 01:36:01,150
so<font color="#CCCCCC"> now we can write a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> to</font>

2049
01:36:01,150 --> 01:36:03,730
to test<font color="#E5E5E5"> this thing out</font><font color="#CCCCCC"> okay</font>

2050
01:36:03,730 --> 01:36:10,630
so here's something called<font color="#E5E5E5"> getnext</font><font color="#CCCCCC"> where</font>

2051
01:36:10,630 --> 01:36:14,860
we can pass in three characters like<font color="#CCCCCC"> why</font>

2052
01:36:14,860 --> 01:36:17,980
full top space<font color="#E5E5E5"> right and so</font><font color="#CCCCCC"> I can then</font>

2053
01:36:17,980 --> 01:36:19,750
<font color="#CCCCCC">go through and</font><font color="#E5E5E5"> turn that into a tensor</font>

2054
01:36:19,750 --> 01:36:24,250
<font color="#E5E5E5">with capital T of an array of the</font>

2055
01:36:24,250 --> 01:36:26,590
character index for each<font color="#CCCCCC"> character in</font>

2056
01:36:26,590 --> 01:36:27,160
that<font color="#E5E5E5"> list</font>

2057
01:36:27,160 --> 01:36:28,420
so basically turn those into the

2058
01:36:28,420 --> 01:36:31,690
integers turn those into variables pass

2059
01:36:31,690 --> 01:36:35,080
that to our model right<font color="#CCCCCC"> and then we</font><font color="#E5E5E5"> can</font>

2060
01:36:35,080 --> 01:36:38,140
do an Arg max on that to grab which

2061
01:36:38,140 --> 01:36:40,719
character number<font color="#E5E5E5"> is it</font><font color="#CCCCCC"> and in</font><font color="#E5E5E5"> order to</font>

2062
01:36:40,719 --> 01:36:43,360
do stuff in none pile and<font color="#E5E5E5"> I use</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> NP</font>

2063
01:36:43,360 --> 01:36:45,730
to turn that variable into a<font color="#CCCCCC"> lumpy array</font>

2064
01:36:45,730 --> 01:36:47,320
right<font color="#E5E5E5"> and then I can return</font><font color="#CCCCCC"> that</font>

2065
01:36:47,320 --> 01:36:49,750
<font color="#E5E5E5">character and so for</font><font color="#CCCCCC"> example a capital T</font>

2066
01:36:49,750 --> 01:36:51,310
<font color="#E5E5E5">because what it thinks would be</font>

2067
01:36:51,310 --> 01:36:55,090
reasonable<font color="#E5E5E5"> after seeing why . space that</font>

2068
01:36:55,090 --> 01:36:56,200
<font color="#E5E5E5">seems like a very</font><font color="#CCCCCC"> reasonable</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> to</font>

2069
01:36:56,200 --> 01:37:00,219
start a sentence if it was ppl a that

2070
01:37:00,219 --> 01:37:02,590
sounds<font color="#E5E5E5"> reasonable space th</font><font color="#CCCCCC"> a that's</font>

2071
01:37:02,590 --> 01:37:05,110
<font color="#CCCCCC">bouncer e small</font><font color="#E5E5E5"> a and</font><font color="#CCCCCC"> D space</font><font color="#E5E5E5"> that</font>

2072
01:37:05,110 --> 01:37:05,710
sounds reasonable

2073
01:37:05,710 --> 01:37:08,820
so it seems<font color="#E5E5E5"> to reflect created something</font>

2074
01:37:08,820 --> 01:37:11,890
sensible<font color="#CCCCCC"> alright so you know the</font>

2075
01:37:11,890 --> 01:37:15,000
important thing to<font color="#E5E5E5"> note</font><font color="#CCCCCC"> here is our</font>

2076
01:37:15,000 --> 01:37:17,320
character model

2077
01:37:17,320 --> 01:37:21,610
<font color="#E5E5E5">is a totally standard fully connected</font>

2078
01:37:21,610 --> 01:37:23,890
model<font color="#E5E5E5"> right the only</font><font color="#CCCCCC"> slightly</font>

2079
01:37:23,890 --> 01:37:27,190
interesting thing we did was<font color="#CCCCCC"> to</font><font color="#E5E5E5"> kind of</font>

2080
01:37:27,190 --> 01:37:31,870
do this addition<font color="#CCCCCC"> of</font><font color="#E5E5E5"> each of the inputs</font>

2081
01:37:31,870 --> 01:37:36,540
<font color="#E5E5E5">one at a time</font><font color="#CCCCCC"> okay but there's</font><font color="#E5E5E5"> nothing</font>

2082
01:37:36,540 --> 01:37:39,580
new conceptually here we're training<font color="#E5E5E5"> it</font>

2083
01:37:39,580 --> 01:37:42,510
in<font color="#CCCCCC"> the usual</font><font color="#E5E5E5"> way</font>

2084
01:37:42,960 --> 01:37:49,500
all right<font color="#E5E5E5"> let's now create an errand in</font>

2085
01:37:49,500 --> 01:37:59,440
so an iron in is when we do exactly the

2086
01:37:59,440 --> 01:38:03,310
<font color="#CCCCCC">same thing that we did here all right</font>

2087
01:38:03,310 --> 01:38:05,800
<font color="#CCCCCC">but I could draw this more simply by</font>

2088
01:38:05,800 --> 01:38:07,210
saying you know<font color="#E5E5E5"> what</font><font color="#CCCCCC"> if we've</font><font color="#E5E5E5"> got a</font>

2089
01:38:07,210 --> 01:38:10,210
green arrow going<font color="#E5E5E5"> to a circle let's not</font>

2090
01:38:10,210 --> 01:38:12,190
draw a green arrow go into a circle

2091
01:38:12,190 --> 01:38:14,710
again<font color="#CCCCCC"> and again and again</font><font color="#E5E5E5"> so let's just</font>

2092
01:38:14,710 --> 01:38:16,360
<font color="#E5E5E5">draw it like</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> green arrow going to a</font>

2093
01:38:16,360 --> 01:38:18,550
circle<font color="#CCCCCC"> right and rather than</font><font color="#E5E5E5"> drawing an</font>

2094
01:38:18,550 --> 01:38:20,440
orange arrow<font color="#CCCCCC"> going to a circle</font><font color="#E5E5E5"> let's</font>

2095
01:38:20,440 --> 01:38:24,280
just draw it<font color="#CCCCCC"> like this okay</font><font color="#E5E5E5"> so this is</font>

2096
01:38:24,280 --> 01:38:27,370
the same<font color="#E5E5E5"> picture exactly</font><font color="#CCCCCC"> the same</font>

2097
01:38:27,370 --> 01:38:32,530
picture as this one<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and so you</font>

2098
01:38:32,530 --> 01:38:33,820
just have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> say how many times to go</font>

2099
01:38:33,820 --> 01:38:35,950
around this circle<font color="#E5E5E5"> right so in this case</font>

2100
01:38:35,950 --> 01:38:37,540
if we were to predict character number<font color="#E5E5E5"> n</font>

2101
01:38:37,540 --> 01:38:39,790
from characters<font color="#E5E5E5"> one through n</font><font color="#CCCCCC"> minus</font><font color="#E5E5E5"> one</font>

2102
01:38:39,790 --> 01:38:41,770
<font color="#E5E5E5">then we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> take the character one input</font>

2103
01:38:41,770 --> 01:38:44,710
<font color="#E5E5E5">get some activations feed that to</font><font color="#CCCCCC"> some</font>

2104
01:38:44,710 --> 01:38:46,870
new activations<font color="#E5E5E5"> that go through remember</font>

2105
01:38:46,870 --> 01:38:49,270
<font color="#E5E5E5">orange is</font><font color="#CCCCCC"> the hidden</font><font color="#E5E5E5"> to hidden weight</font>

2106
01:38:49,270 --> 01:38:51,730
matrix right<font color="#CCCCCC"> and each time</font><font color="#E5E5E5"> we'll also</font>

2107
01:38:51,730 --> 01:38:53,560
bring in the<font color="#E5E5E5"> next character of input</font>

2108
01:38:53,560 --> 01:38:57,370
<font color="#E5E5E5">through its embeddings okay so that</font>

2109
01:38:57,370 --> 01:39:01,480
picture<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> picture I have two ways</font>

2110
01:39:01,480 --> 01:39:04,210
of<font color="#E5E5E5"> writing the same</font><font color="#CCCCCC"> thing but this one</font>

2111
01:39:04,210 --> 01:39:06,310
is more flexible because<font color="#E5E5E5"> rather than me</font>

2112
01:39:06,310 --> 01:39:07,930
<font color="#CCCCCC">having to</font><font color="#E5E5E5"> say hey let's do it for H I</font>

2113
01:39:07,930 --> 01:39:10,360
<font color="#E5E5E5">don't have to draw eight circles right I</font>

2114
01:39:10,360 --> 01:39:16,330
<font color="#E5E5E5">can just</font><font color="#CCCCCC"> say I'll</font><font color="#E5E5E5"> just repeat this so I</font>

2115
01:39:16,330 --> 01:39:17,970
<font color="#E5E5E5">could simplify this a little bit further</font>

2116
01:39:17,970 --> 01:39:21,670
by<font color="#E5E5E5"> saying you know what rather than</font>

2117
01:39:21,670 --> 01:39:23,760
having this thing as a special case

2118
01:39:23,760 --> 01:39:26,170
let's actually<font color="#CCCCCC"> start out with a bunch of</font>

2119
01:39:26,170 --> 01:39:28,480
<font color="#CCCCCC">zeros right and then let's have</font><font color="#E5E5E5"> all of</font>

2120
01:39:28,480 --> 01:39:30,699
<font color="#E5E5E5">our characters</font>

2121
01:39:30,699 --> 01:39:39,550
inside here<font color="#E5E5E5"> yes yeah so</font><font color="#CCCCCC"> I was wondering</font>

2122
01:39:39,550 --> 01:39:41,889
if you can explain it<font color="#CCCCCC"> be better why are</font>

2123
01:39:41,889 --> 01:39:45,909
you reusing those<font color="#CCCCCC"> why</font><font color="#E5E5E5"> you think oh</font>

2124
01:39:45,909 --> 01:39:47,800
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> the same yeah where are you you</font>

2125
01:39:47,800 --> 01:39:50,499
kind of<font color="#CCCCCC"> seem</font><font color="#E5E5E5"> to be reusing the same</font><font color="#CCCCCC"> same</font>

2126
01:39:50,499 --> 01:39:52,929
<font color="#CCCCCC">weight matrices</font><font color="#E5E5E5"> weight matrices yeah</font>

2127
01:39:52,929 --> 01:39:55,119
maybe this<font color="#E5E5E5"> is kind</font><font color="#CCCCCC"> of similar to what we</font>

2128
01:39:55,119 --> 01:39:57,369
did in<font color="#CCCCCC"> convolution your Nets like if</font>

2129
01:39:57,369 --> 01:40:00,010
somehow no I<font color="#E5E5E5"> don't think so</font>

2130
01:40:00,010 --> 01:40:02,679
at least not<font color="#CCCCCC"> that I can see</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the idea</font>

2131
01:40:02,679 --> 01:40:05,679
is just kind of semantically speaking

2132
01:40:05,679 --> 01:40:12,579
like this<font color="#CCCCCC"> arrow here this</font><font color="#E5E5E5"> this arrow</font>

2133
01:40:12,579 --> 01:40:17,499
here is saying take<font color="#E5E5E5"> a character of</font>

2134
01:40:17,499 --> 01:40:21,999
import<font color="#E5E5E5"> and represented as some says some</font>

2135
01:40:21,999 --> 01:40:24,909
set of<font color="#CCCCCC"> features</font><font color="#E5E5E5"> right and this arrow is</font>

2136
01:40:24,909 --> 01:40:26,019
saying the<font color="#E5E5E5"> same thing take some</font>

2137
01:40:26,019 --> 01:40:27,249
character and represent as a set<font color="#E5E5E5"> of</font>

2138
01:40:27,249 --> 01:40:30,179
<font color="#CCCCCC">features and so is this</font><font color="#E5E5E5"> one okay so</font><font color="#CCCCCC"> like</font>

2139
01:40:30,179 --> 01:40:32,920
why would the<font color="#E5E5E5"> three be represented with</font>

2140
01:40:32,920 --> 01:40:34,300
<font color="#E5E5E5">different weight matrices because it's</font>

2141
01:40:34,300 --> 01:40:36,519
all doing the same<font color="#CCCCCC"> thing right and this</font>

2142
01:40:36,519 --> 01:40:40,900
orange<font color="#E5E5E5"> arrow is saying kind of</font>

2143
01:40:40,900 --> 01:40:44,019
transition from character<font color="#CCCCCC"> 0 state to</font>

2144
01:40:44,019 --> 01:40:46,769
character 1 state<font color="#E5E5E5"> 2 characters to state</font>

2145
01:40:46,769 --> 01:40:49,539
again it's<font color="#E5E5E5"> it's the same thing it's like</font>

2146
01:40:49,539 --> 01:40:51,550
why would the transition from character

2147
01:40:51,550 --> 01:40:53,409
<font color="#E5E5E5">0 to 1 be different to character from</font>

2148
01:40:53,409 --> 01:40:55,630
transition from one or<font color="#E5E5E5"> two so the idea</font>

2149
01:40:55,630 --> 01:40:59,979
is like but is to like say<font color="#CCCCCC"> hey if if</font>

2150
01:40:59,979 --> 01:41:02,949
it's doing the same<font color="#E5E5E5"> conceptual thing</font>

2151
01:41:02,949 --> 01:41:07,360
let's use the exact same<font color="#CCCCCC"> white matrix my</font>

2152
01:41:07,360 --> 01:41:09,010
comment<font color="#E5E5E5"> on</font><font color="#CCCCCC"> convolution</font><font color="#E5E5E5"> neural networks</font>

2153
01:41:09,010 --> 01:41:12,159
is that<font color="#CCCCCC"> a</font><font color="#E5E5E5"> filter or so</font><font color="#CCCCCC"> this apply to</font>

2154
01:41:12,159 --> 01:41:16,599
multiple<font color="#CCCCCC"> places</font><font color="#E5E5E5"> I think something like a</font>

2155
01:41:16,599 --> 01:41:18,699
convolution is almost like<font color="#E5E5E5"> a kind of a</font>

2156
01:41:18,699 --> 01:41:21,130
special dot product with shared weights

2157
01:41:21,130 --> 01:41:22,630
<font color="#CCCCCC">yeah no that's okay</font>

2158
01:41:22,630 --> 01:41:25,989
that's<font color="#CCCCCC"> very good point</font><font color="#E5E5E5"> and in fact</font><font color="#CCCCCC"> one</font>

2159
01:41:25,989 --> 01:41:27,340
of<font color="#E5E5E5"> our students actually</font><font color="#CCCCCC"> wrote a good</font>

2160
01:41:27,340 --> 01:41:29,050
blog post<font color="#E5E5E5"> about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> last year we should</font>

2161
01:41:29,050 --> 01:41:31,300
<font color="#E5E5E5">dig that up</font><font color="#CCCCCC"> okay I totally see where</font>

2162
01:41:31,300 --> 01:41:32,559
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> coming from and I</font><font color="#E5E5E5"> totally</font><font color="#CCCCCC"> agree</font>

2163
01:41:32,559 --> 01:41:37,150
with you<font color="#CCCCCC"> all right so let's let's</font>

2164
01:41:37,150 --> 01:41:41,499
<font color="#E5E5E5">implement this version</font><font color="#CCCCCC"> so this time</font>

2165
01:41:41,499 --> 01:41:43,360
we're going to do<font color="#CCCCCC"> eight</font>

2166
01:41:43,360 --> 01:41:48,760
<font color="#CCCCCC">as</font><font color="#E5E5E5"> eight</font><font color="#CCCCCC"> sees okay and so let's create a</font>

2167
01:41:48,760 --> 01:41:52,840
list of every<font color="#CCCCCC"> eighth character from zero</font>

2168
01:41:52,840 --> 01:41:55,119
through<font color="#CCCCCC"> seven</font><font color="#E5E5E5"> and then our outputs will</font>

2169
01:41:55,119 --> 01:41:57,400
be<font color="#E5E5E5"> the next character and so we can</font>

2170
01:41:57,400 --> 01:42:00,159
stack<font color="#E5E5E5"> them together and so now we've got</font>

2171
01:42:00,159 --> 01:42:05,290
<font color="#E5E5E5">six</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> thousand by eight</font><font color="#CCCCCC"> so here's</font>

2172
01:42:05,290 --> 01:42:11,130
an example so for<font color="#E5E5E5"> example after this</font>

2173
01:42:11,130 --> 01:42:15,699
series of eight characters<font color="#E5E5E5"> right so this</font>

2174
01:42:15,699 --> 01:42:17,230
is characters north through eight

2175
01:42:17,230 --> 01:42:20,050
this is characters one through nine<font color="#CCCCCC"> this</font>

2176
01:42:20,050 --> 01:42:21,790
<font color="#CCCCCC">is two through ten these are all</font>

2177
01:42:21,790 --> 01:42:25,119
overlapping<font color="#E5E5E5"> okay so after</font><font color="#CCCCCC"> characters</font><font color="#E5E5E5"> one</font>

2178
01:42:25,119 --> 01:42:27,190
<font color="#E5E5E5">north through eight this is going to be</font>

2179
01:42:27,190 --> 01:42:30,190
the next<font color="#CCCCCC"> one okay</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> after these</font>

2180
01:42:30,190 --> 01:42:33,130
characters this will be the next<font color="#E5E5E5"> one</font><font color="#CCCCCC"> all</font>

2181
01:42:33,130 --> 01:42:35,170
right<font color="#E5E5E5"> so you can see that this one here</font>

2182
01:42:35,170 --> 01:42:39,070
has 43<font color="#E5E5E5"> is</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> Y value right because</font>

2183
01:42:39,070 --> 01:42:42,880
<font color="#CCCCCC">after those the</font><font color="#E5E5E5"> next one will be 43</font><font color="#CCCCCC"> okay</font>

2184
01:42:42,880 --> 01:42:46,380
so so this<font color="#E5E5E5"> is the first eight characters</font>

2185
01:42:46,380 --> 01:42:49,869
<font color="#E5E5E5">this is two through nine three through</font>

2186
01:42:49,869 --> 01:42:51,280
ten<font color="#E5E5E5"> and so forth right so these are</font>

2187
01:42:51,280 --> 01:42:53,139
overlapping groups of eight characters

2188
01:42:53,139 --> 01:42:57,270
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> this is the the next one okay</font>

2189
01:42:57,270 --> 01:43:06,639
<font color="#CCCCCC">so let's create that</font><font color="#E5E5E5"> model okay so again</font>

2190
01:43:06,639 --> 01:43:09,130
<font color="#E5E5E5">we</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> arrays to</font><font color="#E5E5E5"> create a model</font>

2191
01:43:09,130 --> 01:43:12,250
data class and so you'll see<font color="#E5E5E5"> here</font><font color="#CCCCCC"> we</font>

2192
01:43:12,250 --> 01:43:14,110
have<font color="#E5E5E5"> exactly the same code as we had</font>

2193
01:43:14,110 --> 01:43:14,500
before

2194
01:43:14,500 --> 01:43:18,219
there's our embedding<font color="#CCCCCC"> Linea hidden</font>

2195
01:43:18,219 --> 01:43:20,100
output these<font color="#E5E5E5"> are literally identical</font>

2196
01:43:20,100 --> 01:43:25,210
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> and then we've replaced our value</font>

2197
01:43:25,210 --> 01:43:27,280
of the linear input of the embedding

2198
01:43:27,280 --> 01:43:30,489
with something that's inside<font color="#E5E5E5"> a loop okay</font>

2199
01:43:30,489 --> 01:43:33,310
and then we've replaced the<font color="#E5E5E5"> cell hidden</font>

2200
01:43:33,310 --> 01:43:35,050
thing<font color="#E5E5E5"> okay</font>

2201
01:43:35,050 --> 01:43:38,730
also inside the loop

2202
01:43:43,940 --> 01:43:45,440
<font color="#CCCCCC">I just realize didn't</font><font color="#E5E5E5"> mentioned last</font>

2203
01:43:45,440 --> 01:43:48,699
<font color="#CCCCCC">time the use of</font><font color="#E5E5E5"> the hyperbolic</font><font color="#CCCCCC"> tan</font>

2204
01:43:48,699 --> 01:43:57,230
hyperbolic<font color="#E5E5E5"> tan looks like this okay so</font>

2205
01:43:57,230 --> 01:43:59,719
it's just<font color="#E5E5E5"> a sigmoid that's offset right</font>

2206
01:43:59,719 --> 01:44:02,510
<font color="#E5E5E5">and it's very common to use</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> hyperbolic</font>

2207
01:44:02,510 --> 01:44:05,270
tan inside<font color="#E5E5E5"> this trend this state to</font>

2208
01:44:05,270 --> 01:44:07,160
state transition<font color="#E5E5E5"> because it kind of</font>

2209
01:44:07,160 --> 01:44:09,800
stops it<font color="#CCCCCC"> from flying off too high or too</font>

2210
01:44:09,800 --> 01:44:14,060
<font color="#CCCCCC">low you know it's nicely controlled back</font>

2211
01:44:14,060 --> 01:44:15,710
in the old days we<font color="#CCCCCC"> used to</font><font color="#E5E5E5"> use</font>

2212
01:44:15,710 --> 01:44:19,360
<font color="#E5E5E5">hyperbolic</font><font color="#CCCCCC"> tanh or the equivalent</font>

2213
01:44:19,360 --> 01:44:22,969
sigmoid<font color="#E5E5E5"> a lot as most of our activation</font>

2214
01:44:22,969 --> 01:44:24,830
functions nowadays we tend<font color="#CCCCCC"> to use value</font>

2215
01:44:24,830 --> 01:44:28,430
but in<font color="#E5E5E5"> these hidden state</font><font color="#CCCCCC"> to here in the</font>

2216
01:44:28,430 --> 01:44:31,610
hidden<font color="#E5E5E5"> state transition weight matrices</font>

2217
01:44:31,610 --> 01:44:33,949
we still tend to use hyperbolic tanh

2218
01:44:33,949 --> 01:44:36,650
quite a lot so you'll see<font color="#E5E5E5"> I've done that</font>

2219
01:44:36,650 --> 01:44:42,170
also yeah hyperbolic<font color="#CCCCCC"> tanh</font><font color="#E5E5E5"> okay so this</font>

2220
01:44:42,170 --> 01:44:43,550
is exactly the same<font color="#E5E5E5"> as before</font><font color="#CCCCCC"> but I've</font>

2221
01:44:43,550 --> 01:44:45,739
just<font color="#E5E5E5"> replaced it with a</font><font color="#CCCCCC"> Pollard</font><font color="#E5E5E5"> and then</font>

2222
01:44:45,739 --> 01:44:50,719
here's my output yes you know so<font color="#CCCCCC"> a</font><font color="#E5E5E5"> does</font>

2223
01:44:50,719 --> 01:44:52,210
<font color="#E5E5E5">he have to do anything with convergence</font>

2224
01:44:52,210 --> 01:44:57,500
<font color="#CCCCCC">these networks yeah we'll talk</font><font color="#E5E5E5"> about</font>

2225
01:44:57,500 --> 01:45:00,560
<font color="#CCCCCC">that a little</font><font color="#E5E5E5"> bit over time</font><font color="#CCCCCC"> let's let's</font>

2226
01:45:00,560 --> 01:45:03,140
<font color="#E5E5E5">let's come back to that though for</font><font color="#CCCCCC"> now</font>

2227
01:45:03,140 --> 01:45:04,130
we're<font color="#CCCCCC"> not really going to do anything</font>

2228
01:45:04,130 --> 01:45:06,980
special<font color="#E5E5E5"> at all you know recognizing this</font>

2229
01:45:06,980 --> 01:45:09,050
<font color="#CCCCCC">is just a standard fully connected</font>

2230
01:45:09,050 --> 01:45:11,719
Network<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> interestingly it's</font>

2231
01:45:11,719 --> 01:45:16,010
quite a deep one right like because this

2232
01:45:16,010 --> 01:45:19,219
is<font color="#E5E5E5"> actually this that we've got eight of</font>

2233
01:45:19,219 --> 01:45:22,160
<font color="#E5E5E5">these things now</font><font color="#CCCCCC"> we've now</font><font color="#E5E5E5"> got a deep</font>

2234
01:45:22,160 --> 01:45:24,400
<font color="#E5E5E5">eight layer</font><font color="#CCCCCC"> Network which is why units</font>

2235
01:45:24,400 --> 01:45:26,630
starting<font color="#CCCCCC"> suggest we should be concerned</font>

2236
01:45:26,630 --> 01:45:28,670
<font color="#E5E5E5">as you</font><font color="#CCCCCC"> know as</font><font color="#E5E5E5"> we get</font><font color="#CCCCCC"> deeper and deeper</font>

2237
01:45:28,670 --> 01:45:29,989
networks they can be harder and<font color="#E5E5E5"> harder</font>

2238
01:45:29,989 --> 01:45:34,030
<font color="#CCCCCC">to</font><font color="#E5E5E5"> train but</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> try training this</font>

2239
01:45:37,530 --> 01:45:41,670
<font color="#E5E5E5">all right so when it goes as before</font>

2240
01:45:41,670 --> 01:45:45,030
<font color="#E5E5E5">we've got a batch size of 512</font><font color="#CCCCCC"> we're</font>

2241
01:45:45,030 --> 01:45:49,530
using<font color="#CCCCCC"> Adam and where it goes so</font><font color="#E5E5E5"> we will</font>

2242
01:45:49,530 --> 01:45:51,300
sit there<font color="#E5E5E5"> watching it so we can then set</font>

2243
01:45:51,300 --> 01:45:53,930
the<font color="#CCCCCC"> learning rate down back to</font><font color="#E5E5E5"> 20 neg 3</font>

2244
01:45:53,930 --> 01:45:58,710
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> fit it again</font><font color="#CCCCCC"> and yeah it's</font>

2245
01:45:58,710 --> 01:46:01,740
actually<font color="#E5E5E5"> it seems to be training fun</font>

2246
01:46:01,740 --> 01:46:05,490
<font color="#CCCCCC">okay but we're</font><font color="#E5E5E5"> gonna try something else</font>

2247
01:46:05,490 --> 01:46:07,170
which<font color="#CCCCCC"> is we're going</font><font color="#E5E5E5"> to use this a trick</font>

2248
01:46:07,170 --> 01:46:09,510
<font color="#CCCCCC">that</font><font color="#E5E5E5"> your net rather hinted at before</font>

2249
01:46:09,510 --> 01:46:11,760
<font color="#E5E5E5">which is maybe we shouldn't be adding</font>

2250
01:46:11,760 --> 01:46:14,790
<font color="#CCCCCC">these things</font><font color="#E5E5E5"> together</font><font color="#CCCCCC"> and so the</font><font color="#E5E5E5"> reason</font>

2251
01:46:14,790 --> 01:46:15,990
you<font color="#E5E5E5"> might</font><font color="#CCCCCC"> want to be feeling</font><font color="#E5E5E5"> a little</font>

2252
01:46:15,990 --> 01:46:18,030
uncomfortable<font color="#CCCCCC"> about adding these</font><font color="#E5E5E5"> things</font>

2253
01:46:18,030 --> 01:46:23,670
<font color="#CCCCCC">together is that the</font><font color="#E5E5E5"> input state and the</font>

2254
01:46:23,670 --> 01:46:26,130
hidden<font color="#E5E5E5"> state are kind of qualitatively</font>

2255
01:46:26,130 --> 01:46:28,470
different kinds of things right the

2256
01:46:28,470 --> 01:46:31,260
input state is the is the<font color="#E5E5E5"> encoding of</font>

2257
01:46:31,260 --> 01:46:34,110
<font color="#E5E5E5">this character for us H</font><font color="#CCCCCC"> represents the</font>

2258
01:46:34,110 --> 01:46:36,900
encoding of the<font color="#E5E5E5"> series of characters so</font>

2259
01:46:36,900 --> 01:46:39,780
far and so adding them together is kind

2260
01:46:39,780 --> 01:46:42,110
<font color="#CCCCCC">of potentially going</font><font color="#E5E5E5"> to lose information</font>

2261
01:46:42,110 --> 01:46:44,790
<font color="#E5E5E5">so I think what your net was going to</font>

2262
01:46:44,790 --> 01:46:46,230
prefer<font color="#CCCCCC"> that we might do is maybe to</font>

2263
01:46:46,230 --> 01:46:47,940
concatenate<font color="#E5E5E5"> these instead of adding them</font>

2264
01:46:47,940 --> 01:46:49,950
<font color="#CCCCCC">so it sound good to you you</font><font color="#E5E5E5"> know she's</font>

2265
01:46:49,950 --> 01:46:53,760
not it<font color="#E5E5E5"> okay so let's now make a copy of</font>

2266
01:46:53,760 --> 01:46:56,130
<font color="#E5E5E5">the</font><font color="#CCCCCC"> previous cell all the same right</font>

2267
01:46:56,130 --> 01:46:59,870
<font color="#CCCCCC">rather than using</font><font color="#E5E5E5"> plus let's use cat</font>

2268
01:46:59,870 --> 01:47:03,510
<font color="#E5E5E5">okay now if we can cat then we need to</font>

2269
01:47:03,510 --> 01:47:06,650
make<font color="#CCCCCC"> sure now that</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> input layer is</font>

2270
01:47:06,650 --> 01:47:11,160
not from<font color="#CCCCCC"> n fac-2</font><font color="#E5E5E5"> hidden which is what we</font>

2271
01:47:11,160 --> 01:47:12,630
had<font color="#E5E5E5"> before but because we're</font>

2272
01:47:12,630 --> 01:47:15,090
concatenated it needs to be in fact<font color="#E5E5E5"> plus</font>

2273
01:47:15,090 --> 01:47:19,590
and hidden to end hidden<font color="#E5E5E5"> okay and so now</font>

2274
01:47:19,590 --> 01:47:20,880
that's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to make all</font><font color="#E5E5E5"> the dimensions</font>

2275
01:47:20,880 --> 01:47:26,160
work nicely so this now<font color="#CCCCCC"> is of size n</font>

2276
01:47:26,160 --> 01:47:30,210
fact plus and hidden this now makes it

2277
01:47:30,210 --> 01:47:33,270
back to<font color="#E5E5E5"> size n hidden again okay and</font>

2278
01:47:33,270 --> 01:47:35,280
then this<font color="#E5E5E5"> is putting it through the same</font>

2279
01:47:35,280 --> 01:47:37,170
square<font color="#E5E5E5"> matrix as before so it's still a</font>

2280
01:47:37,170 --> 01:47:42,440
size n here okay so<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> like a good</font>

2281
01:47:42,440 --> 01:47:45,150
design heuristic if you're<font color="#CCCCCC"> designing an</font>

2282
01:47:45,150 --> 01:47:47,130
architecture is if you've got<font color="#E5E5E5"> different</font>

2283
01:47:47,130 --> 01:47:49,440
<font color="#CCCCCC">types</font><font color="#E5E5E5"> of information</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> want to</font>

2284
01:47:49,440 --> 01:47:51,460
combine<font color="#E5E5E5"> you generally want</font>

2285
01:47:51,460 --> 01:47:54,550
concatenate it<font color="#E5E5E5"> okay you know adding</font>

2286
01:47:54,550 --> 01:47:56,320
things together<font color="#E5E5E5"> even if they're the</font><font color="#CCCCCC"> same</font>

2287
01:47:56,320 --> 01:48:00,850
<font color="#CCCCCC">shape</font><font color="#E5E5E5"> is losing information okay and so</font>

2288
01:48:00,850 --> 01:48:02,230
once you've concatenated things together

2289
01:48:02,230 --> 01:48:05,460
<font color="#CCCCCC">you can always convert it back</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> to a</font>

2290
01:48:05,460 --> 01:48:08,620
fixed size by just tracking<font color="#E5E5E5"> it</font><font color="#CCCCCC"> through a</font>

2291
01:48:08,620 --> 01:48:11,560
<font color="#E5E5E5">matrix product</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> that's what we've</font>

2292
01:48:11,560 --> 01:48:12,910
done<font color="#E5E5E5"> here</font><font color="#CCCCCC"> again it's the same thing but</font>

2293
01:48:12,910 --> 01:48:17,469
<font color="#E5E5E5">now we're concatenating instead and so</font>

2294
01:48:17,469 --> 01:48:19,900
we can fit that and<font color="#E5E5E5"> so last time</font><font color="#CCCCCC"> we got</font>

2295
01:48:19,900 --> 01:48:23,620
one point seven<font color="#E5E5E5"> two this time you go at</font>

2296
01:48:23,620 --> 01:48:25,450
one point six<font color="#E5E5E5"> six so it's not setting</font>

2297
01:48:25,450 --> 01:48:26,440
the world on fire but it's an

2298
01:48:26,440 --> 01:48:28,630
improvement<font color="#CCCCCC"> and the improvements of it</font>

2299
01:48:28,630 --> 01:48:29,650
okay

2300
01:48:29,650 --> 01:48:32,739
<font color="#E5E5E5">so we can now test that with</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> next</font>

2301
01:48:32,739 --> 01:48:34,719
and so now we can<font color="#E5E5E5"> pass in eight things</font>

2302
01:48:34,719 --> 01:48:38,350
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's no before those let's go</font>

2303
01:48:38,350 --> 01:48:41,760
to a part of that<font color="#E5E5E5"> sounds good as well so</font>

2304
01:48:41,760 --> 01:48:45,070
Queens and that sounds<font color="#E5E5E5"> good too all</font>

2305
01:48:45,070 --> 01:48:49,440
right so great so that's<font color="#E5E5E5"> enough</font>

2306
01:48:49,440 --> 01:48:53,860
manual hackery<font color="#E5E5E5"> let's see if</font><font color="#CCCCCC"> pi torch</font>

2307
01:48:53,860 --> 01:48:55,930
couldn't do some of this for us<font color="#E5E5E5"> and so</font>

2308
01:48:55,930 --> 01:48:58,840
basically what<font color="#CCCCCC"> pi torch will do for</font><font color="#E5E5E5"> us</font>

2309
01:48:58,840 --> 01:49:02,130
is it will write this loop automatically

2310
01:49:02,130 --> 01:49:05,290
<font color="#E5E5E5">okay and it will create these linear</font>

2311
01:49:05,290 --> 01:49:08,680
input layers automatically<font color="#E5E5E5"> okay and so</font>

2312
01:49:08,680 --> 01:49:11,680
to ask<font color="#E5E5E5"> it to</font><font color="#CCCCCC"> do that we can use the</font><font color="#E5E5E5"> n n</font>

2313
01:49:11,680 --> 01:49:15,430
dot<font color="#CCCCCC"> R and n plus so here's the exact</font>

2314
01:49:15,430 --> 01:49:19,180
<font color="#E5E5E5">same thing in less code by taking</font>

2315
01:49:19,180 --> 01:49:21,219
advantage of<font color="#CCCCCC"> height choice and again I'm</font>

2316
01:49:21,219 --> 01:49:23,830
not<font color="#CCCCCC"> using a conceptual analogy to say</font>

2317
01:49:23,830 --> 01:49:25,690
player<font color="#CCCCCC"> torches doing</font><font color="#E5E5E5"> something like it</font>

2318
01:49:25,690 --> 01:49:28,030
<font color="#CCCCCC">I'm saying play torch is doing it now</font>

2319
01:49:28,030 --> 01:49:30,600
this<font color="#E5E5E5"> is just the</font><font color="#CCCCCC"> code you just saw</font>

2320
01:49:30,600 --> 01:49:32,500
wrapped up a little bit

2321
01:49:32,500 --> 01:49:33,760
<font color="#CCCCCC">reflect it a</font><font color="#E5E5E5"> little bit for</font><font color="#CCCCCC"> your</font>

2322
01:49:33,760 --> 01:49:36,340
convenience<font color="#CCCCCC"> right so where we say we now</font>

2323
01:49:36,340 --> 01:49:39,960
want to create<font color="#E5E5E5"> an</font><font color="#CCCCCC"> era ten call our it n</font>

2324
01:49:39,960 --> 01:49:43,660
then what<font color="#CCCCCC"> this does</font><font color="#E5E5E5"> is it does that for</font>

2325
01:49:43,660 --> 01:49:47,770
<font color="#E5E5E5">live now notice that our for loop needed</font>

2326
01:49:47,770 --> 01:49:51,550
a starting point<font color="#E5E5E5"> you remember why right</font>

2327
01:49:51,550 --> 01:49:53,410
because otherwise our for loop didn't

2328
01:49:53,410 --> 01:49:54,850
quite work we couldn't<font color="#E5E5E5"> quite refactor</font><font color="#CCCCCC"> it</font>

2329
01:49:54,850 --> 01:49:56,890
out<font color="#E5E5E5"> and because this is</font><font color="#CCCCCC"> exactly the same</font>

2330
01:49:56,890 --> 01:49:59,739
<font color="#E5E5E5">this needs our starting point to and so</font>

2331
01:49:59,739 --> 01:50:01,480
let's give it a starting point<font color="#E5E5E5"> and so</font>

2332
01:50:01,480 --> 01:50:03,550
you have to pass in your<font color="#E5E5E5"> initial hidden</font>

2333
01:50:03,550 --> 01:50:05,139
<font color="#CCCCCC">State</font>

2334
01:50:05,139 --> 01:50:07,239
for reasons that will become apparent

2335
01:50:07,239 --> 01:50:14,080
<font color="#E5E5E5">later on</font><font color="#CCCCCC"> it turns out</font><font color="#E5E5E5"> to be quite</font><font color="#CCCCCC"> useful</font>

2336
01:50:14,080 --> 01:50:17,650
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> able to get back that here in the</font>

2337
01:50:17,650 --> 01:50:20,409
state at<font color="#CCCCCC"> the end and just like we could</font>

2338
01:50:20,409 --> 01:50:21,850
here we could<font color="#E5E5E5"> actually keep track of the</font>

2339
01:50:21,850 --> 01:50:25,540
hidden<font color="#CCCCCC"> state we get back to things we</font>

2340
01:50:25,540 --> 01:50:28,330
get back both<font color="#CCCCCC"> the output and the hidden</font>

2341
01:50:28,330 --> 01:50:30,520
<font color="#CCCCCC">state right so we pass in the</font><font color="#E5E5E5"> input in</font>

2342
01:50:30,520 --> 01:50:32,020
the hidden<font color="#CCCCCC"> State when</font><font color="#E5E5E5"> we get</font><font color="#CCCCCC"> back the</font>

2343
01:50:32,020 --> 01:50:36,340
output<font color="#CCCCCC"> and the hidden state yes</font><font color="#E5E5E5"> could</font>

2344
01:50:36,340 --> 01:50:38,380
<font color="#CCCCCC">you</font><font color="#E5E5E5"> remind us what the</font><font color="#CCCCCC"> hint state</font>

2345
01:50:38,380 --> 01:50:42,940
represents the hidden state is H so it's

2346
01:50:42,940 --> 01:50:49,960
the it's the<font color="#CCCCCC"> orange circle ellipse</font><font color="#E5E5E5"> of</font>

2347
01:50:49,960 --> 01:50:54,510
activations<font color="#E5E5E5"> okay and so it is of size</font>

2348
01:50:54,510 --> 01:51:06,010
256<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so we</font><font color="#CCCCCC"> can okay</font>

2349
01:51:06,010 --> 01:51:07,659
there's one other thing<font color="#CCCCCC"> too</font><font color="#E5E5E5"> to know</font>

2350
01:51:07,659 --> 01:51:11,980
which is<font color="#CCCCCC"> in our</font><font color="#E5E5E5"> case we were replacing H</font>

2351
01:51:11,980 --> 01:51:16,360
with a new hidden<font color="#E5E5E5"> state the one minor</font>

2352
01:51:16,360 --> 01:51:19,090
difference<font color="#E5E5E5"> in pi torch is they append</font>

2353
01:51:19,090 --> 01:51:22,330
the<font color="#CCCCCC"> new hidden state to a list or to a</font>

2354
01:51:22,330 --> 01:51:24,400
tensor which gets bigger and bigger<font color="#CCCCCC"> so</font>

2355
01:51:24,400 --> 01:51:25,929
they<font color="#CCCCCC"> actually give you back</font><font color="#E5E5E5"> all of the</font>

2356
01:51:25,929 --> 01:51:27,730
hidden<font color="#CCCCCC"> states so in other</font><font color="#E5E5E5"> words rather</font>

2357
01:51:27,730 --> 01:51:29,400
than<font color="#E5E5E5"> just giving you back</font><font color="#CCCCCC"> the final</font>

2358
01:51:29,400 --> 01:51:32,020
<font color="#E5E5E5">ellipse they give you back all the</font>

2359
01:51:32,020 --> 01:51:33,310
ellipses stacked on top of each other

2360
01:51:33,310 --> 01:51:35,350
<font color="#CCCCCC">and</font><font color="#E5E5E5"> so because</font><font color="#CCCCCC"> we just</font><font color="#E5E5E5"> want the final</font>

2361
01:51:35,350 --> 01:51:38,110
one<font color="#CCCCCC"> I was got indexed into</font><font color="#E5E5E5"> it with minus</font>

2362
01:51:38,110 --> 01:51:40,989
<font color="#E5E5E5">one here okay other than that this is</font>

2363
01:51:40,989 --> 01:51:44,080
<font color="#E5E5E5">the same code as before put that through</font>

2364
01:51:44,080 --> 01:51:46,300
our output layer<font color="#E5E5E5"> to get the correct</font>

2365
01:51:46,300 --> 01:51:50,940
vocab size and then<font color="#E5E5E5"> we can train that</font>

2366
01:51:57,630 --> 01:51:59,560
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so you can see here I</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> it</font>

2367
01:51:59,560 --> 01:52:01,239
manually<font color="#E5E5E5"> I can create some hidden</font><font color="#CCCCCC"> state</font>

2368
01:52:01,239 --> 01:52:03,520
I can pass it<font color="#CCCCCC"> to that</font><font color="#E5E5E5"> area and I can see</font>

2369
01:52:03,520 --> 01:52:08,369
the stuff<font color="#CCCCCC"> I</font><font color="#E5E5E5"> get back</font><font color="#CCCCCC"> you'll see that the</font>

2370
01:52:08,369 --> 01:52:12,429
dimensionality of H<font color="#E5E5E5"> it's actually a rank</font>

2371
01:52:12,429 --> 01:52:16,179
<font color="#CCCCCC">3 tensor</font><font color="#E5E5E5"> where else in my version it was</font>

2372
01:52:16,179 --> 01:52:18,239
<font color="#CCCCCC">a</font>

2373
01:52:19,020 --> 01:52:23,140
let's see it was a<font color="#E5E5E5"> rank two tensor okay</font>

2374
01:52:23,140 --> 01:52:25,180
and the difference is here we've got

2375
01:52:25,180 --> 01:52:28,480
<font color="#E5E5E5">just</font><font color="#CCCCCC"> a unit axis at the</font><font color="#E5E5E5"> front</font><font color="#CCCCCC"> we'll</font>

2376
01:52:28,480 --> 01:52:30,280
learn more about<font color="#E5E5E5"> why that</font><font color="#CCCCCC"> is later but</font>

2377
01:52:30,280 --> 01:52:32,440
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> it turns out you can have</font><font color="#CCCCCC"> a</font>

2378
01:52:32,440 --> 01:52:34,840
second<font color="#CCCCCC"> R</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> n</font><font color="#E5E5E5"> that goes backwards</font>

2379
01:52:34,840 --> 01:52:36,940
<font color="#CCCCCC">alright one that goes forwards one</font><font color="#E5E5E5"> that</font>

2380
01:52:36,940 --> 01:52:38,740
goes backwards from the idea is<font color="#E5E5E5"> neck and</font>

2381
01:52:38,740 --> 01:52:40,530
then it's<font color="#E5E5E5"> going to be better at finding</font>

2382
01:52:40,530 --> 01:52:43,330
relationships<font color="#CCCCCC"> that</font><font color="#E5E5E5"> kind of go backwards</font>

2383
01:52:43,330 --> 01:52:44,920
that's quite a bi-directional<font color="#CCCCCC"> eridan</font>

2384
01:52:44,920 --> 01:52:47,020
<font color="#E5E5E5">also it turns out you can have</font><font color="#CCCCCC"> an error</font>

2385
01:52:47,020 --> 01:52:48,730
<font color="#E5E5E5">in feed to an iron in that's got a</font>

2386
01:52:48,730 --> 01:52:51,580
multi-layer<font color="#E5E5E5"> eridan so basically if you</font>

2387
01:52:51,580 --> 01:52:53,940
<font color="#CCCCCC">have those things</font><font color="#E5E5E5"> you need an additional</font>

2388
01:52:53,940 --> 01:52:56,170
access on your tensor to keep track of

2389
01:52:56,170 --> 01:52:58,450
<font color="#CCCCCC">those</font><font color="#E5E5E5"> additional layers</font><font color="#CCCCCC"> of hidden</font><font color="#E5E5E5"> state</font>

2390
01:52:58,450 --> 01:53:01,690
but for now<font color="#E5E5E5"> we'll always</font><font color="#CCCCCC"> have a one yeah</font>

2391
01:53:01,690 --> 01:53:05,650
<font color="#CCCCCC">and we'll</font><font color="#E5E5E5"> always also get back a one at</font>

2392
01:53:05,650 --> 01:53:10,210
the end<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so if we go ahead and</font><font color="#E5E5E5"> fit</font>

2393
01:53:10,210 --> 01:53:13,930
this<font color="#E5E5E5"> now let's actually trade it for a</font>

2394
01:53:13,930 --> 01:53:14,490
bit<font color="#CCCCCC"> longer</font>

2395
01:53:14,490 --> 01:53:17,950
<font color="#CCCCCC">okay so last time we only kind of</font><font color="#E5E5E5"> did a</font>

2396
01:53:17,950 --> 01:53:20,230
couple<font color="#E5E5E5"> of epochs this time we're due for</font>

2397
01:53:20,230 --> 01:53:21,970
a<font color="#E5E5E5"> pox</font>

2398
01:53:21,970 --> 01:53:24,780
what<font color="#CCCCCC"> have we</font><font color="#E5E5E5"> sit at one in egg three and</font>

2399
01:53:24,780 --> 01:53:28,060
then we'll do another<font color="#E5E5E5"> to epochs</font><font color="#CCCCCC"> at one</font>

2400
01:53:28,060 --> 01:53:31,090
in egg four and so we've now<font color="#CCCCCC"> got our</font>

2401
01:53:31,090 --> 01:53:34,330
lost down to<font color="#E5E5E5"> one point five so getting</font>

2402
01:53:34,330 --> 01:53:39,610
<font color="#E5E5E5">better and better so</font><font color="#CCCCCC"> here's our get next</font>

2403
01:53:39,610 --> 01:53:43,060
again<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and you know let's just it</font>

2404
01:53:43,060 --> 01:53:45,250
was<font color="#E5E5E5"> the same thing so what we can now do</font>

2405
01:53:45,250 --> 01:53:49,090
is we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> look through</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> forty</font><font color="#E5E5E5"> times</font>

2406
01:53:49,090 --> 01:53:52,090
<font color="#E5E5E5">calling get next each time and then each</font>

2407
01:53:52,090 --> 01:53:54,460
time<font color="#E5E5E5"> will replace our input by removing</font>

2408
01:53:54,460 --> 01:53:56,710
the first character and adding the thing

2409
01:53:56,710 --> 01:53:58,780
that we<font color="#CCCCCC"> just predicted and so that way</font>

2410
01:53:58,780 --> 01:54:00,970
we can like feed in a new set<font color="#CCCCCC"> of eight</font>

2411
01:54:00,970 --> 01:54:02,610
characters<font color="#E5E5E5"> that get them again and again</font>

2412
01:54:02,610 --> 01:54:05,260
<font color="#CCCCCC">and so</font><font color="#E5E5E5"> that way we'll call that get next</font>

2413
01:54:05,260 --> 01:54:09,010
in so here are<font color="#E5E5E5"> 40 characters that we've</font>

2414
01:54:09,010 --> 01:54:11,380
generated<font color="#E5E5E5"> so we started out with four th</font>

2415
01:54:11,380 --> 01:54:14,890
<font color="#E5E5E5">OS so we got</font><font color="#CCCCCC"> four those of the</font><font color="#E5E5E5"> same -</font>

2416
01:54:14,890 --> 01:54:17,290
the same - the same you can probably

2417
01:54:17,290 --> 01:54:18,190
guess<font color="#E5E5E5"> what happens if</font><font color="#CCCCCC"> you can't</font>

2418
01:54:18,190 --> 01:54:20,620
predicting the same<font color="#CCCCCC"> - the same all right</font>

2419
01:54:20,620 --> 01:54:25,690
<font color="#CCCCCC">so it's you know it's doing okay we we</font>

2420
01:54:25,690 --> 01:54:31,420
now have something<font color="#E5E5E5"> which you know</font>

2421
01:54:31,420 --> 01:54:33,610
we've basically built<font color="#E5E5E5"> from scratch and</font>

2422
01:54:33,610 --> 01:54:37,240
then we've said here's how<font color="#CCCCCC"> high torture</font>

2423
01:54:37,240 --> 01:54:39,610
effected it for us<font color="#CCCCCC"> so if you want to</font>

2424
01:54:39,610 --> 01:54:41,260
like have an interesting little homework

2425
01:54:41,260 --> 01:54:44,410
assignment this week<font color="#E5E5E5"> try to write</font><font color="#CCCCCC"> your</font>

2426
01:54:44,410 --> 01:54:48,160
<font color="#CCCCCC">own version</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> an RNN plus all</font><font color="#E5E5E5"> right</font>

2427
01:54:48,160 --> 01:54:51,550
<font color="#E5E5E5">like try to like literally like create</font>

2428
01:54:51,550 --> 01:54:53,560
<font color="#E5E5E5">your like you know Jeremy's aren't in</font>

2429
01:54:53,560 --> 01:54:55,840
and then like type in here

2430
01:54:55,840 --> 01:54:58,690
Jeremy's<font color="#CCCCCC"> aren't in or in your case maybe</font>

2431
01:54:58,690 --> 01:55:00,810
your name's not<font color="#E5E5E5"> Jeremy which is</font><font color="#CCCCCC"> okay too</font>

2432
01:55:00,810 --> 01:55:04,210
<font color="#E5E5E5">and then get it</font><font color="#CCCCCC"> to run writing your</font>

2433
01:55:04,210 --> 01:55:06,100
implementation<font color="#E5E5E5"> that's fast from scratch</font>

2434
01:55:06,100 --> 01:55:07,420
<font color="#CCCCCC">without looking at the piped water</font>

2435
01:55:07,420 --> 01:55:10,210
source code<font color="#E5E5E5"> you know like basically it's</font>

2436
01:55:10,210 --> 01:55:12,010
<font color="#E5E5E5">just a case of like going up and seeing</font>

2437
01:55:12,010 --> 01:55:14,680
what we did back here<font color="#E5E5E5"> right and like</font>

2438
01:55:14,680 --> 01:55:17,290
make sure<font color="#CCCCCC"> you get</font><font color="#E5E5E5"> the same answers and</font>

2439
01:55:17,290 --> 01:55:19,120
confirm that<font color="#E5E5E5"> you do so that's kind of a</font>

2440
01:55:19,120 --> 01:55:21,760
<font color="#E5E5E5">good little test simply simple at all</font>

2441
01:55:21,760 --> 01:55:24,130
assignment<font color="#CCCCCC"> but I</font><font color="#E5E5E5"> think you'll feel</font>

2442
01:55:24,130 --> 01:55:25,630
<font color="#E5E5E5">really good when</font><font color="#CCCCCC"> you seem like oh I've</font>

2443
01:55:25,630 --> 01:55:29,910
just<font color="#E5E5E5"> reimplemented an end alone in</font>

2444
01:55:30,390 --> 01:55:36,160
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'm going to</font><font color="#E5E5E5"> do one other</font>

2445
01:55:36,160 --> 01:55:37,750
thing<font color="#E5E5E5"> when I switched from this one when</font>

2446
01:55:37,750 --> 01:55:40,030
I've moved the<font color="#E5E5E5"> car one input</font><font color="#CCCCCC"> inside the</font>

2447
01:55:40,030 --> 01:55:41,530
dotted line right this<font color="#E5E5E5"> dotted rectangle</font>

2448
01:55:41,530 --> 01:55:44,070
represents the thing I'm repeating<font color="#E5E5E5"> I</font>

2449
01:55:44,070 --> 01:55:47,580
also<font color="#E5E5E5"> watch the triangle the output</font><font color="#CCCCCC"> I</font>

2450
01:55:47,580 --> 01:55:51,130
moved that inside as well now that's<font color="#E5E5E5"> a</font>

2451
01:55:51,130 --> 01:55:51,930
big difference

2452
01:55:51,930 --> 01:55:55,800
<font color="#E5E5E5">because now what I've actually done is</font>

2453
01:55:55,800 --> 01:55:59,140
I'm<font color="#E5E5E5"> actually saying spit out an</font><font color="#CCCCCC"> output</font>

2454
01:55:59,140 --> 01:56:03,670
after<font color="#CCCCCC"> every one of these circles</font><font color="#E5E5E5"> so spit</font>

2455
01:56:03,670 --> 01:56:07,200
out an<font color="#CCCCCC"> output here</font><font color="#E5E5E5"> and here and here</font>

2456
01:56:07,200 --> 01:56:09,730
<font color="#CCCCCC">alright so in other words if I have a</font>

2457
01:56:09,730 --> 01:56:12,070
three character<font color="#E5E5E5"> input I'm going to spit</font>

2458
01:56:12,070 --> 01:56:13,780
out a<font color="#E5E5E5"> three character output I'm saying</font>

2459
01:56:13,780 --> 01:56:15,580
<font color="#CCCCCC">half</font><font color="#E5E5E5"> the character</font><font color="#CCCCCC"> 1 this will</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> next</font>

2460
01:56:15,580 --> 01:56:17,470
after character to this be next<font color="#CCCCCC"> after</font>

2461
01:56:17,470 --> 01:56:20,640
<font color="#E5E5E5">character 3 this will be next</font>

2462
01:56:20,640 --> 01:56:24,240
so again<font color="#CCCCCC"> nothing different</font>

2463
01:56:24,240 --> 01:56:26,470
<font color="#E5E5E5">and again this you know if you want to</font>

2464
01:56:26,470 --> 01:56:28,870
go a<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> further with the assignment you</font>

2465
01:56:28,870 --> 01:56:31,450
could write this by hand as well<font color="#CCCCCC"> but</font>

2466
01:56:31,450 --> 01:56:33,130
<font color="#CCCCCC">basically what we're saying</font><font color="#E5E5E5"> is in the</font>

2467
01:56:33,130 --> 01:56:37,590
for loop<font color="#CCCCCC"> would</font><font color="#E5E5E5"> be saying like you know</font>

2468
01:56:37,590 --> 01:56:41,350
<font color="#CCCCCC">results</font><font color="#E5E5E5"> equals some empty list right and</font>

2469
01:56:41,350 --> 01:56:42,730
then would<font color="#E5E5E5"> be going through and rather</font>

2470
01:56:42,730 --> 01:56:44,960
<font color="#E5E5E5">than returning that</font>

2471
01:56:44,960 --> 01:56:48,950
we're instead be saying you know<font color="#E5E5E5"> results</font>

2472
01:56:48,950 --> 01:56:55,400
dot append<font color="#CCCCCC"> that right</font><font color="#E5E5E5"> and then like</font>

2473
01:56:55,400 --> 01:57:00,680
return whatever<font color="#E5E5E5"> torch dot stat something</font>

2474
01:57:00,680 --> 01:57:02,480
like<font color="#E5E5E5"> that right that it made me</font><font color="#CCCCCC"> right in</font>

2475
01:57:02,480 --> 01:57:05,750
<font color="#CCCCCC">my</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> so now you know</font><font color="#E5E5E5"> we now have</font>

2476
01:57:05,750 --> 01:57:09,610
like every step we've created an output

2477
01:57:09,610 --> 01:57:13,130
<font color="#E5E5E5">okay so which is basically this picture</font>

2478
01:57:13,130 --> 01:57:16,610
and so the reason<font color="#CCCCCC"> was lots of reasons</font>

2479
01:57:16,610 --> 01:57:19,400
that's interesting<font color="#CCCCCC"> but I think the main</font>

2480
01:57:19,400 --> 01:57:21,560
reason<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now that's</font><font color="#E5E5E5"> interesting is</font>

2481
01:57:21,560 --> 01:57:29,120
that<font color="#E5E5E5"> you probably noticed this this</font>

2482
01:57:29,120 --> 01:57:32,060
approach to<font color="#E5E5E5"> dealing with our data seems</font>

2483
01:57:32,060 --> 01:57:34,510
terribly inefficient<font color="#CCCCCC"> like we're grabbing</font>

2484
01:57:34,510 --> 01:57:38,660
the first eight right but then this next

2485
01:57:38,660 --> 01:57:41,960
<font color="#E5E5E5">set all but one of them overlap the</font>

2486
01:57:41,960 --> 01:57:45,370
previous<font color="#E5E5E5"> one right so we're kind of like</font>

2487
01:57:45,370 --> 01:57:48,230
recalculating<font color="#E5E5E5"> the</font><font color="#CCCCCC"> exact set of</font>

2488
01:57:48,230 --> 01:57:50,210
embeddings<font color="#E5E5E5"> seven out of eight of them</font>

2489
01:57:50,210 --> 01:57:51,670
are going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be exact same embeddings</font>

2490
01:57:51,670 --> 01:57:55,790
right<font color="#CCCCCC"> exact same transitions it kind of</font>

2491
01:57:55,790 --> 01:57:58,160
seems weird to<font color="#E5E5E5"> like do all this</font>

2492
01:57:58,160 --> 01:58:00,740
calculation<font color="#E5E5E5"> to just predict one thing</font>

2493
01:58:00,740 --> 01:58:02,840
and then go back<font color="#CCCCCC"> and recalculate seven</font>

2494
01:58:02,840 --> 01:58:04,220
out of eight<font color="#E5E5E5"> of them and add one more</font><font color="#CCCCCC"> to</font>

2495
01:58:04,220 --> 01:58:06,680
<font color="#CCCCCC">the end</font><font color="#E5E5E5"> to calculate the next thing all</font>

2496
01:58:06,680 --> 01:58:06,980
<font color="#E5E5E5">right</font>

2497
01:58:06,980 --> 01:58:09,590
so the basic idea then is to<font color="#CCCCCC"> say well</font>

2498
01:58:09,590 --> 01:58:16,430
let's<font color="#E5E5E5"> not do it that way instead let's</font>

2499
01:58:16,430 --> 01:58:18,080
taking<font color="#CCCCCC"> non overlapping sets of</font>

2500
01:58:18,080 --> 01:58:22,730
characters<font color="#E5E5E5"> all right so like so here is</font>

2501
01:58:22,730 --> 01:58:25,460
our<font color="#E5E5E5"> first eight characters here is the</font>

2502
01:58:25,460 --> 01:58:27,470
next day characters here are the<font color="#E5E5E5"> next</font>

2503
01:58:27,470 --> 01:58:29,860
<font color="#CCCCCC">day characters so like if you</font><font color="#E5E5E5"> read this</font>

2504
01:58:29,860 --> 01:58:32,780
top left<font color="#E5E5E5"> to bottom right that</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> be</font>

2505
01:58:32,780 --> 01:58:38,240
<font color="#CCCCCC">the whole</font><font color="#E5E5E5"> nature right and so then if</font>

2506
01:58:38,240 --> 01:58:39,850
these are<font color="#E5E5E5"> the first eight characters</font>

2507
01:58:39,850 --> 01:58:43,940
then offset<font color="#E5E5E5"> this by one starting here</font>

2508
01:58:43,940 --> 01:58:48,830
that's a list of outputs right so after

2509
01:58:48,830 --> 01:58:51,110
<font color="#CCCCCC">we see characters zero through seven</font>

2510
01:58:51,110 --> 01:58:54,040
<font color="#E5E5E5">we should predict characters</font><font color="#CCCCCC"> 1 through 8</font>

2511
01:58:54,040 --> 01:58:58,440
<font color="#CCCCCC">the XS so after 40 should come 42</font>

2512
01:58:58,440 --> 01:59:02,820
as it did after<font color="#E5E5E5"> 42 should come 29 as it</font>

2513
01:59:02,820 --> 01:59:05,670
did okay<font color="#E5E5E5"> and so now</font><font color="#CCCCCC"> that can be our</font>

2514
01:59:05,670 --> 01:59:11,100
inputs and labels<font color="#E5E5E5"> for that model and so</font>

2515
01:59:11,100 --> 01:59:14,489
it shouldn't<font color="#E5E5E5"> be any more or</font><font color="#CCCCCC"> less</font>

2516
01:59:14,489 --> 01:59:17,250
accurate<font color="#CCCCCC"> it should</font><font color="#E5E5E5"> just be the same</font>

2517
01:59:17,250 --> 01:59:20,940
right<font color="#E5E5E5"> pretty much</font><font color="#CCCCCC"> but it should allow us</font>

2518
01:59:20,940 --> 01:59:27,390
<font color="#CCCCCC">to do it</font><font color="#E5E5E5"> more efficiently so let's try</font>

2519
01:59:27,390 --> 01:59:34,580
that<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

2520
01:59:34,580 --> 01:59:39,800
so I mentioned<font color="#CCCCCC"> last time that we had a</font>

2521
01:59:40,489 --> 01:59:43,500
minus 1 index here<font color="#E5E5E5"> because we just</font>

2522
01:59:43,500 --> 01:59:48,239
wanted to<font color="#E5E5E5"> grab the last triangle okay so</font>

2523
01:59:48,239 --> 01:59:50,250
in this<font color="#E5E5E5"> case we're going to grab all the</font>

2524
01:59:50,250 --> 01:59:52,410
triangles<font color="#E5E5E5"> so this this is actually</font><font color="#CCCCCC"> the</font>

2525
01:59:52,410 --> 01:59:55,949
way<font color="#E5E5E5"> it end on RNN creates things we we</font>

2526
01:59:55,949 --> 01:59:58,350
only<font color="#E5E5E5"> kept the last one but this time</font>

2527
01:59:58,350 --> 02:00:06,000
we're<font color="#E5E5E5"> going to keep all of them so we've</font>

2528
02:00:06,000 --> 02:00:07,890
made one<font color="#E5E5E5"> change which is to remove that</font>

2529
02:00:07,890 --> 02:00:12,090
minus<font color="#E5E5E5"> one other than that this is the</font>

2530
02:00:12,090 --> 02:00:22,739
exact same code<font color="#E5E5E5"> as before okay so but</font>

2531
02:00:22,739 --> 02:00:24,120
there's nothing much to show<font color="#E5E5E5"> you here I</font>

2532
02:00:24,120 --> 02:00:26,550
mean except of course<font color="#E5E5E5"> at this time if we</font>

2533
02:00:26,550 --> 02:00:31,260
look at the<font color="#E5E5E5"> labels it's now 512 by eight</font>

2534
02:00:31,260 --> 02:00:33,600
factors we're trying to predict<font color="#E5E5E5"> eight</font>

2535
02:00:33,600 --> 02:00:38,670
things every<font color="#CCCCCC"> time through so there is</font>

2536
02:00:38,670 --> 02:00:42,120
one complexity here which is<font color="#E5E5E5"> that we</font>

2537
02:00:42,120 --> 02:00:46,670
want<font color="#E5E5E5"> to use the negative log likelihood</font>

2538
02:00:46,670 --> 02:00:50,910
loss function as before<font color="#CCCCCC"> right but the</font>

2539
02:00:50,910 --> 02:00:53,400
ligand if lost likelihood loss function

2540
02:00:53,400 --> 02:00:56,870
just<font color="#E5E5E5"> like our MSE expects to receive to</font>

2541
02:00:56,870 --> 02:00:59,910
<font color="#CCCCCC">rank one tensors</font><font color="#E5E5E5"> actually with the</font>

2542
02:00:59,910 --> 02:01:02,550
mini-batch access to rank two tensors

2543
02:01:02,550 --> 02:01:05,550
<font color="#E5E5E5">all right so</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> to mini-batches of</font>

2544
02:01:05,550 --> 02:01:11,960
vectors<font color="#CCCCCC"> problem is</font><font color="#E5E5E5"> that we've got</font>

2545
02:01:12,330 --> 02:01:15,370
<font color="#E5E5E5">eight-time steps you know</font><font color="#CCCCCC"> it characters</font>

2546
02:01:15,370 --> 02:01:18,190
in an RNN we call it a time step<font color="#CCCCCC"> right</font>

2547
02:01:18,190 --> 02:01:20,949
we have<font color="#E5E5E5"> eight time steps</font><font color="#CCCCCC"> and then for</font>

2548
02:01:20,949 --> 02:01:24,370
each<font color="#CCCCCC"> one we</font><font color="#E5E5E5"> have 84 probabilities we</font>

2549
02:01:24,370 --> 02:01:27,989
have the<font color="#CCCCCC"> probability for every</font><font color="#E5E5E5"> single</font>

2550
02:01:27,989 --> 02:01:30,940
one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those eight times deaths and then</font>

2551
02:01:30,940 --> 02:01:34,929
we have that for each of<font color="#CCCCCC"> our 512 items</font>

2552
02:01:34,929 --> 02:01:37,389
in the mini batch<font color="#E5E5E5"> so we have a rank</font><font color="#CCCCCC"> 3</font>

2553
02:01:37,389 --> 02:01:42,280
<font color="#E5E5E5">tensor not a rank two tensor</font><font color="#CCCCCC"> um so that</font>

2554
02:01:42,280 --> 02:01:44,230
means that<font color="#CCCCCC"> the negative log likelihood</font>

2555
02:01:44,230 --> 02:01:46,179
loss function is going to spit out an

2556
02:01:46,179 --> 02:01:48,760
error<font color="#CCCCCC"> now frankly I think</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is kind</font>

2557
02:01:48,760 --> 02:01:50,230
of dumb<font color="#CCCCCC"> you know I think it</font><font color="#E5E5E5"> would be</font>

2558
02:01:50,230 --> 02:01:54,429
better if<font color="#CCCCCC"> PI torch had written the loss</font>

2559
02:01:54,429 --> 02:01:56,739
functions in such a way that<font color="#E5E5E5"> they didn't</font>

2560
02:01:56,739 --> 02:01:59,110
care<font color="#E5E5E5"> at all about rank and they just</font>

2561
02:01:59,110 --> 02:02:01,870
applied it<font color="#CCCCCC"> to whatever</font><font color="#E5E5E5"> rank you gave it</font>

2562
02:02:01,870 --> 02:02:05,260
<font color="#E5E5E5">but for now</font><font color="#CCCCCC"> at least it does care about</font>

2563
02:02:05,260 --> 02:02:07,719
<font color="#CCCCCC">rick</font><font color="#E5E5E5"> but the nice thing is I get</font><font color="#CCCCCC"> to show</font>

2564
02:02:07,719 --> 02:02:09,310
<font color="#E5E5E5">you how to write a custom loss function</font>

2565
02:02:09,310 --> 02:02:11,550
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> we're going to</font><font color="#E5E5E5"> create a special</font>

2566
02:02:11,550 --> 02:02:14,530
negative log likelihood loss function

2567
02:02:14,530 --> 02:02:17,110
for sequences<font color="#CCCCCC"> okay and so it's going to</font>

2568
02:02:17,110 --> 02:02:19,179
take<font color="#E5E5E5"> an input in the target and it's got</font>

2569
02:02:19,179 --> 02:02:21,550
a call<font color="#CCCCCC"> f</font><font color="#E5E5E5"> dot negative log likelihood</font>

2570
02:02:21,550 --> 02:02:25,199
lost so the pipe<font color="#CCCCCC"> launched</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

2571
02:02:25,199 --> 02:02:28,000
but what we're going<font color="#CCCCCC"> to do is we're</font>

2572
02:02:28,000 --> 02:02:33,190
going<font color="#E5E5E5"> to flatten our input</font><font color="#CCCCCC"> and we're</font>

2573
02:02:33,190 --> 02:02:37,290
going to flatten<font color="#E5E5E5"> our targets right and</font>

2574
02:02:37,290 --> 02:02:40,300
so and it turns<font color="#E5E5E5"> out these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to</font>

2575
02:02:40,300 --> 02:02:45,340
be the first two axes<font color="#E5E5E5"> that I have to be</font>

2576
02:02:45,340 --> 02:02:50,500
transposed<font color="#E5E5E5"> so the way PI torch handles</font>

2577
02:02:50,500 --> 02:02:54,070
<font color="#E5E5E5">are and end data by default is the first</font>

2578
02:02:54,070 --> 02:02:56,860
axis is the sequence length in this<font color="#E5E5E5"> case</font>

2579
02:02:56,860 --> 02:02:59,199
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> right so the sequence length of an</font>

2580
02:02:59,199 --> 02:03:02,770
R and<font color="#E5E5E5"> n is how many times deaths so we</font>

2581
02:03:02,770 --> 02:03:04,449
have<font color="#E5E5E5"> eight characters so a sequence</font>

2582
02:03:04,449 --> 02:03:06,850
length of<font color="#E5E5E5"> eight</font><font color="#CCCCCC"> the second axis is the</font>

2583
02:03:06,850 --> 02:03:10,090
batch size<font color="#E5E5E5"> and then as would expect the</font>

2584
02:03:10,090 --> 02:03:12,520
third axis is the actual<font color="#E5E5E5"> hidden state</font>

2585
02:03:12,520 --> 02:03:15,989
itself<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so this is going to be</font><font color="#CCCCCC"> eight</font>

2586
02:03:15,989 --> 02:03:22,830
by 512 by<font color="#E5E5E5"> n hidden which I think was 256</font>

2587
02:03:22,830 --> 02:03:24,650
yeah

2588
02:03:24,650 --> 02:03:28,550
<font color="#E5E5E5">okay so we can grab the size and unpack</font>

2589
02:03:28,550 --> 02:03:31,370
<font color="#CCCCCC">it into each of these sequence length</font>

2590
02:03:31,370 --> 02:03:39,550
batch size and I'm hidden<font color="#E5E5E5"> now target</font>

2591
02:03:39,790 --> 02:03:49,850
<font color="#CCCCCC">mighty</font><font color="#E5E5E5"> dot size is 512 by 8 where else</font>

2592
02:03:49,850 --> 02:03:53,270
this one here was<font color="#E5E5E5"> 8 by 512 so to make</font>

2593
02:03:53,270 --> 02:03:55,070
them match<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to have to</font>

2594
02:03:55,070 --> 02:04:00,360
transpose the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> two axis okay</font>

2595
02:04:00,360 --> 02:04:01,540
[Music]

2596
02:04:01,540 --> 02:04:04,100
<font color="#E5E5E5">hi torch when you do something like</font>

2597
02:04:04,100 --> 02:04:06,500
transpose doesn't generally actually

2598
02:04:06,500 --> 02:04:09,380
<font color="#E5E5E5">shuffle the memory order but instead it</font>

2599
02:04:09,380 --> 02:04:11,530
<font color="#CCCCCC">just kind of keeps some internal</font>

2600
02:04:11,530 --> 02:04:13,940
metadata to say like hey you should

2601
02:04:13,940 --> 02:04:17,830
<font color="#E5E5E5">treat this as if</font><font color="#CCCCCC"> it's transposed and</font>

2602
02:04:17,830 --> 02:04:20,630
some things in<font color="#E5E5E5"> pi torch will give you an</font>

2603
02:04:20,630 --> 02:04:23,270
error if you<font color="#E5E5E5"> try</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> use it when it has</font>

2604
02:04:23,270 --> 02:04:26,239
these like this internal state and I

2605
02:04:26,239 --> 02:04:30,949
basically<font color="#E5E5E5"> say error this tensor is not</font>

2606
02:04:30,949 --> 02:04:33,260
contiguous<font color="#CCCCCC"> if you ever see that error at</font>

2607
02:04:33,260 --> 02:04:35,510
the word contiguous after it and it goes

2608
02:04:35,510 --> 02:04:38,150
<font color="#CCCCCC">away so I</font><font color="#E5E5E5"> don't know they can't do that</font>

2609
02:04:38,150 --> 02:04:39,739
for you<font color="#E5E5E5"> apparently</font><font color="#CCCCCC"> so in this particular</font>

2610
02:04:39,739 --> 02:04:41,510
case<font color="#E5E5E5"> I got that error so I wrote the</font>

2611
02:04:41,510 --> 02:04:44,239
<font color="#E5E5E5">code contiguous after it okay and so</font>

2612
02:04:44,239 --> 02:04:46,340
then<font color="#E5E5E5"> finally we need</font><font color="#CCCCCC"> to flatten it out</font>

2613
02:04:46,340 --> 02:04:49,130
into<font color="#CCCCCC"> a single vector</font><font color="#E5E5E5"> and so we can just</font>

2614
02:04:49,130 --> 02:04:50,900
<font color="#E5E5E5">go a dot view which is the same as</font><font color="#CCCCCC"> non</font>

2615
02:04:50,900 --> 02:04:53,719
<font color="#CCCCCC">PI dot</font><font color="#E5E5E5"> reshape and minus</font><font color="#CCCCCC"> one means as</font>

2616
02:04:53,719 --> 02:04:58,850
long<font color="#E5E5E5"> as it</font><font color="#CCCCCC"> needs to be okay</font><font color="#E5E5E5"> and then the</font>

2617
02:04:58,850 --> 02:05:02,120
input<font color="#E5E5E5"> again we also reshape that right</font>

2618
02:05:02,120 --> 02:05:05,870
but remember<font color="#CCCCCC"> the input sorry the the the</font>

2619
02:05:05,870 --> 02:05:09,920
predictions<font color="#E5E5E5"> also have this axis of</font>

2620
02:05:09,920 --> 02:05:11,870
length 84 all of the predicted

2621
02:05:11,870 --> 02:05:15,850
probabilities okay<font color="#E5E5E5"> so so here's a custom</font>

2622
02:05:15,850 --> 02:05:18,440
these are custom<font color="#CCCCCC"> lost function that's</font><font color="#E5E5E5"> it</font>

2623
02:05:18,440 --> 02:05:20,420
<font color="#E5E5E5">right so if you ever want</font><font color="#CCCCCC"> to play around</font>

2624
02:05:20,420 --> 02:05:22,850
<font color="#E5E5E5">with your own loss functions you can</font>

2625
02:05:22,850 --> 02:05:27,230
<font color="#E5E5E5">just do that like so and then pass that</font>

2626
02:05:27,230 --> 02:05:30,710
to fit<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so it's important to</font>

2627
02:05:30,710 --> 02:05:34,400
remember<font color="#E5E5E5"> that Fitch is this like lowest</font>

2628
02:05:34,400 --> 02:05:37,480
<font color="#E5E5E5">level fast AI abstraction</font>

2629
02:05:37,480 --> 02:05:39,790
that's--it's<font color="#E5E5E5"> that this is the thing that</font>

2630
02:05:39,790 --> 02:05:42,460
implements the training look<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and so</font>

2631
02:05:42,460 --> 02:05:45,970
like<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> the stuff you pass it in is</font>

2632
02:05:45,970 --> 02:05:50,500
all standard<font color="#CCCCCC"> pi torch stuff</font><font color="#E5E5E5"> except</font><font color="#CCCCCC"> for</font>

2633
02:05:50,500 --> 02:05:53,290
this this<font color="#E5E5E5"> is our model data object this</font>

2634
02:05:53,290 --> 02:05:56,010
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that wraps up the test set</font>

2635
02:05:56,010 --> 02:05:58,600
<font color="#E5E5E5">the training set and the validation set</font>

2636
02:05:58,600 --> 02:06:01,420
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> that okay your neck could you</font>

2637
02:06:01,420 --> 02:06:06,460
pass<font color="#CCCCCC"> that back so when we pull the</font>

2638
02:06:06,460 --> 02:06:09,820
<font color="#E5E5E5">triangle into the</font><font color="#CCCCCC"> replicator</font><font color="#E5E5E5"> structure</font>

2639
02:06:09,820 --> 02:06:13,480
right<font color="#E5E5E5"> so the the first</font><font color="#CCCCCC"> n minus one</font>

2640
02:06:13,480 --> 02:06:15,910
iterations of the sequence length we

2641
02:06:15,910 --> 02:06:18,220
don't see the<font color="#E5E5E5"> whole sequence length yeah</font>

2642
02:06:18,220 --> 02:06:20,500
so does<font color="#CCCCCC"> that mean that the batch size</font>

2643
02:06:20,500 --> 02:06:24,760
should<font color="#E5E5E5"> be much bigger</font><font color="#CCCCCC"> so that be careful</font>

2644
02:06:24,760 --> 02:06:26,080
you don't<font color="#E5E5E5"> mean that size you main</font>

2645
02:06:26,080 --> 02:06:28,210
sequence<font color="#CCCCCC"> length right because the batch</font>

2646
02:06:28,210 --> 02:06:31,930
size is like<font color="#CCCCCC"> some firing yeah okay</font><font color="#E5E5E5"> so</font>

2647
02:06:31,930 --> 02:06:34,989
yes yes if you have a short<font color="#CCCCCC"> sequence</font>

2648
02:06:34,989 --> 02:06:37,120
length like<font color="#E5E5E5"> eight yeah</font>

2649
02:06:37,120 --> 02:06:41,110
the first character has nothing<font color="#CCCCCC"> to go on</font>

2650
02:06:41,110 --> 02:06:46,480
it starts with an empty hidden state of

2651
02:06:46,480 --> 02:06:49,720
<font color="#E5E5E5">zeros okay so what we're going to start</font>

2652
02:06:49,720 --> 02:06:51,310
<font color="#E5E5E5">with next week</font>

2653
02:06:51,310 --> 02:06:52,989
is we're going<font color="#E5E5E5"> to learn how to avoid</font>

2654
02:06:52,989 --> 02:06:55,390
<font color="#CCCCCC">that</font><font color="#E5E5E5"> problem right</font><font color="#CCCCCC"> and so it's a</font><font color="#E5E5E5"> really</font>

2655
02:06:55,390 --> 02:06:59,170
insightful question or concern<font color="#E5E5E5"> right and</font>

2656
02:06:59,170 --> 02:07:01,900
but<font color="#E5E5E5"> if you think</font><font color="#CCCCCC"> about it</font><font color="#E5E5E5"> the basic idea</font>

2657
02:07:01,900 --> 02:07:05,910
is why should we reset<font color="#E5E5E5"> this to zero</font>

2658
02:07:05,910 --> 02:07:09,910
<font color="#E5E5E5">every time you know like if we can kind</font>

2659
02:07:09,910 --> 02:07:13,750
of line up these mini batches somehow so

2660
02:07:13,750 --> 02:07:16,780
<font color="#E5E5E5">that the next mini batch joins up</font>

2661
02:07:16,780 --> 02:07:18,640
correctly<font color="#E5E5E5"> it represents like the next</font>

2662
02:07:18,640 --> 02:07:22,000
letter in<font color="#CCCCCC"> leaches works then we'd want</font>

2663
02:07:22,000 --> 02:07:26,880
<font color="#CCCCCC">to move this up</font><font color="#E5E5E5"> into the constructor</font>

2664
02:07:26,880 --> 02:07:32,340
<font color="#E5E5E5">right and then like pass that here and</font>

2665
02:07:32,340 --> 02:07:38,020
then store it<font color="#E5E5E5"> here right</font><font color="#CCCCCC"> and now we're</font>

2666
02:07:38,020 --> 02:07:40,210
not resetting the hidden state each time

2667
02:07:40,210 --> 02:07:43,000
we're actually we're actually keeping

2668
02:07:43,000 --> 02:07:45,220
<font color="#E5E5E5">the hidden state from call to call and</font>

2669
02:07:45,220 --> 02:07:48,340
so the<font color="#CCCCCC"> only time that</font><font color="#E5E5E5"> it would be</font>

2670
02:07:48,340 --> 02:07:51,339
failing<font color="#E5E5E5"> to benefit from</font>

2671
02:07:51,339 --> 02:07:53,109
learning state would be like<font color="#E5E5E5"> literally</font>

2672
02:07:53,109 --> 02:07:55,569
at the very<font color="#CCCCCC"> start of the document</font><font color="#E5E5E5"> so</font>

2673
02:07:55,569 --> 02:07:56,559
that's where but that's where we're

2674
02:07:56,559 --> 02:07:58,989
going<font color="#E5E5E5"> to try and ahead next week</font>

2675
02:07:58,989 --> 02:08:09,069
I feel like<font color="#E5E5E5"> this lesson</font><font color="#CCCCCC"> every time I've</font>

2676
02:08:09,069 --> 02:08:11,169
got a punch line coming somebody asks<font color="#CCCCCC"> me</font>

2677
02:08:11,169 --> 02:08:13,149
a question<font color="#CCCCCC"> where I have to like do the</font>

2678
02:08:13,149 --> 02:08:17,649
punch line<font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> of time</font><font color="#CCCCCC"> okay so we can</font>

2679
02:08:17,649 --> 02:08:21,339
fit<font color="#E5E5E5"> that and we can fit that</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> want</font>

2680
02:08:21,339 --> 02:08:22,899
<font color="#E5E5E5">to show you something interesting and</font>

2681
02:08:22,899 --> 02:08:25,869
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is coming to the punch</font><font color="#E5E5E5"> line that</font>

2682
02:08:25,869 --> 02:08:27,369
another punch line that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> net</font><font color="#CCCCCC"> try</font><font color="#E5E5E5"> to</font>

2683
02:08:27,369 --> 02:08:33,909
<font color="#E5E5E5">spoil which is when we're you know</font>

2684
02:08:33,909 --> 02:08:35,979
<font color="#E5E5E5">remember this is just</font><font color="#CCCCCC"> doing a loop</font><font color="#E5E5E5"> right</font>

2685
02:08:35,979 --> 02:08:37,689
applying the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> matrix multiply again</font>

2686
02:08:37,689 --> 02:08:42,669
<font color="#CCCCCC">and again if that</font><font color="#E5E5E5"> matrix multiply tends</font>

2687
02:08:42,669 --> 02:08:46,419
<font color="#E5E5E5">to</font><font color="#CCCCCC"> increase</font><font color="#E5E5E5"> the activations each time</font>

2688
02:08:46,419 --> 02:08:48,879
then effectively<font color="#E5E5E5"> we're doing that to the</font>

2689
02:08:48,879 --> 02:08:50,439
power<font color="#E5E5E5"> of eight</font><font color="#CCCCCC"> right so it's going</font><font color="#E5E5E5"> to</font>

2690
02:08:50,439 --> 02:08:53,319
<font color="#E5E5E5">like</font><font color="#CCCCCC"> to shoot off really high or if it's</font>

2691
02:08:53,319 --> 02:08:54,869
<font color="#CCCCCC">decreasing it a little</font><font color="#E5E5E5"> bit each time</font>

2692
02:08:54,869 --> 02:08:57,760
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> going to shoot off really low so</font>

2693
02:08:57,760 --> 02:08:58,959
<font color="#E5E5E5">this is what we call a gradient</font>

2694
02:08:58,959 --> 02:09:01,659
explosion<font color="#CCCCCC"> right and so we really want to</font>

2695
02:09:01,659 --> 02:09:07,209
make sure that the initial<font color="#E5E5E5"> H naught H</font>

2696
02:09:07,209 --> 02:09:11,889
<font color="#E5E5E5">the</font><font color="#CCCCCC"> initial but if we call it the</font>

2697
02:09:11,889 --> 02:09:16,359
initial<font color="#CCCCCC"> L hidden that</font><font color="#E5E5E5"> we create is is</font>

2698
02:09:16,359 --> 02:09:19,959
like<font color="#CCCCCC"> oversize that's not going</font><font color="#E5E5E5"> to cause</font>

2699
02:09:19,959 --> 02:09:22,149
our activations on average to increase

2700
02:09:22,149 --> 02:09:25,300
or<font color="#E5E5E5"> decrease</font><font color="#CCCCCC"> right and there's</font><font color="#E5E5E5"> actually a</font>

2701
02:09:25,300 --> 02:09:29,939
very<font color="#E5E5E5"> nice matrix that does exactly that</font>

2702
02:09:29,939 --> 02:09:33,459
called the<font color="#CCCCCC"> identity matrix so the</font>

2703
02:09:33,459 --> 02:09:35,589
identity matrix for those that don't

2704
02:09:35,589 --> 02:09:39,039
quite remember<font color="#CCCCCC"> their linear algebra</font><font color="#E5E5E5"> is</font>

2705
02:09:39,039 --> 02:09:42,309
this this<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be a size 3 identity</font>

2706
02:09:42,309 --> 02:09:46,959
matrix<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> and so</font><font color="#E5E5E5"> the trick about</font>

2707
02:09:46,959 --> 02:09:49,839
an identity<font color="#CCCCCC"> matrix is anything times an</font>

2708
02:09:49,839 --> 02:09:52,929
identity<font color="#CCCCCC"> matrix is itself</font><font color="#E5E5E5"> right and so</font>

2709
02:09:52,929 --> 02:09:54,519
therefore you could<font color="#E5E5E5"> multiply it by this</font>

2710
02:09:54,519 --> 02:09:56,439
<font color="#E5E5E5">again and</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> and again and again and</font>

2711
02:09:56,439 --> 02:09:59,289
still end up<font color="#CCCCCC"> with itself</font><font color="#E5E5E5"> right so</font>

2712
02:09:59,289 --> 02:10:03,280
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> no gradient explosion so what we</font>

2713
02:10:03,280 --> 02:10:04,690
<font color="#E5E5E5">could do is instead</font>

2714
02:10:04,690 --> 02:10:08,080
<font color="#E5E5E5">of using whatever the default random in</font>

2715
02:10:08,080 --> 02:10:11,230
it is for this matrix<font color="#E5E5E5"> we could instead</font>

2716
02:10:11,230 --> 02:10:14,350
<font color="#E5E5E5">after</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> create our errand in</font><font color="#CCCCCC"> is we can</font>

2717
02:10:14,350 --> 02:10:15,070
go into<font color="#E5E5E5"> that</font>

2718
02:10:15,070 --> 02:10:17,410
<font color="#CCCCCC">Erol</font><font color="#E5E5E5"> in right and notice this right we</font>

2719
02:10:17,410 --> 02:10:22,770
can<font color="#CCCCCC"> go m dot</font><font color="#E5E5E5"> RN n right and if we now go</font>

2720
02:10:22,770 --> 02:10:25,989
like so we can<font color="#CCCCCC"> get</font><font color="#E5E5E5"> the docs</font><font color="#CCCCCC"> for m dot R</font>

2721
02:10:25,989 --> 02:10:29,110
<font color="#E5E5E5">and</font><font color="#CCCCCC"> M right</font><font color="#E5E5E5"> and as well as the arguments</font>

2722
02:10:29,110 --> 02:10:31,930
for constructing it it also tells you

2723
02:10:31,930 --> 02:10:33,820
the inputs and outputs<font color="#E5E5E5"> for calling the</font>

2724
02:10:33,820 --> 02:10:35,770
<font color="#E5E5E5">layer and it also tells you the</font>

2725
02:10:35,770 --> 02:10:37,960
attributes<font color="#CCCCCC"> and so it tells</font><font color="#E5E5E5"> you there's</font>

2726
02:10:37,960 --> 02:10:39,610
<font color="#E5E5E5">something called weight</font>

2727
02:10:39,610 --> 02:10:42,070
<font color="#CCCCCC">H H and these are the learn about hidden</font>

2728
02:10:42,070 --> 02:10:43,480
<font color="#E5E5E5">to hidden weights that's that square</font>

2729
02:10:43,480 --> 02:10:46,390
matrix<font color="#E5E5E5"> right so after</font><font color="#CCCCCC"> we've constructed</font>

2730
02:10:46,390 --> 02:10:49,120
our<font color="#CCCCCC"> M</font><font color="#E5E5E5"> we can just go in</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> say all</font>

2731
02:10:49,120 --> 02:10:55,030
right<font color="#CCCCCC"> m dot R and</font><font color="#E5E5E5"> n dot weight h HL dot</font>

2732
02:10:55,030 --> 02:10:58,680
data that's the tensor dot copy

2733
02:10:58,680 --> 02:11:03,820
underscore in place<font color="#CCCCCC"> torch I that is I</font>

2734
02:11:03,820 --> 02:11:07,920
for identity in case you are wondering

2735
02:11:07,920 --> 02:11:11,140
so this is an identity<font color="#CCCCCC"> matrix of size n</font>

2736
02:11:11,140 --> 02:11:14,949
<font color="#E5E5E5">hidden so this both puts</font><font color="#CCCCCC"> into this</font>

2737
02:11:14,949 --> 02:11:18,310
weight matrix and returns the identity

2738
02:11:18,310 --> 02:11:24,090
matrix<font color="#E5E5E5"> and so this was like</font><font color="#CCCCCC"> actually a</font>

2739
02:11:24,090 --> 02:11:29,110
Geoffrey Hinton<font color="#E5E5E5"> paper was like hey you</font>

2740
02:11:29,110 --> 02:11:31,449
know after<font color="#E5E5E5"> it was it's 2015</font>

2741
02:11:31,449 --> 02:11:34,270
so after recurrent neural<font color="#E5E5E5"> Nets have been</font>

2742
02:11:34,270 --> 02:11:38,190
<font color="#E5E5E5">around for decades</font><font color="#CCCCCC"> here's like hey gang</font>

2743
02:11:38,190 --> 02:11:40,449
maybe we should<font color="#E5E5E5"> just use the identity</font>

2744
02:11:40,449 --> 02:11:44,440
<font color="#E5E5E5">matrix</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> initialize this and like it</font>

2745
02:11:44,440 --> 02:11:46,530
<font color="#E5E5E5">actually turns out to work really well</font>

2746
02:11:46,530 --> 02:11:49,870
<font color="#CCCCCC">and so</font><font color="#E5E5E5"> that was a 2015 paper believe it</font>

2747
02:11:49,870 --> 02:11:52,000
or not from<font color="#E5E5E5"> the father of neural</font>

2748
02:11:52,000 --> 02:11:54,550
networks<font color="#E5E5E5"> and so here is the here is our</font>

2749
02:11:54,550 --> 02:11:56,440
implementation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> his paper and this is</font>

2750
02:11:56,440 --> 02:11:58,090
an important<font color="#E5E5E5"> thing to know right when</font>

2751
02:11:58,090 --> 02:11:59,739
very famous<font color="#E5E5E5"> people like Geoffrey Hinton</font>

2752
02:11:59,739 --> 02:12:02,620
<font color="#E5E5E5">write a paper sometimes in entire</font>

2753
02:12:02,620 --> 02:12:04,810
implementation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that paper looks like</font>

2754
02:12:04,810 --> 02:12:07,890
one line of code<font color="#CCCCCC"> okay so let's do it</font>

2755
02:12:07,890 --> 02:12:10,660
<font color="#E5E5E5">before</font><font color="#CCCCCC"> we got point six one two five</font>

2756
02:12:10,660 --> 02:12:12,969
seven<font color="#CCCCCC"> we'll fit it with exactly</font><font color="#E5E5E5"> the same</font>

2757
02:12:12,969 --> 02:12:16,630
<font color="#E5E5E5">parameters and now</font><font color="#CCCCCC"> we get</font><font color="#E5E5E5"> 0.5</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> and in</font>

2758
02:12:16,630 --> 02:12:16,900
fact

2759
02:12:16,900 --> 02:12:19,330
can keep training 0.50<font color="#E5E5E5"> so like this</font>

2760
02:12:19,330 --> 02:12:22,360
<font color="#CCCCCC">tweak really really really</font><font color="#E5E5E5"> helped okay</font>

2761
02:12:22,360 --> 02:12:24,310
<font color="#E5E5E5">now one of the nice things about this</font>

2762
02:12:24,310 --> 02:12:26,739
tweak was before I could<font color="#E5E5E5"> only use a</font>

2763
02:12:26,739 --> 02:12:29,530
<font color="#E5E5E5">learning rate of one in</font><font color="#CCCCCC"> x3</font><font color="#E5E5E5"> before it</font>

2764
02:12:29,530 --> 02:12:32,620
started going<font color="#CCCCCC"> crazy</font><font color="#E5E5E5"> but after identity</font>

2765
02:12:32,620 --> 02:12:34,300
matrix I found I could use one in egg

2766
02:12:34,300 --> 02:12:36,429
<font color="#CCCCCC">too</font><font color="#E5E5E5"> because it's you know it's better</font>

2767
02:12:36,429 --> 02:12:38,770
behaved<font color="#CCCCCC"> weight</font><font color="#E5E5E5"> initialization I found I</font>

2768
02:12:38,770 --> 02:12:41,890
could use a higher learning rate okay

2769
02:12:41,890 --> 02:12:46,750
and honestly these things you know

2770
02:12:46,750 --> 02:12:49,179
increasingly we're trying to incorporate

2771
02:12:49,179 --> 02:12:51,370
<font color="#E5E5E5">into the defaults in first day I you</font>

2772
02:12:51,370 --> 02:12:53,650
know you don't<font color="#E5E5E5"> necessarily</font><font color="#CCCCCC"> personally</font>

2773
02:12:53,650 --> 02:12:56,020
<font color="#E5E5E5">need to actually know them but</font><font color="#CCCCCC"> you know</font>

2774
02:12:56,020 --> 02:12:59,140
at this point<font color="#E5E5E5"> we're still at a point</font>

2775
02:12:59,140 --> 02:13:00,730
where you know most<font color="#CCCCCC"> things in most</font>

2776
02:13:00,730 --> 02:13:02,290
<font color="#E5E5E5">libraries most of the time don't have</font>

2777
02:13:02,290 --> 02:13:03,880
great defaults it's good to know all

2778
02:13:03,880 --> 02:13:05,679
<font color="#E5E5E5">these</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> tricks it's also nice to</font>

2779
02:13:05,679 --> 02:13:07,170
<font color="#E5E5E5">know if you want to improve something</font>

2780
02:13:07,170 --> 02:13:09,310
<font color="#E5E5E5">what kind of tricks people</font><font color="#CCCCCC"> have used</font>

2781
02:13:09,310 --> 02:13:11,350
elsewhere<font color="#E5E5E5"> because you can</font><font color="#CCCCCC"> often</font><font color="#E5E5E5"> borrow</font>

2782
02:13:11,350 --> 02:13:15,250
them yourself<font color="#CCCCCC"> all right well that's the</font>

2783
02:13:15,250 --> 02:13:17,560
<font color="#CCCCCC">end of the lesson today and so next</font><font color="#E5E5E5"> week</font>

2784
02:13:17,560 --> 02:13:20,560
we will look<font color="#E5E5E5"> at this</font><font color="#CCCCCC"> idea of a stateful</font>

2785
02:13:20,560 --> 02:13:22,030
<font color="#E5E5E5">RNN that's going to keep</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> hidden</font>

2786
02:13:22,030 --> 02:13:23,830
<font color="#E5E5E5">state around and then we're going to go</font>

2787
02:13:23,830 --> 02:13:27,070
back<font color="#E5E5E5"> to looking at language models again</font>

2788
02:13:27,070 --> 02:13:28,570
and then<font color="#E5E5E5"> finally we're going to go all</font>

2789
02:13:28,570 --> 02:13:30,070
the<font color="#CCCCCC"> way back to computer vision and</font>

2790
02:13:30,070 --> 02:13:32,530
learn<font color="#CCCCCC"> about things</font><font color="#E5E5E5"> like rez nets and</font>

2791
02:13:32,530 --> 02:13:35,350
batch norm<font color="#E5E5E5"> and all the tricks</font><font color="#CCCCCC"> that were</font>

2792
02:13:35,350 --> 02:13:38,440
in figured out in cats versus dogs<font color="#CCCCCC"> see</font>

2793
02:13:38,440 --> 02:13:40,679
you then

2794
02:13:41,040 --> 00:00:00,000
[Applause]

