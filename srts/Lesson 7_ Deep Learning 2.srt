1
00:00:00,050 --> 00:00:05,009
<font color="#E5E5E5">okay so last class of part</font><font color="#CCCCCC"> one</font>

2
00:00:05,009 --> 00:00:09,980
<font color="#CCCCCC">I guess the theme of</font><font color="#E5E5E5"> part one is</font>

3
00:00:09,980 --> 00:00:12,599
<font color="#E5E5E5">classification and regression with deep</font>

4
00:00:12,599 --> 00:00:15,089
<font color="#CCCCCC">wading and specifically it's about</font>

5
00:00:15,089 --> 00:00:17,760
identifying<font color="#E5E5E5"> and learning the best</font>

6
00:00:17,760 --> 00:00:19,439
practices<font color="#CCCCCC"> for classification and</font>

7
00:00:19,439 --> 00:00:23,580
regression<font color="#CCCCCC"> and we started out with the</font>

8
00:00:23,580 --> 00:00:25,500
<font color="#E5E5E5">kind of here are three lines of code</font><font color="#CCCCCC"> to</font>

9
00:00:25,500 --> 00:00:28,650
do<font color="#E5E5E5"> image</font><font color="#CCCCCC"> classification</font><font color="#E5E5E5"> and gradually</font>

10
00:00:28,650 --> 00:00:31,650
we've been for the first four lessons

11
00:00:31,650 --> 00:00:34,920
<font color="#E5E5E5">within kind of going through NLP</font>

12
00:00:34,920 --> 00:00:36,420
structured data<font color="#E5E5E5"> collaborative filtering</font>

13
00:00:36,420 --> 00:00:38,040
and kind<font color="#E5E5E5"> of understanding some of the</font>

14
00:00:38,040 --> 00:00:39,930
key pieces and most importantly

15
00:00:39,930 --> 00:00:42,629
understanding<font color="#E5E5E5"> you know how to</font><font color="#CCCCCC"> actually</font>

16
00:00:42,629 --> 00:00:44,450
<font color="#CCCCCC">make these things work</font><font color="#E5E5E5"> well in</font><font color="#CCCCCC"> practice</font>

17
00:00:44,450 --> 00:00:47,879
<font color="#E5E5E5">and then the last three lessons</font><font color="#CCCCCC"> are then</font>

18
00:00:47,879 --> 00:00:49,350
kind of<font color="#E5E5E5"> going back over</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> of those</font>

19
00:00:49,350 --> 00:00:52,020
<font color="#CCCCCC">topics in kind</font><font color="#E5E5E5"> of reverse order to</font>

20
00:00:52,020 --> 00:00:53,550
understand<font color="#E5E5E5"> more detail about what was</font>

21
00:00:53,550 --> 00:00:56,250
going on<font color="#CCCCCC"> and understanding what the code</font>

22
00:00:56,250 --> 00:00:57,780
<font color="#E5E5E5">looks like behind the scenes</font><font color="#CCCCCC"> and wanting</font>

23
00:00:57,780 --> 00:01:02,430
<font color="#E5E5E5">to kind of write them from scratch part</font>

24
00:01:02,430 --> 00:01:07,680
two of the<font color="#E5E5E5"> course</font><font color="#CCCCCC"> we'll move from a</font>

25
00:01:07,680 --> 00:01:09,119
<font color="#E5E5E5">focus on classification and regression</font>

26
00:01:09,119 --> 00:01:12,540
which is kind<font color="#E5E5E5"> of predicting a thing like</font>

27
00:01:12,540 --> 00:01:15,600
a number<font color="#CCCCCC"> or or at most a small number</font><font color="#E5E5E5"> of</font>

28
00:01:15,600 --> 00:01:17,479
<font color="#E5E5E5">things like</font><font color="#CCCCCC"> a small number</font><font color="#E5E5E5"> of labels and</font>

29
00:01:17,479 --> 00:01:20,250
we'll focus<font color="#CCCCCC"> more</font><font color="#E5E5E5"> on generative modeling</font>

30
00:01:20,250 --> 00:01:23,210
generative modeling means predicting

31
00:01:23,210 --> 00:01:25,259
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of lots of things</font>

32
00:01:25,259 --> 00:01:28,439
for<font color="#CCCCCC"> example creating a sentence</font><font color="#E5E5E5"> such as</font>

33
00:01:28,439 --> 00:01:31,049
in<font color="#E5E5E5"> Ural translation or image captioning</font>

34
00:01:31,049 --> 00:01:33,750
or<font color="#CCCCCC"> question-answering while creating</font><font color="#E5E5E5"> an</font>

35
00:01:33,750 --> 00:01:38,369
image<font color="#E5E5E5"> such as in style transfer</font>

36
00:01:38,369 --> 00:01:41,939
<font color="#E5E5E5">super-resolution segmentation and so</font>

37
00:01:41,939 --> 00:01:46,670
forth and then in part<font color="#E5E5E5"> two it'll move</font>

38
00:01:46,670 --> 00:01:49,649
away from<font color="#E5E5E5"> being</font><font color="#CCCCCC"> just here are some best</font>

39
00:01:49,649 --> 00:01:52,170
practices you<font color="#CCCCCC"> know established</font><font color="#E5E5E5"> best</font>

40
00:01:52,170 --> 00:01:54,390
practices<font color="#E5E5E5"> either through people that are</font>

41
00:01:54,390 --> 00:01:56,340
written<font color="#E5E5E5"> papers or through research that</font>

42
00:01:56,340 --> 00:01:58,530
last day<font color="#E5E5E5"> is done and it kind of got</font>

43
00:01:58,530 --> 00:01:59,850
convinced that<font color="#E5E5E5"> these are best practices</font>

44
00:01:59,850 --> 00:02:02,670
<font color="#CCCCCC">to some stuff which</font><font color="#E5E5E5"> would be a little</font>

45
00:02:02,670 --> 00:02:04,890
<font color="#CCCCCC">bit more speculative you know some stuff</font>

46
00:02:04,890 --> 00:02:07,369
which<font color="#CCCCCC"> is maybe recent papers that</font>

47
00:02:07,369 --> 00:02:11,370
haven't<font color="#CCCCCC"> been fully tested</font><font color="#E5E5E5"> yet and</font>

48
00:02:11,370 --> 00:02:12,989
sometimes in part<font color="#CCCCCC"> two like pickles will</font>

49
00:02:12,989 --> 00:02:14,519
come out in<font color="#E5E5E5"> the middle</font><font color="#CCCCCC"> of the course and</font>

50
00:02:14,519 --> 00:02:16,560
<font color="#E5E5E5">will change direction with the course</font>

51
00:02:16,560 --> 00:02:18,180
and study that<font color="#E5E5E5"> paper because</font><font color="#CCCCCC"> it's just</font>

52
00:02:18,180 --> 00:02:20,340
you know interesting and so if you're

53
00:02:20,340 --> 00:02:23,489
<font color="#CCCCCC">interested</font><font color="#E5E5E5"> in kind of learning a bit</font>

54
00:02:23,489 --> 00:02:26,430
more about how to read a paper<font color="#E5E5E5"> and how</font>

55
00:02:26,430 --> 00:02:28,409
to implement<font color="#E5E5E5"> it from scratch and so</font>

56
00:02:28,409 --> 00:02:30,239
forth<font color="#CCCCCC"> then</font><font color="#E5E5E5"> that's another good reason</font><font color="#CCCCCC"> to</font>

57
00:02:30,239 --> 00:02:34,159
do part<font color="#CCCCCC"> two it still doesn't assume any</font>

58
00:02:34,159 --> 00:02:37,440
particular math<font color="#CCCCCC"> background but it does</font>

59
00:02:37,440 --> 00:02:39,510
<font color="#CCCCCC">beyond</font><font color="#E5E5E5"> kind of high school but but it</font>

60
00:02:39,510 --> 00:02:41,310
does assume that you're prepared to

61
00:02:41,310 --> 00:02:44,670
<font color="#E5E5E5">spend time like you know digging through</font>

62
00:02:44,670 --> 00:02:46,859
the notation and understanding it and

63
00:02:46,859 --> 00:02:50,549
<font color="#E5E5E5">converting it to code and so forth all</font>

64
00:02:50,549 --> 00:02:52,980
right so we're we're up to is is<font color="#E5E5E5"> our</font>

65
00:02:52,980 --> 00:02:55,440
<font color="#E5E5E5">intent at the moment and I think one of</font>

66
00:02:55,440 --> 00:02:58,379
the<font color="#E5E5E5"> issues I find most with teaching</font>

67
00:02:58,379 --> 00:03:00,540
<font color="#CCCCCC">iron</font><font color="#E5E5E5"> ends is trying to ensure that</font>

68
00:03:00,540 --> 00:03:03,269
people understand they're<font color="#CCCCCC"> not in</font><font color="#E5E5E5"> any way</font>

69
00:03:03,269 --> 00:03:05,549
different<font color="#CCCCCC"> or unusual</font><font color="#E5E5E5"> or magical</font><font color="#CCCCCC"> they're</font>

70
00:03:05,549 --> 00:03:07,739
they're just<font color="#CCCCCC"> a standard fully connected</font>

71
00:03:07,739 --> 00:03:11,970
Network<font color="#CCCCCC"> and so let's go back to the</font>

72
00:03:11,970 --> 00:03:13,620
standard fully connected Network which

73
00:03:13,620 --> 00:03:15,750
looks<font color="#CCCCCC"> like this right so to remind</font><font color="#E5E5E5"> you</font>

74
00:03:15,750 --> 00:03:19,650
the arrows represent one or more layer

75
00:03:19,650 --> 00:03:22,819
operations<font color="#E5E5E5"> generally speaking a linear</font>

76
00:03:22,819 --> 00:03:26,069
<font color="#E5E5E5">followed by a nonlinear function in this</font>

77
00:03:26,069 --> 00:03:29,250
<font color="#E5E5E5">case</font><font color="#CCCCCC"> their matrix</font><font color="#E5E5E5"> modifications</font><font color="#CCCCCC"> followed</font>

78
00:03:29,250 --> 00:03:34,260
by real new<font color="#CCCCCC"> raw</font><font color="#E5E5E5"> or fan and the arrows of</font>

79
00:03:34,260 --> 00:03:37,129
<font color="#CCCCCC">the same color</font><font color="#E5E5E5"> represent the same</font>

80
00:03:37,129 --> 00:03:39,840
exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same weight matrix</font><font color="#E5E5E5"> being</font>

81
00:03:39,840 --> 00:03:43,079
<font color="#E5E5E5">used and</font><font color="#CCCCCC"> so one thing</font><font color="#E5E5E5"> which was just</font>

82
00:03:43,079 --> 00:03:45,359
slightly different<font color="#E5E5E5"> from previous</font><font color="#CCCCCC"> fully</font>

83
00:03:45,359 --> 00:03:47,760
connected networks we've seen is that<font color="#E5E5E5"> we</font>

84
00:03:47,760 --> 00:03:51,959
have an input<font color="#E5E5E5"> coming in at the not just</font>

85
00:03:51,959 --> 00:03:53,069
at the first<font color="#CCCCCC"> layer but</font><font color="#E5E5E5"> also for the</font>

86
00:03:53,069 --> 00:03:54,389
second layer<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> at the third layer</font>

87
00:03:54,389 --> 00:03:56,400
and we tried a<font color="#CCCCCC"> couple of</font><font color="#E5E5E5"> approaches one</font>

88
00:03:56,400 --> 00:03:58,650
was concatenating the inputs and one was

89
00:03:58,650 --> 00:04:00,930
adding the<font color="#CCCCCC"> airport's okay but there was</font>

90
00:04:00,930 --> 00:04:03,810
nothing<font color="#E5E5E5"> at all conceptually different</font>

91
00:04:03,810 --> 00:04:09,510
<font color="#E5E5E5">about this so that</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> looked like this</font>

92
00:04:09,510 --> 00:04:15,030
we had a<font color="#E5E5E5"> model where we basically</font>

93
00:04:15,030 --> 00:04:18,298
<font color="#E5E5E5">defined the the three arrows</font><font color="#CCCCCC"> colors we</font>

94
00:04:18,298 --> 00:04:19,909
had as three different<font color="#E5E5E5"> weight matrices</font>

95
00:04:19,909 --> 00:04:25,080
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> and by using the</font><font color="#E5E5E5"> linear</font>

96
00:04:25,080 --> 00:04:26,819
<font color="#CCCCCC">we got actually</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> the weight matrix</font>

97
00:04:26,819 --> 00:04:29,849
<font color="#CCCCCC">and the</font><font color="#E5E5E5"> bias vector wrapped up for free</font>

98
00:04:29,849 --> 00:04:33,030
<font color="#E5E5E5">for us</font><font color="#CCCCCC"> and then we went</font><font color="#E5E5E5"> through</font><font color="#CCCCCC"> and we</font>

99
00:04:33,030 --> 00:04:35,879
<font color="#CCCCCC">did each</font><font color="#E5E5E5"> of our embeddings put it</font>

100
00:04:35,879 --> 00:04:39,750
through<font color="#E5E5E5"> our</font><font color="#CCCCCC"> first linear</font><font color="#E5E5E5"> layer and then</font>

101
00:04:39,750 --> 00:04:42,060
we<font color="#CCCCCC"> did each of our we</font><font color="#E5E5E5"> call them hiddens</font>

102
00:04:42,060 --> 00:04:48,870
<font color="#E5E5E5">being the orange orange areas and in</font>

103
00:04:48,870 --> 00:04:51,500
<font color="#E5E5E5">order to</font><font color="#CCCCCC"> avoid</font><font color="#E5E5E5"> the fact</font><font color="#CCCCCC"> that there's no</font>

104
00:04:51,500 --> 00:04:54,210
<font color="#E5E5E5">orange arrow coming</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the first one</font>

105
00:04:54,210 --> 00:04:57,270
we decided<font color="#E5E5E5"> to kind of invent</font><font color="#CCCCCC"> an empty</font>

106
00:04:57,270 --> 00:04:59,610
matrix and that<font color="#CCCCCC"> way every one of</font><font color="#E5E5E5"> these</font>

107
00:04:59,610 --> 00:05:02,009
rows<font color="#CCCCCC"> about the same right</font><font color="#E5E5E5"> and so then we</font>

108
00:05:02,009 --> 00:05:06,650
<font color="#E5E5E5">did exactly</font><font color="#CCCCCC"> the same thing except we</font>

109
00:05:08,270 --> 00:05:11,580
used to loop just to refactor<font color="#E5E5E5"> the cutter</font>

110
00:05:11,580 --> 00:05:13,590
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so it's just</font><font color="#E5E5E5"> it was</font><font color="#CCCCCC"> just a code</font>

111
00:05:13,590 --> 00:05:16,620
refactoring<font color="#CCCCCC"> there was no change of</font>

112
00:05:16,620 --> 00:05:19,289
anything conceptually<font color="#CCCCCC"> and since we were</font>

113
00:05:19,289 --> 00:05:21,870
doing a refactoring<font color="#E5E5E5"> we took</font><font color="#CCCCCC"> advantage of</font>

114
00:05:21,870 --> 00:05:23,400
that to increase<font color="#CCCCCC"> the number of</font>

115
00:05:23,400 --> 00:05:25,110
characters<font color="#E5E5E5"> to eight because I was too</font>

116
00:05:25,110 --> 00:05:27,599
<font color="#CCCCCC">lazy to type 8 when the alias but I'm</font>

117
00:05:27,599 --> 00:05:30,180
quite<font color="#CCCCCC"> happy to</font><font color="#E5E5E5"> change the loop in</font><font color="#CCCCCC"> that</font>

118
00:05:30,180 --> 00:05:30,750
stage

119
00:05:30,750 --> 00:05:34,469
yeah<font color="#E5E5E5"> so this now looked through this</font>

120
00:05:34,469 --> 00:05:36,750
exact same<font color="#E5E5E5"> thing but we had eight of</font>

121
00:05:36,750 --> 00:05:43,919
these rather than<font color="#E5E5E5"> three so then we</font>

122
00:05:43,919 --> 00:05:46,110
refactored that again<font color="#E5E5E5"> by taking</font>

123
00:05:46,110 --> 00:05:49,080
<font color="#CCCCCC">advantage</font><font color="#E5E5E5"> of an end</font><font color="#CCCCCC"> errand in which</font>

124
00:05:49,080 --> 00:05:51,750
<font color="#E5E5E5">basically puts that loop together for us</font>

125
00:05:51,750 --> 00:05:57,810
and<font color="#E5E5E5"> keeps track</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> this.h as it goes</font>

126
00:05:57,810 --> 00:06:01,229
<font color="#CCCCCC">along</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> us and so by using that we</font>

127
00:06:01,229 --> 00:06:04,379
<font color="#E5E5E5">were able</font><font color="#CCCCCC"> to replace the loop with a</font>

128
00:06:04,379 --> 00:06:07,469
single call<font color="#CCCCCC"> and so again that's just</font><font color="#E5E5E5"> a</font>

129
00:06:07,469 --> 00:06:12,560
refactoring<font color="#E5E5E5"> doing exactly the</font><font color="#CCCCCC"> same thing</font>

130
00:06:14,000 --> 00:06:17,180
okay<font color="#CCCCCC"> so then we looked at something</font>

131
00:06:17,180 --> 00:06:21,210
which was mainly<font color="#E5E5E5"> designed to save some</font>

132
00:06:21,210 --> 00:06:27,750
training time<font color="#CCCCCC"> which was previously we</font>

133
00:06:27,750 --> 00:06:33,419
had if we<font color="#CCCCCC"> had a big piece</font><font color="#E5E5E5"> of text</font><font color="#CCCCCC"> right</font>

134
00:06:33,419 --> 00:06:36,940
<font color="#CCCCCC">so we've got like a movie review</font>

135
00:06:36,940 --> 00:06:39,250
but we were basically splitting<font color="#E5E5E5"> it up</font>

136
00:06:39,250 --> 00:06:43,600
into<font color="#CCCCCC"> eight character segments</font><font color="#E5E5E5"> and we'd</font>

137
00:06:43,600 --> 00:06:46,690
grab like segment<font color="#CCCCCC"> number</font><font color="#E5E5E5"> one and use</font>

138
00:06:46,690 --> 00:06:50,650
<font color="#E5E5E5">that to predict the</font><font color="#CCCCCC"> next character right</font>

139
00:06:50,650 --> 00:06:52,930
<font color="#CCCCCC">but in</font><font color="#E5E5E5"> order to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that we kind</font>

140
00:06:52,930 --> 00:06:54,850
<font color="#E5E5E5">of used all of the data we didn't just</font>

141
00:06:54,850 --> 00:06:57,460
put it up like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> actually said</font>

142
00:06:57,460 --> 00:07:01,540
like okay here's<font color="#E5E5E5"> our whole thing let's</font>

143
00:07:01,540 --> 00:07:03,610
grab the<font color="#CCCCCC"> first will be to</font><font color="#E5E5E5"> grab this</font>

144
00:07:03,610 --> 00:07:06,220
section the second will<font color="#E5E5E5"> be to grab that</font>

145
00:07:06,220 --> 00:07:08,890
section<font color="#E5E5E5"> in that</font><font color="#CCCCCC"> section then that</font>

146
00:07:08,890 --> 00:07:10,630
section and each time would<font color="#CCCCCC"> predict</font>

147
00:07:10,630 --> 00:07:13,420
predicting the<font color="#CCCCCC"> next one character</font><font color="#E5E5E5"> a lot</font>

148
00:07:13,420 --> 00:07:17,560
okay<font color="#CCCCCC"> and so you know I was bit</font><font color="#E5E5E5"> concerned</font>

149
00:07:17,560 --> 00:07:19,300
that that seems pretty wasteful because

150
00:07:19,300 --> 00:07:22,690
<font color="#E5E5E5">like as we calculate this section</font><font color="#CCCCCC"> nearly</font>

151
00:07:22,690 --> 00:07:24,670
all of it overlaps with the<font color="#E5E5E5"> previous</font>

152
00:07:24,670 --> 00:07:28,720
section<font color="#E5E5E5"> okay so instead what we did</font><font color="#CCCCCC"> was</font>

153
00:07:28,720 --> 00:07:30,720
we<font color="#E5E5E5"> said all right well what if we</font>

154
00:07:30,720 --> 00:07:32,820
<font color="#E5E5E5">actually did split it into</font>

155
00:07:32,820 --> 00:07:37,510
non-overlapping pieces right<font color="#E5E5E5"> and we said</font>

156
00:07:37,510 --> 00:07:41,500
<font color="#E5E5E5">all right let's grab this section here</font>

157
00:07:41,500 --> 00:07:46,810
<font color="#E5E5E5">and use it to predict every one of the</font>

158
00:07:46,810 --> 00:07:49,390
<font color="#E5E5E5">characters one along</font><font color="#CCCCCC"> right and then</font>

159
00:07:49,390 --> 00:07:51,910
let's<font color="#E5E5E5"> grab this section here and use</font><font color="#CCCCCC"> it</font>

160
00:07:51,910 --> 00:07:53,440
to predict every one of<font color="#E5E5E5"> the characters</font>

161
00:07:53,440 --> 00:07:55,510
<font color="#CCCCCC">went along</font><font color="#E5E5E5"> so after we look at the first</font>

162
00:07:55,510 --> 00:07:57,730
character<font color="#E5E5E5"> in we try to predict the</font>

163
00:07:57,730 --> 00:07:59,740
second character and then now if we<font color="#E5E5E5"> look</font>

164
00:07:59,740 --> 00:08:01,390
at the second character<font color="#E5E5E5"> we try to</font>

165
00:08:01,390 --> 00:08:03,820
predict<font color="#E5E5E5"> the third character and so okay</font>

166
00:08:03,820 --> 00:08:05,290
<font color="#E5E5E5">and so that's where you've got</font><font color="#CCCCCC"> to and</font>

167
00:08:05,290 --> 00:08:08,950
then what<font color="#E5E5E5"> if you perceptive folks asked</font>

168
00:08:08,950 --> 00:08:10,690
a really<font color="#E5E5E5"> interesting question or</font>

169
00:08:10,690 --> 00:08:13,750
expressed their concern which was hey

170
00:08:13,750 --> 00:08:16,330
<font color="#E5E5E5">after we got through the first the first</font>

171
00:08:16,330 --> 00:08:22,450
point<font color="#E5E5E5"> here after we got through the</font>

172
00:08:22,450 --> 00:08:25,630
<font color="#CCCCCC">first point here we kind of withdrew</font>

173
00:08:25,630 --> 00:08:30,070
away our<font color="#E5E5E5"> H activations and started a new</font>

174
00:08:30,070 --> 00:08:32,440
<font color="#CCCCCC">one which meant that when it</font><font color="#E5E5E5"> was trying</font>

175
00:08:32,440 --> 00:08:36,010
<font color="#E5E5E5">to use character one to predict</font>

176
00:08:36,010 --> 00:08:39,299
character<font color="#CCCCCC"> -</font><font color="#E5E5E5"> it's got nothing</font><font color="#CCCCCC"> to go on</font>

177
00:08:39,299 --> 00:08:41,559
you know<font color="#CCCCCC"> it hasn't built</font><font color="#E5E5E5"> it's only built</font>

178
00:08:41,559 --> 00:08:44,530
it's only<font color="#E5E5E5"> done one linear layer and so</font>

179
00:08:44,530 --> 00:08:47,170
that seems like<font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> which indeed</font>

180
00:08:47,170 --> 00:08:49,020
it is<font color="#E5E5E5"> okay</font>

181
00:08:49,020 --> 00:08:50,570
so we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do the obvious</font><font color="#E5E5E5"> thing</font>

182
00:08:50,570 --> 00:08:54,510
<font color="#E5E5E5">which is let's not throw away</font><font color="#CCCCCC"> H okay so</font>

183
00:08:54,510 --> 00:08:58,740
let's not throw<font color="#CCCCCC"> away that that matrix at</font>

184
00:08:58,740 --> 00:08:59,070
all

185
00:08:59,070 --> 00:09:04,589
so<font color="#E5E5E5"> in code the big problem is here but</font>

186
00:09:04,589 --> 00:09:06,899
every<font color="#E5E5E5"> time we call forward</font><font color="#CCCCCC"> so in other</font>

187
00:09:06,899 --> 00:09:08,520
words every<font color="#CCCCCC"> time</font><font color="#E5E5E5"> we do a new</font><font color="#CCCCCC"> mini-batch</font>

188
00:09:08,520 --> 00:09:12,589
we're creating our our<font color="#E5E5E5"> hidden</font><font color="#CCCCCC"> state</font>

189
00:09:12,589 --> 00:09:16,080
right which remember is the orange

190
00:09:16,080 --> 00:09:18,870
circles<font color="#E5E5E5"> okay we're resetting it back to</font>

191
00:09:18,870 --> 00:09:21,180
a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> zeros and</font><font color="#E5E5E5"> so as we go to the</font>

192
00:09:21,180 --> 00:09:23,520
next<font color="#E5E5E5"> non-overlapping section we're</font>

193
00:09:23,520 --> 00:09:25,080
saying forget everything<font color="#E5E5E5"> that's come</font>

194
00:09:25,080 --> 00:09:28,010
before<font color="#E5E5E5"> but in fact the whole point is we</font>

195
00:09:28,010 --> 00:09:30,240
<font color="#CCCCCC">know exactly where</font><font color="#E5E5E5"> we are we're at the</font>

196
00:09:30,240 --> 00:09:31,680
<font color="#E5E5E5">end of the previous section and about to</font>

197
00:09:31,680 --> 00:09:33,839
<font color="#E5E5E5">start the new next contiguous section so</font>

198
00:09:33,839 --> 00:09:34,800
let's<font color="#CCCCCC"> not throw it</font><font color="#E5E5E5"> away</font>

199
00:09:34,800 --> 00:09:37,980
<font color="#E5E5E5">so instead the</font><font color="#CCCCCC"> idea would</font><font color="#E5E5E5"> be to cut this</font>

200
00:09:37,980 --> 00:09:45,870
out right<font color="#E5E5E5"> move it up</font><font color="#CCCCCC"> to here</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> store</font>

201
00:09:45,870 --> 00:09:49,380
it away<font color="#CCCCCC"> in self and</font><font color="#E5E5E5"> then kind of keep</font>

202
00:09:49,380 --> 00:09:51,959
updating<font color="#E5E5E5"> it right now so we're going</font><font color="#CCCCCC"> to</font>

203
00:09:51,959 --> 00:09:54,320
do that<font color="#CCCCCC"> and there's going to be some</font>

204
00:09:54,320 --> 00:09:58,770
minor<font color="#CCCCCC"> details to get right so let's</font>

205
00:09:58,770 --> 00:10:02,190
start<font color="#CCCCCC"> by looking at the model so here's</font>

206
00:10:02,190 --> 00:10:07,190
the<font color="#E5E5E5"> model it's it's nearly</font><font color="#CCCCCC"> identical and</font>

207
00:10:09,020 --> 00:10:10,170
<font color="#E5E5E5">okay</font>

208
00:10:10,170 --> 00:10:12,029
here's the<font color="#E5E5E5"> model it's nearly identical</font>

209
00:10:12,029 --> 00:10:15,000
<font color="#E5E5E5">but I've got as</font><font color="#CCCCCC"> expected one more line</font>

210
00:10:15,000 --> 00:10:17,730
<font color="#E5E5E5">in my constructor where I call something</font>

211
00:10:17,730 --> 00:10:20,250
<font color="#CCCCCC">called init</font><font color="#E5E5E5"> hidden and as</font><font color="#CCCCCC"> expected in</font><font color="#E5E5E5"> it</font>

212
00:10:20,250 --> 00:10:26,070
hidden<font color="#E5E5E5"> sets self dot H to be a bunch of</font>

213
00:10:26,070 --> 00:10:30,810
<font color="#CCCCCC">zeros okay so that's entirely</font>

214
00:10:30,810 --> 00:10:33,839
unsurprising<font color="#CCCCCC"> and then as you</font><font color="#E5E5E5"> can see our</font>

215
00:10:33,839 --> 00:10:39,570
R<font color="#CCCCCC"> and</font><font color="#E5E5E5"> n now takes in self garage and it</font>

216
00:10:39,570 --> 00:10:42,810
as before<font color="#CCCCCC"> spits out our new hidden</font>

217
00:10:42,810 --> 00:10:45,540
activations<font color="#E5E5E5"> and so now the trick is to</font>

218
00:10:45,540 --> 00:10:49,709
<font color="#E5E5E5">now store that away inside self</font><font color="#CCCCCC"> dot H</font>

219
00:10:49,709 --> 00:10:53,910
and so here's wrinkle number<font color="#CCCCCC"> one</font><font color="#E5E5E5"> if you</font>

220
00:10:53,910 --> 00:10:56,940
<font color="#CCCCCC">think about</font><font color="#E5E5E5"> it if I was to simply do it</font>

221
00:10:56,940 --> 00:11:02,550
like like<font color="#CCCCCC"> that right</font><font color="#E5E5E5"> and now I</font><font color="#CCCCCC"> train</font>

222
00:11:02,550 --> 00:11:02,850
this

223
00:11:02,850 --> 00:11:04,769
on a document that's<font color="#E5E5E5"> I don't know a</font>

224
00:11:04,769 --> 00:11:08,389
million<font color="#E5E5E5"> words million characters long</font>

225
00:11:08,389 --> 00:11:12,149
then the<font color="#CCCCCC"> size of</font><font color="#E5E5E5"> this unrolled</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> 10</font>

226
00:11:12,149 --> 00:11:18,180
is has a million circles here and so

227
00:11:18,180 --> 00:11:21,089
that's fine<font color="#E5E5E5"> going forwards right there</font>

228
00:11:21,089 --> 00:11:22,560
when I<font color="#E5E5E5"> finally get to the end</font><font color="#CCCCCC"> and I say</font>

229
00:11:22,560 --> 00:11:24,000
here's my character<font color="#E5E5E5"> and actually</font>

230
00:11:24,000 --> 00:11:26,120
remember we're doing<font color="#E5E5E5"> multi output now so</font>

231
00:11:26,120 --> 00:11:30,029
multi output looks<font color="#E5E5E5"> like this right or if</font>

232
00:11:30,029 --> 00:11:32,009
we were<font color="#E5E5E5"> to draw the unrolled version of</font>

233
00:11:32,009 --> 00:11:34,860
multi output<font color="#E5E5E5"> we would have a triangle</font>

234
00:11:34,860 --> 00:11:39,600
coming off<font color="#E5E5E5"> at every point okay so the</font>

235
00:11:39,600 --> 00:11:42,360
problem<font color="#CCCCCC"> is that then when we do back</font>

236
00:11:42,360 --> 00:11:44,850
propagation<font color="#E5E5E5"> we're calculating</font><font color="#CCCCCC"> you know</font>

237
00:11:44,850 --> 00:11:49,040
how much does the error at character<font color="#E5E5E5"> one</font>

238
00:11:49,040 --> 00:11:52,259
impact<font color="#E5E5E5"> the final answer how much does</font>

239
00:11:52,259 --> 00:11:54,360
the error character<font color="#E5E5E5"> to impact the final</font>

240
00:11:54,360 --> 00:11:56,819
answer and<font color="#E5E5E5"> so forth and so</font><font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to go</font>

241
00:11:56,819 --> 00:12:00,000
back<font color="#E5E5E5"> through and say like how do we</font><font color="#CCCCCC"> have</font>

242
00:12:00,000 --> 00:12:02,130
to update<font color="#E5E5E5"> our weights based on all</font><font color="#CCCCCC"> of</font>

243
00:12:02,130 --> 00:12:05,550
those you<font color="#E5E5E5"> know errors and so if there</font>

244
00:12:05,550 --> 00:12:09,180
are our million characters<font color="#E5E5E5"> my unrolled R</font>

245
00:12:09,180 --> 00:12:12,209
and N is a million layers long I have a

246
00:12:12,209 --> 00:12:15,529
1 million<font color="#CCCCCC"> layer</font><font color="#E5E5E5"> fully connected Network</font>

247
00:12:15,529 --> 00:12:18,120
<font color="#E5E5E5">all right and like I didn't have to</font>

248
00:12:18,120 --> 00:12:19,680
write the million layers because I have

249
00:12:19,680 --> 00:12:21,269
for loop and the for loops hidden away

250
00:12:21,269 --> 00:12:24,029
behind that you know<font color="#E5E5E5"> the self dot R and</font>

251
00:12:24,029 --> 00:12:28,800
<font color="#CCCCCC">n but</font><font color="#E5E5E5"> it's still there right we so so</font>

252
00:12:28,800 --> 00:12:31,290
this is<font color="#CCCCCC"> actually a 1 million layer fully</font>

253
00:12:31,290 --> 00:12:33,269
connected Network<font color="#CCCCCC"> and so the problem</font>

254
00:12:33,269 --> 00:12:34,829
with<font color="#CCCCCC"> that is it's going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be very</font>

255
00:12:34,829 --> 00:12:37,439
memory intensive<font color="#E5E5E5"> because</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to do</font>

256
00:12:37,439 --> 00:12:39,630
the chain rule<font color="#CCCCCC"> I have to be able</font><font color="#E5E5E5"> to</font>

257
00:12:39,630 --> 00:12:42,170
multiply at every step like you know

258
00:12:42,170 --> 00:12:46,829
after a<font color="#CCCCCC"> few times</font><font color="#E5E5E5"> she</font><font color="#CCCCCC"> acts right and so</font>

259
00:12:46,829 --> 00:12:48,120
like I've got<font color="#E5E5E5"> that means I have to</font>

260
00:12:48,120 --> 00:12:50,790
remember that<font color="#CCCCCC"> those values you the value</font>

261
00:12:50,790 --> 00:12:53,339
<font color="#E5E5E5">of every set of layers</font><font color="#CCCCCC"> so I'm gonna have</font>

262
00:12:53,339 --> 00:12:54,870
to<font color="#CCCCCC"> remember all those million layers and</font>

263
00:12:54,870 --> 00:12:56,009
I'm going<font color="#E5E5E5"> to do have to have to do a</font>

264
00:12:56,009 --> 00:12:57,990
million multiplications<font color="#E5E5E5"> and I'm going to</font>

265
00:12:57,990 --> 00:13:01,680
have to do that every<font color="#CCCCCC"> batch</font><font color="#E5E5E5"> okay so that</font>

266
00:13:01,680 --> 00:13:05,399
<font color="#E5E5E5">would be bad</font><font color="#CCCCCC"> so to avoid that</font><font color="#E5E5E5"> we</font>

267
00:13:05,399 --> 00:13:07,649
basically say<font color="#CCCCCC"> all right well from time</font>

268
00:13:07,649 --> 00:13:10,860
to time<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> you to forget your</font>

269
00:13:10,860 --> 00:13:13,500
<font color="#E5E5E5">history</font><font color="#CCCCCC"> okay so we</font><font color="#E5E5E5"> can still remember</font>

270
00:13:13,500 --> 00:13:15,750
<font color="#E5E5E5">the state right which is to</font><font color="#CCCCCC"> remember</font>

271
00:13:15,750 --> 00:13:16,560
like what's the

272
00:13:16,560 --> 00:13:19,769
values in<font color="#CCCCCC"> our hidden matrix</font><font color="#E5E5E5"> right but we</font>

273
00:13:19,769 --> 00:13:21,569
can<font color="#E5E5E5"> remember the state without</font>

274
00:13:21,569 --> 00:13:23,519
<font color="#E5E5E5">remembering everything about how we got</font>

275
00:13:23,519 --> 00:13:23,970
there

276
00:13:23,970 --> 00:13:27,300
<font color="#E5E5E5">so there's a little</font><font color="#CCCCCC"> function called</font>

277
00:13:27,300 --> 00:13:35,360
repackage variable which literally<font color="#E5E5E5"> is</font>

278
00:13:35,360 --> 00:13:41,189
<font color="#E5E5E5">just this right it just simply says grab</font>

279
00:13:41,189 --> 00:13:42,990
the tensor out of it

280
00:13:42,990 --> 00:13:44,939
right because remember<font color="#E5E5E5"> the tensor itself</font>

281
00:13:44,939 --> 00:13:46,889
<font color="#E5E5E5">doesn't have any concept of history</font>

282
00:13:46,889 --> 00:13:49,499
right and create a new variable out<font color="#CCCCCC"> of</font>

283
00:13:49,499 --> 00:13:51,420
that<font color="#E5E5E5"> and so this</font><font color="#CCCCCC"> variables going</font><font color="#E5E5E5"> to have</font>

284
00:13:51,420 --> 00:13:55,110
the same value<font color="#E5E5E5"> but no no history of</font>

285
00:13:55,110 --> 00:13:57,420
operations and<font color="#E5E5E5"> therefore when</font><font color="#CCCCCC"> it tries</font>

286
00:13:57,420 --> 00:13:59,819
<font color="#CCCCCC">to back propagate it all it'll</font><font color="#E5E5E5"> stop</font>

287
00:13:59,819 --> 00:14:00,269
there

288
00:14:00,269 --> 00:14:02,579
so basically what we're going<font color="#CCCCCC"> to do then</font>

289
00:14:02,579 --> 00:14:05,279
is we're going<font color="#CCCCCC"> to call</font><font color="#E5E5E5"> this in our</font>

290
00:14:05,279 --> 00:14:07,529
forward<font color="#E5E5E5"> so that means it's going to do</font>

291
00:14:07,529 --> 00:14:09,899
<font color="#E5E5E5">add characters it's going to back</font>

292
00:14:09,899 --> 00:14:13,740
propagate through eight<font color="#CCCCCC"> layers it's</font>

293
00:14:13,740 --> 00:14:15,779
going to keep<font color="#E5E5E5"> track of the</font><font color="#CCCCCC"> actual values</font>

294
00:14:15,779 --> 00:14:18,329
in our<font color="#E5E5E5"> hidden</font><font color="#CCCCCC"> state but it's going</font><font color="#E5E5E5"> to</font>

295
00:14:18,329 --> 00:14:20,029
throw<font color="#E5E5E5"> away at the end of those eight</font>

296
00:14:20,029 --> 00:14:24,329
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> its history of operations so this</font>

297
00:14:24,329 --> 00:14:27,720
is this approach<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> called back prop</font>

298
00:14:27,720 --> 00:14:30,870
through time<font color="#CCCCCC"> and you know when you read</font>

299
00:14:30,870 --> 00:14:32,490
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it online people make it sound</font>

300
00:14:32,490 --> 00:14:36,089
like<font color="#E5E5E5"> like a different algorithm or some</font>

301
00:14:36,089 --> 00:14:38,399
big insight or something but it's it's

302
00:14:38,399 --> 00:14:40,379
not<font color="#CCCCCC"> at all</font><font color="#E5E5E5"> right it's just</font><font color="#CCCCCC"> saying hey</font>

303
00:14:40,379 --> 00:14:43,889
<font color="#E5E5E5">after our for loop you</font><font color="#CCCCCC"> know just throw</font>

304
00:14:43,889 --> 00:14:46,410
<font color="#CCCCCC">away</font><font color="#E5E5E5"> your your history operations and</font>

305
00:14:46,410 --> 00:14:48,600
start afresh<font color="#CCCCCC"> so we're keeping</font><font color="#E5E5E5"> our hidden</font>

306
00:14:48,600 --> 00:14:50,879
state but we're not<font color="#CCCCCC"> keeping our</font><font color="#E5E5E5"> hidden</font>

307
00:14:50,879 --> 00:14:56,699
<font color="#E5E5E5">States history okay so that's that's</font>

308
00:14:56,699 --> 00:14:58,110
<font color="#CCCCCC">wrinkle number</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what this</font>

309
00:14:58,110 --> 00:15:00,600
repackage bar is<font color="#E5E5E5"> doing and so what do</font>

310
00:15:00,600 --> 00:15:01,110
you see

311
00:15:01,110 --> 00:15:05,339
BP BP<font color="#CCCCCC"> TT</font><font color="#E5E5E5"> that's referring to</font><font color="#CCCCCC"> that crop</font>

312
00:15:05,339 --> 00:15:07,439
through time and you<font color="#E5E5E5"> might remember we</font>

313
00:15:07,439 --> 00:15:10,769
<font color="#E5E5E5">saw that in our original</font><font color="#CCCCCC"> errand in</font>

314
00:15:10,769 --> 00:15:14,129
<font color="#CCCCCC">Lesson we had a variable called BP t t</font>

315
00:15:14,129 --> 00:15:16,589
equals<font color="#E5E5E5"> 70 and so when we set that</font>

316
00:15:16,589 --> 00:15:18,990
they're<font color="#E5E5E5"> actually saying how many layers</font>

317
00:15:18,990 --> 00:15:22,019
<font color="#CCCCCC">backprop through another good</font><font color="#E5E5E5"> reason not</font>

318
00:15:22,019 --> 00:15:23,699
to back<font color="#CCCCCC"> crop through too</font><font color="#E5E5E5"> many layers is</font>

319
00:15:23,699 --> 00:15:26,149
if you have any kind<font color="#E5E5E5"> of gradient</font>

320
00:15:26,149 --> 00:15:28,649
<font color="#E5E5E5">instability like gradient explosion or</font>

321
00:15:28,649 --> 00:15:29,379
gradients

322
00:15:29,379 --> 00:15:31,660
banishing<font color="#CCCCCC"> you know too many</font><font color="#E5E5E5"> more of the</font>

323
00:15:31,660 --> 00:15:33,970
more layers you have the harder<font color="#E5E5E5"> the</font>

324
00:15:33,970 --> 00:15:37,029
network s to<font color="#CCCCCC"> Train</font><font color="#E5E5E5"> so smaller and less</font>

325
00:15:37,029 --> 00:15:40,569
resilient on the other hand<font color="#CCCCCC"> and longer</font>

326
00:15:40,569 --> 00:15:43,479
value for<font color="#CCCCCC"> VP TT</font><font color="#E5E5E5"> means that you're able</font>

327
00:15:43,479 --> 00:15:48,220
<font color="#CCCCCC">to explicitly capture a longer kind of</font>

328
00:15:48,220 --> 00:15:53,109
memory more<font color="#E5E5E5"> state okay</font><font color="#CCCCCC"> so that's a</font>

329
00:15:53,109 --> 00:15:55,379
that's something that you get to tune

330
00:15:55,379 --> 00:15:59,699
<font color="#E5E5E5">when you create your area</font>

331
00:16:00,389 --> 00:16:06,339
<font color="#E5E5E5">all right wrinkle number two is how are</font>

332
00:16:06,339 --> 00:16:09,789
<font color="#E5E5E5">we going to put the data into this right</font>

333
00:16:09,789 --> 00:16:12,489
<font color="#E5E5E5">like it's all very well the way I</font>

334
00:16:12,489 --> 00:16:16,949
described<font color="#E5E5E5"> it just now where we said you</font>

335
00:16:19,499 --> 00:16:24,309
<font color="#CCCCCC">know we could do</font><font color="#E5E5E5"> this and we can first</font>

336
00:16:24,309 --> 00:16:27,489
<font color="#E5E5E5">of all look at this section then this</font>

337
00:16:27,489 --> 00:16:30,339
<font color="#E5E5E5">section in this section but we're going</font>

338
00:16:30,339 --> 00:16:33,069
<font color="#CCCCCC">to do a mini batch</font><font color="#E5E5E5"> at a time</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> we</font>

339
00:16:33,069 --> 00:16:35,970
<font color="#E5E5E5">want to do a bunch at a time</font>

340
00:16:35,970 --> 00:16:43,329
so in other words we want<font color="#E5E5E5"> to say let's</font>

341
00:16:43,329 --> 00:16:45,989
do it like this

342
00:16:50,260 --> 00:16:53,270
so<font color="#CCCCCC"> mini-batch number one would say let's</font>

343
00:16:53,270 --> 00:16:56,600
<font color="#E5E5E5">look at this section</font><font color="#CCCCCC"> and predict that</font>

344
00:16:56,600 --> 00:16:59,260
section<font color="#E5E5E5"> and at the same time in parallel</font>

345
00:16:59,260 --> 00:17:01,370
<font color="#CCCCCC">let's look at</font><font color="#E5E5E5"> this totally different</font>

346
00:17:01,370 --> 00:17:04,430
section<font color="#CCCCCC"> and predict this</font><font color="#E5E5E5"> and at the same</font>

347
00:17:04,430 --> 00:17:06,290
time<font color="#CCCCCC"> in parallel let's</font><font color="#E5E5E5"> look at this</font>

348
00:17:06,290 --> 00:17:08,510
totally<font color="#E5E5E5"> different section</font><font color="#CCCCCC"> and predict</font>

349
00:17:08,510 --> 00:17:12,170
<font color="#E5E5E5">this right and so then because remember</font>

350
00:17:12,170 --> 00:17:16,339
in<font color="#CCCCCC"> our in our hidden state we have a</font>

351
00:17:16,339 --> 00:17:18,589
vector of hidden state for everything in

352
00:17:18,589 --> 00:17:20,089
our<font color="#E5E5E5"> mini batch right so it's going to</font>

353
00:17:20,089 --> 00:17:22,099
<font color="#E5E5E5">keep track of at the end of this is</font>

354
00:17:22,099 --> 00:17:23,780
going<font color="#E5E5E5"> to be a you know a vector here a</font>

355
00:17:23,780 --> 00:17:25,849
vector here<font color="#E5E5E5"> a vector here and then we</font>

356
00:17:25,849 --> 00:17:28,520
can<font color="#E5E5E5"> move across to the</font><font color="#CCCCCC"> next one and say</font>

357
00:17:28,520 --> 00:17:31,310
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so this part of</font><font color="#E5E5E5"> the mini batch use</font>

358
00:17:31,310 --> 00:17:34,280
this to predict that<font color="#E5E5E5"> and use this to</font>

359
00:17:34,280 --> 00:17:36,770
predict<font color="#E5E5E5"> that and use this to predict</font>

360
00:17:36,770 --> 00:17:38,930
that<font color="#E5E5E5"> right so you can see that we're</font>

361
00:17:38,930 --> 00:17:40,730
moving<font color="#E5E5E5"> that we've got like a number of</font>

362
00:17:40,730 --> 00:17:43,730
totally separate bits of our text<font color="#E5E5E5"> that</font>

363
00:17:43,730 --> 00:17:46,510
we're<font color="#CCCCCC"> moving through in parallel right</font>

364
00:17:46,510 --> 00:17:48,920
<font color="#E5E5E5">so hopefully this is going to ring a few</font>

365
00:17:48,920 --> 00:17:53,110
bells for<font color="#CCCCCC"> you because</font><font color="#E5E5E5"> what happened was</font>

366
00:17:53,110 --> 00:17:56,450
was back when we<font color="#CCCCCC"> started looking at</font>

367
00:17:56,450 --> 00:17:58,820
torch<font color="#CCCCCC"> texture</font><font color="#E5E5E5"> the first time we</font><font color="#CCCCCC"> started</font>

368
00:17:58,820 --> 00:18:00,590
<font color="#E5E5E5">talking about how it creates these mini</font>

369
00:18:00,590 --> 00:18:03,680
batches<font color="#E5E5E5"> and I said what happened was we</font>

370
00:18:03,680 --> 00:18:07,930
took our whole big long document

371
00:18:07,930 --> 00:18:10,670
<font color="#E5E5E5">consisting of like you know the entire</font>

372
00:18:10,670 --> 00:18:13,130
works of nature<font color="#CCCCCC"> or all of the IMDB</font>

373
00:18:13,130 --> 00:18:15,200
reviews concatenated together<font color="#CCCCCC"> or</font>

374
00:18:15,200 --> 00:18:17,750
<font color="#E5E5E5">whatever and a lot of a lot</font><font color="#CCCCCC"> of you not</font>

375
00:18:17,750 --> 00:18:19,010
surprisingly because<font color="#CCCCCC"> this really</font><font color="#E5E5E5"> said</font>

376
00:18:19,010 --> 00:18:20,750
this<font color="#E5E5E5"> is really weird at first a lot of</font>

377
00:18:20,750 --> 00:18:22,160
you didn't<font color="#E5E5E5"> quite hear what I said</font>

378
00:18:22,160 --> 00:18:24,980
correctly<font color="#E5E5E5"> what I said was we split this</font>

379
00:18:24,980 --> 00:18:29,390
into 64 equal sized chunks<font color="#E5E5E5"> and a lot of</font>

380
00:18:29,390 --> 00:18:31,940
your brains when Jeremy just said we

381
00:18:31,940 --> 00:18:35,030
split this into chunks<font color="#E5E5E5"> of size 64 but</font>

382
00:18:35,030 --> 00:18:37,130
that's not what<font color="#CCCCCC"> Theresa</font><font color="#E5E5E5"> Jeremy said we</font>

383
00:18:37,130 --> 00:18:40,160
split it into 64<font color="#E5E5E5"> equal sized chunks</font>

384
00:18:40,160 --> 00:18:42,950
right<font color="#E5E5E5"> so if this whole</font><font color="#CCCCCC"> thing was</font><font color="#E5E5E5"> length</font>

385
00:18:42,950 --> 00:18:45,680
<font color="#E5E5E5">64 million</font><font color="#CCCCCC"> right which would be a</font>

386
00:18:45,680 --> 00:18:49,190
reasonable sized corpus not an<font color="#E5E5E5"> unusual</font>

387
00:18:49,190 --> 00:18:51,950
size corpus<font color="#E5E5E5"> then each</font><font color="#CCCCCC"> of our 64 chunks</font>

388
00:18:51,950 --> 00:18:55,240
<font color="#E5E5E5">would have been of length 1 million</font>

389
00:18:55,240 --> 00:18:58,520
right<font color="#CCCCCC"> and so then what</font><font color="#E5E5E5"> we did</font><font color="#CCCCCC"> was we</font>

390
00:18:58,520 --> 00:19:01,070
talked the first<font color="#E5E5E5"> chunk of 1</font><font color="#CCCCCC"> million and</font>

391
00:19:01,070 --> 00:19:03,020
we put it here

392
00:19:03,020 --> 00:19:04,790
and then we took<font color="#E5E5E5"> the second chunk of 1</font>

393
00:19:04,790 --> 00:19:06,290
million<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we put it here</font>

394
00:19:06,290 --> 00:19:08,510
the third chunk<font color="#E5E5E5"> of 1 million we put it</font>

395
00:19:08,510 --> 00:19:13,640
here<font color="#CCCCCC"> and so forth to create 64</font><font color="#E5E5E5"> chunks</font>

396
00:19:13,640 --> 00:19:18,410
and then<font color="#E5E5E5"> H</font><font color="#CCCCCC"> mini-batch consisted of us</font>

397
00:19:18,410 --> 00:19:22,150
going let's split this<font color="#CCCCCC"> down here</font><font color="#E5E5E5"> and</font>

398
00:19:22,150 --> 00:19:27,950
here and<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> each</font><font color="#CCCCCC"> of these is of</font>

399
00:19:27,950 --> 00:19:34,340
<font color="#E5E5E5">size</font><font color="#CCCCCC"> BP te T which I think we had</font>

400
00:19:34,340 --> 00:19:37,100
something like<font color="#CCCCCC"> 70 right and so what</font>

401
00:19:37,100 --> 00:19:39,679
happened<font color="#CCCCCC"> was we said alright let's look</font>

402
00:19:39,679 --> 00:19:42,850
at<font color="#E5E5E5"> our first mini batch is all of these</font>

403
00:19:42,850 --> 00:19:45,890
right so we do all of those at<font color="#E5E5E5"> once and</font>

404
00:19:45,890 --> 00:19:49,840
predict everything<font color="#CCCCCC"> accrue off set by</font><font color="#E5E5E5"> one</font>

405
00:19:49,840 --> 00:19:53,690
and then at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> of that first mini</font>

406
00:19:53,690 --> 00:19:57,410
batch<font color="#E5E5E5"> we went to the second chunk right</font>

407
00:19:57,410 --> 00:19:58,880
<font color="#E5E5E5">and used each one of these to predict</font>

408
00:19:58,880 --> 00:20:03,200
the next one offset by one<font color="#E5E5E5"> ok so that's</font>

409
00:20:03,200 --> 00:20:06,380
that's why we did that<font color="#CCCCCC"> slightly weird</font>

410
00:20:06,380 --> 00:20:08,210
thing<font color="#E5E5E5"> right</font><font color="#CCCCCC"> is that we wanted</font><font color="#E5E5E5"> to have a</font>

411
00:20:08,210 --> 00:20:10,340
bunch<font color="#CCCCCC"> of things</font><font color="#E5E5E5"> we can look</font><font color="#CCCCCC"> through in</font>

412
00:20:10,340 --> 00:20:13,490
parallel<font color="#CCCCCC"> each of</font><font color="#E5E5E5"> which like hopefully</font><font color="#CCCCCC"> a</font>

413
00:20:13,490 --> 00:20:15,740
far enough away from<font color="#E5E5E5"> each other</font><font color="#CCCCCC"> you know</font>

414
00:20:15,740 --> 00:20:17,480
<font color="#E5E5E5">that we don't have to worry about the</font>

415
00:20:17,480 --> 00:20:19,040
<font color="#E5E5E5">fact that you know the truth is this</font>

416
00:20:19,040 --> 00:20:21,290
starting the start of<font color="#CCCCCC"> this million</font>

417
00:20:21,290 --> 00:20:23,120
<font color="#CCCCCC">characters was actually in the middle</font><font color="#E5E5E5"> of</font>

418
00:20:23,120 --> 00:20:26,450
a sentence but you know who<font color="#E5E5E5"> cares right</font>

419
00:20:26,450 --> 00:20:28,130
because it's you know<font color="#CCCCCC"> that only happens</font>

420
00:20:28,130 --> 00:20:33,880
once every million characters<font color="#CCCCCC"> honey I</font>

421
00:20:33,880 --> 00:20:36,170
was wondering<font color="#CCCCCC"> if you could talk a little</font>

422
00:20:36,170 --> 00:20:38,690
bit more<font color="#CCCCCC"> about augmentation for this</font>

423
00:20:38,690 --> 00:20:41,420
kind of<font color="#E5E5E5"> data set and how to data</font>

424
00:20:41,420 --> 00:20:42,890
augmentation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this kind of data</font><font color="#CCCCCC"> said</font>

425
00:20:42,890 --> 00:20:46,490
yeah no<font color="#CCCCCC"> I can't</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't I really</font>

426
00:20:46,490 --> 00:20:49,220
know a good way<font color="#CCCCCC"> it's one</font><font color="#E5E5E5"> of the things</font>

427
00:20:49,220 --> 00:20:52,040
I'm going<font color="#E5E5E5"> to be studying between now</font><font color="#CCCCCC"> and</font>

428
00:20:52,040 --> 00:20:55,910
<font color="#E5E5E5">part</font><font color="#CCCCCC"> two there have been some recent</font>

429
00:20:55,910 --> 00:20:58,880
developments<font color="#CCCCCC"> particularly something</font><font color="#E5E5E5"> we</font>

430
00:20:58,880 --> 00:21:00,410
talked about<font color="#E5E5E5"> the machine learning course</font>

431
00:21:00,410 --> 00:21:01,790
and I<font color="#E5E5E5"> think we've refinished in here</font>

432
00:21:01,790 --> 00:21:04,820
which was somebody for a recent<font color="#CCCCCC"> careful</font>

433
00:21:04,820 --> 00:21:06,830
competition<font color="#E5E5E5"> won it by</font><font color="#CCCCCC"> doing data</font>

434
00:21:06,830 --> 00:21:12,620
augmentation by randomly inserting parts

435
00:21:12,620 --> 00:21:16,070
of different<font color="#E5E5E5"> rows basic</font>

436
00:21:16,070 --> 00:21:18,289
something like<font color="#E5E5E5"> that may be useful here</font>

437
00:21:18,289 --> 00:21:20,000
and I've seen it I've seen some papers

438
00:21:20,000 --> 00:21:23,389
<font color="#CCCCCC">that do something like that but</font><font color="#E5E5E5"> yeah I</font>

439
00:21:23,389 --> 00:21:26,240
haven't<font color="#E5E5E5"> seen any kind of recent ish</font>

440
00:21:26,240 --> 00:21:28,129
state-of-the-art<font color="#CCCCCC"> new</font>

441
00:21:28,129 --> 00:21:32,480
NLP<font color="#E5E5E5"> papers that that are</font><font color="#CCCCCC"> doing this kind</font>

442
00:21:32,480 --> 00:21:33,950
<font color="#CCCCCC">of data</font><font color="#E5E5E5"> orientation so it's something</font>

443
00:21:33,950 --> 00:21:39,259
we're planning<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work on so</font><font color="#CCCCCC"> it's</font>

444
00:21:39,259 --> 00:21:47,059
<font color="#CCCCCC">generally how the</font><font color="#E5E5E5"> issues be PTT</font><font color="#CCCCCC"> so</font>

445
00:21:47,059 --> 00:21:48,049
there's a<font color="#E5E5E5"> couple of</font><font color="#CCCCCC"> things to think</font>

446
00:21:48,049 --> 00:21:49,909
<font color="#E5E5E5">about when you pick your</font><font color="#CCCCCC"> be PTT the</font>

447
00:21:49,909 --> 00:21:52,009
first is that you'll note<font color="#CCCCCC"> that the the</font>

448
00:21:52,009 --> 00:21:57,220
<font color="#E5E5E5">matrix size for a mini batch has a B PTT</font>

449
00:21:57,220 --> 00:22:08,120
the the TT by batch size so one issue is

450
00:22:08,120 --> 00:22:11,500
your<font color="#E5E5E5"> GPU Ram needs to be able to fit</font>

451
00:22:11,500 --> 00:22:14,899
that by<font color="#CCCCCC"> your embedding matrix racks</font>

452
00:22:14,899 --> 00:22:17,090
every one of<font color="#E5E5E5"> these is going to have</font><font color="#CCCCCC"> B of</font>

453
00:22:17,090 --> 00:22:20,330
length<font color="#E5E5E5"> embedding length plus all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

454
00:22:20,330 --> 00:22:23,389
hidden<font color="#CCCCCC"> state</font><font color="#E5E5E5"> so one thing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> to you know</font>

455
00:22:23,389 --> 00:22:25,370
if you<font color="#E5E5E5"> get a cruder out of memory error</font>

456
00:22:25,370 --> 00:22:29,659
<font color="#E5E5E5">you need to reduce one</font><font color="#CCCCCC"> of those</font><font color="#E5E5E5"> if</font>

457
00:22:29,659 --> 00:22:33,139
you're<font color="#CCCCCC"> finding your training is</font><font color="#E5E5E5"> very</font>

458
00:22:33,139 --> 00:22:35,269
unstable<font color="#CCCCCC"> like your</font><font color="#E5E5E5"> loss is shooting off</font>

459
00:22:35,269 --> 00:22:38,629
<font color="#CCCCCC">to</font><font color="#E5E5E5"> LAN suddenly then you could try to</font>

460
00:22:38,629 --> 00:22:40,580
<font color="#CCCCCC">decreasing your B PTT because you've got</font>

461
00:22:40,580 --> 00:22:43,779
less layers to gradient explode through

462
00:22:43,779 --> 00:22:47,090
<font color="#CCCCCC">it's too slow</font><font color="#E5E5E5"> you could try decreasing</font>

463
00:22:47,090 --> 00:22:49,460
your<font color="#E5E5E5"> B PTT because it's</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to kind of</font>

464
00:22:49,460 --> 00:22:51,169
do one of<font color="#E5E5E5"> those steps at a</font><font color="#CCCCCC"> time like</font>

465
00:22:51,169 --> 00:22:57,889
that<font color="#E5E5E5"> for loop can't be paralyzed</font><font color="#CCCCCC"> well I</font>

466
00:22:57,889 --> 00:23:00,769
say<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there's a recent</font><font color="#CCCCCC"> thing called</font>

467
00:23:00,769 --> 00:23:03,139
QR<font color="#E5E5E5"> an N which is will hopefully talk</font>

468
00:23:03,139 --> 00:23:04,549
about in part<font color="#E5E5E5"> two which kind of does</font>

469
00:23:04,549 --> 00:23:05,960
paralyze<font color="#CCCCCC"> it but the</font><font color="#E5E5E5"> versions we're</font>

470
00:23:05,960 --> 00:23:08,419
looking at don't paralyze<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so there</font>

471
00:23:08,419 --> 00:23:09,740
would be<font color="#E5E5E5"> the main issues</font><font color="#CCCCCC"> I think before</font>

472
00:23:09,740 --> 00:23:12,169
<font color="#E5E5E5">look at</font><font color="#CCCCCC"> performance look at</font><font color="#E5E5E5"> memory and</font>

473
00:23:12,169 --> 00:23:14,929
look at stability<font color="#E5E5E5"> and try and find a</font>

474
00:23:14,929 --> 00:23:17,149
number<font color="#E5E5E5"> that's you know as high as you</font>

475
00:23:17,149 --> 00:23:19,490
<font color="#E5E5E5">can make it but all of those things work</font>

476
00:23:19,490 --> 00:23:21,820
for you

477
00:23:23,100 --> 00:23:29,220
<font color="#E5E5E5">okay so trying to get although that</font>

478
00:23:29,220 --> 00:23:31,299
<font color="#E5E5E5">chunking and lining up and anything to</font>

479
00:23:31,299 --> 00:23:33,009
work is more code than I want to<font color="#CCCCCC"> write</font>

480
00:23:33,009 --> 00:23:35,499
so for<font color="#E5E5E5"> this section we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go</font>

481
00:23:35,499 --> 00:23:37,690
back<font color="#E5E5E5"> and</font><font color="#CCCCCC"> use torched s together</font><font color="#E5E5E5"> okay</font>

482
00:23:37,690 --> 00:23:44,769
so when you're<font color="#CCCCCC"> using AP</font><font color="#E5E5E5"> is like fast</font><font color="#CCCCCC"> AI</font>

483
00:23:44,769 --> 00:23:46,809
and torch text which in these case these

484
00:23:46,809 --> 00:23:48,940
two<font color="#CCCCCC"> API is a desire to or</font><font color="#E5E5E5"> at least from</font>

485
00:23:48,940 --> 00:23:50,289
<font color="#E5E5E5">the first day I</font><font color="#CCCCCC"> site designed to</font><font color="#E5E5E5"> work</font>

486
00:23:50,289 --> 00:23:52,749
together<font color="#CCCCCC"> you often have a choice which</font>

487
00:23:52,749 --> 00:23:55,960
<font color="#E5E5E5">is like okay this API has a number of</font>

488
00:23:55,960 --> 00:23:58,299
methods that expect the data in this

489
00:23:58,299 --> 00:24:01,029
kind of format<font color="#E5E5E5"> and you can either change</font>

490
00:24:01,029 --> 00:24:03,549
<font color="#CCCCCC">your data to fit that format or you can</font>

491
00:24:03,549 --> 00:24:07,480
write your own<font color="#E5E5E5"> data set subclass to</font>

492
00:24:07,480 --> 00:24:08,919
handle the format that<font color="#CCCCCC"> your data is</font>

493
00:24:08,919 --> 00:24:12,809
already in<font color="#E5E5E5"> I've noticed on the forum</font><font color="#CCCCCC"> a</font>

494
00:24:12,809 --> 00:24:14,919
lot of you are spending a<font color="#CCCCCC"> lot of time</font>

495
00:24:14,919 --> 00:24:17,769
writing your own<font color="#CCCCCC"> dataset classes</font><font color="#E5E5E5"> whereas</font>

496
00:24:17,769 --> 00:24:20,679
I<font color="#CCCCCC"> am way lazier than you</font><font color="#E5E5E5"> and I spend my</font>

497
00:24:20,679 --> 00:24:23,080
time instead changing my data to<font color="#E5E5E5"> fit the</font>

498
00:24:23,080 --> 00:24:27,580
<font color="#E5E5E5">data set classes I have like I</font><font color="#CCCCCC"> that's</font>

499
00:24:27,580 --> 00:24:31,419
fine<font color="#CCCCCC"> and if you</font><font color="#E5E5E5"> realize like</font><font color="#CCCCCC"> oh there's</font>

500
00:24:31,419 --> 00:24:34,539
a kind<font color="#CCCCCC"> of a format of</font><font color="#E5E5E5"> data that me and</font>

501
00:24:34,539 --> 00:24:36,220
other people<font color="#CCCCCC"> are</font><font color="#E5E5E5"> likely</font><font color="#CCCCCC"> to be seen quite</font>

502
00:24:36,220 --> 00:24:37,840
often and it's not<font color="#CCCCCC"> in the first day our</font>

503
00:24:37,840 --> 00:24:40,210
library then by all means write the data

504
00:24:40,210 --> 00:24:42,610
set subclass it submitted as a PR and

505
00:24:42,610 --> 00:24:45,610
<font color="#E5E5E5">then everybody can benefit you know but</font>

506
00:24:45,610 --> 00:24:48,549
in this case I just<font color="#E5E5E5"> kind of thought</font><font color="#CCCCCC"> I</font>

507
00:24:48,549 --> 00:24:52,480
want to have some<font color="#CCCCCC"> Nietzsche data fed</font>

508
00:24:52,480 --> 00:24:55,869
<font color="#CCCCCC">into torch</font><font color="#E5E5E5"> text</font><font color="#CCCCCC"> I'm just going to put it</font>

509
00:24:55,869 --> 00:24:57,610
in the format<font color="#CCCCCC"> that</font><font color="#E5E5E5"> watch</font><font color="#CCCCCC"> text kind of</font>

510
00:24:57,610 --> 00:25:00,249
already<font color="#E5E5E5"> support so torch text already</font>

511
00:25:00,249 --> 00:25:02,440
<font color="#E5E5E5">has</font><font color="#CCCCCC"> or at</font><font color="#E5E5E5"> least the</font><font color="#CCCCCC"> first day I wrap her</font>

512
00:25:02,440 --> 00:25:04,090
<font color="#E5E5E5">around Twitter text already</font><font color="#CCCCCC"> has</font>

513
00:25:04,090 --> 00:25:05,529
<font color="#E5E5E5">something where you can have a training</font>

514
00:25:05,529 --> 00:25:09,220
path and a validation path and you know

515
00:25:09,220 --> 00:25:11,259
one or more text<font color="#E5E5E5"> files in each path</font>

516
00:25:11,259 --> 00:25:12,999
containing a<font color="#CCCCCC"> bunch of stuff</font><font color="#E5E5E5"> that's</font>

517
00:25:12,999 --> 00:25:14,889
concatenated together<font color="#E5E5E5"> for your language</font>

518
00:25:14,889 --> 00:25:17,740
model so in this case<font color="#E5E5E5"> all I did was I</font>

519
00:25:17,740 --> 00:25:21,249
made<font color="#E5E5E5"> a copy of my nature</font><font color="#CCCCCC"> file copied it</font>

520
00:25:21,249 --> 00:25:23,499
into training<font color="#E5E5E5"> made another copy stuck it</font>

521
00:25:23,499 --> 00:25:26,019
<font color="#CCCCCC">into</font><font color="#E5E5E5"> the validation and then in one of</font>

522
00:25:26,019 --> 00:25:29,049
the you<font color="#E5E5E5"> know in the training set</font><font color="#CCCCCC"> I did</font><font color="#E5E5E5"> I</font>

523
00:25:29,049 --> 00:25:32,259
deleted the last<font color="#CCCCCC"> twenty percent of rows</font>

524
00:25:32,259 --> 00:25:34,480
and<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> validation</font><font color="#E5E5E5"> set I deleted all</font>

525
00:25:34,480 --> 00:25:35,440
except<font color="#CCCCCC"> for the last</font><font color="#E5E5E5"> one</font>

526
00:25:35,440 --> 00:25:39,190
<font color="#E5E5E5">Center for us</font><font color="#CCCCCC"> and I was done</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so I</font>

527
00:25:39,190 --> 00:25:40,840
found this that in this case I<font color="#E5E5E5"> found</font>

528
00:25:40,840 --> 00:25:43,000
that easier<font color="#E5E5E5"> than writing a custom</font>

529
00:25:43,000 --> 00:25:45,490
<font color="#CCCCCC">dataset class</font><font color="#E5E5E5"> the other benefit</font><font color="#CCCCCC"> of doing</font>

530
00:25:45,490 --> 00:25:47,919
<font color="#E5E5E5">it</font><font color="#CCCCCC"> that way</font><font color="#E5E5E5"> was that I felt like it was</font>

531
00:25:47,919 --> 00:25:50,200
more realistic<font color="#CCCCCC"> to have a validation</font><font color="#E5E5E5"> set</font>

532
00:25:50,200 --> 00:25:53,230
<font color="#CCCCCC">that wasn't a random shuffled set of</font>

533
00:25:53,230 --> 00:25:56,500
rows of text<font color="#CCCCCC"> that was like a totally</font>

534
00:25:56,500 --> 00:25:59,379
separate part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the corpus because I</font>

535
00:25:59,379 --> 00:26:01,179
feel like in practice<font color="#E5E5E5"> you're very often</font>

536
00:26:01,179 --> 00:26:02,860
going<font color="#E5E5E5"> to be saying like oh I've got I</font>

537
00:26:02,860 --> 00:26:05,799
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> these books or these authors</font>

538
00:26:05,799 --> 00:26:07,210
I'm learning from and then I want to

539
00:26:07,210 --> 00:26:08,679
apply it to<font color="#E5E5E5"> these different books and</font>

540
00:26:08,679 --> 00:26:10,210
<font color="#E5E5E5">these different authors</font><font color="#CCCCCC"> you know so I</font>

541
00:26:10,210 --> 00:26:13,360
felt like for getting a more realistic

542
00:26:13,360 --> 00:26:15,730
validation of my<font color="#CCCCCC"> nietzsche model I</font>

543
00:26:15,730 --> 00:26:18,519
should use like<font color="#E5E5E5"> a whole separate piece</font>

544
00:26:18,519 --> 00:26:20,710
<font color="#E5E5E5">of the text</font><font color="#CCCCCC"> so in this case it's the</font>

545
00:26:20,710 --> 00:26:23,830
last you know<font color="#CCCCCC"> 20%</font><font color="#E5E5E5"> of the rows if the</font>

546
00:26:23,830 --> 00:26:28,450
corpus<font color="#E5E5E5"> so I haven't created</font><font color="#CCCCCC"> this for you</font>

547
00:26:28,450 --> 00:26:31,240
<font color="#E5E5E5">right intentionally because</font><font color="#CCCCCC"> you know</font>

548
00:26:31,240 --> 00:26:32,529
this is the kind<font color="#CCCCCC"> of stuff</font><font color="#E5E5E5"> I want to do</font>

549
00:26:32,529 --> 00:26:35,049
practicing<font color="#E5E5E5"> is making sure</font><font color="#CCCCCC"> that you're</font>

550
00:26:35,049 --> 00:26:36,549
familiar enough comfortable enough with

551
00:26:36,549 --> 00:26:38,049
with<font color="#CCCCCC"> batch or whatever that</font><font color="#E5E5E5"> you can</font>

552
00:26:38,049 --> 00:26:40,059
<font color="#CCCCCC">create these and that</font><font color="#E5E5E5"> you understand</font>

553
00:26:40,059 --> 00:26:42,629
what they<font color="#CCCCCC"> need to look</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> and so forth</font>

554
00:26:42,629 --> 00:26:48,220
so in this case you can see<font color="#E5E5E5"> I've now got</font>

555
00:26:48,220 --> 00:26:51,580
you know<font color="#CCCCCC"> a train and a validation here</font>

556
00:26:51,580 --> 00:26:57,159
and then I<font color="#E5E5E5"> could yeah</font><font color="#CCCCCC"> okay so you can</font>

557
00:26:57,159 --> 00:26:59,169
see<font color="#CCCCCC"> I've literally</font><font color="#E5E5E5"> just got one file</font><font color="#CCCCCC"> in</font>

558
00:26:59,169 --> 00:27:00,909
<font color="#CCCCCC">it because it's a fire when you're doing</font>

559
00:27:00,909 --> 00:27:02,860
a language model<font color="#E5E5E5"> ie predicting the next</font>

560
00:27:02,860 --> 00:27:04,750
<font color="#E5E5E5">character or predicting the</font><font color="#CCCCCC"> next word</font>

561
00:27:04,750 --> 00:27:07,480
<font color="#CCCCCC">you don't really need separate files</font>

562
00:27:07,480 --> 00:27:09,490
<font color="#CCCCCC">it's fine if</font><font color="#E5E5E5"> you do have separate files</font>

563
00:27:09,490 --> 00:27:11,110
but they just<font color="#E5E5E5"> get capped native together</font>

564
00:27:11,110 --> 00:27:15,419
anyway<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so that's my source data</font>

565
00:27:15,419 --> 00:27:19,059
<font color="#CCCCCC">and so here is you know</font><font color="#E5E5E5"> the same lines</font>

566
00:27:19,059 --> 00:27:20,919
of<font color="#E5E5E5"> code that we've seen</font><font color="#CCCCCC"> before and let's</font>

567
00:27:20,919 --> 00:27:22,240
go<font color="#E5E5E5"> over them again so it's a couple</font><font color="#CCCCCC"> of</font>

568
00:27:22,240 --> 00:27:25,600
<font color="#E5E5E5">lessons ago right so in torch text we</font>

569
00:27:25,600 --> 00:27:28,269
create this thing<font color="#CCCCCC"> called a field and the</font>

570
00:27:28,269 --> 00:27:31,889
field<font color="#CCCCCC"> initially is just a description of</font>

571
00:27:31,889 --> 00:27:36,129
how to go about<font color="#E5E5E5"> pre-processing the</font><font color="#CCCCCC"> test</font>

572
00:27:36,129 --> 00:27:38,860
<font color="#CCCCCC">okay now you in this</font><font color="#E5E5E5"> case I'm gonna say</font>

573
00:27:38,860 --> 00:27:41,470
hey<font color="#CCCCCC"> lowercase it</font><font color="#E5E5E5"> you know cuz I don't</font>

574
00:27:41,470 --> 00:27:44,080
mean now I think<font color="#E5E5E5"> about it there's no</font>

575
00:27:44,080 --> 00:27:45,070
<font color="#CCCCCC">particular reason to have done this</font>

576
00:27:45,070 --> 00:27:46,629
lower case upper case would work fine

577
00:27:46,629 --> 00:27:49,220
<font color="#CCCCCC">too and then how do I talk</font>

578
00:27:49,220 --> 00:27:50,659
<font color="#E5E5E5">maser</font><font color="#CCCCCC"> and so you might</font><font color="#E5E5E5"> remember last</font>

579
00:27:50,659 --> 00:27:53,480
<font color="#CCCCCC">time we used</font><font color="#E5E5E5"> a tokenization function</font>

580
00:27:53,480 --> 00:27:56,179
<font color="#E5E5E5">which kind of largely spit on white</font>

581
00:27:56,179 --> 00:27:57,770
space<font color="#E5E5E5"> and try to do some flavor things</font>

582
00:27:57,770 --> 00:27:59,780
with<font color="#E5E5E5"> punctuation</font><font color="#CCCCCC"> right and that gave us</font>

583
00:27:59,780 --> 00:28:02,179
<font color="#E5E5E5">a word model in this case</font><font color="#CCCCCC"> I want to</font>

584
00:28:02,179 --> 00:28:04,700
character model<font color="#E5E5E5"> so I actually want every</font>

585
00:28:04,700 --> 00:28:07,730
character put into a separate token<font color="#E5E5E5"> so I</font>

586
00:28:07,730 --> 00:28:10,250
could<font color="#E5E5E5"> just use the function list in</font>

587
00:28:10,250 --> 00:28:16,840
<font color="#E5E5E5">Python because list in Python does that</font>

588
00:28:16,840 --> 00:28:19,549
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is where you can kind of</font>

589
00:28:19,549 --> 00:28:23,690
see like understanding how libraries

590
00:28:23,690 --> 00:28:25,789
like torch<font color="#E5E5E5"> text and fast</font><font color="#CCCCCC"> ar e are</font>

591
00:28:25,789 --> 00:28:27,620
designed to be extended can make your

592
00:28:27,620 --> 00:28:30,200
<font color="#E5E5E5">life a lot easier right</font><font color="#CCCCCC"> so when you</font>

593
00:28:30,200 --> 00:28:33,440
<font color="#CCCCCC">realize that</font><font color="#E5E5E5"> very often</font><font color="#CCCCCC"> both</font><font color="#E5E5E5"> of these</font>

594
00:28:33,440 --> 00:28:35,870
libraries<font color="#E5E5E5"> kind of expect you to pass a</font>

595
00:28:35,870 --> 00:28:38,809
function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> does something and then</font>

596
00:28:38,809 --> 00:28:40,940
you realize like<font color="#E5E5E5"> oh I can write any</font>

597
00:28:40,940 --> 00:28:44,960
function I like<font color="#E5E5E5"> all right okay so this</font>

598
00:28:44,960 --> 00:28:47,510
is now<font color="#E5E5E5"> going to mean</font><font color="#CCCCCC"> that each</font><font color="#E5E5E5"> mini</font>

599
00:28:47,510 --> 00:28:49,570
<font color="#E5E5E5">batch is going to contain a list of</font>

600
00:28:49,570 --> 00:28:52,520
characters and so here's where we<font color="#E5E5E5"> get to</font>

601
00:28:52,520 --> 00:28:55,700
define<font color="#CCCCCC"> all our different parameters and</font>

602
00:28:55,700 --> 00:28:58,390
so to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> it the same as previous</font>

603
00:28:58,390 --> 00:29:00,530
sections of this notebook I'm going to

604
00:29:00,530 --> 00:29:03,350
use the same batch size<font color="#E5E5E5"> the same number</font>

605
00:29:03,350 --> 00:29:04,549
of characters<font color="#CCCCCC"> then they're going</font><font color="#E5E5E5"> to</font>

606
00:29:04,549 --> 00:29:06,650
rename it<font color="#CCCCCC"> to their PT t since we know</font>

607
00:29:06,650 --> 00:29:08,380
what that<font color="#CCCCCC"> means</font>

608
00:29:08,380 --> 00:29:12,250
the<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> size of the embedding</font>

609
00:29:12,250 --> 00:29:14,960
and the size of<font color="#E5E5E5"> our hidden</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> okay</font>

610
00:29:14,960 --> 00:29:16,400
remembering that<font color="#E5E5E5"> size of our hidden</font>

611
00:29:16,400 --> 00:29:21,110
state simply<font color="#E5E5E5"> means going all the way</font>

612
00:29:21,110 --> 00:29:25,159
back<font color="#E5E5E5"> to the start right and hidden</font>

613
00:29:25,159 --> 00:29:28,010
simply means the size of the state

614
00:29:28,010 --> 00:29:29,870
that's created by<font color="#E5E5E5"> each of those orange</font>

615
00:29:29,870 --> 00:29:31,640
<font color="#E5E5E5">arrows so it's the size of each</font><font color="#CCCCCC"> of those</font>

616
00:29:31,640 --> 00:29:37,870
circles yeah<font color="#E5E5E5"> okay</font>

617
00:29:38,290 --> 00:29:40,910
so having<font color="#E5E5E5"> done that we can</font><font color="#CCCCCC"> then create a</font>

618
00:29:40,910 --> 00:29:42,950
<font color="#E5E5E5">little dictionary saying what's our</font>

619
00:29:42,950 --> 00:29:45,260
training validation<font color="#CCCCCC"> and test set</font><font color="#E5E5E5"> in this</font>

620
00:29:45,260 --> 00:29:46,910
case I<font color="#CCCCCC"> don't have a separate test set so</font>

621
00:29:46,910 --> 00:29:50,240
I<font color="#E5E5E5"> just use the same thing and then I can</font>

622
00:29:50,240 --> 00:29:51,890
say all right<font color="#CCCCCC"> I want a language model</font>

623
00:29:51,890 --> 00:29:55,220
<font color="#CCCCCC">data subclass with</font><font color="#E5E5E5"> model data I'm going</font>

624
00:29:55,220 --> 00:29:58,250
<font color="#CCCCCC">to grab it</font><font color="#E5E5E5"> from text files</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is</font>

625
00:29:58,250 --> 00:30:03,230
my path and this is my field<font color="#E5E5E5"> which I</font>

626
00:30:03,230 --> 00:30:06,220
defined earlier<font color="#CCCCCC"> and these are my files</font>

627
00:30:06,220 --> 00:30:11,450
<font color="#E5E5E5">and these are my hyper parameters</font><font color="#CCCCCC"> min</font>

628
00:30:11,450 --> 00:30:12,740
<font color="#CCCCCC">fracks not going to do anything actually</font>

629
00:30:12,740 --> 00:30:14,780
<font color="#CCCCCC">in this case because</font><font color="#E5E5E5"> there's</font><font color="#CCCCCC"> not I don't</font>

630
00:30:14,780 --> 00:30:15,800
<font color="#CCCCCC">think</font><font color="#E5E5E5"> there's going to be any character</font>

631
00:30:15,800 --> 00:30:17,770
<font color="#CCCCCC">that appears less than three times</font>

632
00:30:17,770 --> 00:30:22,550
that's probably redundant<font color="#E5E5E5"> okay so at the</font>

633
00:30:22,550 --> 00:30:24,610
<font color="#E5E5E5">end of that it says there's going to be</font>

634
00:30:24,610 --> 00:30:29,210
<font color="#CCCCCC">963 batches to go through and so if you</font>

635
00:30:29,210 --> 00:30:31,180
<font color="#CCCCCC">think about it</font><font color="#E5E5E5"> that should be equal to</font>

636
00:30:31,180 --> 00:30:35,030
the number<font color="#CCCCCC"> of tokens</font><font color="#E5E5E5"> divided by the</font>

637
00:30:35,030 --> 00:30:38,810
batch<font color="#E5E5E5"> size divided by</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> PTT because</font>

638
00:30:38,810 --> 00:30:40,630
that's like the<font color="#CCCCCC"> size of</font><font color="#E5E5E5"> each of those</font>

639
00:30:40,630 --> 00:30:43,630
<font color="#CCCCCC">rectangles</font>

640
00:30:45,130 --> 00:30:47,690
you'll find that in practice it's not

641
00:30:47,690 --> 00:30:49,850
<font color="#E5E5E5">exactly that and the reason</font><font color="#CCCCCC"> it's not</font>

642
00:30:49,850 --> 00:30:52,400
exactly<font color="#E5E5E5"> that is that</font><font color="#CCCCCC"> the authors</font><font color="#E5E5E5"> of</font>

643
00:30:52,400 --> 00:30:56,000
torch<font color="#E5E5E5"> text</font><font color="#CCCCCC"> did something pretty smart</font>

644
00:30:56,000 --> 00:30:57,950
<font color="#E5E5E5">which I think we've briefly mentioned</font>

645
00:30:57,950 --> 00:30:59,840
this before they said okay we can't

646
00:30:59,840 --> 00:31:02,120
shuffle<font color="#CCCCCC"> the</font><font color="#E5E5E5"> data like with images we'd</font>

647
00:31:02,120 --> 00:31:03,650
like to shuffle<font color="#E5E5E5"> the order so every time</font>

648
00:31:03,650 --> 00:31:04,760
we<font color="#E5E5E5"> see them</font><font color="#CCCCCC"> in a different order</font><font color="#E5E5E5"> so</font>

649
00:31:04,760 --> 00:31:06,530
<font color="#E5E5E5">there's a bit</font><font color="#CCCCCC"> more random listed we</font>

650
00:31:06,530 --> 00:31:08,330
can't shuffle<font color="#CCCCCC"> because we need to be</font>

651
00:31:08,330 --> 00:31:11,210
<font color="#E5E5E5">contiguous but what we could do is</font>

652
00:31:11,210 --> 00:31:13,790
randomize the<font color="#E5E5E5"> length of you know</font>

653
00:31:13,790 --> 00:31:16,280
basically<font color="#CCCCCC"> randomize</font><font color="#E5E5E5"> be PTT</font><font color="#CCCCCC"> a little bit</font>

654
00:31:16,280 --> 00:31:19,820
each<font color="#CCCCCC"> time and so that's what PI torch</font>

655
00:31:19,820 --> 00:31:21,820
does it's not<font color="#E5E5E5"> always going to give us</font>

656
00:31:21,820 --> 00:31:26,720
exactly<font color="#CCCCCC"> 8 characters long 5%</font><font color="#E5E5E5"> of the time</font>

657
00:31:26,720 --> 00:31:30,140
it'll<font color="#E5E5E5"> actually cut it</font><font color="#CCCCCC"> enough</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

658
00:31:30,140 --> 00:31:32,660
it's going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> add on a small little</font>

659
00:31:32,660 --> 00:31:35,030
standard deviation<font color="#E5E5E5"> you know to make it</font>

660
00:31:35,030 --> 00:31:36,560
slightly<font color="#CCCCCC"> bigger or smaller than</font><font color="#E5E5E5"> for</font>

661
00:31:36,560 --> 00:31:38,540
white<font color="#CCCCCC"> okay so it's going</font><font color="#E5E5E5"> to be slightly</font>

662
00:31:38,540 --> 00:31:44,830
<font color="#E5E5E5">different</font><font color="#CCCCCC"> to eight on average</font>

663
00:31:45,130 --> 00:31:50,789
yes<font color="#E5E5E5"> just to</font><font color="#CCCCCC"> make sure is it going to be</font>

664
00:31:50,789 --> 00:31:53,950
<font color="#E5E5E5">constant per</font><font color="#CCCCCC"> Vinny watch yeah yeah</font>

665
00:31:53,950 --> 00:31:57,039
exactly<font color="#CCCCCC"> that's right so a mini batch you</font>

666
00:31:57,039 --> 00:32:01,480
know<font color="#E5E5E5"> has to kind of it needs to do a</font>

667
00:32:01,480 --> 00:32:06,640
matrix<font color="#CCCCCC"> multiplication and the mini batch</font>

668
00:32:06,640 --> 00:32:09,279
size has<font color="#CCCCCC"> to remain constant</font><font color="#E5E5E5"> because</font>

669
00:32:09,279 --> 00:32:14,289
we've<font color="#E5E5E5"> got this age weight matrix that</font>

670
00:32:14,289 --> 00:32:16,570
<font color="#CCCCCC">has to you know has to line up in size</font>

671
00:32:16,570 --> 00:32:20,679
with the size of the mini batch yeah but

672
00:32:20,679 --> 00:32:23,010
the number you know the<font color="#CCCCCC"> sequence length</font>

673
00:32:23,010 --> 00:32:33,370
can can change their problem okay so

674
00:32:33,370 --> 00:32:36,370
<font color="#E5E5E5">that's why we have</font><font color="#CCCCCC"> 963 that's so the</font>

675
00:32:36,370 --> 00:32:37,990
length of<font color="#E5E5E5"> a data loader is how many mini</font>

676
00:32:37,990 --> 00:32:39,850
batches<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case it's so do it</font>

677
00:32:39,850 --> 00:32:42,760
approximate okay number<font color="#CCCCCC"> of tokens is how</font>

678
00:32:42,760 --> 00:32:45,130
many unique things<font color="#E5E5E5"> are in the vocabulary</font>

679
00:32:45,130 --> 00:32:51,210
<font color="#CCCCCC">and remember</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> we run this line text</font>

680
00:32:51,210 --> 00:32:54,220
<font color="#E5E5E5">now does not just contain in a</font>

681
00:32:54,220 --> 00:32:56,409
description of what we want but it also

682
00:32:56,409 --> 00:33:01,710
contains an extra attribute<font color="#E5E5E5"> called vocab</font>

683
00:33:01,710 --> 00:33:06,610
<font color="#E5E5E5">right which contains stuff like a list</font>

684
00:33:06,610 --> 00:33:10,090
<font color="#E5E5E5">of all</font><font color="#CCCCCC"> of the unique items in the</font>

685
00:33:10,090 --> 00:33:14,860
vocabulary<font color="#E5E5E5"> and a reverse mapping from</font>

686
00:33:14,860 --> 00:33:19,330
<font color="#E5E5E5">each item to its number okay so that</font>

687
00:33:19,330 --> 00:33:23,140
text object is now an important<font color="#E5E5E5"> thing to</font>

688
00:33:23,140 --> 00:33:31,600
keep<font color="#CCCCCC"> out</font><font color="#E5E5E5"> all right so let's now try this</font>

689
00:33:31,600 --> 00:33:34,179
<font color="#CCCCCC">so we do we started</font><font color="#E5E5E5"> out by looking at</font>

690
00:33:34,179 --> 00:33:36,640
<font color="#E5E5E5">the class so the class is</font><font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> the</font>

691
00:33:36,640 --> 00:33:39,130
same as the class<font color="#E5E5E5"> we've had before</font><font color="#CCCCCC"> the</font>

692
00:33:39,130 --> 00:33:41,140
<font color="#E5E5E5">only key difference is to call in at</font>

693
00:33:41,140 --> 00:33:44,860
hidden which calls sets out so H is not

694
00:33:44,860 --> 00:33:46,630
a variable anymore it's now an attribute

695
00:33:46,630 --> 00:33:50,200
<font color="#CCCCCC">itself that H is a variable containing a</font>

696
00:33:50,200 --> 00:33:54,779
bunch<font color="#CCCCCC"> of</font><font color="#E5E5E5"> zeros now I've been shown that</font>

697
00:33:54,779 --> 00:33:58,400
<font color="#E5E5E5">that size remains constant</font><font color="#CCCCCC"> H time</font>

698
00:33:58,400 --> 00:34:00,320
but<font color="#CCCCCC"> unfortunately when I said that I</font>

699
00:34:00,320 --> 00:34:03,830
lied to<font color="#CCCCCC"> you and the way that I lied to</font>

700
00:34:03,830 --> 00:34:07,540
<font color="#CCCCCC">you</font><font color="#E5E5E5"> is that the very last mini batch</font>

701
00:34:07,540 --> 00:34:10,969
will<font color="#E5E5E5"> be shorter</font><font color="#CCCCCC"> okay the very</font><font color="#E5E5E5"> last mini</font>

702
00:34:10,969 --> 00:34:12,530
batch is actually going to have less

703
00:34:12,530 --> 00:34:14,210
<font color="#CCCCCC">than 60 well it might be exactly</font><font color="#E5E5E5"> the</font>

704
00:34:14,210 --> 00:34:16,520
right<font color="#E5E5E5"> size if it so</font><font color="#CCCCCC"> happens that this</font>

705
00:34:16,520 --> 00:34:19,250
<font color="#E5E5E5">data set</font><font color="#CCCCCC"> is exactly divisible by</font><font color="#E5E5E5"> B PTT</font>

706
00:34:19,250 --> 00:34:21,500
times patch size<font color="#E5E5E5"> but it probably isn't</font>

707
00:34:21,500 --> 00:34:23,750
<font color="#E5E5E5">so the last batch will probably has a</font>

708
00:34:23,750 --> 00:34:27,168
little bit less<font color="#E5E5E5"> okay and so that's why I</font>

709
00:34:27,168 --> 00:34:29,418
do a little<font color="#E5E5E5"> check</font><font color="#CCCCCC"> here that says let's</font>

710
00:34:29,418 --> 00:34:31,850
check that the batch size inside self

711
00:34:31,850 --> 00:34:35,239
dot H<font color="#CCCCCC"> right and so self dot H is</font><font color="#E5E5E5"> going</font>

712
00:34:35,239 --> 00:34:40,929
<font color="#E5E5E5">to be the height</font><font color="#CCCCCC"> sorry the height is</font>

713
00:34:40,929 --> 00:34:44,239
going<font color="#CCCCCC"> to be the number</font><font color="#E5E5E5"> of activations</font>

714
00:34:44,239 --> 00:34:46,040
and<font color="#E5E5E5"> the width is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> the mini</font>

715
00:34:46,040 --> 00:34:49,070
batch size okay check that<font color="#E5E5E5"> that's equal</font>

716
00:34:49,070 --> 00:34:54,230
to the actual<font color="#E5E5E5"> sequence length sorry the</font>

717
00:34:54,230 --> 00:34:56,360
actual batch size length<font color="#E5E5E5"> that we've</font>

718
00:34:56,360 --> 00:34:58,850
received<font color="#E5E5E5"> okay and if they're</font><font color="#CCCCCC"> not the</font>

719
00:34:58,850 --> 00:35:02,660
<font color="#E5E5E5">same then set it back to</font><font color="#CCCCCC"> 0 's again</font><font color="#E5E5E5"> okay</font>

720
00:35:02,660 --> 00:35:05,210
<font color="#E5E5E5">so this is</font><font color="#CCCCCC"> just a minor</font><font color="#E5E5E5"> little wrinkle</font>

721
00:35:05,210 --> 00:35:07,090
<font color="#CCCCCC">that basically</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end of each epoch</font>

722
00:35:07,090 --> 00:35:10,850
<font color="#E5E5E5">it's going to do like a little mini mini</font>

723
00:35:10,850 --> 00:35:13,580
batch<font color="#E5E5E5"> right and so then as soon as it</font>

724
00:35:13,580 --> 00:35:15,980
starts the next<font color="#CCCCCC"> epoch</font><font color="#E5E5E5"> it's going to see</font>

725
00:35:15,980 --> 00:35:17,330
that they're<font color="#E5E5E5"> not the same again and</font>

726
00:35:17,330 --> 00:35:19,190
<font color="#CCCCCC">it'll reinitialize it to the correct</font>

727
00:35:19,190 --> 00:35:21,950
<font color="#E5E5E5">full batch size</font><font color="#CCCCCC"> okay so that's why you</font>

728
00:35:21,950 --> 00:35:23,300
know if you're wondering there's an

729
00:35:23,300 --> 00:35:25,460
<font color="#E5E5E5">inert hidden not just in the constructor</font>

730
00:35:25,460 --> 00:35:28,580
but also inside forward<font color="#E5E5E5"> it's to handle</font>

731
00:35:28,580 --> 00:35:31,880
this<font color="#E5E5E5"> kind of end of each epoch</font><font color="#CCCCCC"> start of</font>

732
00:35:31,880 --> 00:35:34,850
each epoch difference<font color="#E5E5E5"> okay not an</font>

733
00:35:34,850 --> 00:35:36,490
important point by any means but

734
00:35:36,490 --> 00:35:39,160
potentially confusing<font color="#E5E5E5"> when you see it</font>

735
00:35:39,160 --> 00:35:47,990
<font color="#E5E5E5">okay so the last wrinkle the last</font>

736
00:35:47,990 --> 00:35:51,740
wrinkle is something which<font color="#CCCCCC"> i think is</font>

737
00:35:51,740 --> 00:35:53,600
something that<font color="#E5E5E5"> slightly sucks about</font><font color="#CCCCCC"> pi</font>

738
00:35:53,600 --> 00:35:55,310
torch<font color="#E5E5E5"> and maybe somebody can be nice</font>

739
00:35:55,310 --> 00:35:57,080
enough<font color="#CCCCCC"> to</font><font color="#E5E5E5"> try and fix it</font><font color="#CCCCCC"> with a PR if</font>

740
00:35:57,080 --> 00:35:59,650
anybody feels<font color="#E5E5E5"> like it which is that</font><font color="#CCCCCC"> the</font>

741
00:35:59,650 --> 00:36:04,780
loss functions such as<font color="#CCCCCC"> softmax</font>

742
00:36:04,960 --> 00:36:09,100
I'm not happy receiving a rank<font color="#E5E5E5"> 3 tensor</font>

743
00:36:09,100 --> 00:36:11,600
remember a rank 3 tensor is just another

744
00:36:11,600 --> 00:36:12,260
way of<font color="#CCCCCC"> saying</font>

745
00:36:12,260 --> 00:36:17,240
dimension<font color="#CCCCCC"> three</font><font color="#E5E5E5"> right okay</font><font color="#CCCCCC"> there's no</font>

746
00:36:17,240 --> 00:36:18,799
particular reason they ought<font color="#CCCCCC"> to not be</font>

747
00:36:18,799 --> 00:36:21,200
happy receiving<font color="#E5E5E5"> a</font><font color="#CCCCCC"> rank 3 tensor you know</font>

748
00:36:21,200 --> 00:36:22,640
<font color="#E5E5E5">like somebody</font><font color="#CCCCCC"> could write some code to</font>

749
00:36:22,640 --> 00:36:24,559
<font color="#CCCCCC">say hey a wreck three tensor is probably</font>

750
00:36:24,559 --> 00:36:27,200
you know<font color="#E5E5E5"> a sequence length by batch size</font>

751
00:36:27,200 --> 00:36:31,579
by you know results<font color="#E5E5E5"> thing and so you</font>

752
00:36:31,579 --> 00:36:35,140
should<font color="#CCCCCC"> just do it</font><font color="#E5E5E5"> for each of</font><font color="#CCCCCC"> the two</font>

753
00:36:35,140 --> 00:36:39,710
initial<font color="#CCCCCC"> axis</font><font color="#E5E5E5"> but no one's done that</font><font color="#CCCCCC"> and</font>

754
00:36:39,710 --> 00:36:43,540
so it expects it to be<font color="#CCCCCC"> a rank two tensor</font>

755
00:36:43,540 --> 00:36:45,799
funnily enough it<font color="#E5E5E5"> can handle</font><font color="#CCCCCC"> write to or</font>

756
00:36:45,799 --> 00:36:48,710
<font color="#CCCCCC">rec for</font><font color="#E5E5E5"> they're not right through</font><font color="#CCCCCC"> yeah</font>

757
00:36:48,710 --> 00:37:00,619
<font color="#E5E5E5">so we've got so we've got a rank two</font>

758
00:37:00,619 --> 00:37:04,910
tensor<font color="#CCCCCC"> containing you know for each time</font>

759
00:37:04,910 --> 00:37:08,359
<font color="#CCCCCC">period I can't remember which way around</font>

760
00:37:08,359 --> 00:37:11,059
<font color="#CCCCCC">the the</font><font color="#E5E5E5"> y axes are but whatever</font><font color="#CCCCCC"> for each</font>

761
00:37:11,059 --> 00:37:17,420
time period for<font color="#E5E5E5"> each batch we've got our</font>

762
00:37:17,420 --> 00:37:21,190
predictions<font color="#E5E5E5"> okay and then we've got our</font>

763
00:37:21,190 --> 00:37:27,170
our actuals<font color="#E5E5E5"> for each time</font><font color="#CCCCCC"> period for</font>

764
00:37:27,170 --> 00:37:31,309
each batch<font color="#E5E5E5"> we've got our predictions and</font>

765
00:37:31,309 --> 00:37:34,040
we've got our actuals<font color="#E5E5E5"> okay and so we</font>

766
00:37:34,040 --> 00:37:35,599
just want<font color="#E5E5E5"> to check whether they're the</font>

767
00:37:35,599 --> 00:37:37,760
same and<font color="#E5E5E5"> so at an ideal world our lost</font>

768
00:37:37,760 --> 00:37:39,920
function<font color="#E5E5E5"> a loss function would check you</font>

769
00:37:39,920 --> 00:37:42,319
know<font color="#E5E5E5"> item 1 1 then item 1 2 and then</font>

770
00:37:42,319 --> 00:37:44,299
item<font color="#E5E5E5"> 1 3 but</font><font color="#CCCCCC"> since that</font><font color="#E5E5E5"> hasn't been</font>

771
00:37:44,299 --> 00:37:46,849
<font color="#E5E5E5">written we just have to flatten them</font>

772
00:37:46,849 --> 00:37:48,980
both out<font color="#E5E5E5"> okay and we</font><font color="#CCCCCC"> can literally</font><font color="#E5E5E5"> just</font>

773
00:37:48,980 --> 00:37:53,390
<font color="#E5E5E5">flatten them out put rose - rose</font><font color="#CCCCCC"> and so</font>

774
00:37:53,390 --> 00:37:57,940
that's why here<font color="#CCCCCC"> I have to use dot view</font>

775
00:37:57,940 --> 00:38:04,040
<font color="#E5E5E5">okay and so dot view says the number of</font>

776
00:38:04,040 --> 00:38:06,020
<font color="#E5E5E5">columns will</font><font color="#CCCCCC"> be equal to</font><font color="#E5E5E5"> the size of the</font>

777
00:38:06,020 --> 00:38:07,220
vocab because remember we're going<font color="#E5E5E5"> to</font>

778
00:38:07,220 --> 00:38:08,660
end up<font color="#E5E5E5"> with a prediction</font><font color="#CCCCCC"> you know a</font>

779
00:38:08,660 --> 00:38:11,450
probability for<font color="#CCCCCC"> each letter</font><font color="#E5E5E5"> and then the</font>

780
00:38:11,450 --> 00:38:14,359
number<font color="#E5E5E5"> of rows is however big is</font>

781
00:38:14,359 --> 00:38:15,980
necessary<font color="#CCCCCC"> which will be</font><font color="#E5E5E5"> equal to batch</font>

782
00:38:15,980 --> 00:38:24,260
size times B PTT<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and then you may</font>

783
00:38:24,260 --> 00:38:26,060
be wondering where I do that

784
00:38:26,060 --> 00:38:27,230
that's so<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> where the</font><font color="#E5E5E5"> predictions</font>

785
00:38:27,230 --> 00:38:28,670
you may be wondering where I do that for

786
00:38:28,670 --> 00:38:31,040
the target and the answer is torch<font color="#E5E5E5"> text</font>

787
00:38:31,040 --> 00:38:32,480
knows that<font color="#E5E5E5"> the target needs to look like</font>

788
00:38:32,480 --> 00:38:33,050
<font color="#E5E5E5">that</font>

789
00:38:33,050 --> 00:38:34,700
so torch text has already done that<font color="#CCCCCC"> for</font>

790
00:38:34,700 --> 00:38:36,920
<font color="#CCCCCC">us okay so torch text automatically</font>

791
00:38:36,920 --> 00:38:39,100
changes<font color="#CCCCCC"> the target to be</font><font color="#E5E5E5"> flattened out</font>

792
00:38:39,100 --> 00:38:41,660
as you might actually remember<font color="#E5E5E5"> if you go</font>

793
00:38:41,660 --> 00:38:45,140
<font color="#E5E5E5">back to lesson 4</font><font color="#CCCCCC"> when we actually looked</font>

794
00:38:45,140 --> 00:38:48,020
<font color="#E5E5E5">at</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> mini batch that's</font><font color="#CCCCCC"> bad out of torch</font>

795
00:38:48,020 --> 00:38:50,540
text we did we noticed actually<font color="#E5E5E5"> that it</font>

796
00:38:50,540 --> 00:38:52,730
was flattened and I said we'll learn

797
00:38:52,730 --> 00:38:55,580
<font color="#CCCCCC">about why later and so later is now</font><font color="#E5E5E5"> all</font>

798
00:38:55,580 --> 00:39:00,010
<font color="#E5E5E5">right</font><font color="#CCCCCC"> okay so they're the</font><font color="#E5E5E5"> three wrinkles</font>

799
00:39:00,010 --> 00:39:06,920
<font color="#CCCCCC">get</font><font color="#E5E5E5"> rid of the history ooh I guess for</font>

800
00:39:06,920 --> 00:39:11,180
wrinkles<font color="#E5E5E5"> recreate the hidden state if</font>

801
00:39:11,180 --> 00:39:16,970
the batch size changes<font color="#CCCCCC"> flatten out</font><font color="#E5E5E5"> and</font>

802
00:39:16,970 --> 00:39:19,790
then you just torch text to create mini

803
00:39:19,790 --> 00:39:23,180
batches that<font color="#E5E5E5"> line up nicely so once we</font>

804
00:39:23,180 --> 00:39:26,690
do those things<font color="#CCCCCC"> we can then create</font><font color="#E5E5E5"> our</font>

805
00:39:26,690 --> 00:39:30,470
<font color="#E5E5E5">model create our optimizer with that</font>

806
00:39:30,470 --> 00:39:38,900
models parameters and fit it<font color="#CCCCCC"> one thing</font>

807
00:39:38,900 --> 00:39:48,650
to be careful of here is that<font color="#CCCCCC"> softmax</font>

808
00:39:48,650 --> 00:39:55,700
<font color="#E5E5E5">now as of</font><font color="#CCCCCC"> hi torch 0.3</font><font color="#E5E5E5"> requires that we</font>

809
00:39:55,700 --> 00:39:59,030
pass in a number<font color="#E5E5E5"> here saying which</font>

810
00:39:59,030 --> 00:40:02,080
<font color="#E5E5E5">access do we want to do the softmax over</font>

811
00:40:02,080 --> 00:40:05,180
so at this point this<font color="#CCCCCC"> is a</font>

812
00:40:05,180 --> 00:40:08,420
<font color="#CCCCCC">three-dimensional tensor right and so we</font>

813
00:40:08,420 --> 00:40:10,820
want<font color="#E5E5E5"> to do the softmax</font><font color="#CCCCCC"> over the final</font>

814
00:40:10,820 --> 00:40:13,700
axis<font color="#E5E5E5"> right so when</font><font color="#CCCCCC"> i say which axis do</font>

815
00:40:13,700 --> 00:40:15,830
we do the softmax over<font color="#E5E5E5"> remember</font><font color="#CCCCCC"> we</font>

816
00:40:15,830 --> 00:40:18,470
<font color="#CCCCCC">divide by there we go</font><font color="#E5E5E5"> e to the X I</font>

817
00:40:18,470 --> 00:40:21,410
divided by the sum of<font color="#E5E5E5"> e to the X I so</font>

818
00:40:21,410 --> 00:40:24,440
it's saying which axis do we sum over so

819
00:40:24,440 --> 00:40:26,120
which access<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to sum to</font><font color="#CCCCCC"> one and</font>

820
00:40:26,120 --> 00:40:29,120
<font color="#E5E5E5">so in this case clearly we want to do it</font>

821
00:40:29,120 --> 00:40:31,280
over<font color="#CCCCCC"> the last axis because the last axis</font>

822
00:40:31,280 --> 00:40:33,020
is the one that<font color="#E5E5E5"> contains the probability</font>

823
00:40:33,020 --> 00:40:36,140
per letter of the alphabet<font color="#CCCCCC"> and we want</font>

824
00:40:36,140 --> 00:40:37,760
all of those probabilities<font color="#E5E5E5"> to sum</font><font color="#CCCCCC"> to one</font>

825
00:40:37,760 --> 00:40:40,070
<font color="#E5E5E5">okay</font>

826
00:40:40,070 --> 00:40:45,590
so therefore<font color="#CCCCCC"> to run this notebook you're</font>

827
00:40:45,590 --> 00:40:48,500
going to need<font color="#E5E5E5"> PI torch 0.3 which just</font>

828
00:40:48,500 --> 00:40:50,450
came out this week<font color="#CCCCCC"> ok so if you're doing</font>

829
00:40:50,450 --> 00:40:51,920
<font color="#E5E5E5">this</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the milk you're fine I'm</font><font color="#CCCCCC"> sure</font>

830
00:40:51,920 --> 00:40:54,710
you've got at least<font color="#E5E5E5"> a 0.3 or later</font><font color="#CCCCCC"> ok</font>

831
00:40:54,710 --> 00:40:56,840
where else the students here<font color="#E5E5E5"> if you just</font>

832
00:40:56,840 --> 00:40:58,820
go Conda<font color="#E5E5E5"> and update it will</font>

833
00:40:58,820 --> 00:41:02,810
automatically update<font color="#E5E5E5"> you to 0.3</font><font color="#CCCCCC"> the</font>

834
00:41:02,810 --> 00:41:06,770
really great<font color="#E5E5E5"> news is that 0.3 although</font>

835
00:41:06,770 --> 00:41:08,630
it does not<font color="#CCCCCC"> yet officially support</font>

836
00:41:08,630 --> 00:41:11,110
<font color="#CCCCCC">windows</font><font color="#E5E5E5"> it does in practice</font><font color="#CCCCCC"> I</font>

837
00:41:11,110 --> 00:41:14,030
successfully installed 0.3 from<font color="#CCCCCC"> Condor</font>

838
00:41:14,030 --> 00:41:16,130
yesterday by typing<font color="#CCCCCC"> Condor install torch</font>

839
00:41:16,130 --> 00:41:19,520
<font color="#CCCCCC">PI torch in Windows are then attempted</font>

840
00:41:19,520 --> 00:41:21,500
<font color="#CCCCCC">to use the entirety</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> lesson</font><font color="#E5E5E5"> 1 and</font>

841
00:41:21,500 --> 00:41:24,140
every<font color="#E5E5E5"> single part worked so I actually</font>

842
00:41:24,140 --> 00:41:27,950
ran it on<font color="#E5E5E5"> this very laptop so for those</font>

843
00:41:27,950 --> 00:41:30,920
<font color="#CCCCCC">who are interested</font><font color="#E5E5E5"> in doing deep</font><font color="#CCCCCC"> burning</font>

844
00:41:30,920 --> 00:41:32,510
on their laptop can definitely recommend

845
00:41:32,510 --> 00:41:36,650
<font color="#E5E5E5">the new surface book the new</font><font color="#CCCCCC"> surface</font>

846
00:41:36,650 --> 00:41:42,290
book<font color="#CCCCCC"> 15-inch has a</font><font color="#E5E5E5"> gtx 1066 gig GPU in</font>

847
00:41:42,290 --> 00:41:45,350
it<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i was getting and it was running</font>

848
00:41:45,350 --> 00:41:53,230
<font color="#CCCCCC">about 3 times</font><font color="#E5E5E5"> slower than</font><font color="#CCCCCC"> my 1080 TI</font>

849
00:41:53,230 --> 00:41:55,940
which i think means it's about<font color="#CCCCCC"> the same</font>

850
00:41:55,940 --> 00:42:00,680
speed as an<font color="#CCCCCC"> AW sp2 the instance and as</font>

851
00:42:00,680 --> 00:42:02,540
you can<font color="#CCCCCC"> see it's also a nice convertible</font>

852
00:42:02,540 --> 00:42:04,700
<font color="#CCCCCC">tablet that you can write</font><font color="#E5E5E5"> on and it's</font>

853
00:42:04,700 --> 00:42:07,130
thin<font color="#CCCCCC"> and light and so it's like I've</font>

854
00:42:07,130 --> 00:42:09,620
never seen a such a good deep learning

855
00:42:09,620 --> 00:42:13,160
<font color="#E5E5E5">boss also I successfully installed Linux</font>

856
00:42:13,160 --> 00:42:16,190
on<font color="#CCCCCC"> eart and all</font><font color="#E5E5E5"> of the faster</font><font color="#CCCCCC"> I staff</font>

857
00:42:16,190 --> 00:42:18,980
worked on<font color="#CCCCCC"> Linux as well</font><font color="#E5E5E5"> so really good</font>

858
00:42:18,980 --> 00:42:22,310
option<font color="#E5E5E5"> if you're interested in a laptop</font>

859
00:42:22,310 --> 00:42:25,460
<font color="#CCCCCC">that</font><font color="#E5E5E5"> can run deep learning stuff</font>

860
00:42:25,460 --> 00:42:26,560
[Music]

861
00:42:26,560 --> 00:42:29,150
<font color="#E5E5E5">alright so that's that's going to</font><font color="#CCCCCC"> be</font>

862
00:42:29,150 --> 00:42:30,980
<font color="#CCCCCC">aware of</font><font color="#E5E5E5"> with this team</font><font color="#CCCCCC"> equals minus</font><font color="#E5E5E5"> 1</font>

863
00:42:30,980 --> 00:42:33,230
<font color="#E5E5E5">so then we can go ahead and construct</font>

864
00:42:33,230 --> 00:42:36,950
<font color="#E5E5E5">this and we can call fit</font><font color="#CCCCCC"> and yeah we're</font>

865
00:42:36,950 --> 00:42:39,620
basically<font color="#E5E5E5"> going to get pretty similar</font>

866
00:42:39,620 --> 00:42:43,360
results to what we got<font color="#CCCCCC"> the ball</font>

867
00:42:43,360 --> 00:42:49,370
<font color="#CCCCCC">alright so then</font><font color="#E5E5E5"> we can go a bit further</font>

868
00:42:49,370 --> 00:42:52,310
without<font color="#CCCCCC"> RNN by just kind of unpacking it</font>

869
00:42:52,310 --> 00:42:53,110
a bit more

870
00:42:53,110 --> 00:42:55,930
and so this is now again exactly<font color="#E5E5E5"> the</font>

871
00:42:55,930 --> 00:42:57,460
same thing<font color="#E5E5E5"> gives exactly the</font><font color="#CCCCCC"> same</font>

872
00:42:57,460 --> 00:43:02,080
answers but<font color="#E5E5E5"> I have removed the cold air</font>

873
00:43:02,080 --> 00:43:05,500
in it<font color="#E5E5E5"> so I've got rid</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> self to</font>

874
00:43:05,500 --> 00:43:09,130
iron in<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so this is just</font>

875
00:43:09,130 --> 00:43:10,690
something I won't spend time<font color="#CCCCCC"> on it but</font>

876
00:43:10,690 --> 00:43:11,680
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> check it out</font>

877
00:43:11,680 --> 00:43:14,890
so instead I've now to find iron<font color="#E5E5E5"> in as R</font>

878
00:43:14,890 --> 00:43:17,710
and<font color="#CCCCCC"> n</font><font color="#E5E5E5"> cell and I've copied and pasted</font>

879
00:43:17,710 --> 00:43:19,810
the code above don't<font color="#E5E5E5"> run it this is just</font>

880
00:43:19,810 --> 00:43:22,450
for your<font color="#E5E5E5"> reference from PI torch this is</font>

881
00:43:22,450 --> 00:43:24,100
this is the<font color="#E5E5E5"> color the definition of</font>

882
00:43:24,100 --> 00:43:26,500
<font color="#CCCCCC">eridan so in PI torch</font><font color="#E5E5E5"> and I want you</font><font color="#CCCCCC"> to</font>

883
00:43:26,500 --> 00:43:29,560
see that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> now read</font><font color="#E5E5E5"> PI torch</font>

884
00:43:29,560 --> 00:43:32,320
source<font color="#E5E5E5"> code and understand it not</font><font color="#CCCCCC"> only</font>

885
00:43:32,320 --> 00:43:33,550
<font color="#E5E5E5">that you'll recognize it as</font><font color="#CCCCCC"> being</font>

886
00:43:33,550 --> 00:43:35,200
<font color="#CCCCCC">something we've</font><font color="#E5E5E5"> done</font><font color="#CCCCCC"> before it's a</font>

887
00:43:35,200 --> 00:43:38,560
matrix modification of the weights by

888
00:43:38,560 --> 00:43:42,250
the inputs plus biases<font color="#CCCCCC"> so f dot</font><font color="#E5E5E5"> linear</font>

889
00:43:42,250 --> 00:43:45,310
simply does a matrix product<font color="#CCCCCC"> followed by</font>

890
00:43:45,310 --> 00:43:47,320
an addition right and interestingly

891
00:43:47,320 --> 00:43:51,330
you'll see they do not concatenate the

892
00:43:51,330 --> 00:43:55,180
the input bit and the hidden bit<font color="#E5E5E5"> they</font>

893
00:43:55,180 --> 00:43:58,150
sum them together which is our first

894
00:43:58,150 --> 00:44:00,250
<font color="#E5E5E5">approach and</font><font color="#CCCCCC"> I'm as</font><font color="#E5E5E5"> I said you can do</font>

895
00:44:00,250 --> 00:44:02,500
either neither<font color="#CCCCCC"> one's right or wrong</font><font color="#E5E5E5"> but</font>

896
00:44:02,500 --> 00:44:03,910
it's interesting<font color="#E5E5E5"> to see this is the</font>

897
00:44:03,910 --> 00:44:05,230
definition<font color="#CCCCCC"> yeah</font>

898
00:44:05,230 --> 00:44:10,060
yes you know can give some insight about

899
00:44:10,060 --> 00:44:12,900
what are they using<font color="#CCCCCC"> that particular</font>

900
00:44:12,900 --> 00:44:18,840
activation<font color="#E5E5E5"> function firm yeah yeah</font><font color="#CCCCCC"> I</font>

901
00:44:18,840 --> 00:44:20,890
think<font color="#CCCCCC"> you might have</font><font color="#E5E5E5"> briefly covered</font>

902
00:44:20,890 --> 00:44:22,360
this last week<font color="#CCCCCC"> but very</font><font color="#E5E5E5"> happy to do it</font>

903
00:44:22,360 --> 00:44:28,690
<font color="#E5E5E5">again</font><font color="#CCCCCC"> if I did basically fan that's</font>

904
00:44:28,690 --> 00:44:31,830
positive 1 and negative<font color="#E5E5E5"> 1</font>

905
00:44:36,660 --> 00:44:39,550
<font color="#CCCCCC">then looks like that</font><font color="#E5E5E5"> so in other words</font>

906
00:44:39,550 --> 00:44:42,670
it's a sigmoid function double the

907
00:44:42,670 --> 00:44:45,640
height minus<font color="#E5E5E5"> one naturally they're</font>

908
00:44:45,640 --> 00:44:49,530
they're equal<font color="#CCCCCC"> so it's it's it's a nice</font>

909
00:44:49,530 --> 00:44:53,560
<font color="#E5E5E5">function in that it's</font><font color="#CCCCCC"> forcing</font><font color="#E5E5E5"> it to</font><font color="#CCCCCC"> be</font>

910
00:44:53,560 --> 00:44:55,810
you know<font color="#CCCCCC"> no smaller than</font><font color="#E5E5E5"> minus one no</font>

911
00:44:55,810 --> 00:44:57,700
bigger than plus one<font color="#E5E5E5"> and since we're</font>

912
00:44:57,700 --> 00:44:59,860
multiplying<font color="#E5E5E5"> by this</font><font color="#CCCCCC"> white matrix again</font>

913
00:44:59,860 --> 00:45:03,310
and again and again<font color="#E5E5E5"> and again</font><font color="#CCCCCC"> we might</font>

914
00:45:03,310 --> 00:45:05,970
worry that<font color="#CCCCCC"> our Lu because</font><font color="#E5E5E5"> it's unbounded</font>

915
00:45:05,970 --> 00:45:08,920
<font color="#CCCCCC">might have more</font><font color="#E5E5E5"> of a gradient explosion</font>

916
00:45:08,920 --> 00:45:11,830
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> that's basically</font><font color="#E5E5E5"> the theory</font>

917
00:45:11,830 --> 00:45:19,270
<font color="#E5E5E5">having said that you can</font><font color="#CCCCCC"> actually ask pi</font>

918
00:45:19,270 --> 00:45:24,430
torch for an<font color="#E5E5E5"> RNN cell which uses a</font>

919
00:45:24,430 --> 00:45:26,320
different non-linearity<font color="#E5E5E5"> so you can see</font>

920
00:45:26,320 --> 00:45:28,090
by default<font color="#E5E5E5"> it uses then you can ask for</font>

921
00:45:28,090 --> 00:45:31,450
<font color="#E5E5E5">a value as well but yeah most</font><font color="#CCCCCC"> people</font>

922
00:45:31,450 --> 00:45:32,830
seem to pretty much everybody still

923
00:45:32,830 --> 00:45:36,360
seems<font color="#E5E5E5"> to use them as far as I can tell</font>

924
00:45:36,360 --> 00:45:38,770
<font color="#CCCCCC">so you can basically see here</font><font color="#E5E5E5"> this is</font>

925
00:45:38,770 --> 00:45:40,030
all<font color="#E5E5E5"> the same except now I've got an</font>

926
00:45:40,030 --> 00:45:41,950
errand<font color="#E5E5E5"> in</font><font color="#CCCCCC"> cell which means now I need to</font>

927
00:45:41,950 --> 00:45:44,590
put my for loop back<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> and you can</font>

928
00:45:44,590 --> 00:45:48,180
<font color="#E5E5E5">see every time</font><font color="#CCCCCC"> I call my my little</font>

929
00:45:48,180 --> 00:45:51,460
linear function<font color="#CCCCCC"> I just obtained the</font>

930
00:45:51,460 --> 00:45:54,940
result<font color="#CCCCCC"> onto</font><font color="#E5E5E5"> my list</font><font color="#CCCCCC"> okay and at the end</font>

931
00:45:54,940 --> 00:45:57,490
the result is<font color="#E5E5E5"> that all stacked up</font>

932
00:45:57,490 --> 00:46:00,220
together<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so like just trying to</font>

933
00:46:00,220 --> 00:46:04,300
show<font color="#CCCCCC"> you how nothing</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> PI torches</font>

934
00:46:04,300 --> 00:46:06,490
is mysterious<font color="#E5E5E5"> right you should find you</font>

935
00:46:06,490 --> 00:46:08,530
<font color="#E5E5E5">get</font><font color="#CCCCCC"> basically the fact</font><font color="#E5E5E5"> you I found I got</font>

936
00:46:08,530 --> 00:46:11,260
exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same answer from</font><font color="#E5E5E5"> this as the</font>

937
00:46:11,260 --> 00:46:14,320
previous one<font color="#E5E5E5"> okay in practice you</font><font color="#CCCCCC"> would</font>

938
00:46:14,320 --> 00:46:15,970
<font color="#E5E5E5">never write it like</font><font color="#CCCCCC"> this but what you</font>

939
00:46:15,970 --> 00:46:17,920
<font color="#E5E5E5">may well</font><font color="#CCCCCC"> find in practice is that</font>

940
00:46:17,920 --> 00:46:19,510
<font color="#E5E5E5">somebody will come up with like a new</font>

941
00:46:19,510 --> 00:46:22,120
kind<font color="#E5E5E5"> of eridan cell or a different way</font>

942
00:46:22,120 --> 00:46:24,190
<font color="#CCCCCC">of kind of</font><font color="#E5E5E5"> keeping track</font><font color="#CCCCCC"> of things over</font>

943
00:46:24,190 --> 00:46:25,690
<font color="#E5E5E5">time or a different way of doing</font>

944
00:46:25,690 --> 00:46:30,790
regularization<font color="#E5E5E5"> and so inside</font><font color="#CCCCCC"> posterize</font>

945
00:46:30,790 --> 00:46:34,020
code<font color="#E5E5E5"> you will find that we we do this</font>

946
00:46:34,020 --> 00:46:37,180
exactly<font color="#E5E5E5"> this basically we have this by</font>

947
00:46:37,180 --> 00:46:39,310
hand<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we use some regularization</font>

948
00:46:39,310 --> 00:46:41,080
approaches that<font color="#E5E5E5"> are supported by pi</font>

949
00:46:41,080 --> 00:46:43,350
torch

950
00:46:43,790 --> 00:46:46,370
<font color="#E5E5E5">all right so then another thing I'm not</font>

951
00:46:46,370 --> 00:46:47,780
going<font color="#CCCCCC"> to spend much time on but I'll</font>

952
00:46:47,780 --> 00:46:50,960
<font color="#E5E5E5">mention briefly is that nobody really</font>

953
00:46:50,960 --> 00:46:54,500
<font color="#E5E5E5">uses this hour an insult in practice and</font>

954
00:46:54,500 --> 00:46:56,240
the reason<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> that eridan so</font>

955
00:46:56,240 --> 00:46:58,940
in practice<font color="#E5E5E5"> is even though the fan is</font>

956
00:46:58,940 --> 00:47:03,590
here<font color="#CCCCCC"> you do</font><font color="#E5E5E5"> tend to find gradient</font>

957
00:47:03,590 --> 00:47:05,780
explosions are still a<font color="#E5E5E5"> problem and so we</font>

958
00:47:05,780 --> 00:47:08,060
<font color="#CCCCCC">have to use pretty low learning rates</font><font color="#E5E5E5"> to</font>

959
00:47:08,060 --> 00:47:10,250
get these<font color="#E5E5E5"> to</font><font color="#CCCCCC"> train</font><font color="#E5E5E5"> and pretty small</font>

960
00:47:10,250 --> 00:47:15,710
values for<font color="#CCCCCC"> B PTT</font><font color="#E5E5E5"> to get them to</font><font color="#CCCCCC"> Train so</font>

961
00:47:15,710 --> 00:47:17,720
what we do<font color="#E5E5E5"> instead is</font><font color="#CCCCCC"> we replace</font><font color="#E5E5E5"> the</font>

962
00:47:17,720 --> 00:47:20,660
<font color="#E5E5E5">eridan cell with something like this</font>

963
00:47:20,660 --> 00:47:26,890
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> called a</font><font color="#E5E5E5"> GI u cell and a GI u so</font>

964
00:47:29,590 --> 00:47:35,770
here it is<font color="#CCCCCC"> has a picture</font><font color="#E5E5E5"> of it and</font>

965
00:47:35,800 --> 00:47:38,390
there's the equations for<font color="#E5E5E5"> it so</font>

966
00:47:38,390 --> 00:47:41,150
basically<font color="#E5E5E5"> I'll show you both quickly</font><font color="#CCCCCC"> but</font>

967
00:47:41,150 --> 00:47:42,620
we'll talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it much more in part</font>

968
00:47:42,620 --> 00:47:47,570
<font color="#CCCCCC">two we've got our input okay</font>

969
00:47:47,570 --> 00:47:51,740
and our input<font color="#E5E5E5"> normally goes straight in</font>

970
00:47:51,740 --> 00:47:56,660
<font color="#CCCCCC">gets multiplied by a weight matrix</font><font color="#E5E5E5"> to</font>

971
00:47:56,660 --> 00:48:00,800
create<font color="#E5E5E5"> our new activations</font><font color="#CCCCCC"> that's not</font>

972
00:48:00,800 --> 00:48:02,020
what happens

973
00:48:02,020 --> 00:48:04,640
and then we've<font color="#E5E5E5"> cost</font><font color="#CCCCCC"> we also we</font><font color="#E5E5E5"> add it to</font>

974
00:48:04,640 --> 00:48:06,980
<font color="#CCCCCC">the existing activations</font><font color="#E5E5E5"> that's not what</font>

975
00:48:06,980 --> 00:48:10,490
happens here<font color="#E5E5E5"> in this case our input goes</font>

976
00:48:10,490 --> 00:48:14,510
into<font color="#E5E5E5"> this H tilde temporary thing and it</font>

977
00:48:14,510 --> 00:48:16,190
doesn't<font color="#CCCCCC"> just get added to our</font>

978
00:48:16,190 --> 00:48:18,170
activations<font color="#E5E5E5"> their previous activations</font>

979
00:48:18,170 --> 00:48:20,060
<font color="#CCCCCC">that our</font><font color="#E5E5E5"> previous activations get</font>

980
00:48:20,060 --> 00:48:24,740
multiplied by this value R and R stands

981
00:48:24,740 --> 00:48:29,450
for reset<font color="#CCCCCC"> it's a reset gate</font><font color="#E5E5E5"> okay and how</font>

982
00:48:29,450 --> 00:48:31,610
do<font color="#E5E5E5"> we calculate</font><font color="#CCCCCC"> that this this value</font>

983
00:48:31,610 --> 00:48:33,620
<font color="#CCCCCC">goes between</font><font color="#E5E5E5"> Norton one right in our</font>

984
00:48:33,620 --> 00:48:36,890
reset gate well the answer is it's

985
00:48:36,890 --> 00:48:40,100
simply equal<font color="#CCCCCC"> to a matrix product between</font>

986
00:48:40,100 --> 00:48:43,820
<font color="#E5E5E5">some weight matrix and the concatenation</font>

987
00:48:43,820 --> 00:48:46,460
<font color="#CCCCCC">of our previous hidden state and our new</font>

988
00:48:46,460 --> 00:48:49,000
input in other words this is a little

989
00:48:49,000 --> 00:48:53,030
one hidden layer neural net<font color="#E5E5E5"> and</font><font color="#CCCCCC"> in</font>

990
00:48:53,030 --> 00:48:54,200
<font color="#CCCCCC">particular it's a one hidden layer</font>

991
00:48:54,200 --> 00:48:56,240
neural net because we're then put it

992
00:48:56,240 --> 00:48:57,650
<font color="#E5E5E5">through the sigmoid function</font>

993
00:48:57,650 --> 00:48:59,210
when you<font color="#CCCCCC"> seasick</font><font color="#E5E5E5"> but one of the things I</font>

994
00:48:59,210 --> 00:49:00,890
hate<font color="#CCCCCC"> about mathematical notation is</font>

995
00:49:00,890 --> 00:49:03,230
symbols are overloaded a lot right

996
00:49:03,230 --> 00:49:05,089
sometimes<font color="#E5E5E5"> when you see Sigma that means</font>

997
00:49:05,089 --> 00:49:07,490
standard deviation when<font color="#E5E5E5"> you see it next</font>

998
00:49:07,490 --> 00:49:09,529
to a<font color="#CCCCCC"> parenthesis like this it means the</font>

999
00:49:09,529 --> 00:49:14,019
sigmoid function okay<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> other words</font>

1000
00:49:16,839 --> 00:49:26,180
<font color="#E5E5E5">that okay which looks like that</font><font color="#CCCCCC"> okay so</font>

1001
00:49:26,180 --> 00:49:28,130
this<font color="#E5E5E5"> is like</font><font color="#CCCCCC"> a little mini neural net</font>

1002
00:49:28,130 --> 00:49:29,599
with no hidden<font color="#E5E5E5"> layers or to</font><font color="#CCCCCC"> think of it</font>

1003
00:49:29,599 --> 00:49:30,920
another way<font color="#E5E5E5"> it's like a little logistic</font>

1004
00:49:30,920 --> 00:49:34,099
regression<font color="#E5E5E5"> okay and this is</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mentioned</font>

1005
00:49:34,099 --> 00:49:35,420
this briefly because it's going<font color="#E5E5E5"> to come</font>

1006
00:49:35,420 --> 00:49:37,640
<font color="#CCCCCC">up a lot</font><font color="#E5E5E5"> in part two and so it's a good</font>

1007
00:49:37,640 --> 00:49:39,499
<font color="#CCCCCC">thing to like start learning about it's</font>

1008
00:49:39,499 --> 00:49:43,099
this idea<font color="#E5E5E5"> that</font><font color="#CCCCCC"> like in the very learning</font>

1009
00:49:43,099 --> 00:49:45,890
<font color="#E5E5E5">itself you can have like little mini</font>

1010
00:49:45,890 --> 00:49:47,749
neural<font color="#E5E5E5"> nets inside your neural</font><font color="#CCCCCC"> nets</font>

1011
00:49:47,749 --> 00:49:50,329
<font color="#CCCCCC">right and so this</font><font color="#E5E5E5"> little mini neural net</font>

1012
00:49:50,329 --> 00:49:53,390
is<font color="#E5E5E5"> going to be used to decide how much</font>

1013
00:49:53,390 --> 00:49:56,029
of my<font color="#CCCCCC"> hidden</font><font color="#E5E5E5"> state am I going to</font>

1014
00:49:56,029 --> 00:49:58,279
<font color="#E5E5E5">remember</font><font color="#CCCCCC"> right and</font><font color="#E5E5E5"> so it might learn</font>

1015
00:49:58,279 --> 00:50:00,579
<font color="#CCCCCC">that Oh in</font><font color="#E5E5E5"> this particular situation</font>

1016
00:50:00,579 --> 00:50:03,079
<font color="#CCCCCC">forget</font><font color="#E5E5E5"> everything you know for example</font>

1017
00:50:03,079 --> 00:50:05,900
<font color="#CCCCCC">oh there's a full-stop</font><font color="#E5E5E5"> you know hey when</font>

1018
00:50:05,900 --> 00:50:07,489
you see a<font color="#CCCCCC"> full-stop</font><font color="#E5E5E5"> you should throw</font>

1019
00:50:07,489 --> 00:50:09,140
<font color="#E5E5E5">away nearly all</font><font color="#CCCCCC"> of your hidden</font><font color="#E5E5E5"> state</font>

1020
00:50:09,140 --> 00:50:11,059
that is probably<font color="#CCCCCC"> something</font><font color="#E5E5E5"> it would</font>

1021
00:50:11,059 --> 00:50:12,859
learn and that<font color="#CCCCCC"> that's very easy for it</font>

1022
00:50:12,859 --> 00:50:14,839
to<font color="#E5E5E5"> learn using this</font><font color="#CCCCCC"> little mini neuron</font>

1023
00:50:14,839 --> 00:50:17,119
<font color="#E5E5E5">there okay</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so that goes through to</font>

1024
00:50:17,119 --> 00:50:20,329
<font color="#CCCCCC">create my new hidden</font><font color="#E5E5E5"> state along with</font>

1025
00:50:20,329 --> 00:50:22,730
the<font color="#CCCCCC"> input and then</font><font color="#E5E5E5"> there's a second</font>

1026
00:50:22,730 --> 00:50:24,410
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> that happens which is there's this</font>

1027
00:50:24,410 --> 00:50:28,309
gate here called Z and what Z says is

1028
00:50:28,309 --> 00:50:31,759
all right you've got your some amount of

1029
00:50:31,759 --> 00:50:34,369
<font color="#E5E5E5">your previous hidden state plus your new</font>

1030
00:50:34,369 --> 00:50:36,559
input right<font color="#E5E5E5"> and it's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go through</font>

1031
00:50:36,559 --> 00:50:39,259
to<font color="#CCCCCC"> create your new state and I'm going</font>

1032
00:50:39,259 --> 00:50:41,749
to let<font color="#E5E5E5"> you decide to what degree do</font><font color="#CCCCCC"> you</font>

1033
00:50:41,749 --> 00:50:45,799
use<font color="#E5E5E5"> this</font><font color="#CCCCCC"> new input</font><font color="#E5E5E5"> version of your</font>

1034
00:50:45,799 --> 00:50:47,720
<font color="#E5E5E5">hidden</font><font color="#CCCCCC"> state and to what degree where</font>

1035
00:50:47,720 --> 00:50:49,130
<font color="#CCCCCC">you just leave the hidden state the same</font>

1036
00:50:49,130 --> 00:50:50,989
as before<font color="#E5E5E5"> so this thing here is called</font>

1037
00:50:50,989 --> 00:50:53,809
<font color="#E5E5E5">the update gate right and so it's got</font>

1038
00:50:53,809 --> 00:50:55,519
two choices it<font color="#CCCCCC"> can make the first-years</font>

1039
00:50:55,519 --> 00:50:57,920
<font color="#E5E5E5">to throw away some hidden</font><font color="#CCCCCC"> state when</font>

1040
00:50:57,920 --> 00:50:59,720
deciding<font color="#E5E5E5"> how much to incorporate that</font>

1041
00:50:59,720 --> 00:51:02,900
versus my new input<font color="#E5E5E5"> and how much to</font>

1042
00:51:02,900 --> 00:51:05,329
update my<font color="#E5E5E5"> hidden state versus just leave</font>

1043
00:51:05,329 --> 00:51:08,150
it<font color="#CCCCCC"> exactly the same and the equation</font>

1044
00:51:08,150 --> 00:51:10,130
hopefully<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to look pretty</font>

1045
00:51:10,130 --> 00:51:11,330
<font color="#E5E5E5">similar</font>

1046
00:51:11,330 --> 00:51:14,200
<font color="#CCCCCC">to you which is check this out here</font>

1047
00:51:14,200 --> 00:51:16,520
remember<font color="#CCCCCC"> how I said you</font><font color="#E5E5E5"> want to start to</font>

1048
00:51:16,520 --> 00:51:19,730
<font color="#E5E5E5">recognize some some common ways of</font>

1049
00:51:19,730 --> 00:51:20,540
<font color="#E5E5E5">looking at things</font>

1050
00:51:20,540 --> 00:51:25,520
well here I have<font color="#E5E5E5"> a 1</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> something by a</font>

1051
00:51:25,520 --> 00:51:30,260
thing and a something<font color="#E5E5E5"> without the</font><font color="#CCCCCC"> 1 - by</font>

1052
00:51:30,260 --> 00:51:33,140
a thing which remember is a linear

1053
00:51:33,140 --> 00:51:35,660
interpolation<font color="#E5E5E5"> right so in other words</font>

1054
00:51:35,660 --> 00:51:39,650
the<font color="#CCCCCC"> value of Z is going</font><font color="#E5E5E5"> to decide to</font>

1055
00:51:39,650 --> 00:51:43,130
<font color="#CCCCCC">what degree do I have keep the previous</font>

1056
00:51:43,130 --> 00:51:46,490
hidden<font color="#E5E5E5"> state and to what degree do I use</font>

1057
00:51:46,490 --> 00:51:49,880
the new hidden<font color="#CCCCCC"> state right</font><font color="#E5E5E5"> so that's why</font>

1058
00:51:49,880 --> 00:51:52,850
they draw it here as this kind<font color="#E5E5E5"> of like</font>

1059
00:51:52,850 --> 00:51:55,490
it's not<font color="#CCCCCC"> actually a switch but like you</font>

1060
00:51:55,490 --> 00:51:57,230
can put it in any position<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> be</font>

1061
00:51:57,230 --> 00:51:59,150
like oh it's<font color="#E5E5E5"> here or it's here or it's</font>

1062
00:51:59,150 --> 00:52:03,880
here to decide how<font color="#E5E5E5"> much that'll do</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so</font>

1063
00:52:03,880 --> 00:52:06,200
<font color="#E5E5E5">so they're basically the equations it's</font>

1064
00:52:06,200 --> 00:52:07,820
a it's a little<font color="#CCCCCC"> mini neural net with its</font>

1065
00:52:07,820 --> 00:52:09,500
own weight matrix to decide how much<font color="#E5E5E5"> to</font>

1066
00:52:09,500 --> 00:52:11,510
update<font color="#E5E5E5"> little mini neural net with its</font>

1067
00:52:11,510 --> 00:52:13,160
own weight matrix to decide how much<font color="#E5E5E5"> to</font>

1068
00:52:13,160 --> 00:52:15,440
reset<font color="#E5E5E5"> and then that's used to do an</font>

1069
00:52:15,440 --> 00:52:17,420
interpolation between the two<font color="#E5E5E5"> hidden</font>

1070
00:52:17,420 --> 00:52:21,590
<font color="#E5E5E5">states so that's called giu</font>

1071
00:52:21,590 --> 00:52:24,770
gated recurrent<font color="#CCCCCC"> Network there's the</font>

1072
00:52:24,770 --> 00:52:27,520
<font color="#CCCCCC">definition from the</font><font color="#E5E5E5"> PI torch source code</font>

1073
00:52:27,520 --> 00:52:31,010
<font color="#CCCCCC">they have some slight optimizations here</font>

1074
00:52:31,010 --> 00:52:32,330
that if you're interested<font color="#CCCCCC"> in we can talk</font>

1075
00:52:32,330 --> 00:52:35,540
<font color="#CCCCCC">about</font><font color="#E5E5E5"> them on</font><font color="#CCCCCC"> the forum</font><font color="#E5E5E5"> but it's exactly</font>

1076
00:52:35,540 --> 00:52:39,080
the same<font color="#E5E5E5"> for</font><font color="#CCCCCC"> we just saw and so if you</font>

1077
00:52:39,080 --> 00:52:43,880
go and<font color="#E5E5E5"> NDI you that it uses this same</font>

1078
00:52:43,880 --> 00:52:47,120
code but it replaces<font color="#E5E5E5"> the iron in so with</font>

1079
00:52:47,120 --> 00:52:51,620
this<font color="#E5E5E5"> cell okay and as a result rather</font>

1080
00:52:51,620 --> 00:52:53,410
<font color="#E5E5E5">than having something where we needed</font>

1081
00:52:53,410 --> 00:52:58,700
<font color="#E5E5E5">where we were getting</font><font color="#CCCCCC"> a 1.54</font><font color="#E5E5E5"> we're now</font>

1082
00:52:58,700 --> 00:53:02,060
getting<font color="#CCCCCC"> down to</font><font color="#E5E5E5"> one point</font><font color="#CCCCCC"> 400 and we can</font>

1083
00:53:02,060 --> 00:53:03,650
keep training<font color="#E5E5E5"> even more get right down</font>

1084
00:53:03,650 --> 00:53:05,840
to<font color="#E5E5E5"> one point three six okay so in</font>

1085
00:53:05,840 --> 00:53:08,600
practice a<font color="#E5E5E5"> giu</font><font color="#CCCCCC"> or very nearly</font>

1086
00:53:08,600 --> 00:53:09,980
equivalently we'll see in a moment in

1087
00:53:09,980 --> 00:53:12,950
<font color="#CCCCCC">lsdm</font><font color="#E5E5E5"> in practice what pretty much</font>

1088
00:53:12,950 --> 00:53:18,890
<font color="#E5E5E5">everybody always uses so the art he and</font>

1089
00:53:18,890 --> 00:53:22,100
HT are ultimately scalars after they go

1090
00:53:22,100 --> 00:53:24,650
<font color="#CCCCCC">through the sigmoid but there are</font>

1091
00:53:24,650 --> 00:53:28,010
<font color="#E5E5E5">Clyde element-wise is that correct</font><font color="#CCCCCC"> -</font>

1092
00:53:28,010 --> 00:53:29,349
<font color="#E5E5E5">mm-hmm</font>

1093
00:53:29,349 --> 00:53:31,819
yeah<font color="#E5E5E5"> although of course one for each</font>

1094
00:53:31,819 --> 00:53:36,859
mini batch<font color="#E5E5E5"> but yes the scaler yeah okay</font>

1095
00:53:36,859 --> 00:53:44,930
great thanks<font color="#CCCCCC"> and on the excellent</font><font color="#E5E5E5"> colas</font>

1096
00:53:44,930 --> 00:53:47,119
blog<font color="#E5E5E5"> Chris</font><font color="#CCCCCC"> Ellis blog</font><font color="#E5E5E5"> there's an</font>

1097
00:53:47,119 --> 00:53:50,390
understanding LS TM networks<font color="#CCCCCC"> post which</font>

1098
00:53:50,390 --> 00:53:52,849
<font color="#E5E5E5">you can read all about this</font><font color="#CCCCCC"> in much</font><font color="#E5E5E5"> more</font>

1099
00:53:52,849 --> 00:53:55,190
detail if you're interested and<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the</font>

1100
00:53:55,190 --> 00:53:57,200
<font color="#E5E5E5">other one I was dealing from here is a</font>

1101
00:53:57,200 --> 00:53:59,480
wild<font color="#E5E5E5"> ml also have a good blog</font><font color="#CCCCCC"> post on</font>

1102
00:53:59,480 --> 00:54:01,130
this<font color="#E5E5E5"> there's somebody wants</font><font color="#CCCCCC"> to be</font>

1103
00:54:01,130 --> 00:54:02,599
helpful feel free to put<font color="#E5E5E5"> them in the</font>

1104
00:54:02,599 --> 00:54:06,039
lesson wiki

1105
00:54:08,319 --> 00:54:13,069
okay so then putting it all together<font color="#E5E5E5"> I'm</font>

1106
00:54:13,069 --> 00:54:15,650
now going to<font color="#CCCCCC"> replace my GI you with</font>

1107
00:54:15,650 --> 00:54:16,819
<font color="#CCCCCC">Nellis TM</font><font color="#E5E5E5"> I'm not going to bother</font>

1108
00:54:16,819 --> 00:54:18,380
showing you the<font color="#CCCCCC"> soul for this it's very</font>

1109
00:54:18,380 --> 00:54:21,829
similar to GI<font color="#E5E5E5"> u but the LS TM has one</font>

1110
00:54:21,829 --> 00:54:24,890
more piece<font color="#CCCCCC"> of state in it called</font><font color="#E5E5E5"> the</font>

1111
00:54:24,890 --> 00:54:27,109
<font color="#CCCCCC">sell state not just the hidden</font><font color="#E5E5E5"> state so</font>

1112
00:54:27,109 --> 00:54:29,750
if you do use an LS TM<font color="#CCCCCC"> you're now inside</font>

1113
00:54:29,750 --> 00:54:31,789
<font color="#E5E5E5">you're in it hidden have to return a</font>

1114
00:54:31,789 --> 00:54:34,609
<font color="#E5E5E5">couple of matrices they're exactly the</font>

1115
00:54:34,609 --> 00:54:37,339
same<font color="#E5E5E5"> size as the hidden state but you</font>

1116
00:54:37,339 --> 00:54:40,130
<font color="#E5E5E5">just have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> return the tupple okay</font><font color="#CCCCCC"> the</font>

1117
00:54:40,130 --> 00:54:43,010
details<font color="#E5E5E5"> don't matter too much but we can</font>

1118
00:54:43,010 --> 00:54:44,150
<font color="#E5E5E5">talk about it during the week if you're</font>

1119
00:54:44,150 --> 00:54:48,650
interested<font color="#CCCCCC"> you know when you pass in you</font>

1120
00:54:48,650 --> 00:54:50,869
still pass in self<font color="#CCCCCC"> dot</font><font color="#E5E5E5"> H still returns a</font>

1121
00:54:50,869 --> 00:54:53,089
new value<font color="#E5E5E5"> of H</font><font color="#CCCCCC"> is to repackage it</font><font color="#E5E5E5"> in the</font>

1122
00:54:53,089 --> 00:54:53,750
<font color="#E5E5E5">usual way</font>

1123
00:54:53,750 --> 00:54:55,430
so this code<font color="#CCCCCC"> is identical</font><font color="#E5E5E5"> to the code</font>

1124
00:54:55,430 --> 00:54:58,220
before<font color="#CCCCCC"> one thing I've done though is</font>

1125
00:54:58,220 --> 00:55:02,059
<font color="#E5E5E5">I've</font><font color="#CCCCCC"> had</font><font color="#E5E5E5"> a drop out</font><font color="#CCCCCC"> inside my</font><font color="#E5E5E5"> air</font><font color="#CCCCCC"> and in</font>

1126
00:55:02,059 --> 00:55:05,660
which<font color="#E5E5E5"> you can do with the</font><font color="#CCCCCC"> height watch R</font>

1127
00:55:05,660 --> 00:55:07,130
and n function so that's<font color="#E5E5E5"> going to do</font>

1128
00:55:07,130 --> 00:55:09,829
drop out after<font color="#E5E5E5"> a time step and I've</font>

1129
00:55:09,829 --> 00:55:11,180
doubled<font color="#E5E5E5"> the size of my hidden layer</font>

1130
00:55:11,180 --> 00:55:13,250
<font color="#E5E5E5">since I've now added point five drop out</font>

1131
00:55:13,250 --> 00:55:15,410
and so my hope was that this would make

1132
00:55:15,410 --> 00:55:19,490
<font color="#CCCCCC">it be able to</font><font color="#E5E5E5"> learn more but be more</font>

1133
00:55:19,490 --> 00:55:24,980
<font color="#CCCCCC">resilient</font><font color="#E5E5E5"> as it does so so then I wanted</font>

1134
00:55:24,980 --> 00:55:29,359
to<font color="#E5E5E5"> show</font><font color="#CCCCCC"> you how</font><font color="#E5E5E5"> to take advantage</font><font color="#CCCCCC"> of a</font>

1135
00:55:29,359 --> 00:55:32,859
<font color="#E5E5E5">little bit more fast AI magic without</font>

1136
00:55:32,859 --> 00:55:35,839
<font color="#E5E5E5">using the layer</font><font color="#CCCCCC"> class and so I'm going</font>

1137
00:55:35,839 --> 00:55:39,820
<font color="#CCCCCC">to show</font><font color="#E5E5E5"> you how to use Cobra</font>

1138
00:55:39,820 --> 00:55:44,050
<font color="#CCCCCC">and specifically we're going</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> s GDR</font>

1139
00:55:44,050 --> 00:55:46,460
<font color="#E5E5E5">without without using the learner</font><font color="#CCCCCC"> class</font>

1140
00:55:46,460 --> 00:55:49,220
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so to do that we create our model</font>

1141
00:55:49,220 --> 00:55:52,130
again<font color="#CCCCCC"> just a standard PI torch model ok</font>

1142
00:55:52,130 --> 00:55:54,770
and this time<font color="#E5E5E5"> rather than going</font>

1143
00:55:54,770 --> 00:55:56,750
remember the usual pipe torch approach

1144
00:55:56,750 --> 00:56:00,290
is opt equals up to<font color="#CCCCCC"> M naught atom and</font>

1145
00:56:00,290 --> 00:56:01,640
you<font color="#CCCCCC"> pass in the parameters and a</font>

1146
00:56:01,640 --> 00:56:03,650
learning<font color="#CCCCCC"> rate I'm not going to do</font><font color="#E5E5E5"> that</font>

1147
00:56:03,650 --> 00:56:06,680
I'm going<font color="#CCCCCC"> to use the fast</font><font color="#E5E5E5"> AI layer</font>

1148
00:56:06,680 --> 00:56:12,310
optimizer class which<font color="#CCCCCC"> takes my</font><font color="#E5E5E5"> opt-in</font>

1149
00:56:12,310 --> 00:56:16,609
<font color="#E5E5E5">class constructor from PI torch it takes</font>

1150
00:56:16,609 --> 00:56:20,680
my model it takes my learning rate<font color="#E5E5E5"> and</font>

1151
00:56:20,680 --> 00:56:25,040
optionally takes weight decay<font color="#CCCCCC"> ok and so</font>

1152
00:56:25,040 --> 00:56:28,310
this class<font color="#E5E5E5"> is tiny it doesn't do very</font>

1153
00:56:28,310 --> 00:56:31,099
much<font color="#CCCCCC"> at</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the key reason it exists is</font>

1154
00:56:31,099 --> 00:56:33,650
to<font color="#E5E5E5"> do differential learning rates and</font>

1155
00:56:33,650 --> 00:56:36,109
differential<font color="#E5E5E5"> weight decay right but the</font>

1156
00:56:36,109 --> 00:56:39,109
<font color="#E5E5E5">reason we need</font><font color="#CCCCCC"> to use it is</font><font color="#E5E5E5"> that all of</font>

1157
00:56:39,109 --> 00:56:41,480
the mechanics<font color="#E5E5E5"> inside fast AI assumes</font>

1158
00:56:41,480 --> 00:56:43,490
that you<font color="#CCCCCC"> have one</font><font color="#E5E5E5"> of these</font><font color="#CCCCCC"> right so if</font>

1159
00:56:43,490 --> 00:56:46,250
you want<font color="#E5E5E5"> to use like callbacks or</font><font color="#CCCCCC"> SPDR</font>

1160
00:56:46,250 --> 00:56:49,550
or whatever<font color="#E5E5E5"> in code where you're not</font>

1161
00:56:49,550 --> 00:56:52,400
using<font color="#E5E5E5"> the learner class</font><font color="#CCCCCC"> then you need</font><font color="#E5E5E5"> to</font>

1162
00:56:52,400 --> 00:56:54,859
<font color="#E5E5E5">use rather than saying you know opt</font>

1163
00:56:54,859 --> 00:56:56,930
equals off to<font color="#E5E5E5"> m dot</font><font color="#CCCCCC"> atom</font><font color="#E5E5E5"> and here's my</font>

1164
00:56:56,930 --> 00:57:00,470
parameters you instead say<font color="#E5E5E5"> lay optimizer</font>

1165
00:57:00,470 --> 00:57:02,500
<font color="#CCCCCC">okay</font>

1166
00:57:02,500 --> 00:57:06,830
so that gives us a<font color="#E5E5E5"> layer optimizer</font>

1167
00:57:06,830 --> 00:57:08,720
<font color="#E5E5E5">object and if you're interested</font>

1168
00:57:08,720 --> 00:57:12,140
<font color="#E5E5E5">basically behind the scenes</font><font color="#CCCCCC"> you can now</font>

1169
00:57:12,140 --> 00:57:18,710
grab a dot opt property which actually

1170
00:57:18,710 --> 00:57:20,390
gives you<font color="#E5E5E5"> the optimizer</font><font color="#CCCCCC"> but you don't</font>

1171
00:57:20,390 --> 00:57:21,920
have<font color="#E5E5E5"> to worry about that itself but</font>

1172
00:57:21,920 --> 00:57:23,270
<font color="#E5E5E5">that's basically what happens behind the</font>

1173
00:57:23,270 --> 00:57:25,810
scenes<font color="#CCCCCC"> the key thing we can now do is</font>

1174
00:57:25,810 --> 00:57:29,990
that we can now when we call fit we<font color="#E5E5E5"> can</font>

1175
00:57:29,990 --> 00:57:34,040
pass in that optimizer<font color="#CCCCCC"> and we can also</font>

1176
00:57:34,040 --> 00:57:36,830
pass<font color="#CCCCCC"> in some callbacks</font><font color="#E5E5E5"> and specifically</font>

1177
00:57:36,830 --> 00:57:40,190
we're going<font color="#E5E5E5"> to use the cosine annealing</font>

1178
00:57:40,190 --> 00:57:42,680
callback<font color="#CCCCCC"> okay and so the cosine</font>

1179
00:57:42,680 --> 00:57:45,380
annealing callback<font color="#E5E5E5"> requires a layer</font>

1180
00:57:45,380 --> 00:57:48,170
optimizer<font color="#E5E5E5"> object right and so what this</font>

1181
00:57:48,170 --> 00:57:50,060
is<font color="#CCCCCC"> going to do is it's</font><font color="#E5E5E5"> going to do</font>

1182
00:57:50,060 --> 00:57:51,920
cosine annealing by changing the

1183
00:57:51,920 --> 00:57:52,369
learning

1184
00:57:52,369 --> 00:57:57,650
<font color="#CCCCCC">right inside this object</font><font color="#E5E5E5"> okay so the</font>

1185
00:57:57,650 --> 00:57:59,690
details<font color="#CCCCCC"> aren't terribly important we can</font>

1186
00:57:59,690 --> 00:58:01,190
talk about them<font color="#CCCCCC"> on the forum</font><font color="#E5E5E5"> it's really</font>

1187
00:58:01,190 --> 00:58:02,900
the concept<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to get across here</font>

1188
00:58:02,900 --> 00:58:05,029
right which is<font color="#E5E5E5"> that now that we've done</font>

1189
00:58:05,029 --> 00:58:06,079
this we can say all right

1190
00:58:06,079 --> 00:58:08,329
create a<font color="#CCCCCC"> cosine and</font><font color="#E5E5E5"> kneeling callback</font>

1191
00:58:08,329 --> 00:58:10,460
which is<font color="#E5E5E5"> going to update the learning</font>

1192
00:58:10,460 --> 00:58:14,930
rates in this layer optimizer<font color="#CCCCCC"> the length</font>

1193
00:58:14,930 --> 00:58:18,079
of an epoch<font color="#E5E5E5"> is equal to this here right</font>

1194
00:58:18,079 --> 00:58:19,549
how many<font color="#CCCCCC"> mini</font><font color="#E5E5E5"> batches are there in an</font>

1195
00:58:19,549 --> 00:58:22,039
epoch<font color="#E5E5E5"> well it's whatever the length of</font>

1196
00:58:22,039 --> 00:58:24,319
this data loader is okay so because<font color="#CCCCCC"> it's</font>

1197
00:58:24,319 --> 00:58:25,759
going<font color="#E5E5E5"> to be it's going to be doing the</font>

1198
00:58:25,759 --> 00:58:27,769
cosine annealing<font color="#E5E5E5"> it needs to know how</font>

1199
00:58:27,769 --> 00:58:31,880
often to reset<font color="#CCCCCC"> okay and then you can</font>

1200
00:58:31,880 --> 00:58:33,589
<font color="#E5E5E5">pass in the cycle</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> in the usual way</font>

1201
00:58:33,589 --> 00:58:37,999
<font color="#CCCCCC">and then we can even save our model</font>

1202
00:58:37,999 --> 00:58:39,829
<font color="#CCCCCC">automatically like you remember how</font>

1203
00:58:39,829 --> 00:58:42,130
there was that cycle<font color="#CCCCCC"> saved name</font>

1204
00:58:42,130 --> 00:58:44,329
parameter that<font color="#E5E5E5"> we can pass</font><font color="#CCCCCC"> to learn not</font>

1205
00:58:44,329 --> 00:58:45,920
fit<font color="#E5E5E5"> this is what it does behind the</font>

1206
00:58:45,920 --> 00:58:48,499
scenes behind the<font color="#CCCCCC"> scenes</font><font color="#E5E5E5"> it sets an on</font>

1207
00:58:48,499 --> 00:58:51,499
cycle<font color="#E5E5E5"> end callback and so here I have to</font>

1208
00:58:51,499 --> 00:58:53,480
find that callback<font color="#E5E5E5"> as being something</font>

1209
00:58:53,480 --> 00:58:57,410
<font color="#CCCCCC">that saves my model okay so there's</font>

1210
00:58:57,410 --> 00:59:00,049
quite<font color="#CCCCCC"> a lot of cool</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> that you can</font>

1211
00:59:00,049 --> 00:59:02,599
do with callbacks callbacks are

1212
00:59:02,599 --> 00:59:04,339
basically things where you can<font color="#E5E5E5"> define</font>

1213
00:59:04,339 --> 00:59:06,410
like<font color="#E5E5E5"> at the start of training or</font><font color="#CCCCCC"> at the</font>

1214
00:59:06,410 --> 00:59:07,819
start of<font color="#E5E5E5"> an epoch or</font><font color="#CCCCCC"> at the side of</font><font color="#E5E5E5"> a</font>

1215
00:59:07,819 --> 00:59:09,710
batch<font color="#CCCCCC"> or at the</font><font color="#E5E5E5"> end of</font><font color="#CCCCCC"> training or at</font>

1216
00:59:09,710 --> 00:59:10,970
the<font color="#E5E5E5"> end of an epoch or at the end of a</font>

1217
00:59:10,970 --> 00:59:13,819
batch please call this club<font color="#CCCCCC"> okay and so</font>

1218
00:59:13,819 --> 00:59:17,420
we've written some for you including<font color="#CCCCCC"> SGD</font>

1219
00:59:17,420 --> 00:59:20,410
<font color="#CCCCCC">R which is the cosine</font><font color="#E5E5E5"> annealing callback</font>

1220
00:59:20,410 --> 00:59:23,239
<font color="#CCCCCC">and then so how I recently wrote a new</font>

1221
00:59:23,239 --> 00:59:26,089
<font color="#E5E5E5">callback</font><font color="#CCCCCC"> to implement the new approach</font>

1222
00:59:26,089 --> 00:59:28,970
to decoupled weight decay<font color="#CCCCCC"> we use</font>

1223
00:59:28,970 --> 00:59:31,579
callbacks<font color="#CCCCCC"> to draw those little graphs of</font>

1224
00:59:31,579 --> 00:59:34,940
the loss over<font color="#CCCCCC"> time so there's lots of</font>

1225
00:59:34,940 --> 00:59:36,650
cool<font color="#CCCCCC"> stuff you can do with</font><font color="#E5E5E5"> callbacks</font><font color="#CCCCCC"> so</font>

1226
00:59:36,650 --> 00:59:39,140
in this case by passing in that callback

1227
00:59:39,140 --> 00:59:43,400
<font color="#CCCCCC">we're getting as JDR</font><font color="#E5E5E5"> and that's able to</font>

1228
00:59:43,400 --> 00:59:48,380
get us down to<font color="#E5E5E5"> one point</font><font color="#CCCCCC"> three one here</font>

1229
00:59:48,380 --> 00:59:49,910
and then we can train a<font color="#CCCCCC"> little bit more</font>

1230
00:59:49,910 --> 00:59:54,109
and eventually<font color="#CCCCCC"> get down to one</font><font color="#E5E5E5"> point two</font>

1231
00:59:54,109 --> 00:59:58,809
five<font color="#E5E5E5"> and so we can now test that out</font><font color="#CCCCCC"> and</font>

1232
00:59:58,809 --> 01:00:01,819
so if we<font color="#CCCCCC"> passed in a few characters of</font>

1233
01:00:01,819 --> 01:00:05,090
<font color="#E5E5E5">text we get not surprisingly and</font><font color="#CCCCCC"> a</font>

1234
01:00:05,090 --> 01:00:08,950
<font color="#CCCCCC">after</font><font color="#E5E5E5"> four thus let's do then 400 and</font>

1235
01:00:08,950 --> 01:00:12,770
now we have our own<font color="#CCCCCC"> Nietzsche so</font>

1236
01:00:12,770 --> 01:00:14,330
Nietzsche tends to start his sections

1237
01:00:14,330 --> 01:00:17,540
with a number and<font color="#CCCCCC"> a dot so 2 9 3 perhaps</font>

1238
01:00:17,540 --> 01:00:20,420
that every life<font color="#E5E5E5"> the values of blood</font><font color="#CCCCCC"> have</font>

1239
01:00:20,420 --> 01:00:22,160
intercourse<font color="#E5E5E5"> when it senses there is</font>

1240
01:00:22,160 --> 01:00:24,050
unscrupulous<font color="#CCCCCC"> his very</font><font color="#E5E5E5"> rights and still</font>

1241
01:00:24,050 --> 01:00:27,140
impulse love<font color="#CCCCCC"> ok so I mean it's slightly</font>

1242
01:00:27,140 --> 01:00:29,630
less clear than Nietzsche normally but

1243
01:00:29,630 --> 01:00:33,440
it gets the tone right<font color="#CCCCCC"> ok and it's</font>

1244
01:00:33,440 --> 01:00:36,410
<font color="#E5E5E5">actually quite</font><font color="#CCCCCC"> interesting like if to</font>

1245
01:00:36,410 --> 01:00:38,570
play around with<font color="#E5E5E5"> training these</font>

1246
01:00:38,570 --> 01:00:40,580
character based language models to like

1247
01:00:40,580 --> 01:00:44,120
run this at different levels of loss<font color="#CCCCCC"> to</font>

1248
01:00:44,120 --> 01:00:45,470
get a sense of<font color="#E5E5E5"> like what</font><font color="#CCCCCC"> does</font><font color="#E5E5E5"> it look</font>

1249
01:00:45,470 --> 01:00:49,160
<font color="#E5E5E5">like like you really notice that</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

1250
01:00:49,160 --> 01:00:53,210
like<font color="#CCCCCC"> 1.25</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that's slightly worse</font>

1251
01:00:53,210 --> 01:00:57,140
like 1.3 this looks like<font color="#E5E5E5"> total junk you</font>

1252
01:00:57,140 --> 01:00:59,210
know<font color="#E5E5E5"> there's like punctuation in random</font>

1253
01:00:59,210 --> 01:01:01,940
places and you<font color="#E5E5E5"> know nothing makes sense</font>

1254
01:01:01,940 --> 01:01:03,740
<font color="#E5E5E5">and like you start to realize that the</font>

1255
01:01:03,740 --> 01:01:06,830
difference<font color="#E5E5E5"> between you know</font><font color="#CCCCCC"> Nietzsche</font>

1256
01:01:06,830 --> 01:01:09,920
and random<font color="#E5E5E5"> junk is</font><font color="#CCCCCC"> not that far in kind</font>

1257
01:01:09,920 --> 01:01:12,470
<font color="#E5E5E5">of language model terms and so if you</font>

1258
01:01:12,470 --> 01:01:13,430
train this for a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> longer</font>

1259
01:01:13,430 --> 01:01:15,860
<font color="#E5E5E5">you'll suddenly find like oh it's it's</font>

1260
01:01:15,860 --> 01:01:18,520
it's making<font color="#CCCCCC"> more and more sense okay so</font>

1261
01:01:18,520 --> 01:01:21,460
if you<font color="#E5E5E5"> are playing</font><font color="#CCCCCC"> around with NLP stuff</font>

1262
01:01:21,460 --> 01:01:23,630
particularly generative stuff like this

1263
01:01:23,630 --> 01:01:27,410
and you're like there is<font color="#CCCCCC"> also like kind</font>

1264
01:01:27,410 --> 01:01:29,780
of okay<font color="#E5E5E5"> but not great</font><font color="#CCCCCC"> don't be</font>

1265
01:01:29,780 --> 01:01:31,100
disheartened<font color="#E5E5E5"> because that means you're</font>

1266
01:01:31,100 --> 01:01:33,260
<font color="#CCCCCC">actually very very nearly there you know</font>

1267
01:01:33,260 --> 01:01:34,730
the<font color="#CCCCCC"> the difference</font><font color="#E5E5E5"> between like</font>

1268
01:01:34,730 --> 01:01:36,800
something which is starting to<font color="#E5E5E5"> create</font>

1269
01:01:36,800 --> 01:01:38,480
something<font color="#CCCCCC"> which almost vaguely looks</font>

1270
01:01:38,480 --> 01:01:40,700
English if<font color="#E5E5E5"> you squint and something</font>

1271
01:01:40,700 --> 01:01:42,320
that's<font color="#CCCCCC"> actually a very</font><font color="#E5E5E5"> good generation</font>

1272
01:01:42,320 --> 01:01:45,500
it's it's not it's not far in<font color="#E5E5E5"> most</font>

1273
01:01:45,500 --> 01:01:49,520
<font color="#CCCCCC">motion tests</font><font color="#E5E5E5"> okay great so let's take a</font>

1274
01:01:49,520 --> 01:01:50,900
<font color="#E5E5E5">five-minute break we'll come back at</font>

1275
01:01:50,900 --> 01:01:52,850
7:45 and we're going to<font color="#E5E5E5"> go back</font><font color="#CCCCCC"> to</font>

1276
01:01:52,850 --> 01:01:55,240
computer vision

1277
01:01:57,610 --> 01:02:04,490
okay so now<font color="#CCCCCC"> become full circle back to</font>

1278
01:02:04,490 --> 01:02:10,970
vision so now we're<font color="#CCCCCC"> looking at less than</font>

1279
01:02:10,970 --> 01:02:18,320
seven so far<font color="#CCCCCC"> ten that book you might</font>

1280
01:02:18,320 --> 01:02:20,690
<font color="#E5E5E5">have heard of so far</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> it's a really</font>

1281
01:02:20,690 --> 01:02:24,860
<font color="#CCCCCC">well-known</font><font color="#E5E5E5"> data set in academia</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's</font>

1282
01:02:24,860 --> 01:02:26,420
partly<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> well known</font><font color="#E5E5E5"> it's actually</font>

1283
01:02:26,420 --> 01:02:30,200
pretty<font color="#CCCCCC"> old by you know computer vision</font>

1284
01:02:30,200 --> 01:02:33,230
standards<font color="#CCCCCC"> well</font><font color="#E5E5E5"> before image net was</font>

1285
01:02:33,230 --> 01:02:35,720
around there<font color="#CCCCCC"> was sci-fi 10 you</font><font color="#E5E5E5"> might</font>

1286
01:02:35,720 --> 01:02:37,490
wonder why<font color="#E5E5E5"> we're going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> looking at</font>

1287
01:02:37,490 --> 01:02:39,020
such an old data set and<font color="#E5E5E5"> actually I</font>

1288
01:02:39,020 --> 01:02:44,060
think small data sets are much more

1289
01:02:44,060 --> 01:02:47,060
interesting than image net because like

1290
01:02:47,060 --> 01:02:48,590
<font color="#E5E5E5">most of the time you're likely to be</font>

1291
01:02:48,590 --> 01:02:51,290
<font color="#E5E5E5">working</font><font color="#CCCCCC"> with stuff with a small number</font>

1292
01:02:51,290 --> 01:02:54,620
of<font color="#E5E5E5"> thousands of images rather than one</font>

1293
01:02:54,620 --> 01:02:56,300
and a half million images<font color="#CCCCCC"> some of you</font>

1294
01:02:56,300 --> 01:02:57,260
will<font color="#E5E5E5"> work at one and</font><font color="#CCCCCC"> a half</font><font color="#E5E5E5"> million</font>

1295
01:02:57,260 --> 01:02:59,570
images<font color="#E5E5E5"> but most of you won't right so</font>

1296
01:02:59,570 --> 01:03:01,460
learning<font color="#E5E5E5"> how to use these kind of data</font>

1297
01:03:01,460 --> 01:03:02,870
sets<font color="#E5E5E5"> I think is much</font><font color="#CCCCCC"> more interesting</font>

1298
01:03:02,870 --> 01:03:05,060
often also<font color="#CCCCCC"> a lot of the stuff we're</font>

1299
01:03:05,060 --> 01:03:07,040
looking<font color="#E5E5E5"> at like in medical imaging we're</font>

1300
01:03:07,040 --> 01:03:09,320
looking at like the specific<font color="#E5E5E5"> area where</font>

1301
01:03:09,320 --> 01:03:11,300
there's a lung nodule<font color="#E5E5E5"> you're probably</font>

1302
01:03:11,300 --> 01:03:14,810
looking at like 32 by 32 pixels<font color="#E5E5E5"> at most</font>

1303
01:03:14,810 --> 01:03:16,550
as being the area<font color="#E5E5E5"> where</font><font color="#CCCCCC"> that lung nodule</font>

1304
01:03:16,550 --> 01:03:19,640
actually exists right<font color="#E5E5E5"> and so sci-fi 10</font>

1305
01:03:19,640 --> 01:03:20,900
is small both in terms of it doesn't

1306
01:03:20,900 --> 01:03:23,030
<font color="#CCCCCC">have many images</font><font color="#E5E5E5"> and the images</font><font color="#CCCCCC"> are very</font>

1307
01:03:23,030 --> 01:03:25,250
<font color="#E5E5E5">small and so therefore I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> this is</font>

1308
01:03:25,250 --> 01:03:27,200
like it's been in<font color="#E5E5E5"> a lot of ways is much</font>

1309
01:03:27,200 --> 01:03:30,110
more challenging<font color="#CCCCCC"> then</font><font color="#E5E5E5"> something like</font>

1310
01:03:30,110 --> 01:03:31,550
image<font color="#E5E5E5"> net and in some ways it's much</font>

1311
01:03:31,550 --> 01:03:34,640
more interesting<font color="#E5E5E5"> right and</font><font color="#CCCCCC"> also most</font>

1312
01:03:34,640 --> 01:03:36,860
importantly you can run stuff much more

1313
01:03:36,860 --> 01:03:38,720
quickly<font color="#CCCCCC"> on earth</font><font color="#E5E5E5"> so it's much better to</font>

1314
01:03:38,720 --> 01:03:41,240
<font color="#E5E5E5">test out your algorithms with something</font>

1315
01:03:41,240 --> 01:03:43,310
you can run quickly<font color="#E5E5E5"> and they're still</font>

1316
01:03:43,310 --> 01:03:45,830
<font color="#E5E5E5">challenging and so I hear</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

1317
01:03:45,830 --> 01:03:47,920
researchers complain about like how they

1318
01:03:47,920 --> 01:03:51,260
can't afford<font color="#E5E5E5"> to study all the different</font>

1319
01:03:51,260 --> 01:03:52,670
<font color="#E5E5E5">versions</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> their algorithm properly</font>

1320
01:03:52,670 --> 01:03:55,220
because<font color="#E5E5E5"> it's too expensive and they're</font>

1321
01:03:55,220 --> 01:03:57,140
<font color="#CCCCCC">doing that</font><font color="#E5E5E5"> on imagenet so like it's</font>

1322
01:03:57,140 --> 01:03:59,600
literally<font color="#E5E5E5"> a week of you know expensive</font>

1323
01:03:59,600 --> 01:04:02,930
CP GPU work for every study they do and

1324
01:04:02,930 --> 01:04:04,610
like I don't understand why you would do

1325
01:04:04,610 --> 01:04:06,290
<font color="#CCCCCC">that kind of study on imagenet doesn't</font>

1326
01:04:06,290 --> 01:04:07,130
make<font color="#E5E5E5"> sense</font>

1327
01:04:07,130 --> 01:04:10,200
yeah and so

1328
01:04:10,200 --> 01:04:13,890
this has<font color="#E5E5E5"> been a particularly you</font><font color="#CCCCCC"> know</font>

1329
01:04:13,890 --> 01:04:15,060
there's<font color="#CCCCCC"> been</font><font color="#E5E5E5"> a particular a lot</font><font color="#CCCCCC"> of kind</font>

1330
01:04:15,060 --> 01:04:17,070
of debate about this this week<font color="#E5E5E5"> because</font>

1331
01:04:17,070 --> 01:04:19,020
I'm really interesting<font color="#E5E5E5"> researcher named</font>

1332
01:04:19,020 --> 01:04:22,260
Ali raha me nips<font color="#E5E5E5"> this week gave a talk a</font>

1333
01:04:22,260 --> 01:04:24,750
really great talk about<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of the need</font>

1334
01:04:24,750 --> 01:04:28,200
for rigor<font color="#E5E5E5"> in experiments in deep</font>

1335
01:04:28,200 --> 01:04:30,060
learning<font color="#E5E5E5"> and you know he felt</font><font color="#CCCCCC"> like</font>

1336
01:04:30,060 --> 01:04:31,980
there's a lack<font color="#CCCCCC"> of rigor and I've talked</font>

1337
01:04:31,980 --> 01:04:34,020
<font color="#E5E5E5">to him about it quite</font><font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> since that</font>

1338
01:04:34,020 --> 01:04:38,790
<font color="#E5E5E5">time and I'm</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> sure we yet quite</font>

1339
01:04:38,790 --> 01:04:40,290
understand each other as<font color="#E5E5E5"> to where we're</font>

1340
01:04:40,290 --> 01:04:42,720
coming<font color="#CCCCCC"> from but but we have very</font><font color="#E5E5E5"> similar</font>

1341
01:04:42,720 --> 01:04:44,730
<font color="#E5E5E5">kinds of concerns which is basically</font>

1342
01:04:44,730 --> 01:04:48,000
people<font color="#E5E5E5"> aren't</font><font color="#CCCCCC"> doing carefully tuned</font>

1343
01:04:48,000 --> 01:04:50,310
carefully thought<font color="#E5E5E5"> about experiments but</font>

1344
01:04:50,310 --> 01:04:52,740
instead they kind of throw lots<font color="#E5E5E5"> of GPUs</font>

1345
01:04:52,740 --> 01:04:54,630
<font color="#CCCCCC">or lots of data and consider that a day</font>

1346
01:04:54,630 --> 01:04:57,200
and so this idea of<font color="#E5E5E5"> like saying like</font>

1347
01:04:57,200 --> 01:04:59,670
well you know it's my data statement

1348
01:04:59,670 --> 01:05:01,290
it's my algorithm meant to be good

1349
01:05:01,290 --> 01:05:04,830
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> moral imagers at small</font><font color="#E5E5E5"> data sets</font>

1350
01:05:04,830 --> 01:05:07,530
<font color="#E5E5E5">well if so let's study on</font><font color="#CCCCCC"> sci-fi 10</font>

1351
01:05:07,530 --> 01:05:09,600
<font color="#E5E5E5">revin studying it on</font><font color="#CCCCCC"> imagenet and then</font>

1352
01:05:09,600 --> 01:05:12,150
do more studies of<font color="#E5E5E5"> different versions of</font>

1353
01:05:12,150 --> 01:05:13,230
the algorithm and learning different

1354
01:05:13,230 --> 01:05:15,270
<font color="#E5E5E5">bits on and off understand which parts</font>

1355
01:05:15,270 --> 01:05:18,560
are actually<font color="#E5E5E5"> important</font><font color="#CCCCCC"> and so forth</font>

1356
01:05:18,560 --> 01:05:20,970
<font color="#CCCCCC">people also complain a lot about amnesty</font>

1357
01:05:20,970 --> 01:05:23,550
<font color="#E5E5E5">which we've</font><font color="#CCCCCC"> talked about</font><font color="#E5E5E5"> looked at</font>

1358
01:05:23,550 --> 01:05:25,020
<font color="#CCCCCC">before and I would say the same thing</font>

1359
01:05:25,020 --> 01:05:26,670
about<font color="#CCCCCC"> em this right which is like if</font>

1360
01:05:26,670 --> 01:05:27,870
you're<font color="#CCCCCC"> actually trying to understand</font>

1361
01:05:27,870 --> 01:05:29,430
<font color="#CCCCCC">rich parts of</font><font color="#E5E5E5"> your algorithm make a</font>

1362
01:05:29,430 --> 01:05:32,190
difference and why using<font color="#CCCCCC"> m mr that kind</font>

1363
01:05:32,190 --> 01:05:34,260
<font color="#E5E5E5">of study is a very good idea</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> all</font>

1364
01:05:34,260 --> 01:05:36,420
these people who complain about<font color="#E5E5E5"> em NIST</font>

1365
01:05:36,420 --> 01:05:38,520
I think they're<font color="#E5E5E5"> just showing off</font><font color="#CCCCCC"> they're</font>

1366
01:05:38,520 --> 01:05:40,110
saying like<font color="#CCCCCC"> oh I work at Google and I</font>

1367
01:05:40,110 --> 01:05:42,480
have you know<font color="#CCCCCC"> a part of</font><font color="#E5E5E5"> TP use and I</font>

1368
01:05:42,480 --> 01:05:44,760
have<font color="#CCCCCC"> $100,000 a week</font><font color="#E5E5E5"> of time</font><font color="#CCCCCC"> just being</font>

1369
01:05:44,760 --> 01:05:48,300
on it no worries<font color="#CCCCCC"> but I don't know I</font>

1370
01:05:48,300 --> 01:05:49,800
think<font color="#E5E5E5"> that's all</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know it's</font>

1371
01:05:49,800 --> 01:05:51,810
just<font color="#CCCCCC"> signalling rather than actually</font>

1372
01:05:51,810 --> 01:05:55,680
academically<font color="#E5E5E5"> rigorous okay so I'm so far</font>

1373
01:05:55,680 --> 01:05:58,080
<font color="#CCCCCC">ten you</font><font color="#E5E5E5"> can download from</font><font color="#CCCCCC"> here and this</font>

1374
01:05:58,080 --> 01:05:59,580
person<font color="#CCCCCC"> is very kindly made it available</font>

1375
01:05:59,580 --> 01:06:04,860
<font color="#E5E5E5">in image</font><font color="#CCCCCC"> form if you</font><font color="#E5E5E5"> google for size 510</font>

1376
01:06:04,860 --> 01:06:06,630
you'll find us a much less<font color="#E5E5E5"> convenient</font>

1377
01:06:06,630 --> 01:06:09,330
form so please use this one<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> already</font>

1378
01:06:09,330 --> 01:06:10,500
<font color="#E5E5E5">in the exact form you need once you</font>

1379
01:06:10,500 --> 01:06:13,140
download it<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> use it in the</font><font color="#CCCCCC"> usual</font>

1380
01:06:13,140 --> 01:06:19,200
way<font color="#CCCCCC"> so here's a list</font><font color="#E5E5E5"> of the classes that</font>

1381
01:06:19,200 --> 01:06:22,410
are there<font color="#E5E5E5"> now you'll see here I've</font>

1382
01:06:22,410 --> 01:06:23,610
created this thing<font color="#E5E5E5"> called</font>

1383
01:06:23,610 --> 01:06:26,430
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> normally when we've been</font><font color="#CCCCCC"> using</font>

1384
01:06:26,430 --> 01:06:31,850
<font color="#CCCCCC">pre trained models we have been</font><font color="#E5E5E5"> seeing</font>

1385
01:06:31,850 --> 01:06:34,710
<font color="#E5E5E5">transforms from model and that's</font>

1386
01:06:34,710 --> 01:06:37,070
actually created the necessary

1387
01:06:37,070 --> 01:06:41,070
transforms to<font color="#E5E5E5"> convert our data set into</font>

1388
01:06:41,070 --> 01:06:43,560
a normalized data set based on<font color="#E5E5E5"> the means</font>

1389
01:06:43,560 --> 01:06:46,200
and standard<font color="#E5E5E5"> deviations of each</font><font color="#CCCCCC"> channel</font>

1390
01:06:46,200 --> 01:06:48,300
<font color="#E5E5E5">in the original model that was trained</font>

1391
01:06:48,300 --> 01:06:50,670
<font color="#CCCCCC">in our case though this time we got a</font>

1392
01:06:50,670 --> 01:06:53,040
trainer model<font color="#E5E5E5"> from scratch</font><font color="#CCCCCC"> so we have no</font>

1393
01:06:53,040 --> 01:06:55,890
such thing<font color="#CCCCCC"> so we actually need to tell</font>

1394
01:06:55,890 --> 01:06:59,070
it<font color="#CCCCCC"> the mean and standard deviation</font><font color="#E5E5E5"> of</font>

1395
01:06:59,070 --> 01:07:02,400
our data<font color="#CCCCCC"> to normalize</font><font color="#E5E5E5"> it okay and so in</font>

1396
01:07:02,400 --> 01:07:04,230
this<font color="#E5E5E5"> case I haven't included the code</font>

1397
01:07:04,230 --> 01:07:06,210
here to do it you should try<font color="#E5E5E5"> and try</font>

1398
01:07:06,210 --> 01:07:08,160
this<font color="#CCCCCC"> yourself to confirm that you can do</font>

1399
01:07:08,160 --> 01:07:09,330
this and understand where it<font color="#E5E5E5"> comes from</font>

1400
01:07:09,330 --> 01:07:11,970
<font color="#CCCCCC">but</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> the mean</font><font color="#CCCCCC"> channel and</font>

1401
01:07:11,970 --> 01:07:14,430
the standard deviation<font color="#CCCCCC"> per channel of</font>

1402
01:07:14,430 --> 01:07:20,910
all<font color="#E5E5E5"> of the images</font><font color="#CCCCCC"> alright so we're going</font>

1403
01:07:20,910 --> 01:07:24,170
to try<font color="#CCCCCC"> and</font><font color="#E5E5E5"> create a model from</font><font color="#CCCCCC"> scratch</font>

1404
01:07:24,170 --> 01:07:26,990
<font color="#CCCCCC">and so the first</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> we need is some</font>

1405
01:07:26,990 --> 01:07:30,480
<font color="#E5E5E5">transformations so for so far</font><font color="#CCCCCC"> 10 people</font>

1406
01:07:30,480 --> 01:07:34,350
generally do<font color="#E5E5E5"> data augmentation of simply</font>

1407
01:07:34,350 --> 01:07:38,820
flipping randomly horizontally so here's

1408
01:07:38,820 --> 01:07:41,660
how we can<font color="#E5E5E5"> create a specific list of</font>

1409
01:07:41,660 --> 01:07:44,910
augmentations to use<font color="#E5E5E5"> and then they also</font>

1410
01:07:44,910 --> 01:07:47,250
tend to add a little<font color="#E5E5E5"> bit of padding</font>

1411
01:07:47,250 --> 01:07:49,620
<font color="#CCCCCC">black padding around the edge and</font><font color="#E5E5E5"> then</font>

1412
01:07:49,620 --> 01:07:53,190
randomly<font color="#E5E5E5"> pick a 32 by 32 spot from</font>

1413
01:07:53,190 --> 01:07:55,320
within<font color="#E5E5E5"> that pattern image so if you add</font>

1414
01:07:55,320 --> 01:07:58,710
the pad parameter<font color="#E5E5E5"> to any of the</font><font color="#CCCCCC"> fast a a</font>

1415
01:07:58,710 --> 01:08:01,680
transform<font color="#CCCCCC"> creators it'll</font><font color="#E5E5E5"> it'll do that</font>

1416
01:08:01,680 --> 01:08:05,250
for you<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and so in this</font><font color="#E5E5E5"> case I'm</font>

1417
01:08:05,250 --> 01:08:09,270
just going<font color="#CCCCCC"> to add 4 pixels around</font><font color="#E5E5E5"> each</font>

1418
01:08:09,270 --> 01:08:12,900
size<font color="#CCCCCC"> and so now that I've got my</font>

1419
01:08:12,900 --> 01:08:14,640
transforms I can go ahead<font color="#E5E5E5"> and</font><font color="#CCCCCC"> create my</font>

1420
01:08:14,640 --> 01:08:18,660
<font color="#E5E5E5">image classifier data from paths in the</font>

1421
01:08:18,660 --> 01:08:22,109
usual way<font color="#CCCCCC"> okay I'm going to use a batch</font>

1422
01:08:22,109 --> 01:08:24,630
size of 256<font color="#E5E5E5"> because these are pretty</font>

1423
01:08:24,630 --> 01:08:26,130
<font color="#CCCCCC">small so it's going</font><font color="#E5E5E5"> to let me do a</font>

1424
01:08:26,130 --> 01:08:28,649
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more at a time so here's what</font>

1425
01:08:28,649 --> 01:08:31,560
the data looks<font color="#CCCCCC"> like so for example</font>

1426
01:08:31,560 --> 01:08:33,779
here's a boat and just<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show you how</font>

1427
01:08:33,779 --> 01:08:37,420
tough<font color="#E5E5E5"> this is what's that</font>

1428
01:08:37,420 --> 01:08:42,549
<font color="#E5E5E5">okay it is it's a not chicken prog-rock</font>

1429
01:08:42,549 --> 01:08:45,580
<font color="#E5E5E5">so I guess it's this big thing</font><font color="#CCCCCC"> whatever</font>

1430
01:08:45,580 --> 01:08:47,109
the<font color="#E5E5E5"> thing is called there's your frog</font>

1431
01:08:47,109 --> 01:08:51,009
<font color="#E5E5E5">okay so so these are the kinds</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font>

1432
01:08:51,009 --> 01:08:54,790
<font color="#CCCCCC">that we want</font><font color="#E5E5E5"> to look at so I'm going to</font>

1433
01:08:54,790 --> 01:08:57,969
start<font color="#E5E5E5"> out so our student</font><font color="#CCCCCC"> Karen we saw</font>

1434
01:08:57,969 --> 01:09:00,040
one<font color="#E5E5E5"> of his posts earlier in this course</font>

1435
01:09:00,040 --> 01:09:03,779
<font color="#E5E5E5">he he made this really cool</font><font color="#CCCCCC"> log book</font>

1436
01:09:03,779 --> 01:09:07,569
which shows how different<font color="#E5E5E5"> optimizers</font>

1437
01:09:07,569 --> 01:09:12,040
<font color="#CCCCCC">works there we go so Karen made this</font>

1438
01:09:12,040 --> 01:09:14,109
really<font color="#CCCCCC"> cool notebook I think it was</font>

1439
01:09:14,109 --> 01:09:16,929
maybe last week<font color="#E5E5E5"> in which he showed how</font>

1440
01:09:16,929 --> 01:09:19,060
<font color="#CCCCCC">to create various different optimizers</font>

1441
01:09:19,060 --> 01:09:20,738
from scratch so this is kind of like the

1442
01:09:20,738 --> 01:09:22,899
<font color="#E5E5E5">Excel thing I had but this is the Python</font>

1443
01:09:22,899 --> 01:09:25,179
version of momentum and<font color="#E5E5E5"> Adam and</font>

1444
01:09:25,179 --> 01:09:27,279
<font color="#E5E5E5">Nesterov and Atta grad all written from</font>

1445
01:09:27,279 --> 01:09:29,649
scratch<font color="#E5E5E5"> it is very cool one of the nice</font>

1446
01:09:29,649 --> 01:09:32,710
<font color="#CCCCCC">things he did was he showed</font><font color="#E5E5E5"> a tiny</font>

1447
01:09:32,710 --> 01:09:35,500
little general-purpose<font color="#E5E5E5"> fully connected</font>

1448
01:09:35,500 --> 01:09:37,479
Network<font color="#CCCCCC"> generator</font><font color="#E5E5E5"> so we're going to</font>

1449
01:09:37,479 --> 01:09:39,399
start<font color="#E5E5E5"> with his so so he called that</font>

1450
01:09:39,399 --> 01:09:42,250
simple net so are we<font color="#CCCCCC"> so here's a simple</font>

1451
01:09:42,250 --> 01:09:47,350
<font color="#E5E5E5">class which</font><font color="#CCCCCC"> has a list of fully</font>

1452
01:09:47,350 --> 01:09:49,600
connected layers<font color="#E5E5E5"> okay</font>

1453
01:09:49,600 --> 01:09:52,299
whenever you<font color="#CCCCCC"> create a list of layers in</font>

1454
01:09:52,299 --> 01:09:54,790
<font color="#E5E5E5">pi torch you have to wrap</font><font color="#CCCCCC"> it in an end</font>

1455
01:09:54,790 --> 01:09:57,040
module<font color="#E5E5E5"> list just to tailpipe torch to</font>

1456
01:09:57,040 --> 01:10:01,989
like register<font color="#E5E5E5"> these as attributes</font><font color="#CCCCCC"> and so</font>

1457
01:10:01,989 --> 01:10:04,239
then we<font color="#CCCCCC"> just go ahead and flatten the</font>

1458
01:10:04,239 --> 01:10:05,620
data that<font color="#E5E5E5"> comes in because it's fully</font>

1459
01:10:05,620 --> 01:10:07,179
connected layers and then go through

1460
01:10:07,179 --> 01:10:12,550
each layer and call that linear layer do

1461
01:10:12,550 --> 01:10:15,250
the value to it<font color="#E5E5E5"> and at the end do a soft</font>

1462
01:10:15,250 --> 01:10:17,469
mess<font color="#E5E5E5"> okay so there's a really simple</font>

1463
01:10:17,469 --> 01:10:21,820
approach and so we can<font color="#E5E5E5"> now take</font><font color="#CCCCCC"> that</font>

1464
01:10:21,820 --> 01:10:23,830
model<font color="#E5E5E5"> and now I'm going to show you how</font>

1465
01:10:23,830 --> 01:10:26,199
<font color="#E5E5E5">to step up one level of the API higher</font>

1466
01:10:26,199 --> 01:10:28,360
rather<font color="#CCCCCC"> than calling the</font><font color="#E5E5E5"> fit function</font>

1467
01:10:28,360 --> 01:10:30,429
we're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to create a learn object but</font>

1468
01:10:30,429 --> 01:10:31,929
we're<font color="#E5E5E5"> going to create a learn object</font>

1469
01:10:31,929 --> 01:10:35,260
from a custom<font color="#E5E5E5"> model and so we can do</font>

1470
01:10:35,260 --> 01:10:37,150
that by say we want a convolutional

1471
01:10:37,150 --> 01:10:39,280
learner<font color="#E5E5E5"> we want to create it from a</font>

1472
01:10:39,280 --> 01:10:42,640
model and from some data<font color="#E5E5E5"> and the model</font>

1473
01:10:42,640 --> 01:10:45,820
<font color="#E5E5E5">is this one so this is just a general</font>

1474
01:10:45,820 --> 01:10:49,300
<font color="#CCCCCC">height</font><font color="#E5E5E5"> watch model and this is a model</font>

1475
01:10:49,300 --> 01:10:51,190
<font color="#E5E5E5">data object of the usual kind</font>

1476
01:10:51,190 --> 01:10:53,530
and that will return a<font color="#CCCCCC"> loaner so this is</font>

1477
01:10:53,530 --> 01:10:55,780
a bit<font color="#E5E5E5"> easier</font><font color="#CCCCCC"> than what</font><font color="#E5E5E5"> we just saw with</font>

1478
01:10:55,780 --> 01:10:57,160
<font color="#E5E5E5">the RNN we don't have to fiddle around</font>

1479
01:10:57,160 --> 01:10:59,890
with<font color="#CCCCCC"> lair optimizers and</font><font color="#E5E5E5"> cosine</font><font color="#CCCCCC"> and</font>

1480
01:10:59,890 --> 01:11:01,630
<font color="#E5E5E5">kneeling</font><font color="#CCCCCC"> and callbacks and whatever</font><font color="#E5E5E5"> this</font>

1481
01:11:01,630 --> 01:11:03,370
<font color="#E5E5E5">is</font><font color="#CCCCCC"> now a loaner that we can do all the</font>

1482
01:11:03,370 --> 01:11:06,310
usual<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> with that we can do it with</font>

1483
01:11:06,310 --> 01:11:11,890
any<font color="#E5E5E5"> model</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> created</font><font color="#CCCCCC"> okay so if we</font>

1484
01:11:11,890 --> 01:11:14,440
just<font color="#CCCCCC"> go learn that'll go ahead</font><font color="#E5E5E5"> and print</font>

1485
01:11:14,440 --> 01:11:16,090
<font color="#CCCCCC">it out</font><font color="#E5E5E5"> okay so you can see we've</font><font color="#CCCCCC"> got</font>

1486
01:11:16,090 --> 01:11:17,740
<font color="#E5E5E5">three thousand and seventy two features</font>

1487
01:11:17,740 --> 01:11:19,540
coming<font color="#E5E5E5"> in because you've got 32 by 32</font>

1488
01:11:19,540 --> 01:11:22,630
pixels by<font color="#CCCCCC"> three channels</font><font color="#E5E5E5"> okay and then</font>

1489
01:11:22,630 --> 01:11:24,640
we've<font color="#CCCCCC"> got</font><font color="#E5E5E5"> 40 features coming out of the</font>

1490
01:11:24,640 --> 01:11:26,980
first layer<font color="#E5E5E5"> that's going to go into the</font>

1491
01:11:26,980 --> 01:11:28,660
second layer<font color="#CCCCCC"> ten features coming out</font>

1492
01:11:28,660 --> 01:11:31,390
<font color="#E5E5E5">because we've got the</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> so far</font><font color="#CCCCCC"> ten</font>

1493
01:11:31,390 --> 01:11:35,860
categories okay<font color="#CCCCCC"> you can call dot summary</font>

1494
01:11:35,860 --> 01:11:38,590
<font color="#CCCCCC">to see that a</font><font color="#E5E5E5"> little bit more detail we</font>

1495
01:11:38,590 --> 01:11:42,460
can<font color="#CCCCCC"> do LR find</font><font color="#E5E5E5"> we can plot that and we</font>

1496
01:11:42,460 --> 01:11:44,950
can then<font color="#E5E5E5"> go fetch and we can use cycle</font>

1497
01:11:44,950 --> 01:11:48,630
length<font color="#E5E5E5"> and so forth okay so with a</font>

1498
01:11:48,630 --> 01:11:50,100
simple

1499
01:11:50,100 --> 01:11:52,750
<font color="#E5E5E5">how many hidden layers do we have one</font>

1500
01:11:52,750 --> 01:11:54,880
hidden layer<font color="#CCCCCC"> right one getting layer one</font>

1501
01:11:54,880 --> 01:11:58,720
output<font color="#E5E5E5"> layer one hidden layer model with</font>

1502
01:11:58,720 --> 01:12:00,940
and here we<font color="#E5E5E5"> can see the number of</font>

1503
01:12:00,940 --> 01:12:05,820
<font color="#CCCCCC">parameters we have</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> over 120,000</font>

1504
01:12:05,820 --> 01:12:13,210
okay<font color="#E5E5E5"> we get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 47</font><font color="#CCCCCC"> percent accuracy so not</font>

1505
01:12:13,210 --> 01:12:15,970
great<font color="#E5E5E5"> all right so let's kind of try</font><font color="#CCCCCC"> and</font>

1506
01:12:15,970 --> 01:12:18,190
improve it right and<font color="#E5E5E5"> so the goal here is</font>

1507
01:12:18,190 --> 01:12:19,600
<font color="#E5E5E5">we're going to try and eventually</font>

1508
01:12:19,600 --> 01:12:24,040
replicate the basic kind of architecture

1509
01:12:24,040 --> 01:12:26,320
<font color="#CCCCCC">of a resonator</font><font color="#E5E5E5"> okay so that's where</font>

1510
01:12:26,320 --> 01:12:27,520
<font color="#E5E5E5">we're going to try and get</font><font color="#CCCCCC"> to hear it</font>

1511
01:12:27,520 --> 01:12:30,760
<font color="#E5E5E5">specially built up to a resonant so the</font>

1512
01:12:30,760 --> 01:12:32,920
first step is to<font color="#CCCCCC"> replace our fully</font>

1513
01:12:32,920 --> 01:12:34,750
connected model with a convolutional

1514
01:12:34,750 --> 01:12:44,410
model okay<font color="#E5E5E5"> so to remind you so to remind</font>

1515
01:12:44,410 --> 01:12:47,530
you a fully connected<font color="#E5E5E5"> layer is simply</font>

1516
01:12:47,530 --> 01:12:50,230
doing<font color="#E5E5E5"> a dot product right so if we had</font>

1517
01:12:50,230 --> 01:12:54,460
like all of<font color="#E5E5E5"> these data</font><font color="#CCCCCC"> points and all of</font>

1518
01:12:54,460 --> 01:12:59,470
these weights<font color="#E5E5E5"> right then we basically</font>

1519
01:12:59,470 --> 01:13:02,150
do a<font color="#E5E5E5"> sum product of all of those</font>

1520
01:13:02,150 --> 01:13:03,800
together<font color="#E5E5E5"> right in other words it's a</font>

1521
01:13:03,800 --> 01:13:06,130
matrix<font color="#CCCCCC"> multiply</font><font color="#E5E5E5"> right then that's a</font>

1522
01:13:06,130 --> 01:13:10,490
fully connected<font color="#E5E5E5"> layer okay</font><font color="#CCCCCC"> and so we</font>

1523
01:13:10,490 --> 01:13:12,890
need the<font color="#CCCCCC"> white matrix is going to</font><font color="#E5E5E5"> take</font>

1524
01:13:12,890 --> 01:13:15,560
contain an item<font color="#E5E5E5"> for every every element</font>

1525
01:13:15,560 --> 01:13:17,240
of the<font color="#CCCCCC"> input for every element of the</font>

1526
01:13:17,240 --> 01:13:19,730
output<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so that's why we have here a</font>

1527
01:13:19,730 --> 01:13:26,420
pretty<font color="#E5E5E5"> big weight matrix and so that's</font>

1528
01:13:26,420 --> 01:13:28,130
why we had despite the fact that we have

1529
01:13:28,130 --> 01:13:31,520
such a crappy<font color="#E5E5E5"> accuracy we have a lot of</font>

1530
01:13:31,520 --> 01:13:33,830
<font color="#CCCCCC">parameters</font><font color="#E5E5E5"> because in this very first</font>

1531
01:13:33,830 --> 01:13:34,490
layer

1532
01:13:34,490 --> 01:13:39,470
we've got 3072 coming in and<font color="#E5E5E5"> for</font><font color="#CCCCCC"> T</font>

1533
01:13:39,470 --> 01:13:41,570
<font color="#E5E5E5">coming out so that gives us three</font>

1534
01:13:41,570 --> 01:13:44,600
thousand times<font color="#E5E5E5"> forty parameters and so</font>

1535
01:13:44,600 --> 01:13:46,610
we end up<font color="#E5E5E5"> not</font><font color="#CCCCCC"> using them very</font>

1536
01:13:46,610 --> 01:13:48,170
<font color="#E5E5E5">efficiently because we're basically</font>

1537
01:13:48,170 --> 01:13:50,030
<font color="#E5E5E5">saying every single pixel in the input</font>

1538
01:13:50,030 --> 01:13:52,040
has a different weight and of course

1539
01:13:52,040 --> 01:13:53,600
what<font color="#E5E5E5"> we really want to do is kind of</font>

1540
01:13:53,600 --> 01:13:56,270
find groups of three by three pixels

1541
01:13:56,270 --> 01:13:58,100
that<font color="#E5E5E5"> have particular patterns to them</font>

1542
01:13:58,100 --> 01:14:00,350
<font color="#E5E5E5">okay and remember</font><font color="#CCCCCC"> we call that a</font>

1543
01:14:00,350 --> 01:14:10,820
convolution<font color="#E5E5E5"> okay so a convolution looks</font>

1544
01:14:10,820 --> 01:14:14,780
like so we have like little<font color="#CCCCCC"> 3x3 section</font>

1545
01:14:14,780 --> 01:14:20,090
of our image and a corresponding 3x3 set

1546
01:14:20,090 --> 01:14:22,610
of filters right<font color="#E5E5E5"> or our filter with a</font>

1547
01:14:22,610 --> 01:14:25,130
<font color="#E5E5E5">three by three kernel and we just do a</font>

1548
01:14:25,130 --> 01:14:28,010
sum product<font color="#E5E5E5"> of just that three by three</font>

1549
01:14:28,010 --> 01:14:31,280
<font color="#CCCCCC">by that three by three okay and then we</font>

1550
01:14:31,280 --> 01:14:35,300
do that<font color="#E5E5E5"> for every</font><font color="#CCCCCC"> single part of our</font>

1551
01:14:35,300 --> 01:14:37,220
image right and so when we do that

1552
01:14:37,220 --> 01:14:38,960
<font color="#CCCCCC">across the whole image that's called a</font>

1553
01:14:38,960 --> 01:14:42,470
convolution and remember in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> case we</font>

1554
01:14:42,470 --> 01:14:45,650
<font color="#CCCCCC">actually had multiple</font><font color="#E5E5E5"> filters right so</font>

1555
01:14:45,650 --> 01:14:47,420
the result<font color="#E5E5E5"> of that convolution actually</font>

1556
01:14:47,420 --> 01:14:50,000
had multiple<font color="#CCCCCC"> it was a tensor with an</font>

1557
01:14:50,000 --> 01:14:53,030
additional third dimension<font color="#CCCCCC"> to</font><font color="#E5E5E5"> it</font>

1558
01:14:53,030 --> 01:14:58,220
effectively<font color="#CCCCCC"> so let's take exactly</font><font color="#E5E5E5"> the</font>

1559
01:14:58,220 --> 01:15:01,010
<font color="#CCCCCC">same code that</font><font color="#E5E5E5"> we had before but we're</font>

1560
01:15:01,010 --> 01:15:04,010
going<font color="#CCCCCC"> to replace n n dot linear with NN</font>

1561
01:15:04,010 --> 01:15:09,020
<font color="#CCCCCC">com2 D okay now what I want to do in</font>

1562
01:15:09,020 --> 01:15:11,360
this case<font color="#E5E5E5"> though is each</font><font color="#CCCCCC"> time I</font><font color="#E5E5E5"> have a</font>

1563
01:15:11,360 --> 01:15:13,120
layer I<font color="#E5E5E5"> want to</font>

1564
01:15:13,120 --> 01:15:17,020
the next layer<font color="#E5E5E5"> smaller and so the way I</font>

1565
01:15:17,020 --> 01:15:20,580
did<font color="#E5E5E5"> that in my Excel example was I used</font>

1566
01:15:20,580 --> 01:15:24,580
<font color="#CCCCCC">max Pauling right so max Pauling took</font>

1567
01:15:24,580 --> 01:15:27,970
every 2x2 section<font color="#E5E5E5"> and replaced it with</font>

1568
01:15:27,970 --> 01:15:31,900
this maximum value right<font color="#CCCCCC"> nowadays we</font>

1569
01:15:31,900 --> 01:15:34,150
don't use<font color="#E5E5E5"> that kind</font><font color="#CCCCCC"> of max bowling much</font>

1570
01:15:34,150 --> 01:15:37,180
at all<font color="#CCCCCC"> instead</font><font color="#E5E5E5"> nowadays what we tend to</font>

1571
01:15:37,180 --> 01:15:39,460
do is do what's<font color="#E5E5E5"> called a stride to</font>

1572
01:15:39,460 --> 01:15:40,360
convolution

1573
01:15:40,360 --> 01:15:43,420
let's drag<font color="#CCCCCC"> to convolution rather than</font>

1574
01:15:43,420 --> 01:15:49,470
saying<font color="#E5E5E5"> let's go through every single 3x3</font>

1575
01:15:49,470 --> 01:15:54,210
it says let's go through every second

1576
01:15:54,210 --> 01:15:57,100
3x3<font color="#E5E5E5"> so rather than moving this</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> by</font>

1577
01:15:57,100 --> 01:15:58,450
<font color="#CCCCCC">three</font><font color="#E5E5E5"> one to the right</font>

1578
01:15:58,450 --> 01:16:01,210
we move it two to<font color="#CCCCCC"> the right</font><font color="#E5E5E5"> and then</font>

1579
01:16:01,210 --> 01:16:02,980
when we get<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the end of the row rather</font>

1580
01:16:02,980 --> 01:16:05,740
<font color="#E5E5E5">than moving one row down we move two</font>

1581
01:16:05,740 --> 01:16:08,110
rows<font color="#CCCCCC"> down</font><font color="#E5E5E5"> okay so that's called a stride</font>

1582
01:16:08,110 --> 01:16:10,420
<font color="#E5E5E5">to convolution and so it's tried to</font>

1583
01:16:10,420 --> 01:16:13,390
convolution<font color="#E5E5E5"> has the same kind of effect</font>

1584
01:16:13,390 --> 01:16:15,640
as a max<font color="#E5E5E5"> pooling which is you end up</font>

1585
01:16:15,640 --> 01:16:18,480
<font color="#CCCCCC">having</font><font color="#E5E5E5"> the resolution in each dimension</font>

1586
01:16:18,480 --> 01:16:21,580
<font color="#E5E5E5">so we can ask for that by saying stroud</font>

1587
01:16:21,580 --> 01:16:24,670
equals<font color="#CCCCCC"> to okay we can say we</font><font color="#E5E5E5"> wanted to</font>

1588
01:16:24,670 --> 01:16:26,230
be<font color="#CCCCCC"> three by three by saying kernel size</font>

1589
01:16:26,230 --> 01:16:28,690
and then the first term parameters are

1590
01:16:28,690 --> 01:16:30,190
<font color="#E5E5E5">exactly the</font><font color="#CCCCCC"> same as nn</font><font color="#E5E5E5"> but linear</font>

1591
01:16:30,190 --> 01:16:31,960
<font color="#E5E5E5">they're the number of features</font><font color="#CCCCCC"> coming in</font>

1592
01:16:31,960 --> 01:16:34,170
and the<font color="#CCCCCC"> number of features coming</font><font color="#E5E5E5"> out</font>

1593
01:16:34,170 --> 01:16:37,870
<font color="#E5E5E5">okay so we create a</font><font color="#CCCCCC"> multiple</font><font color="#E5E5E5"> list of</font>

1594
01:16:37,870 --> 01:16:42,280
those layers<font color="#CCCCCC"> and then at the very end of</font>

1595
01:16:42,280 --> 01:16:44,320
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so in this case I'm going to say</font>

1596
01:16:44,320 --> 01:16:46,600
<font color="#CCCCCC">okay I've got three channels</font><font color="#E5E5E5"> coming in</font>

1597
01:16:46,600 --> 01:16:48,700
the first one layer will<font color="#CCCCCC"> come out with</font>

1598
01:16:48,700 --> 01:16:52,510
<font color="#E5E5E5">20 then a at 40 and then 80 so if we</font>

1599
01:16:52,510 --> 01:16:53,830
look at<font color="#E5E5E5"> the summary we're going to start</font>

1600
01:16:53,830 --> 01:16:56,950
with a<font color="#E5E5E5"> 32 by 32 we're going to spit out</font>

1601
01:16:56,950 --> 01:17:01,240
<font color="#CCCCCC">of 15 by 15</font><font color="#E5E5E5"> and then a 7 by 7 and then</font><font color="#CCCCCC"> a</font>

1602
01:17:01,240 --> 01:17:06,400
3 by 3 right<font color="#E5E5E5"> and so what do we do now to</font>

1603
01:17:06,400 --> 01:17:08,920
get<font color="#E5E5E5"> that down to</font><font color="#CCCCCC"> a prediction of</font><font color="#E5E5E5"> one of</font>

1604
01:17:08,920 --> 01:17:12,340
<font color="#E5E5E5">10 classes what we do is we do something</font>

1605
01:17:12,340 --> 01:17:15,220
<font color="#E5E5E5">called adaptive max</font><font color="#CCCCCC"> pooling and</font><font color="#E5E5E5"> this is</font>

1606
01:17:15,220 --> 01:17:17,260
what is pretty standard<font color="#CCCCCC"> now</font><font color="#E5E5E5"> for</font>

1607
01:17:17,260 --> 01:17:19,480
state-of-the-art algorithms is that<font color="#CCCCCC"> the</font>

1608
01:17:19,480 --> 01:17:24,730
very last layer we do a max pool<font color="#CCCCCC"> but</font>

1609
01:17:24,730 --> 01:17:26,410
rather than<font color="#E5E5E5"> doing like a</font><font color="#CCCCCC"> 2</font>

1610
01:17:26,410 --> 01:17:30,130
go to next<font color="#E5E5E5"> Paul we say like it doesn't</font>

1611
01:17:30,130 --> 01:17:31,900
<font color="#CCCCCC">have you to bow to could have been 3x3</font>

1612
01:17:31,900 --> 01:17:33,610
which<font color="#CCCCCC"> is like replace every</font><font color="#E5E5E5"> three by</font>

1613
01:17:33,610 --> 01:17:35,440
<font color="#E5E5E5">three pixels with its maximum could have</font>

1614
01:17:35,440 --> 01:17:38,620
been four by four adaptive<font color="#CCCCCC"> backs</font><font color="#E5E5E5"> Paul is</font>

1615
01:17:38,620 --> 01:17:41,200
where you say<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> going to tell you</font>

1616
01:17:41,200 --> 01:17:44,650
how big an area<font color="#E5E5E5"> to pull but instead I'm</font>

1617
01:17:44,650 --> 01:17:46,870
going<font color="#E5E5E5"> to tell you how big a resolution</font>

1618
01:17:46,870 --> 01:17:51,210
to create right so if<font color="#E5E5E5"> I said for example</font>

1619
01:17:51,210 --> 01:17:54,540
<font color="#CCCCCC">I think my input here is like 28 by 28</font>

1620
01:17:54,540 --> 01:17:59,110
<font color="#E5E5E5">right if I said do a 14 by 14 adaptive</font>

1621
01:17:59,110 --> 01:18:01,540
max Paul that would<font color="#CCCCCC"> be the same as a 2</font>

1622
01:18:01,540 --> 01:18:03,640
by 2 max Paul<font color="#E5E5E5"> because in other that's</font>

1623
01:18:03,640 --> 01:18:06,060
saying please create<font color="#E5E5E5"> a 14 by 14 output</font>

1624
01:18:06,060 --> 01:18:10,390
if I said do a 2 by 2 adaptive max Paul

1625
01:18:10,390 --> 01:18:12,760
right then that would be<font color="#CCCCCC"> the same as</font>

1626
01:18:12,760 --> 01:18:17,440
saying do a 14 by 14<font color="#CCCCCC"> max Paul and so</font>

1627
01:18:17,440 --> 01:18:19,210
what we pretty much always do in modern

1628
01:18:19,210 --> 01:18:22,420
<font color="#E5E5E5">cnn's is we make our</font><font color="#CCCCCC"> per northmet</font><font color="#E5E5E5"> layer</font>

1629
01:18:22,420 --> 01:18:28,750
<font color="#E5E5E5">a</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> adaptive</font><font color="#CCCCCC"> Max Paul so in other</font>

1630
01:18:28,750 --> 01:18:33,580
<font color="#E5E5E5">words find the single largest cell and</font>

1631
01:18:33,580 --> 01:18:39,100
use that as our new activation<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and</font>

1632
01:18:39,100 --> 01:18:43,060
so once we've<font color="#CCCCCC"> got that we've now got a</font><font color="#E5E5E5"> 1</font>

1633
01:18:43,060 --> 01:18:47,500
by 1 tensor<font color="#E5E5E5"> right we're actually 1 by 1</font>

1634
01:18:47,500 --> 01:18:50,350
by number<font color="#E5E5E5"> of features tensor so we can</font>

1635
01:18:50,350 --> 01:18:54,910
then on top of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> go view X dot view X</font>

1636
01:18:54,910 --> 01:18:57,970
dot size<font color="#E5E5E5"> comma minus 1 and actually</font>

1637
01:18:57,970 --> 01:19:01,420
there<font color="#E5E5E5"> are no other dimensions</font><font color="#CCCCCC"> to this</font>

1638
01:19:01,420 --> 01:19:03,580
<font color="#E5E5E5">basically right so this</font><font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to</font>

1639
01:19:03,580 --> 01:19:07,360
return<font color="#CCCCCC"> a matrix of mini-batch by number</font>

1640
01:19:07,360 --> 01:19:10,510
of<font color="#E5E5E5"> features and so then we can feed that</font>

1641
01:19:10,510 --> 01:19:15,700
<font color="#E5E5E5">into a linear layer with however many</font>

1642
01:19:15,700 --> 01:19:18,130
classes we need<font color="#E5E5E5"> right so you can see</font>

1643
01:19:18,130 --> 01:19:20,410
here the<font color="#E5E5E5"> last thing I pass in is how</font>

1644
01:19:20,410 --> 01:19:22,120
many classes am<font color="#CCCCCC"> I trying to predict</font><font color="#E5E5E5"> and</font>

1645
01:19:22,120 --> 01:19:23,860
that's what's going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> used to create</font>

1646
01:19:23,860 --> 01:19:26,170
that last layer so it goes<font color="#E5E5E5"> through every</font>

1647
01:19:26,170 --> 01:19:28,780
convolutional layer does a convolution

1648
01:19:28,780 --> 01:19:33,690
does<font color="#CCCCCC"> arel you does an adaptive max pool</font>

1649
01:19:33,690 --> 01:19:36,550
<font color="#CCCCCC">this dot view just gets rid</font><font color="#E5E5E5"> of those</font>

1650
01:19:36,550 --> 01:19:39,730
trailing unit backsies

1651
01:19:39,730 --> 01:19:42,190
<font color="#E5E5E5">one comma one axis which is not</font>

1652
01:19:42,190 --> 01:19:45,160
necessary<font color="#E5E5E5"> that allows us to fit that</font>

1653
01:19:45,160 --> 01:19:47,739
into our<font color="#E5E5E5"> final linear layer that spits</font>

1654
01:19:47,739 --> 01:19:51,700
out something of size C which here is

1655
01:19:51,700 --> 01:19:54,730
<font color="#CCCCCC">ten so</font><font color="#E5E5E5"> you can now see how</font><font color="#CCCCCC"> it works</font>

1656
01:19:54,730 --> 01:19:59,980
it goes<font color="#CCCCCC"> 32</font><font color="#E5E5E5"> to 15 to 7 by 7 to 3 by 3 the</font>

1657
01:19:59,980 --> 01:20:04,440
adaptive next<font color="#CCCCCC"> pull makes it</font><font color="#E5E5E5"> 80 by</font><font color="#CCCCCC"> 1 by 1</font>

1658
01:20:04,440 --> 01:20:07,120
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and then our dot view makes it</font>

1659
01:20:07,120 --> 01:20:10,030
just<font color="#E5E5E5"> a mini batch size by 80 and then</font>

1660
01:20:10,030 --> 01:20:12,580
finally a linear layer which<font color="#E5E5E5"> makes it</font>

1661
01:20:12,580 --> 01:20:15,090
from 80 to<font color="#E5E5E5"> 10 which</font><font color="#CCCCCC"> is what we wanted</font>

1662
01:20:15,090 --> 01:20:19,060
okay so that's our like most basic you

1663
01:20:19,060 --> 01:20:21,310
would call this a fully convolutional

1664
01:20:21,310 --> 01:20:23,620
<font color="#CCCCCC">network</font><font color="#E5E5E5"> so a fully convolutional network</font>

1665
01:20:23,620 --> 01:20:25,630
is something<font color="#CCCCCC"> where every layer is</font>

1666
01:20:25,630 --> 01:20:30,360
convolutional<font color="#E5E5E5"> except for the very last</font>

1667
01:20:31,350 --> 01:20:35,770
<font color="#CCCCCC">so again we can</font><font color="#E5E5E5"> now go</font><font color="#CCCCCC"> Li</font><font color="#E5E5E5"> dot find and</font>

1668
01:20:35,770 --> 01:20:39,489
now in<font color="#E5E5E5"> this case when I did ll find it</font>

1669
01:20:39,489 --> 01:20:41,110
went through<font color="#E5E5E5"> the entire data set and</font>

1670
01:20:41,110 --> 01:20:43,750
we're still getting<font color="#E5E5E5"> better</font><font color="#CCCCCC"> and so in</font>

1671
01:20:43,750 --> 01:20:46,660
other words<font color="#E5E5E5"> even a the default final</font>

1672
01:20:46,660 --> 01:20:48,460
<font color="#CCCCCC">learning rate</font><font color="#E5E5E5"> rises 10 and even at that</font>

1673
01:20:48,460 --> 01:20:50,650
point<font color="#E5E5E5"> it was</font><font color="#CCCCCC"> still</font><font color="#E5E5E5"> like pretty much</font>

1674
01:20:50,650 --> 01:20:52,150
<font color="#E5E5E5">getting better so you can</font><font color="#CCCCCC"> always</font>

1675
01:20:52,150 --> 01:20:54,430
override the final learning<font color="#E5E5E5"> rate by</font>

1676
01:20:54,430 --> 01:20:57,010
saying n del<font color="#E5E5E5"> R equals that</font><font color="#CCCCCC"> and that will</font>

1677
01:20:57,010 --> 01:20:58,390
<font color="#E5E5E5">get it just</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get it to try</font><font color="#CCCCCC"> morphine's</font>

1678
01:20:58,390 --> 01:21:01,360
<font color="#CCCCCC">okay and so here is the learning rate</font>

1679
01:21:01,360 --> 01:21:06,930
finder<font color="#CCCCCC"> and so I</font><font color="#E5E5E5"> picked 10</font><font color="#CCCCCC"> to the minus 1</font>

1680
01:21:06,930 --> 01:21:09,670
<font color="#CCCCCC">trained that for a while and that's</font>

1681
01:21:09,670 --> 01:21:10,510
<font color="#CCCCCC">looking pretty</font><font color="#E5E5E5"> good</font>

1682
01:21:10,510 --> 01:21:12,310
<font color="#CCCCCC">so</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> try to</font><font color="#E5E5E5"> put the cycle length of 1</font>

1683
01:21:12,310 --> 01:21:14,260
<font color="#E5E5E5">and it's starting to</font><font color="#CCCCCC"> flatten out at</font>

1684
01:21:14,260 --> 01:21:18,150
<font color="#E5E5E5">about 60%</font><font color="#CCCCCC"> right so you can see here the</font>

1685
01:21:18,150 --> 01:21:20,770
number<font color="#CCCCCC"> of elements</font><font color="#E5E5E5"> the number of</font>

1686
01:21:20,770 --> 01:21:24,640
<font color="#E5E5E5">parameters I</font><font color="#CCCCCC"> have here are</font><font color="#E5E5E5"> 500</font><font color="#CCCCCC"> 7000</font>

1687
01:21:24,640 --> 01:21:28,510
<font color="#E5E5E5">28,000 about 30,000 right so I have</font>

1688
01:21:28,510 --> 01:21:30,340
about<font color="#CCCCCC"> a quarter of the number of routers</font>

1689
01:21:30,340 --> 01:21:34,290
<font color="#CCCCCC">that my</font><font color="#E5E5E5"> accuracy has gone up</font><font color="#CCCCCC"> from 47% to</font>

1690
01:21:34,290 --> 01:21:38,860
<font color="#CCCCCC">60%</font><font color="#E5E5E5"> right and the time per epoch</font><font color="#CCCCCC"> here is</font>

1691
01:21:38,860 --> 01:21:43,180
under 30 seconds<font color="#E5E5E5"> and here also so the</font>

1692
01:21:43,180 --> 01:21:44,530
time period<font color="#E5E5E5"> box about the same and</font>

1693
01:21:44,530 --> 01:21:46,239
<font color="#E5E5E5">that's not surprising because when you</font>

1694
01:21:46,239 --> 01:21:49,060
use small simple architectures<font color="#E5E5E5"> most of</font>

1695
01:21:49,060 --> 01:21:51,340
the time is<font color="#E5E5E5"> the memory transfer the</font>

1696
01:21:51,340 --> 01:21:53,140
actual time during the<font color="#E5E5E5"> compute is</font>

1697
01:21:53,140 --> 01:21:58,720
is trivial<font color="#E5E5E5"> okay so I'm going</font><font color="#CCCCCC"> to refactor</font>

1698
01:21:58,720 --> 01:22:01,630
<font color="#E5E5E5">this slightly</font><font color="#CCCCCC"> because I want to</font><font color="#E5E5E5"> try and</font>

1699
01:22:01,630 --> 01:22:05,440
put less stuff inside my forward<font color="#E5E5E5"> and so</font>

1700
01:22:05,440 --> 01:22:07,780
calling<font color="#E5E5E5"> RAL you every time you know it</font>

1701
01:22:07,780 --> 01:22:09,430
doesn't seem ideal<font color="#CCCCCC"> so I'm going to</font>

1702
01:22:09,430 --> 01:22:13,570
create<font color="#E5E5E5"> a new class</font><font color="#CCCCCC"> called conf lair</font><font color="#E5E5E5"> okay</font>

1703
01:22:13,570 --> 01:22:15,850
and the conf lair class is going<font color="#E5E5E5"> to</font>

1704
01:22:15,850 --> 01:22:18,280
contain a convolution with a<font color="#E5E5E5"> kernel size</font>

1705
01:22:18,280 --> 01:22:21,160
of<font color="#CCCCCC"> three and a stride of two one thing</font>

1706
01:22:21,160 --> 01:22:22,240
I'm going to do now is I'm going to add

1707
01:22:22,240 --> 01:22:22,960
padding

1708
01:22:22,960 --> 01:22:25,870
did you notice here<font color="#E5E5E5"> the first layer went</font>

1709
01:22:25,870 --> 01:22:30,460
from 32<font color="#E5E5E5"> by 32 to 15 by 15 not 16 by 16</font>

1710
01:22:30,460 --> 01:22:33,340
<font color="#E5E5E5">and the reason for that is that at the</font>

1711
01:22:33,340 --> 01:22:40,170
<font color="#CCCCCC">very edge of</font><font color="#E5E5E5"> your convolution right here</font>

1712
01:22:42,060 --> 01:22:45,190
see how<font color="#E5E5E5"> this first convolution like</font>

1713
01:22:45,190 --> 01:22:46,990
there<font color="#E5E5E5"> isn't a convolution where the</font>

1714
01:22:46,990 --> 01:22:49,900
middle is the top left point right

1715
01:22:49,900 --> 01:22:52,120
<font color="#E5E5E5">because there's like nothing outside it</font>

1716
01:22:52,120 --> 01:22:55,420
where else if we had put a row<font color="#CCCCCC"> of zeros</font>

1717
01:22:55,420 --> 01:22:57,850
at the<font color="#E5E5E5"> top and a row</font><font color="#CCCCCC"> of zeros at the</font>

1718
01:22:57,850 --> 01:23:01,030
<font color="#CCCCCC">edge of each column we now could go all</font>

1719
01:23:01,030 --> 01:23:03,150
<font color="#E5E5E5">the way to the edge</font><font color="#CCCCCC"> alright so pad</font>

1720
01:23:03,150 --> 01:23:09,070
equals<font color="#CCCCCC"> 1 adds that little layer of zeros</font>

1721
01:23:09,070 --> 01:23:10,840
around the edge for us<font color="#CCCCCC"> ok</font>

1722
01:23:10,840 --> 01:23:12,790
and so this way we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make sure</font>

1723
01:23:12,790 --> 01:23:16,360
<font color="#E5E5E5">that we go 32 by 32 to 16 by 16 to 8 by</font>

1724
01:23:16,360 --> 01:23:18,760
8<font color="#E5E5E5"> it doesn't matter too much</font><font color="#CCCCCC"> when you've</font>

1725
01:23:18,760 --> 01:23:20,200
got<font color="#E5E5E5"> these bigger layers but by the time</font>

1726
01:23:20,200 --> 01:23:23,680
<font color="#E5E5E5">you get down to</font><font color="#CCCCCC"> like say 4 by 4</font><font color="#E5E5E5"> you</font>

1727
01:23:23,680 --> 01:23:25,420
really don't want<font color="#E5E5E5"> to throw away a whole</font>

1728
01:23:25,420 --> 01:23:27,700
piece<font color="#CCCCCC"> right so padding becomes important</font>

1729
01:23:27,700 --> 01:23:32,080
so by refactoring it to put this with

1730
01:23:32,080 --> 01:23:33,940
its defaults here and then in the

1731
01:23:33,940 --> 01:23:35,860
<font color="#E5E5E5">forward I put the value</font><font color="#CCCCCC"> in here as well</font>

1732
01:23:35,860 --> 01:23:39,040
it makes by confident<font color="#E5E5E5"> you know a little</font>

1733
01:23:39,040 --> 01:23:41,140
<font color="#E5E5E5">bit smaller and you know more to the</font>

1734
01:23:41,140 --> 01:23:42,880
point it's going<font color="#E5E5E5"> to be easier for me to</font>

1735
01:23:42,880 --> 01:23:44,530
make sure<font color="#CCCCCC"> that everything</font><font color="#E5E5E5"> is correct in</font>

1736
01:23:44,530 --> 01:23:46,180
the<font color="#E5E5E5"> future by always using</font><font color="#CCCCCC"> this common</font>

1737
01:23:46,180 --> 01:23:47,380
player class<font color="#CCCCCC"> ok</font>

1738
01:23:47,380 --> 01:23:50,080
so now you know not<font color="#CCCCCC"> only how to create</font>

1739
01:23:50,080 --> 01:23:52,720
<font color="#E5E5E5">your own neural network model but how to</font>

1740
01:23:52,720 --> 01:23:55,480
create your<font color="#E5E5E5"> own neural network layer so</font>

1741
01:23:55,480 --> 01:23:58,750
here<font color="#E5E5E5"> now I can</font><font color="#CCCCCC"> use conf layer right</font><font color="#E5E5E5"> and</font>

1742
01:23:58,750 --> 01:24:00,550
<font color="#E5E5E5">this is such a cool thing</font><font color="#CCCCCC"> about pi torch</font>

1743
01:24:00,550 --> 01:24:03,430
is a layer definition and a neural

1744
01:24:03,430 --> 01:24:04,960
network definition are literally

1745
01:24:04,960 --> 01:24:06,850
identical<font color="#CCCCCC"> okay they</font><font color="#E5E5E5"> both</font>

1746
01:24:06,850 --> 01:24:09,700
<font color="#E5E5E5">have a constructor and a forward</font><font color="#CCCCCC"> and so</font>

1747
01:24:09,700 --> 01:24:12,010
<font color="#CCCCCC">anytime you've got the</font><font color="#E5E5E5"> lair</font><font color="#CCCCCC"> you can use</font>

1748
01:24:12,010 --> 01:24:13,360
it as a neural net anytime you have a

1749
01:24:13,360 --> 01:24:15,240
neural net you<font color="#E5E5E5"> can use it as a lair</font>

1750
01:24:15,240 --> 01:24:18,250
okay so this is now the exact same thing

1751
01:24:18,250 --> 01:24:21,130
as we had before<font color="#CCCCCC"> one</font><font color="#E5E5E5"> difference is I now</font>

1752
01:24:21,130 --> 01:24:23,980
<font color="#CCCCCC">have padding okay and another</font><font color="#E5E5E5"> thing just</font>

1753
01:24:23,980 --> 01:24:24,970
<font color="#CCCCCC">to show you</font><font color="#E5E5E5"> you can do things</font>

1754
01:24:24,970 --> 01:24:29,350
<font color="#CCCCCC">differently</font><font color="#E5E5E5"> back here my max</font><font color="#CCCCCC"> pool I did</font>

1755
01:24:29,350 --> 01:24:33,100
<font color="#E5E5E5">as as an object</font><font color="#CCCCCC"> likely</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> use the class</font><font color="#E5E5E5"> n</font>

1756
01:24:33,100 --> 01:24:35,920
n<font color="#E5E5E5"> dot adaptive max pool and I stuck it</font>

1757
01:24:35,920 --> 01:24:37,530
in<font color="#E5E5E5"> this attribute and then I called it</font>

1758
01:24:37,530 --> 01:24:40,030
but this actually<font color="#E5E5E5"> doesn't have any state</font>

1759
01:24:40,030 --> 01:24:44,050
<font color="#E5E5E5">there's no weights inside max</font><font color="#CCCCCC"> pooling</font><font color="#E5E5E5"> so</font>

1760
01:24:44,050 --> 01:24:45,310
<font color="#E5E5E5">I can actually do it with</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font>

1761
01:24:45,310 --> 01:24:47,760
<font color="#E5E5E5">less code by calling it as a function</font>

1762
01:24:47,760 --> 01:24:50,440
right<font color="#E5E5E5"> so everything that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do as a</font>

1763
01:24:50,440 --> 01:24:52,330
class<font color="#CCCCCC"> you can also do as a</font><font color="#E5E5E5"> function it's</font>

1764
01:24:52,330 --> 01:24:54,700
<font color="#E5E5E5">inside this capital</font><font color="#CCCCCC"> F which is n n dot</font>

1765
01:24:54,700 --> 01:24:59,080
functional<font color="#CCCCCC"> okay so this</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> be a tiny</font>

1766
01:24:59,080 --> 01:25:03,570
bit<font color="#E5E5E5"> better</font><font color="#CCCCCC"> because this time I've got</font>

1767
01:25:03,570 --> 01:25:06,130
the padding<font color="#CCCCCC"> I didn't trade it for as</font>

1768
01:25:06,130 --> 01:25:09,460
long<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually check so let's skip</font>

1769
01:25:09,460 --> 01:25:14,950
over that<font color="#E5E5E5"> all right so one issue here is</font>

1770
01:25:14,950 --> 01:25:19,660
<font color="#CCCCCC">that in the end</font><font color="#E5E5E5"> this is having I when I</font>

1771
01:25:19,660 --> 01:25:21,150
<font color="#CCCCCC">tried</font><font color="#E5E5E5"> to add more layers</font>

1772
01:25:21,150 --> 01:25:26,020
<font color="#CCCCCC">I had travel</font><font color="#E5E5E5"> training it</font><font color="#CCCCCC"> okay and the</font>

1773
01:25:26,020 --> 01:25:27,490
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> having trouble training it</font>

1774
01:25:27,490 --> 01:25:30,100
<font color="#CCCCCC">is</font><font color="#E5E5E5"> it was you know if I used larger</font>

1775
01:25:30,100 --> 01:25:31,750
learning<font color="#E5E5E5"> rates it would go off to NI</font><font color="#CCCCCC"> N</font>

1776
01:25:31,750 --> 01:25:34,000
and if I use smaller<font color="#CCCCCC"> learning rates that</font>

1777
01:25:34,000 --> 01:25:35,470
are<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of takes forever and doesn't</font>

1778
01:25:35,470 --> 01:25:37,320
<font color="#CCCCCC">really have a chance</font><font color="#E5E5E5"> to explore properly</font>

1779
01:25:37,320 --> 01:25:41,200
<font color="#CCCCCC">so it</font><font color="#E5E5E5"> wasn't resilient so to make my</font>

1780
01:25:41,200 --> 01:25:43,450
model<font color="#E5E5E5"> more resilient</font><font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to use</font>

1781
01:25:43,450 --> 01:25:44,910
something called batch normalization

1782
01:25:44,910 --> 01:25:47,560
which<font color="#E5E5E5"> literally everybody calls bachelor</font>

1783
01:25:47,560 --> 01:25:51,700
and bachelorettes a couple of years<font color="#E5E5E5"> old</font>

1784
01:25:51,700 --> 01:25:54,940
now<font color="#E5E5E5"> and it's been pretty transformative</font>

1785
01:25:54,940 --> 01:25:57,040
since it came along because<font color="#E5E5E5"> it</font><font color="#CCCCCC"> suddenly</font>

1786
01:25:57,040 --> 01:26:00,220
makes it really easy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> train deeper</font>

1787
01:26:00,220 --> 01:26:02,470
networks<font color="#CCCCCC"> alright so the network I'm</font>

1788
01:26:02,470 --> 01:26:04,630
going to create is<font color="#E5E5E5"> going to have more</font>

1789
01:26:04,630 --> 01:26:07,000
layers right I've got<font color="#E5E5E5"> one two three</font><font color="#CCCCCC"> four</font>

1790
01:26:07,000 --> 01:26:09,190
five convolutional layers<font color="#E5E5E5"> plus a fully</font>

1791
01:26:09,190 --> 01:26:11,560
<font color="#E5E5E5">connected layer right so like back in</font>

1792
01:26:11,560 --> 01:26:13,150
the<font color="#CCCCCC"> old days that would be considered a</font>

1793
01:26:13,150 --> 01:26:15,460
pretty<font color="#E5E5E5"> deep</font><font color="#CCCCCC"> network and we</font><font color="#E5E5E5"> considered</font>

1794
01:26:15,460 --> 01:26:17,740
<font color="#E5E5E5">pretty hard to</font><font color="#CCCCCC"> train nowadays super</font>

1795
01:26:17,740 --> 01:26:20,530
<font color="#E5E5E5">simple thanks to</font><font color="#CCCCCC"> vaginal</font>

1796
01:26:20,530 --> 01:26:23,410
now to use batch norm you can just write

1797
01:26:23,410 --> 01:26:25,840
in end<font color="#CCCCCC"> on that to learn about it we're</font>

1798
01:26:25,840 --> 01:26:28,300
going<font color="#E5E5E5"> to write it from scratch okay so</font>

1799
01:26:28,300 --> 01:26:32,500
the<font color="#E5E5E5"> basic</font><font color="#CCCCCC"> idea of batch norm is</font><font color="#E5E5E5"> that</font>

1800
01:26:32,500 --> 01:26:35,980
we've got<font color="#E5E5E5"> some vector of activations</font>

1801
01:26:35,980 --> 01:26:37,990
<font color="#CCCCCC">anytime I draw a vector of activations</font>

1802
01:26:37,990 --> 01:26:39,520
obviously I mean<font color="#E5E5E5"> you can repeat</font><font color="#CCCCCC"> it for</font>

1803
01:26:39,520 --> 01:26:41,260
the mini batch<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> pretend it's</font><font color="#CCCCCC"> a mini</font>

1804
01:26:41,260 --> 01:26:43,000
batch<font color="#CCCCCC"> with</font><font color="#E5E5E5"> one so we've got some veteran</font>

1805
01:26:43,000 --> 01:26:46,410
activations<font color="#CCCCCC"> and it's coming</font><font color="#E5E5E5"> into some</font>

1806
01:26:46,410 --> 01:26:49,560
<font color="#E5E5E5">layer right so so probably some</font>

1807
01:26:49,560 --> 01:26:52,360
convolutional matrix multiplication and

1808
01:26:52,360 --> 01:26:55,680
<font color="#E5E5E5">then something comes out the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> side</font>

1809
01:26:55,680 --> 01:26:58,630
so<font color="#E5E5E5"> imagine this this is just a matrix</font>

1810
01:26:58,630 --> 01:27:01,990
<font color="#E5E5E5">multiply which was like I don't know say</font>

1811
01:27:01,990 --> 01:27:11,200
it was a identity<font color="#CCCCCC"> matrix right</font><font color="#E5E5E5"> then</font>

1812
01:27:11,200 --> 01:27:12,670
every time<font color="#E5E5E5"> I'd</font><font color="#CCCCCC"> multiply it by that</font>

1813
01:27:12,670 --> 01:27:14,710
<font color="#E5E5E5">across lots and lots of layers my</font>

1814
01:27:14,710 --> 01:27:16,060
activations are<font color="#E5E5E5"> not getting bigger</font>

1815
01:27:16,060 --> 01:27:17,620
they're<font color="#E5E5E5"> not getting smaller they're not</font>

1816
01:27:17,620 --> 01:27:20,380
<font color="#CCCCCC">changing at</font><font color="#E5E5E5"> all okay</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> all fine</font>

1817
01:27:20,380 --> 01:27:22,390
<font color="#E5E5E5">right but imagine if it was</font><font color="#CCCCCC"> actually</font>

1818
01:27:22,390 --> 01:27:28,000
like<font color="#CCCCCC"> 2 2 2</font><font color="#E5E5E5"> right and so if every one</font><font color="#CCCCCC"> of</font>

1819
01:27:28,000 --> 01:27:29,680
my weight matrices or filters was like

1820
01:27:29,680 --> 01:27:32,740
that<font color="#E5E5E5"> then my activations are doubling</font>

1821
01:27:32,740 --> 01:27:35,860
each time right<font color="#E5E5E5"> and so suddenly I've got</font>

1822
01:27:35,860 --> 01:27:40,360
<font color="#E5E5E5">as exponential growth</font><font color="#CCCCCC"> and that in deep</font>

1823
01:27:40,360 --> 01:27:41,710
models that's going to be a<font color="#E5E5E5"> disaster</font>

1824
01:27:41,710 --> 01:27:44,620
<font color="#E5E5E5">right because</font><font color="#CCCCCC"> my gradients are</font><font color="#E5E5E5"> exploding</font>

1825
01:27:44,620 --> 01:27:47,890
at an exponential rate<font color="#CCCCCC"> and so the</font>

1826
01:27:47,890 --> 01:27:50,670
challenge you have<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that it's it's</font>

1827
01:27:50,670 --> 01:27:54,310
<font color="#CCCCCC">very unlikely unless</font><font color="#E5E5E5"> you try carefully</font>

1828
01:27:54,310 --> 01:27:57,610
to deal with it that your matrices<font color="#E5E5E5"> your</font>

1829
01:27:57,610 --> 01:28:00,190
weight<font color="#E5E5E5"> matrices on average are not going</font>

1830
01:28:00,190 --> 01:28:03,370
to cause your activations to keep

1831
01:28:03,370 --> 01:28:04,930
<font color="#E5E5E5">getting smaller and smaller or keep</font>

1832
01:28:04,930 --> 01:28:06,460
getting<font color="#E5E5E5"> bigger and bigger right you have</font>

1833
01:28:06,460 --> 01:28:08,890
<font color="#E5E5E5">to kind of carefully control things to</font>

1834
01:28:08,890 --> 01:28:11,440
make sure<font color="#CCCCCC"> that they stay you know at a</font>

1835
01:28:11,440 --> 01:28:13,000
reasonable<font color="#E5E5E5"> size you want to you know</font>

1836
01:28:13,000 --> 01:28:16,960
keep them at a reasonable scale<font color="#E5E5E5"> so we</font>

1837
01:28:16,960 --> 01:28:20,350
start things off with<font color="#CCCCCC"> zero mean standard</font>

1838
01:28:20,350 --> 01:28:23,670
deviation<font color="#CCCCCC"> one by normalizing</font><font color="#E5E5E5"> the inputs</font>

1839
01:28:23,670 --> 01:28:27,340
really like to do is to normalize<font color="#E5E5E5"> every</font>

1840
01:28:27,340 --> 01:28:30,810
layer not just the inputs<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right and</font>

1841
01:28:30,810 --> 01:28:34,409
<font color="#E5E5E5">so</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> fine</font>

1842
01:28:34,409 --> 01:28:37,469
let's do<font color="#E5E5E5"> that right so</font><font color="#CCCCCC"> here I've</font><font color="#E5E5E5"> created</font>

1843
01:28:37,469 --> 01:28:39,989
a<font color="#CCCCCC"> BN layer which is exactly</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> my</font>

1844
01:28:39,989 --> 01:28:42,179
<font color="#E5E5E5">Kampf layer it's got my</font><font color="#CCCCCC"> common 2d with</font>

1845
01:28:42,179 --> 01:28:45,659
my stride my padding<font color="#E5E5E5"> right</font><font color="#CCCCCC"> I do</font><font color="#E5E5E5"> my</font>

1846
01:28:45,659 --> 01:28:48,750
condom<font color="#E5E5E5"> I value</font><font color="#CCCCCC"> right and then I</font>

1847
01:28:48,750 --> 01:28:53,429
calculate the mean of<font color="#E5E5E5"> each channel</font><font color="#CCCCCC"> or of</font>

1848
01:28:53,429 --> 01:28:56,610
<font color="#E5E5E5">each filter and the standard deviation</font>

1849
01:28:56,610 --> 01:28:58,860
of each<font color="#E5E5E5"> channel or each filter and then</font>

1850
01:28:58,860 --> 01:29:02,100
I subtract the means and divide by the

1851
01:29:02,100 --> 01:29:06,870
<font color="#CCCCCC">standard deviations right</font><font color="#E5E5E5"> so now I don't</font>

1852
01:29:06,870 --> 01:29:09,150
<font color="#E5E5E5">actually need to</font><font color="#CCCCCC"> normalize my input at</font>

1853
01:29:09,150 --> 01:29:11,159
all<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's actually</font><font color="#E5E5E5"> going to do it</font>

1854
01:29:11,159 --> 01:29:11,909
automatically

1855
01:29:11,909 --> 01:29:15,570
right it's normalizing<font color="#E5E5E5"> it per channel or</font>

1856
01:29:15,570 --> 01:29:17,730
and<font color="#E5E5E5"> for later layers</font><font color="#CCCCCC"> its normalizing it</font>

1857
01:29:17,730 --> 01:29:22,739
per filter so it<font color="#E5E5E5"> turns out that's not</font>

1858
01:29:22,739 --> 01:29:24,270
<font color="#E5E5E5">enough right</font>

1859
01:29:24,270 --> 01:29:29,760
because SGD is bloody-minded<font color="#E5E5E5"> right and</font>

1860
01:29:29,760 --> 01:29:33,150
so if<font color="#CCCCCC"> sgt decided that it what's the</font>

1861
01:29:33,150 --> 01:29:35,880
weight<font color="#CCCCCC"> matrix to be you know like so</font>

1862
01:29:35,880 --> 01:29:38,159
<font color="#E5E5E5">where that matrix is something which is</font>

1863
01:29:38,159 --> 01:29:41,090
<font color="#CCCCCC">going to you</font><font color="#E5E5E5"> know increase the values</font>

1864
01:29:41,090 --> 01:29:45,360
<font color="#CCCCCC">overall repeatedly then trying to</font><font color="#E5E5E5"> divide</font>

1865
01:29:45,360 --> 01:29:47,250
it by the subtract domains and divide by

1866
01:29:47,250 --> 01:29:49,590
<font color="#E5E5E5">the standard deviations just means the</font>

1867
01:29:49,590 --> 01:29:51,150
<font color="#E5E5E5">next</font><font color="#CCCCCC"> mini-batch it's going to try</font><font color="#E5E5E5"> and do</font>

1868
01:29:51,150 --> 01:29:52,409
it again<font color="#E5E5E5"> and</font><font color="#CCCCCC"> they were try and do it</font>

1869
01:29:52,409 --> 01:29:54,540
<font color="#E5E5E5">again it'll try and do it again</font><font color="#CCCCCC"> so it</font>

1870
01:29:54,540 --> 01:29:57,389
turns out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this actually</font><font color="#E5E5E5"> doesn't</font>

1871
01:29:57,389 --> 01:29:58,650
help like it literally<font color="#E5E5E5"> does nothing</font>

1872
01:29:58,650 --> 01:30:01,530
<font color="#E5E5E5">because SGD is just going to go ahead</font>

1873
01:30:01,530 --> 01:30:03,030
and<font color="#E5E5E5"> undo it</font>

1874
01:30:03,030 --> 01:30:08,550
the next mini batch so what we do is we

1875
01:30:08,550 --> 01:30:13,949
<font color="#CCCCCC">create a new multiplier for</font><font color="#E5E5E5"> each channel</font>

1876
01:30:13,949 --> 01:30:19,290
<font color="#E5E5E5">and a new added value for</font><font color="#CCCCCC"> each Channel</font>

1877
01:30:19,290 --> 01:30:21,659
literally<font color="#E5E5E5"> just and we just start them</font>

1878
01:30:21,659 --> 01:30:23,760
<font color="#CCCCCC">out as the addition and</font><font color="#E5E5E5"> addition is just</font>

1879
01:30:23,760 --> 01:30:25,949
a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> zeros so for the first</font><font color="#E5E5E5"> layer</font>

1880
01:30:25,949 --> 01:30:28,560
three zeros and<font color="#E5E5E5"> the multiplier for</font><font color="#CCCCCC"> the</font>

1881
01:30:28,560 --> 01:30:31,409
first layer<font color="#CCCCCC"> is just three ones</font><font color="#E5E5E5"> okay so</font>

1882
01:30:31,409 --> 01:30:33,510
<font color="#E5E5E5">number of filters</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the first layer is</font>

1883
01:30:33,510 --> 01:30:36,480
<font color="#E5E5E5">just three and so we then like</font><font color="#CCCCCC"> basically</font>

1884
01:30:36,480 --> 01:30:39,840
undo exactly what we just<font color="#E5E5E5"> did or</font>

1885
01:30:39,840 --> 01:30:42,420
potentially we undo<font color="#E5E5E5"> them right so by</font>

1886
01:30:42,420 --> 01:30:44,790
saying this<font color="#E5E5E5"> is an addenda parameter that</font>

1887
01:30:44,790 --> 01:30:47,290
tells<font color="#CCCCCC"> PI torch</font><font color="#E5E5E5"> you're allowed</font>

1888
01:30:47,290 --> 01:30:50,440
to learn<font color="#E5E5E5"> these as weights right so</font>

1889
01:30:50,440 --> 01:30:52,180
initially<font color="#E5E5E5"> it says okay so check the</font>

1890
01:30:52,180 --> 01:30:54,240
means divided by<font color="#CCCCCC"> the standard</font><font color="#E5E5E5"> deviations</font>

1891
01:30:54,240 --> 01:30:59,080
<font color="#E5E5E5">multiplied by one add on zero</font>

1892
01:30:59,080 --> 01:31:01,240
okay that's fine nothing much happened

1893
01:31:01,240 --> 01:31:05,500
there but what it turns out is that now

1894
01:31:05,500 --> 01:31:08,440
<font color="#E5E5E5">rather than like if it wants to kind of</font>

1895
01:31:08,440 --> 01:31:11,500
<font color="#E5E5E5">scale the layer up it doesn't have to</font>

1896
01:31:11,500 --> 01:31:13,630
scale up every<font color="#E5E5E5"> single value in the</font>

1897
01:31:13,630 --> 01:31:17,400
matrix it can<font color="#E5E5E5"> just scale</font><font color="#CCCCCC"> up this single</font>

1898
01:31:17,400 --> 01:31:21,580
trio of numbers self dot<font color="#E5E5E5"> M if it wants</font>

1899
01:31:21,580 --> 01:31:23,950
<font color="#CCCCCC">to shift it all</font><font color="#E5E5E5"> Apple down a bit doesn't</font>

1900
01:31:23,950 --> 01:31:26,020
<font color="#CCCCCC">have to shift</font><font color="#E5E5E5"> the entire</font><font color="#CCCCCC"> weight matrix</font>

1901
01:31:26,020 --> 01:31:28,780
<font color="#E5E5E5">they can just shift this trio of numbers</font>

1902
01:31:28,780 --> 01:31:34,660
self dot<font color="#E5E5E5"> a</font><font color="#CCCCCC"> so I will</font><font color="#E5E5E5"> say this I'm at</font>

1903
01:31:34,660 --> 01:31:36,400
this talk I mentioned<font color="#E5E5E5"> at nips</font><font color="#CCCCCC"> Alley</font>

1904
01:31:36,400 --> 01:31:38,560
<font color="#CCCCCC">Rahim ease talk about rigor</font><font color="#E5E5E5"> he actually</font>

1905
01:31:38,560 --> 01:31:40,600
pointed<font color="#E5E5E5"> to this paper this batch norm</font>

1906
01:31:40,600 --> 01:31:44,100
paper<font color="#E5E5E5"> as being a particularly useful</font>

1907
01:31:44,100 --> 01:31:48,960
particularly<font color="#E5E5E5"> interesting paper where a</font>

1908
01:31:48,960 --> 01:31:52,590
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people don't necessarily we quite</font>

1909
01:31:52,590 --> 01:31:56,650
quite know why it was right and<font color="#E5E5E5"> so if</font>

1910
01:31:56,650 --> 01:31:58,780
you're thinking<font color="#CCCCCC"> like</font><font color="#E5E5E5"> okay subtracting</font>

1911
01:31:58,780 --> 01:32:00,790
out<font color="#CCCCCC"> the means and</font><font color="#E5E5E5"> then adding some</font>

1912
01:32:00,790 --> 01:32:05,410
learned weights of exactly the<font color="#E5E5E5"> same rank</font>

1913
01:32:05,410 --> 01:32:09,570
<font color="#E5E5E5">and size sounds like a weird</font><font color="#CCCCCC"> thing to</font><font color="#E5E5E5"> do</font>

1914
01:32:09,570 --> 01:32:11,800
there<font color="#CCCCCC"> are a lot of people</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> feel the</font>

1915
01:32:11,800 --> 01:32:15,160
<font color="#CCCCCC">same way</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so at the moment I think</font>

1916
01:32:15,160 --> 01:32:17,380
<font color="#E5E5E5">the best is I can say like intuitively</font>

1917
01:32:17,380 --> 01:32:21,790
is what's<font color="#E5E5E5"> going on here is that we're</font>

1918
01:32:21,790 --> 01:32:24,490
normalizing the data<font color="#CCCCCC"> and then we're</font>

1919
01:32:24,490 --> 01:32:28,000
saying you can then<font color="#E5E5E5"> shift it and scale</font>

1920
01:32:28,000 --> 01:32:31,780
it using far fewer parameters than would

1921
01:32:31,780 --> 01:32:34,270
<font color="#CCCCCC">have</font><font color="#E5E5E5"> been necessary if I was asking you</font>

1922
01:32:34,270 --> 01:32:36,220
to<font color="#E5E5E5"> actually shift and scale the</font><font color="#CCCCCC"> entire</font>

1923
01:32:36,220 --> 01:32:39,070
set of convolutional filters right

1924
01:32:39,070 --> 01:32:42,040
<font color="#E5E5E5">that's the kind of basic intuition more</font>

1925
01:32:42,040 --> 01:32:46,290
importantly in practice<font color="#CCCCCC"> what this does</font>

1926
01:32:46,290 --> 01:32:50,740
is it adds is it<font color="#CCCCCC"> basically allows</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> to</font>

1927
01:32:50,740 --> 01:32:52,750
increase<font color="#E5E5E5"> our learning rates and it</font>

1928
01:32:52,750 --> 01:32:54,670
increases<font color="#E5E5E5"> the resilience of training and</font>

1929
01:32:54,670 --> 01:32:58,240
allows us<font color="#CCCCCC"> to add more layers</font><font color="#E5E5E5"> so once I</font>

1930
01:32:58,240 --> 01:33:00,139
<font color="#E5E5E5">added</font>

1931
01:33:00,139 --> 01:33:05,540
a PN layer<font color="#E5E5E5"> rather than a common flower</font><font color="#CCCCCC"> I</font>

1932
01:33:05,540 --> 01:33:08,690
found I<font color="#E5E5E5"> was able to add more</font><font color="#CCCCCC"> layers to</font>

1933
01:33:08,690 --> 01:33:10,610
<font color="#E5E5E5">my model and it still trained</font>

1934
01:33:10,610 --> 01:33:17,600
effectively<font color="#E5E5E5"> generally are we worried</font>

1935
01:33:17,600 --> 01:33:20,330
about<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> maybe we are divided</font>

1936
01:33:20,330 --> 01:33:24,619
<font color="#E5E5E5">by something very small or anything like</font>

1937
01:33:24,619 --> 01:33:28,130
<font color="#E5E5E5">that</font><font color="#CCCCCC"> once we do this</font><font color="#E5E5E5"> probably I think</font><font color="#CCCCCC"> in</font>

1938
01:33:28,130 --> 01:33:29,350
the<font color="#E5E5E5"> pie chart</font>

1939
01:33:29,350 --> 01:33:33,080
version it would probably be divided by

1940
01:33:33,080 --> 01:33:35,989
<font color="#CCCCCC">itself dudes plus</font><font color="#E5E5E5"> Epsilon</font><font color="#CCCCCC"> or something</font>

1941
01:33:35,989 --> 01:33:42,260
<font color="#E5E5E5">yeah this worked fine for me</font><font color="#CCCCCC"> but yeah</font>

1942
01:33:42,260 --> 01:33:43,850
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is definitely</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> to think</font>

1943
01:33:43,850 --> 01:33:45,440
<font color="#E5E5E5">about if you were trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make this</font>

1944
01:33:45,440 --> 01:33:52,790
more reliable<font color="#CCCCCC"> I mentioned</font><font color="#E5E5E5"> poplar so the</font>

1945
01:33:52,790 --> 01:33:55,639
self dot<font color="#CCCCCC"> m and self dot a getting it's</font>

1946
01:33:55,639 --> 01:33:57,800
getting<font color="#E5E5E5"> updated through back propagation</font>

1947
01:33:57,800 --> 01:34:00,530
as well<font color="#E5E5E5"> yeah so by putting</font><font color="#CCCCCC"> like saying</font>

1948
01:34:00,530 --> 01:34:02,600
it's an N n dot parameter<font color="#E5E5E5"> that's how we</font>

1949
01:34:02,600 --> 01:34:05,150
flag<font color="#CCCCCC"> to pi torch to learn it through</font>

1950
01:34:05,150 --> 01:34:10,130
<font color="#E5E5E5">that</font><font color="#CCCCCC"> probe exactly right the other</font>

1951
01:34:10,130 --> 01:34:11,810
interesting thing it turns<font color="#E5E5E5"> out the batch</font>

1952
01:34:11,810 --> 01:34:16,219
norm does is it<font color="#CCCCCC"> regularizes in other</font>

1953
01:34:16,219 --> 01:34:18,530
words you can<font color="#CCCCCC"> often decrease or remove</font>

1954
01:34:18,530 --> 01:34:21,170
<font color="#CCCCCC">drop out</font><font color="#E5E5E5"> or decrease or remove weight</font>

1955
01:34:21,170 --> 01:34:23,869
<font color="#CCCCCC">okay when you use batch normal and the</font>

1956
01:34:23,869 --> 01:34:27,820
reason why is if<font color="#CCCCCC"> you think about it</font><font color="#E5E5E5"> each</font>

1957
01:34:27,820 --> 01:34:30,350
mini batch is going<font color="#E5E5E5"> to have a different</font>

1958
01:34:30,350 --> 01:34:32,420
mean and a different standard deviation

1959
01:34:32,420 --> 01:34:34,760
<font color="#CCCCCC">to the previous mini batch</font><font color="#E5E5E5"> so these</font>

1960
01:34:34,760 --> 01:34:37,310
things keep changing and because they

1961
01:34:37,310 --> 01:34:39,860
<font color="#E5E5E5">keep</font><font color="#CCCCCC"> changing it's kind</font><font color="#E5E5E5"> of changing the</font>

1962
01:34:39,860 --> 01:34:41,900
meaning<font color="#E5E5E5"> of the filters in this subtle</font>

1963
01:34:41,900 --> 01:34:44,000
way and so it's adding a regularization

1964
01:34:44,000 --> 01:34:46,400
effect because it's noise<font color="#E5E5E5"> that when you</font>

1965
01:34:46,400 --> 01:34:50,000
add noise of any kind it regularizes

1966
01:34:50,000 --> 01:34:52,820
your model<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right I'm actually</font>

1967
01:34:52,820 --> 01:34:55,940
cheating<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit here in the real</font>

1968
01:34:55,940 --> 01:34:59,050
version of<font color="#E5E5E5"> batch norm</font><font color="#CCCCCC"> you don't just use</font>

1969
01:34:59,050 --> 01:35:01,570
this batches mean and standard deviation

1970
01:35:01,570 --> 01:35:04,400
<font color="#E5E5E5">but</font><font color="#CCCCCC"> instead you take an exponentially</font>

1971
01:35:04,400 --> 01:35:07,280
weighted moving average standard

1972
01:35:07,280 --> 01:35:08,469
deviation and

1973
01:35:08,469 --> 01:35:10,750
and so if you wanted to<font color="#E5E5E5"> exercise to try</font>

1974
01:35:10,750 --> 01:35:12,280
a during the week<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would be a good</font>

1975
01:35:12,280 --> 01:35:15,100
<font color="#E5E5E5">thing to try but I will point out</font>

1976
01:35:15,100 --> 01:35:16,600
something<font color="#CCCCCC"> very important here which</font><font color="#E5E5E5"> is</font>

1977
01:35:16,600 --> 01:35:23,080
if<font color="#CCCCCC"> self-training when</font><font color="#E5E5E5"> we are doing our</font>

1978
01:35:23,080 --> 01:35:25,949
training loop<font color="#E5E5E5"> this will be true when</font>

1979
01:35:25,949 --> 01:35:28,300
<font color="#CCCCCC">it's being applied to the training</font><font color="#E5E5E5"> set</font>

1980
01:35:28,300 --> 01:35:30,550
<font color="#E5E5E5">and it will be false</font><font color="#CCCCCC"> when it's being</font>

1981
01:35:30,550 --> 01:35:33,340
<font color="#CCCCCC">applied to the</font><font color="#E5E5E5"> validation set and this</font>

1982
01:35:33,340 --> 01:35:35,050
<font color="#E5E5E5">is really important because</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're</font>

1983
01:35:35,050 --> 01:35:36,790
going<font color="#E5E5E5"> through the</font><font color="#CCCCCC"> validation set you do</font>

1984
01:35:36,790 --> 01:35:38,380
not want to be changing the meaning<font color="#CCCCCC"> of</font>

1985
01:35:38,380 --> 01:35:42,010
the model okay<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is this really</font>

1986
01:35:42,010 --> 01:35:45,010
<font color="#E5E5E5">important</font><font color="#CCCCCC"> idea is that there are some</font>

1987
01:35:45,010 --> 01:35:48,310
types of layer that are actually

1988
01:35:48,310 --> 01:35:53,410
sensitive<font color="#E5E5E5"> to what the mode of the of the</font>

1989
01:35:53,410 --> 01:35:55,300
network is whether it's in training mode

1990
01:35:55,300 --> 01:35:58,060
or as<font color="#CCCCCC"> plight which</font><font color="#E5E5E5"> calls it evaluation</font>

1991
01:35:58,060 --> 01:36:00,550
mode or we might say<font color="#E5E5E5"> a test mode right</font>

1992
01:36:00,550 --> 01:36:03,550
and<font color="#E5E5E5"> actually we actually had a bug</font><font color="#CCCCCC"> a</font>

1993
01:36:03,550 --> 01:36:06,250
couple of weeks ago<font color="#E5E5E5"> when we</font><font color="#CCCCCC"> did our mini</font>

1994
01:36:06,250 --> 01:36:08,440
net<font color="#E5E5E5"> for movie lens</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> collaborative</font>

1995
01:36:08,440 --> 01:36:11,320
filtering we actually had F<font color="#E5E5E5"> dot dropout</font>

1996
01:36:11,320 --> 01:36:14,469
in our forward pass<font color="#E5E5E5"> without protecting</font>

1997
01:36:14,469 --> 01:36:18,850
it<font color="#E5E5E5"> with a</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> self training F dot dropout</font>

1998
01:36:18,850 --> 01:36:20,620
as a result of which we were actually

1999
01:36:20,620 --> 01:36:23,620
doing dropout in the validation<font color="#E5E5E5"> piece as</font>

2000
01:36:23,620 --> 01:36:25,030
well<font color="#E5E5E5"> as the training piece which</font>

2001
01:36:25,030 --> 01:36:26,980
obviously isn't what you want<font color="#CCCCCC"> okay</font>

2002
01:36:26,980 --> 01:36:28,960
so I've actually gone back and fixed

2003
01:36:28,960 --> 01:36:32,620
this by<font color="#E5E5E5"> changing it to using n n dot</font>

2004
01:36:32,620 --> 01:36:36,190
dropout<font color="#E5E5E5"> and n n dot dropout has already</font>

2005
01:36:36,190 --> 01:36:38,199
been written for<font color="#CCCCCC"> us to check</font><font color="#E5E5E5"> whether</font>

2006
01:36:38,199 --> 01:36:40,540
it's being<font color="#E5E5E5"> used in training mode or not</font>

2007
01:36:40,540 --> 01:36:43,210
that<font color="#E5E5E5"> or alternatively I could have added</font>

2008
01:36:43,210 --> 01:36:47,650
a if self dot training before I use the

2009
01:36:47,650 --> 01:36:50,949
<font color="#E5E5E5">dropout yeah okay so it's important to</font>

2010
01:36:50,949 --> 01:36:53,050
think<font color="#CCCCCC"> about that you know</font><font color="#E5E5E5"> any and the</font>

2011
01:36:53,050 --> 01:36:54,610
main the main true<font color="#E5E5E5"> or pretty</font><font color="#CCCCCC"> much the</font>

2012
01:36:54,610 --> 01:36:57,640
only<font color="#E5E5E5"> two built-in</font><font color="#CCCCCC"> two pi torch where</font>

2013
01:36:57,640 --> 01:37:02,410
this happens is<font color="#E5E5E5"> dropout and and so</font>

2014
01:37:02,410 --> 01:37:05,770
interestingly this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> also a key</font>

2015
01:37:05,770 --> 01:37:07,630
difference in fast AI which no other

2016
01:37:07,630 --> 01:37:12,880
library does is that these means and

2017
01:37:12,880 --> 01:37:16,510
standard deviations<font color="#E5E5E5"> get updated in</font>

2018
01:37:16,510 --> 01:37:20,380
training mode in every other library<font color="#CCCCCC"> as</font>

2019
01:37:20,380 --> 01:37:22,300
soon as you basically<font color="#E5E5E5"> say I'm</font>

2020
01:37:22,300 --> 01:37:24,130
training<font color="#E5E5E5"> regardless even</font><font color="#CCCCCC"> of whether that</font>

2021
01:37:24,130 --> 01:37:27,400
<font color="#E5E5E5">layer is set to trainable or not and it</font>

2022
01:37:27,400 --> 01:37:28,900
turns out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> with a pre trained</font>

2023
01:37:28,900 --> 01:37:30,940
<font color="#CCCCCC">network</font><font color="#E5E5E5"> that's a terrible idea</font>

2024
01:37:30,940 --> 01:37:33,400
if you<font color="#E5E5E5"> have a pre trained network</font><font color="#CCCCCC"> for</font>

2025
01:37:33,400 --> 01:37:35,139
<font color="#E5E5E5">specific values of</font><font color="#CCCCCC"> those means and</font>

2026
01:37:35,139 --> 01:37:37,300
<font color="#CCCCCC">standard deviations in batch norm</font><font color="#E5E5E5"> if you</font>

2027
01:37:37,300 --> 01:37:39,340
change them<font color="#E5E5E5"> it</font><font color="#CCCCCC"> changes the meaning of</font>

2028
01:37:39,340 --> 01:37:42,010
those pre trained layers<font color="#E5E5E5"> right and so in</font>

2029
01:37:42,010 --> 01:37:45,520
fast AI<font color="#E5E5E5"> always</font><font color="#CCCCCC"> by default it won't touch</font>

2030
01:37:45,520 --> 01:37:47,710
those means and<font color="#CCCCCC"> standard deviations if</font>

2031
01:37:47,710 --> 01:37:51,099
<font color="#E5E5E5">your layer is frozen okay</font><font color="#CCCCCC"> as soon as you</font>

2032
01:37:51,099 --> 01:37:54,489
I'm<font color="#E5E5E5"> freezing it'll start updating them</font>

2033
01:37:54,489 --> 01:37:59,679
unless you've set<font color="#E5E5E5"> won't be and freeze</font>

2034
01:37:59,679 --> 01:38:02,559
true if you set learned up being freeze

2035
01:38:02,559 --> 01:38:05,170
true it says never touch these<font color="#CCCCCC"> met means</font>

2036
01:38:05,170 --> 01:38:07,150
and standard deviations<font color="#E5E5E5"> and you know</font>

2037
01:38:07,150 --> 01:38:12,099
<font color="#CCCCCC">I've found in practice</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> that often</font>

2038
01:38:12,099 --> 01:38:13,900
<font color="#E5E5E5">seems to work a lot better for</font>

2039
01:38:13,900 --> 01:38:16,329
<font color="#E5E5E5">pre-trained models particularly if</font>

2040
01:38:16,329 --> 01:38:17,770
you're<font color="#CCCCCC"> working</font><font color="#E5E5E5"> with data that's quite</font>

2041
01:38:17,770 --> 01:38:19,690
<font color="#E5E5E5">similar to what the pre trained model</font>

2042
01:38:19,690 --> 01:38:33,760
was trained with you know as you<font color="#E5E5E5"> look</font>

2043
01:38:33,760 --> 01:38:35,440
<font color="#CCCCCC">like I did a</font><font color="#E5E5E5"> lot of work did you say</font>

2044
01:38:35,440 --> 01:38:38,889
sorry<font color="#CCCCCC"> like</font><font color="#E5E5E5"> quite a lot of code here well</font>

2045
01:38:38,889 --> 01:38:40,630
you're doing more work<font color="#CCCCCC"> than you would</font>

2046
01:38:40,630 --> 01:38:42,010
<font color="#CCCCCC">normally do essentially</font><font color="#E5E5E5"> you're</font>

2047
01:38:42,010 --> 01:38:44,260
calculating<font color="#E5E5E5"> all these aggregates as you</font>

2048
01:38:44,260 --> 01:38:46,559
go through each each each layer yes

2049
01:38:46,559 --> 01:38:49,480
wouldn't<font color="#E5E5E5"> this mean you're training like</font>

2050
01:38:49,480 --> 01:38:52,719
<font color="#CCCCCC">your epoch time like now this is like</font>

2051
01:38:52,719 --> 01:38:54,520
<font color="#E5E5E5">super fast</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> if you think</font><font color="#CCCCCC"> about what</font>

2052
01:38:54,520 --> 01:38:58,389
a<font color="#E5E5E5"> cone has to do a cones has to go</font>

2053
01:38:58,389 --> 01:39:01,540
through every<font color="#CCCCCC"> 3x3 you know with a stride</font>

2054
01:39:01,540 --> 01:39:03,699
and do<font color="#E5E5E5"> this multiplication and then</font>

2055
01:39:03,699 --> 01:39:06,610
addition like that<font color="#E5E5E5"> is a lot more</font><font color="#CCCCCC"> work</font>

2056
01:39:06,610 --> 01:39:10,150
than<font color="#CCCCCC"> simply calculating the per channel</font>

2057
01:39:10,150 --> 01:39:12,309
mean<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is so and</font><font color="#E5E5E5"> that's a little</font>

2058
01:39:12,309 --> 01:39:14,860
<font color="#E5E5E5">bit of time but it's it's less time</font>

2059
01:39:14,860 --> 01:39:21,400
intensive than<font color="#E5E5E5"> the convolution</font><font color="#CCCCCC"> would it</font>

2060
01:39:21,400 --> 01:39:25,320
be<font color="#E5E5E5"> like right after like decomposition</font>

2061
01:39:25,320 --> 01:39:26,590
yeah

2062
01:39:26,590 --> 01:39:28,929
we'll talk<font color="#E5E5E5"> about that in a moment so at</font>

2063
01:39:28,929 --> 01:39:32,079
the moment<font color="#E5E5E5"> we have it after the rally</font>

2064
01:39:32,079 --> 01:39:34,840
<font color="#E5E5E5">and in the original batch norm paper I</font>

2065
01:39:34,840 --> 01:39:35,209
<font color="#E5E5E5">will</font>

2066
01:39:35,209 --> 01:39:41,749
that's where they<font color="#CCCCCC"> put it so this this</font>

2067
01:39:41,749 --> 01:39:43,939
idea<font color="#CCCCCC"> of something called an ablation</font>

2068
01:39:43,939 --> 01:39:48,800
study<font color="#E5E5E5"> and an ablation study is something</font>

2069
01:39:48,800 --> 01:39:52,010
where<font color="#CCCCCC"> you basically try kind of turning</font>

2070
01:39:52,010 --> 01:39:55,729
on and off<font color="#CCCCCC"> different pieces of</font><font color="#E5E5E5"> your</font>

2071
01:39:55,729 --> 01:39:57,800
model<font color="#CCCCCC"> to see like which bits make which</font>

2072
01:39:57,800 --> 01:39:59,840
impacts and one of the things that

2073
01:39:59,840 --> 01:40:01,880
wasn't<font color="#E5E5E5"> done</font><font color="#CCCCCC"> in the original batch</font><font color="#E5E5E5"> norm</font>

2074
01:40:01,880 --> 01:40:04,239
paper was any kind<font color="#E5E5E5"> of really effective</font>

2075
01:40:04,239 --> 01:40:06,979
ablation study and one of the things

2076
01:40:06,979 --> 01:40:08,209
<font color="#E5E5E5">therefore that was missing was this</font>

2077
01:40:08,209 --> 01:40:10,039
<font color="#E5E5E5">question which you just asked which</font><font color="#CCCCCC"> is</font>

2078
01:40:10,039 --> 01:40:12,380
like where do you put the<font color="#E5E5E5"> vaginal before</font>

2079
01:40:12,380 --> 01:40:13,489
the<font color="#CCCCCC"> early</font><font color="#E5E5E5"> year after the earlier</font>

2080
01:40:13,489 --> 01:40:16,849
whatever<font color="#E5E5E5"> and so since that time</font><font color="#CCCCCC"> you know</font>

2081
01:40:16,849 --> 01:40:18,979
that oversight has caused a<font color="#E5E5E5"> lot of</font>

2082
01:40:18,979 --> 01:40:20,510
problems because<font color="#E5E5E5"> it turned out the</font>

2083
01:40:20,510 --> 01:40:22,789
<font color="#E5E5E5">original paper didn't actually put it in</font>

2084
01:40:22,789 --> 01:40:25,849
the best spot<font color="#CCCCCC"> and so then other people</font>

2085
01:40:25,849 --> 01:40:27,199
since then<font color="#E5E5E5"> have now figured that out</font>

2086
01:40:27,199 --> 01:40:29,150
and they're<font color="#CCCCCC"> like every time I show</font>

2087
01:40:29,150 --> 01:40:31,099
people code where it's<font color="#E5E5E5"> actually in the</font>

2088
01:40:31,099 --> 01:40:33,050
<font color="#E5E5E5">spot</font><font color="#CCCCCC"> that turns out to be</font><font color="#E5E5E5"> better people</font>

2089
01:40:33,050 --> 01:40:35,539
<font color="#CCCCCC">always say your bedrooms</font><font color="#E5E5E5"> in the wrong</font>

2090
01:40:35,539 --> 01:40:37,369
spot and I have to go back<font color="#E5E5E5"> and say no I</font>

2091
01:40:37,369 --> 01:40:38,539
know<font color="#E5E5E5"> that's what the paper said</font><font color="#CCCCCC"> what</font>

2092
01:40:38,539 --> 01:40:39,889
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> doing now that's what I thought</font>

2093
01:40:39,889 --> 01:40:42,709
and so it's<font color="#E5E5E5"> kind of causes confusion</font><font color="#CCCCCC"> so</font>

2094
01:40:42,709 --> 01:40:44,449
<font color="#E5E5E5">there's there's been</font><font color="#CCCCCC"> a lot of question</font>

2095
01:40:44,449 --> 01:40:46,689
<font color="#CCCCCC">about that</font>

2096
01:40:46,989 --> 01:40:49,489
so a little<font color="#E5E5E5"> bit of a</font><font color="#CCCCCC"> higher-level</font>

2097
01:40:49,489 --> 01:40:53,300
question so we started out<font color="#E5E5E5"> with</font><font color="#CCCCCC"> cipher</font>

2098
01:40:53,300 --> 01:40:59,420
data yes<font color="#CCCCCC"> it's the basic reasoning</font><font color="#E5E5E5"> that</font>

2099
01:40:59,420 --> 01:41:02,749
you<font color="#CCCCCC"> use a smaller data set to quickly</font>

2100
01:41:02,749 --> 01:41:07,280
<font color="#E5E5E5">train a new model and then you</font><font color="#CCCCCC"> take it</font>

2101
01:41:07,280 --> 01:41:11,599
the<font color="#E5E5E5"> same model and you're using much</font>

2102
01:41:11,599 --> 01:41:14,449
much much bigger data set to get a

2103
01:41:14,449 --> 01:41:17,530
higher accuracy level is that the basic

2104
01:41:17,530 --> 01:41:21,079
<font color="#E5E5E5">maybe so if you want to you know if you</font>

2105
01:41:21,079 --> 01:41:23,570
had a large data<font color="#CCCCCC"> set or if you were like</font>

2106
01:41:23,570 --> 01:41:27,709
interested in the question of<font color="#E5E5E5"> like</font><font color="#CCCCCC"> how</font>

2107
01:41:27,709 --> 01:41:29,539
good<font color="#E5E5E5"> is this technique on a large data</font>

2108
01:41:29,539 --> 01:41:31,969
<font color="#CCCCCC">set</font><font color="#E5E5E5"> then yes what you just said would</font><font color="#CCCCCC"> be</font>

2109
01:41:31,969 --> 01:41:33,199
what I<font color="#E5E5E5"> would do I would do lots of</font>

2110
01:41:33,199 --> 01:41:36,499
testing on a small data set<font color="#E5E5E5"> which I had</font>

2111
01:41:36,499 --> 01:41:39,530
already discovered had the same kinds of

2112
01:41:39,530 --> 01:41:41,539
properties as my larger data set<font color="#E5E5E5"> and</font>

2113
01:41:41,539 --> 01:41:43,219
therefore<font color="#E5E5E5"> my conclusions would likely</font>

2114
01:41:43,219 --> 01:41:45,229
<font color="#E5E5E5">carry forward and then our test them at</font>

2115
01:41:45,229 --> 01:41:45,559
the end

2116
01:41:45,559 --> 01:41:48,980
having said that personally<font color="#CCCCCC"> I matched</font>

2117
01:41:48,980 --> 01:41:53,239
be more interested in<font color="#E5E5E5"> actually studying</font>

2118
01:41:53,239 --> 01:41:55,570
small<font color="#CCCCCC"> datasets for their own sake</font>

2119
01:41:55,570 --> 01:41:59,030
<font color="#E5E5E5">because I find most people I speak to</font><font color="#CCCCCC"> in</font>

2120
01:41:59,030 --> 01:42:01,489
the real world<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have a million</font>

2121
01:42:01,489 --> 01:42:03,739
images<font color="#E5E5E5"> they have you know somewhere</font>

2122
01:42:03,739 --> 01:42:05,180
<font color="#E5E5E5">between about two</font><font color="#CCCCCC"> thousand and</font><font color="#E5E5E5"> twenty</font>

2123
01:42:05,180 --> 01:42:06,980
<font color="#E5E5E5">thousand images seems to be much more</font>

2124
01:42:06,980 --> 01:42:10,989
<font color="#CCCCCC">common so I'm</font><font color="#E5E5E5"> very you know very</font>

2125
01:42:10,989 --> 01:42:14,690
<font color="#E5E5E5">interested in having fewer rows</font><font color="#CCCCCC"> because</font>

2126
01:42:14,690 --> 01:42:16,930
I think<font color="#E5E5E5"> it's more valuable in factors</font>

2127
01:42:16,930 --> 01:42:19,220
I'm also pretty interested<font color="#E5E5E5"> in small</font>

2128
01:42:19,220 --> 01:42:21,560
images<font color="#E5E5E5"> not just for the rest you</font>

2129
01:42:21,560 --> 01:42:24,230
<font color="#E5E5E5">mentioned which is it allows me</font><font color="#CCCCCC"> to test</font>

2130
01:42:24,230 --> 01:42:26,570
things<font color="#E5E5E5"> out more quickly but also as I</font>

2131
01:42:26,570 --> 01:42:29,180
<font color="#CCCCCC">mentioned before often a</font><font color="#E5E5E5"> small part of</font>

2132
01:42:29,180 --> 01:42:30,980
<font color="#E5E5E5">an image</font><font color="#CCCCCC"> actually turns</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> to be what</font>

2133
01:42:30,980 --> 01:42:32,600
you're interested<font color="#E5E5E5"> in that's certainly</font>

2134
01:42:32,600 --> 01:42:38,150
true in in medicine I have two<font color="#CCCCCC"> questions</font>

2135
01:42:38,150 --> 01:42:41,270
<font color="#CCCCCC">the first is on what you mentioned in</font>

2136
01:42:41,270 --> 01:42:43,550
<font color="#E5E5E5">terms of small</font><font color="#CCCCCC"> datasets particular</font>

2137
01:42:43,550 --> 01:42:44,900
middle medical imaging<font color="#E5E5E5"> you've you've</font>

2138
01:42:44,900 --> 01:42:47,030
heard of<font color="#E5E5E5"> I guess is it vicarious to</font>

2139
01:42:47,030 --> 01:42:48,440
start up in the specialization<font color="#CCCCCC"> and</font>

2140
01:42:48,440 --> 01:42:50,239
one-shot learning<font color="#E5E5E5"> so your opinions on</font>

2141
01:42:50,239 --> 01:42:53,239
that and then this second being<font color="#E5E5E5"> this is</font>

2142
01:42:53,239 --> 01:42:57,350
related to<font color="#E5E5E5"> I guess</font><font color="#CCCCCC"> Ali's talk at nips</font><font color="#E5E5E5"> so</font>

2143
01:42:57,350 --> 01:42:58,880
it was I don't<font color="#E5E5E5"> say</font><font color="#CCCCCC"> its controversial but</font>

2144
01:42:58,880 --> 01:43:01,220
like<font color="#E5E5E5"> young</font><font color="#CCCCCC"> laocoön there was like a</font>

2145
01:43:01,220 --> 01:43:01,760
<font color="#E5E5E5">really</font>

2146
01:43:01,760 --> 01:43:04,040
I guess controversial thread attacking

2147
01:43:04,040 --> 01:43:05,630
<font color="#CCCCCC">you</font><font color="#E5E5E5"> in terms of what you're talking</font>

2148
01:43:05,630 --> 01:43:08,390
<font color="#CCCCCC">about</font><font color="#E5E5E5"> as a baseline of theory just not</font>

2149
01:43:08,390 --> 01:43:11,960
keeping<font color="#E5E5E5"> up with practice</font><font color="#CCCCCC"> and so I mean I</font>

2150
01:43:11,960 --> 01:43:13,370
guess<font color="#CCCCCC"> I was siding with</font><font color="#E5E5E5"> the on where's</font>

2151
01:43:13,370 --> 01:43:15,470
all he actually he tweeted at me<font color="#E5E5E5"> quite a</font>

2152
01:43:15,470 --> 01:43:17,800
bit<font color="#E5E5E5"> trying to defend like he wasn't</font>

2153
01:43:17,800 --> 01:43:22,280
attacking<font color="#E5E5E5"> yawn at all but in fact he</font><font color="#CCCCCC"> was</font>

2154
01:43:22,280 --> 01:43:24,739
you know<font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> support him but I</font>

2155
01:43:24,739 --> 01:43:26,360
<font color="#E5E5E5">just kind of feel</font><font color="#CCCCCC"> like a lot of theory</font>

2156
01:43:26,360 --> 01:43:29,840
as<font color="#E5E5E5"> as you go is just sort of at it they</font>

2157
01:43:29,840 --> 01:43:31,070
even<font color="#CCCCCC"> it's hard to keep up whether</font><font color="#E5E5E5"> then</font>

2158
01:43:31,070 --> 01:43:33,560
you know<font color="#E5E5E5"> no archive from on</font><font color="#CCCCCC"> Draco</font><font color="#E5E5E5"> party</font>

2159
01:43:33,560 --> 01:43:35,630
to keep up but if the theory<font color="#CCCCCC"> isn't</font>

2160
01:43:35,630 --> 01:43:37,160
keeping up but<font color="#E5E5E5"> industry is the one</font>

2161
01:43:37,160 --> 01:43:38,420
<font color="#E5E5E5">that's actually sitting in the standard</font>

2162
01:43:38,420 --> 01:43:40,760
then doesn't that mean that you<font color="#CCCCCC"> know</font>

2163
01:43:40,760 --> 01:43:43,220
people<font color="#E5E5E5"> who are actual</font><font color="#CCCCCC"> practitioners are</font>

2164
01:43:43,220 --> 01:43:44,540
the ones like<font color="#E5E5E5"> young</font><font color="#CCCCCC"> lacunae</font><font color="#E5E5E5"> are</font>

2165
01:43:44,540 --> 01:43:45,890
publishing<font color="#E5E5E5"> the theory that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> keeping</font>

2166
01:43:45,890 --> 01:43:47,840
<font color="#CCCCCC">up to date</font><font color="#E5E5E5"> or is like academic research</font>

2167
01:43:47,840 --> 01:43:49,520
institutions are<font color="#CCCCCC"> actually behind</font><font color="#E5E5E5"> so I</font>

2168
01:43:49,520 --> 01:43:50,989
don't have any comments on the vicarious

2169
01:43:50,989 --> 01:43:52,670
<font color="#E5E5E5">papers because I</font><font color="#CCCCCC"> haven't read them I'm</font>

2170
01:43:52,670 --> 01:43:54,920
not<font color="#E5E5E5"> aware of any of them have as</font>

2171
01:43:54,920 --> 01:43:59,060
actually showing you know<font color="#E5E5E5"> better results</font>

2172
01:43:59,060 --> 01:44:01,280
<font color="#E5E5E5">than the papers but I think they've</font><font color="#CCCCCC"> come</font>

2173
01:44:01,280 --> 01:44:02,540
a<font color="#CCCCCC"> long way in the last twelve</font>

2174
01:44:02,540 --> 01:44:05,810
so that might be<font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> yeah yeah I</font>

2175
01:44:05,810 --> 01:44:06,980
<font color="#E5E5E5">viewed the discussion between yarn</font>

2176
01:44:06,980 --> 01:44:08,270
<font color="#CCCCCC">lacunae</font><font color="#E5E5E5"> and a</font><font color="#CCCCCC"> lyric</font><font color="#E5E5E5"> Jimmy is very</font>

2177
01:44:08,270 --> 01:44:09,740
interesting because they're both<font color="#E5E5E5"> smart</font>

2178
01:44:09,740 --> 01:44:11,210
people who have interesting things<font color="#E5E5E5"> to</font>

2179
01:44:11,210 --> 01:44:16,970
<font color="#E5E5E5">say unfortunately a lot</font><font color="#CCCCCC"> of people talk</font>

2180
01:44:16,970 --> 01:44:19,490
<font color="#CCCCCC">Ally's talk as meaning something which</font>

2181
01:44:19,490 --> 01:44:21,560
<font color="#E5E5E5">he says it didn't mean and when I</font>

2182
01:44:21,560 --> 01:44:23,750
listened to<font color="#CCCCCC"> his talk I'm not sure he</font>

2183
01:44:23,750 --> 01:44:25,370
didn't actually<font color="#E5E5E5"> made it at the time but</font>

2184
01:44:25,370 --> 01:44:27,080
he clearly doesn't mean it now which is

2185
01:44:27,080 --> 01:44:29,630
he's he's now<font color="#E5E5E5"> said many times he didn't</font>

2186
01:44:29,630 --> 01:44:31,970
he was not<font color="#E5E5E5"> talking about</font><font color="#CCCCCC"> theory he was</font>

2187
01:44:31,970 --> 01:44:33,760
not saying<font color="#E5E5E5"> we need more theory at all</font>

2188
01:44:33,760 --> 01:44:35,720
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> he thinks we</font><font color="#E5E5E5"> need more</font>

2189
01:44:35,720 --> 01:44:39,800
experiments and so specifically he's

2190
01:44:39,800 --> 01:44:41,540
he's also now saying he wished he hadn't

2191
01:44:41,540 --> 01:44:43,550
<font color="#E5E5E5">used the word</font><font color="#CCCCCC"> rigour which I also wish</font>

2192
01:44:43,550 --> 01:44:46,250
because<font color="#CCCCCC"> rigour is</font><font color="#E5E5E5"> it's kind of</font>

2193
01:44:46,250 --> 01:44:48,020
<font color="#E5E5E5">meaningless and everybody can kind of</font>

2194
01:44:48,020 --> 01:44:50,780
say when he says<font color="#CCCCCC"> rigor he means the</font>

2195
01:44:50,780 --> 01:44:55,790
<font color="#CCCCCC">specific thing I study you know so a</font>

2196
01:44:55,790 --> 01:44:57,230
lots of people<font color="#CCCCCC"> have kind</font><font color="#E5E5E5"> of taken his</font>

2197
01:44:57,230 --> 01:44:59,090
talk as being like oh yes<font color="#CCCCCC"> this proves</font>

2198
01:44:59,090 --> 01:45:01,520
that<font color="#E5E5E5"> nobody else should work in neural</font>

2199
01:45:01,520 --> 01:45:04,370
<font color="#CCCCCC">networks</font><font color="#E5E5E5"> unless they are experts at the</font>

2200
01:45:04,370 --> 01:45:08,510
one thing I'm an expert in so yeah so

2201
01:45:08,510 --> 01:45:09,890
I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to catch up with</font><font color="#E5E5E5"> him and talk</font>

2202
01:45:09,890 --> 01:45:11,300
<font color="#CCCCCC">about more about</font><font color="#E5E5E5"> this in January and</font>

2203
01:45:11,300 --> 01:45:12,410
hopefully we'll pick<font color="#E5E5E5"> up some</font><font color="#CCCCCC"> more stuff</font>

2204
01:45:12,410 --> 01:45:16,820
<font color="#E5E5E5">out together but basically what would we</font>

2205
01:45:16,820 --> 01:45:18,620
can clearly<font color="#E5E5E5"> agree on and I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> you and</font>

2206
01:45:18,620 --> 01:45:22,460
<font color="#CCCCCC">also agrees on</font><font color="#E5E5E5"> is careful experiments</font>

2207
01:45:22,460 --> 01:45:25,580
are important<font color="#CCCCCC"> just</font><font color="#E5E5E5"> doing things on</font>

2208
01:45:25,580 --> 01:45:27,710
massive amounts of data using<font color="#CCCCCC"> massive</font>

2209
01:45:27,710 --> 01:45:30,290
<font color="#E5E5E5">amounts of TP use or GP users not</font>

2210
01:45:30,290 --> 01:45:32,660
interesting of itself and we should

2211
01:45:32,660 --> 01:45:35,300
instead try<font color="#CCCCCC"> to design experiments</font><font color="#E5E5E5"> that</font>

2212
01:45:35,300 --> 01:45:36,650
give us the maximum<font color="#E5E5E5"> amount of insight</font>

2213
01:45:36,650 --> 01:45:42,820
<font color="#E5E5E5">into what's</font><font color="#CCCCCC"> going on so Jeremy is it a</font>

2214
01:45:42,820 --> 01:45:46,480
good statement<font color="#E5E5E5"> to say something like so</font>

2215
01:45:46,480 --> 01:45:51,650
<font color="#E5E5E5">drop out and bash norm are very</font>

2216
01:45:51,650 --> 01:45:54,320
different<font color="#E5E5E5"> things drop out is the</font>

2217
01:45:54,320 --> 01:45:57,650
realization technique<font color="#E5E5E5"> bash norm has</font>

2218
01:45:57,650 --> 01:45:59,690
maybe some<font color="#E5E5E5"> realization effect but it's</font>

2219
01:45:59,690 --> 01:46:02,540
actually<font color="#CCCCCC"> just about</font><font color="#E5E5E5"> convergence of the</font>

2220
01:46:02,540 --> 01:46:06,740
optimization method yeah<font color="#E5E5E5"> yeah and and I</font>

2221
01:46:06,740 --> 01:46:10,100
would<font color="#E5E5E5"> further say like I can't see any</font>

2222
01:46:10,100 --> 01:46:12,880
reason<font color="#CCCCCC"> not to use</font><font color="#E5E5E5"> pattern or</font>

2223
01:46:12,880 --> 01:46:16,219
there are<font color="#CCCCCC"> versions of batch norm that in</font>

2224
01:46:16,219 --> 01:46:18,199
<font color="#E5E5E5">certain situations turned out not to</font>

2225
01:46:18,199 --> 01:46:22,280
<font color="#CCCCCC">work so</font><font color="#E5E5E5"> well that</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> have figured</font>

2226
01:46:22,280 --> 01:46:24,530
<font color="#E5E5E5">out ways around that for</font><font color="#CCCCCC"> nearly every</font>

2227
01:46:24,530 --> 01:46:26,540
one<font color="#E5E5E5"> of those situations now so I would</font>

2228
01:46:26,540 --> 01:46:29,270
<font color="#E5E5E5">always seek</font><font color="#CCCCCC"> to find a way to use batch</font>

2229
01:46:29,270 --> 01:46:32,989
norm it may be a<font color="#CCCCCC"> little harder in our</font>

2230
01:46:32,989 --> 01:46:33,650
<font color="#E5E5E5">own ends</font>

2231
01:46:33,650 --> 01:46:37,340
at least<font color="#E5E5E5"> but even there there are ways</font>

2232
01:46:37,340 --> 01:46:39,290
<font color="#CCCCCC">of doing batch norm in</font><font color="#E5E5E5"> our attenders as</font>

2233
01:46:39,290 --> 01:46:41,780
well<font color="#E5E5E5"> so you know try try and always use</font>

2234
01:46:41,780 --> 01:46:44,449
batch norm<font color="#E5E5E5"> on every layer if</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> and</font>

2235
01:46:44,449 --> 01:46:47,540
the question that<font color="#CCCCCC"> somebody asked is does</font>

2236
01:46:47,540 --> 01:46:51,440
it mean I<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to I can stop</font><font color="#CCCCCC"> normalize</font>

2237
01:46:51,440 --> 01:46:57,040
<font color="#CCCCCC">in my data yeah yeah it does</font>

2238
01:46:57,670 --> 01:47:03,679
although do it anyway<font color="#E5E5E5"> because it's not</font>

2239
01:47:03,679 --> 01:47:06,199
at all<font color="#E5E5E5"> hard to do it and at least that</font>

2240
01:47:06,199 --> 01:47:09,530
way the people<font color="#E5E5E5"> using your data I don't</font>

2241
01:47:09,530 --> 01:47:11,000
know they kind of know how you've

2242
01:47:11,000 --> 01:47:15,560
normalized it and particularly<font color="#E5E5E5"> with</font>

2243
01:47:15,560 --> 01:47:17,469
these<font color="#CCCCCC"> issues around</font><font color="#E5E5E5"> a lot of libraries</font>

2244
01:47:17,469 --> 01:47:19,850
<font color="#E5E5E5">in my opinion at least warm not my</font>

2245
01:47:19,850 --> 01:47:23,090
<font color="#E5E5E5">opinion my experiments don't deal with</font>

2246
01:47:23,090 --> 01:47:25,010
batch norm correctly for pre-trained

2247
01:47:25,010 --> 01:47:27,920
models<font color="#E5E5E5"> just remember that when somebody</font>

2248
01:47:27,920 --> 01:47:31,489
starts<font color="#E5E5E5"> retraining those averages and</font>

2249
01:47:31,489 --> 01:47:32,870
stuff are going<font color="#CCCCCC"> to change</font><font color="#E5E5E5"> for your data</font>

2250
01:47:32,870 --> 01:47:35,270
set and so if your new data set has very

2251
01:47:35,270 --> 01:47:36,920
different input averages it could<font color="#E5E5E5"> really</font>

2252
01:47:36,920 --> 01:47:40,730
cause a lot<font color="#CCCCCC"> of problems</font><font color="#E5E5E5"> so so yeah I</font>

2253
01:47:40,730 --> 01:47:43,520
<font color="#E5E5E5">went through a period</font><font color="#CCCCCC"> where I actually</font>

2254
01:47:43,520 --> 01:47:46,159
stopped normalizing my data and you<font color="#E5E5E5"> know</font>

2255
01:47:46,159 --> 01:47:49,219
things<font color="#E5E5E5"> kind of worked but it's probably</font>

2256
01:47:49,219 --> 01:47:55,159
<font color="#E5E5E5">not</font><font color="#CCCCCC"> worth it okay so so</font><font color="#E5E5E5"> the rest of this</font>

2257
01:47:55,159 --> 01:47:58,670
is identical<font color="#E5E5E5"> right all I've done is I've</font>

2258
01:47:58,670 --> 01:48:02,270
changed<font color="#CCCCCC"> conf</font><font color="#E5E5E5"> layer to BN layer but I've</font>

2259
01:48:02,270 --> 01:48:04,460
done one<font color="#CCCCCC"> more thing which is I'm kind of</font>

2260
01:48:04,460 --> 01:48:06,080
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get closer and closer to</font>

2261
01:48:06,080 --> 01:48:08,120
<font color="#CCCCCC">modern approaches which I've added a</font>

2262
01:48:08,120 --> 01:48:11,050
single convolutional layer at<font color="#E5E5E5"> the start</font>

2263
01:48:11,050 --> 01:48:14,840
<font color="#E5E5E5">with a bigger kernel size and a stride</font>

2264
01:48:14,840 --> 01:48:19,310
of one why have I done that<font color="#E5E5E5"> so the basic</font>

2265
01:48:19,310 --> 01:48:23,360
idea<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I want</font><font color="#CCCCCC"> my first layer to</font>

2266
01:48:23,360 --> 01:48:26,090
<font color="#E5E5E5">kind of have a richer input right so</font>

2267
01:48:26,090 --> 01:48:28,310
before my first layer<font color="#E5E5E5"> had an</font><font color="#CCCCCC"> input of</font>

2268
01:48:28,310 --> 01:48:29,630
just<font color="#E5E5E5"> three because there's</font><font color="#CCCCCC"> just three</font>

2269
01:48:29,630 --> 01:48:32,510
channels<font color="#E5E5E5"> right but if I start with my</font>

2270
01:48:32,510 --> 01:48:41,810
image<font color="#CCCCCC"> right and and I kind of take a</font>

2271
01:48:41,810 --> 01:48:46,159
bigger area<font color="#CCCCCC"> few different color I kind</font>

2272
01:48:46,159 --> 01:48:49,520
of<font color="#E5E5E5"> take a bigger area right and I do a</font>

2273
01:48:49,520 --> 01:48:51,830
convolution using that bigger area<font color="#E5E5E5"> in</font>

2274
01:48:51,830 --> 01:48:57,590
this<font color="#CCCCCC"> case I'm doing</font><font color="#E5E5E5"> five by five right</font>

2275
01:48:57,590 --> 01:49:00,860
then<font color="#E5E5E5"> that kind of allows me to try and</font>

2276
01:49:00,860 --> 01:49:04,730
<font color="#E5E5E5">find more interesting richer features in</font>

2277
01:49:04,730 --> 01:49:08,260
that<font color="#CCCCCC"> 5x5 area and so then I spin out a</font>

2278
01:49:08,260 --> 01:49:11,179
bigger output<font color="#E5E5E5"> this case I spit out a</font>

2279
01:49:11,179 --> 01:49:14,389
filter<font color="#CCCCCC"> size good</font><font color="#E5E5E5"> about ten five by five</font>

2280
01:49:14,389 --> 01:49:17,480
filters<font color="#CCCCCC"> and so the idea is</font><font color="#E5E5E5"> like pretty</font>

2281
01:49:17,480 --> 01:49:19,429
<font color="#E5E5E5">much every state of</font><font color="#CCCCCC"> the art</font>

2282
01:49:19,429 --> 01:49:21,530
convolutional architecture now starts

2283
01:49:21,530 --> 01:49:25,219
out with a<font color="#E5E5E5"> single con flare with like a</font>

2284
01:49:25,219 --> 01:49:27,560
five by five or seven by seven or

2285
01:49:27,560 --> 01:49:31,400
<font color="#E5E5E5">sometimes even like 11 by 11</font><font color="#CCCCCC"> convolution</font>

2286
01:49:31,400 --> 01:49:36,199
with like quite a few<font color="#E5E5E5"> filters you know</font>

2287
01:49:36,199 --> 01:49:39,380
something<font color="#E5E5E5"> like you know thirty two</font>

2288
01:49:39,380 --> 01:49:42,260
filters coming out<font color="#CCCCCC"> and it's just just</font><font color="#E5E5E5"> a</font>

2289
01:49:42,260 --> 01:49:44,599
way of kind of trying to and<font color="#CCCCCC"> like</font>

2290
01:49:44,599 --> 01:49:46,760
because<font color="#CCCCCC"> I</font><font color="#E5E5E5"> use the straight of one and</font>

2291
01:49:46,760 --> 01:49:50,119
the padding<font color="#E5E5E5"> of kernel size minus one</font>

2292
01:49:50,119 --> 01:49:50,690
over two

2293
01:49:50,690 --> 01:49:52,550
it means that my<font color="#E5E5E5"> outputs going to be</font>

2294
01:49:52,550 --> 01:49:55,099
exactly the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> size as my input but</font>

2295
01:49:55,099 --> 01:49:57,980
just got<font color="#E5E5E5"> more filters now this is just a</font>

2296
01:49:57,980 --> 01:50:00,380
good<font color="#CCCCCC"> way</font><font color="#E5E5E5"> of trying to create a richer</font>

2297
01:50:00,380 --> 01:50:03,500
starting point for my sequence of

2298
01:50:03,500 --> 01:50:04,550
convolutional layers

2299
01:50:04,550 --> 01:50:08,270
okay so<font color="#E5E5E5"> that's the basic theory of why</font>

2300
01:50:08,270 --> 01:50:10,550
I've added this single convolution which

2301
01:50:10,550 --> 01:50:12,770
I just do once at the start and then I

2302
01:50:12,770 --> 01:50:14,690
just go<font color="#CCCCCC"> through all my layers and then I</font>

2303
01:50:14,690 --> 01:50:17,179
do my adaptive<font color="#E5E5E5"> max pooling and</font><font color="#CCCCCC"> my final</font>

2304
01:50:17,179 --> 01:50:20,090
classifier<font color="#E5E5E5"> okay so it's a minor tweak</font>

2305
01:50:20,090 --> 01:50:24,080
but it helps<font color="#E5E5E5"> right and so you'll see now</font>

2306
01:50:24,080 --> 01:50:28,070
I kind of can go<font color="#E5E5E5"> for a Moodle I have 60%</font>

2307
01:50:28,070 --> 01:50:34,040
<font color="#CCCCCC">and after a couple is</font><font color="#E5E5E5"> 45% now</font><font color="#CCCCCC"> after a</font>

2308
01:50:34,040 --> 01:50:36,650
<font color="#CCCCCC">couple that's 57%</font><font color="#E5E5E5"> and after a few more</font>

2309
01:50:36,650 --> 01:50:38,510
I'm<font color="#CCCCCC"> out for 68%</font><font color="#E5E5E5"> okay</font>

2310
01:50:38,510 --> 01:50:40,190
so you can see it's you know<font color="#E5E5E5"> the the</font>

2311
01:50:40,190 --> 01:50:42,680
<font color="#CCCCCC">batch norm</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> know tiny bit the</font>

2312
01:50:42,680 --> 01:50:45,170
<font color="#CCCCCC">conveyor at</font><font color="#E5E5E5"> the start it's helping now</font>

2313
01:50:45,170 --> 01:50:46,310
what's more you<font color="#CCCCCC"> can see this is</font><font color="#E5E5E5"> still</font>

2314
01:50:46,310 --> 01:50:49,430
<font color="#E5E5E5">increasing right so that's</font><font color="#CCCCCC"> looking</font>

2315
01:50:49,430 --> 01:50:52,880
pretty encouraging<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so given</font><font color="#CCCCCC"> that</font>

2316
01:50:52,880 --> 01:50:54,860
this<font color="#CCCCCC"> is looking</font><font color="#E5E5E5"> pretty good</font><font color="#CCCCCC"> an obvious</font>

2317
01:50:54,860 --> 01:51:01,430
thing<font color="#E5E5E5"> to try might be to see is to try</font>

2318
01:51:01,430 --> 01:51:03,290
increasing<font color="#CCCCCC"> the depth of the model</font><font color="#E5E5E5"> and</font>

2319
01:51:03,290 --> 01:51:07,220
now I can't<font color="#E5E5E5"> just add more of most dried</font>

2320
01:51:07,220 --> 01:51:10,580
<font color="#E5E5E5">to layers because remember how it half</font>

2321
01:51:10,580 --> 01:51:13,070
the<font color="#CCCCCC"> size of the image each time</font><font color="#E5E5E5"> I'm</font>

2322
01:51:13,070 --> 01:51:14,960
<font color="#E5E5E5">basically down to</font><font color="#CCCCCC"> two by</font><font color="#E5E5E5"> two at the end</font>

2323
01:51:14,960 --> 01:51:18,380
<font color="#E5E5E5">right so I can't add much more so what</font><font color="#CCCCCC"> I</font>

2324
01:51:18,380 --> 01:51:21,650
did<font color="#E5E5E5"> instead was I said</font><font color="#CCCCCC"> okay here's</font><font color="#E5E5E5"> my</font>

2325
01:51:21,650 --> 01:51:23,390
original layers<font color="#E5E5E5"> so you must trade two</font>

2326
01:51:23,390 --> 01:51:26,090
layers<font color="#E5E5E5"> for everyone also create a</font>

2327
01:51:26,090 --> 01:51:29,180
<font color="#CCCCCC">straight one layer so astrayed one layer</font>

2328
01:51:29,180 --> 01:51:31,580
doesn't<font color="#E5E5E5"> change the size and so now I'm</font>

2329
01:51:31,580 --> 01:51:36,500
saying<font color="#E5E5E5"> zip my stride two layers and my</font>

2330
01:51:36,500 --> 01:51:38,960
stride one layers together<font color="#CCCCCC"> and so first</font>

2331
01:51:38,960 --> 01:51:41,030
<font color="#E5E5E5">of all do</font><font color="#CCCCCC"> the straight too and then do</font>

2332
01:51:41,030 --> 01:51:43,340
the straight one so this<font color="#E5E5E5"> is now</font><font color="#CCCCCC"> actually</font>

2333
01:51:43,340 --> 01:51:50,989
twice as deep<font color="#E5E5E5"> okay so this is so this</font><font color="#CCCCCC"> is</font>

2334
01:51:50,989 --> 01:51:53,960
now<font color="#E5E5E5"> twice</font><font color="#CCCCCC"> as deep</font><font color="#E5E5E5"> but I end up with the</font>

2335
01:51:53,960 --> 01:51:56,810
exact same you know two by<font color="#E5E5E5"> two that I</font>

2336
01:51:56,810 --> 01:52:00,890
had before<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so if I try</font><font color="#CCCCCC"> this you know</font>

2337
01:52:00,890 --> 01:52:03,860
<font color="#CCCCCC">here after</font><font color="#E5E5E5"> one two three four epochs is</font>

2338
01:52:03,860 --> 01:52:06,050
at<font color="#CCCCCC"> sixty-five percent</font><font color="#E5E5E5"> after one</font><font color="#CCCCCC"> two</font>

2339
01:52:06,050 --> 01:52:08,840
three epochs<font color="#CCCCCC"> I'm still at</font><font color="#E5E5E5"> 65%</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> hasn't</font>

2340
01:52:08,840 --> 01:52:13,460
helped right and so the<font color="#CCCCCC"> reason it hasn't</font>

2341
01:52:13,460 --> 01:52:17,140
helped<font color="#E5E5E5"> is I'm now too deep</font>

2342
01:52:17,140 --> 01:52:20,270
even for batch norm<font color="#CCCCCC"> two handlers now my</font>

2343
01:52:20,270 --> 01:52:23,150
depth is now one two three<font color="#CCCCCC"> four five</font>

2344
01:52:23,150 --> 01:52:30,860
<font color="#E5E5E5">times two is ten eleven</font><font color="#CCCCCC"> kampf 112 okay</font>

2345
01:52:30,860 --> 01:52:34,520
so 12 layers deep it's possible to train

2346
01:52:34,520 --> 01:52:36,800
a standard confident 12 layers deep<font color="#E5E5E5"> but</font>

2347
01:52:36,800 --> 01:52:38,120
it starts<font color="#E5E5E5"> to get difficult to do it</font>

2348
01:52:38,120 --> 01:52:40,100
properly<font color="#CCCCCC"> right and it certainly doesn't</font>

2349
01:52:40,100 --> 01:52:42,500
<font color="#E5E5E5">seem to be really helping much if at all</font>

2350
01:52:42,500 --> 01:52:45,410
<font color="#E5E5E5">so that's where I'm instead going to</font>

2351
01:52:45,410 --> 01:52:49,190
replace this<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a ResNet all right so</font>

2352
01:52:49,190 --> 01:52:51,920
a rest net is our final stage

2353
01:52:51,920 --> 01:52:55,160
<font color="#E5E5E5">what a resin it does is I'm going to</font>

2354
01:52:55,160 --> 01:52:58,130
<font color="#E5E5E5">replace our</font><font color="#CCCCCC"> BN</font><font color="#E5E5E5"> layer right I'm going</font><font color="#CCCCCC"> to</font>

2355
01:52:58,130 --> 01:53:00,710
<font color="#E5E5E5">inherit from</font><font color="#CCCCCC"> BN layer</font><font color="#E5E5E5"> and replace our</font>

2356
01:53:00,710 --> 01:53:04,699
forward with<font color="#E5E5E5"> that and that's it</font>

2357
01:53:04,699 --> 01:53:06,910
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> is going to be identical</font>

2358
01:53:06,910 --> 01:53:09,830
<font color="#E5E5E5">except now I'm going to do like way lots</font>

2359
01:53:09,830 --> 01:53:11,120
<font color="#E5E5E5">of layers I'm going to make it four</font>

2360
01:53:11,120 --> 01:53:13,400
times deeper right and it's<font color="#E5E5E5"> going to</font>

2361
01:53:13,400 --> 01:53:17,739
<font color="#E5E5E5">Train beautifully just because of</font><font color="#CCCCCC"> that</font>

2362
01:53:17,739 --> 01:53:22,460
so why does that help<font color="#E5E5E5"> so much so this is</font>

2363
01:53:22,460 --> 01:53:25,070
called a<font color="#CCCCCC"> ResNet block</font><font color="#E5E5E5"> and as you</font><font color="#CCCCCC"> can see</font>

2364
01:53:25,070 --> 01:53:30,699
<font color="#E5E5E5">I'm saying that's not what I meant to do</font>

2365
01:53:31,480 --> 01:53:36,080
I'm saying my predictions<font color="#E5E5E5"> equals my</font>

2366
01:53:36,080 --> 01:53:40,100
input<font color="#E5E5E5"> plus some function</font><font color="#CCCCCC"> you know in</font>

2367
01:53:40,100 --> 01:53:42,429
this case<font color="#E5E5E5"> a convolution of my input</font>

2368
01:53:42,429 --> 01:53:44,690
<font color="#CCCCCC">alright that's that's that's what I've</font>

2369
01:53:44,690 --> 01:53:48,380
written here<font color="#CCCCCC"> and so I'm now going to</font>

2370
01:53:48,380 --> 01:53:53,270
shuffle<font color="#E5E5E5"> that around a little bit and I'm</font>

2371
01:53:53,270 --> 01:54:00,880
going<font color="#E5E5E5"> to say I'm going to say f of X</font>

2372
01:54:00,880 --> 01:54:06,199
<font color="#E5E5E5">equals y minus</font><font color="#CCCCCC"> X ok so there's the same</font>

2373
01:54:06,199 --> 01:54:09,650
thing shuffled around<font color="#E5E5E5"> right that's my</font>

2374
01:54:09,650 --> 01:54:11,739
prediction<font color="#E5E5E5"> within the previous layer</font>

2375
01:54:11,739 --> 01:54:16,400
right<font color="#E5E5E5"> and so what this is then doing is</font>

2376
01:54:16,400 --> 01:54:19,760
it's trying to fit<font color="#E5E5E5"> a function to the</font>

2377
01:54:19,760 --> 01:54:22,250
difference between<font color="#E5E5E5"> these two right and</font>

2378
01:54:22,250 --> 01:54:28,550
so the difference is actually the

2379
01:54:28,550 --> 01:54:31,120
residual

2380
01:54:35,910 --> 01:54:41,650
so if this is what I'm trying<font color="#CCCCCC"> to</font>

2381
01:54:41,650 --> 01:54:44,890
calculate<font color="#E5E5E5"> my actual Y value and this is</font>

2382
01:54:44,890 --> 01:54:46,540
<font color="#CCCCCC">the</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that I've most</font><font color="#E5E5E5"> recently</font>

2383
01:54:46,540 --> 01:54:48,700
calculated<font color="#CCCCCC"> then the difference between</font>

2384
01:54:48,700 --> 01:54:51,430
the two is basically<font color="#E5E5E5"> the error in terms</font>

2385
01:54:51,430 --> 01:54:54,160
of what I've calculated so far<font color="#E5E5E5"> and so</font>

2386
01:54:54,160 --> 01:54:56,230
this is therefore<font color="#E5E5E5"> saying that okay try</font>

2387
01:54:56,230 --> 01:54:59,670
<font color="#E5E5E5">to find a set of convolutional weights</font>

2388
01:54:59,670 --> 01:55:04,330
<font color="#E5E5E5">that attempts to fill in the the amount</font>

2389
01:55:04,330 --> 01:55:08,760
<font color="#CCCCCC">I was off by so in other words if we</font>

2390
01:55:08,760 --> 01:55:13,690
let's clear this out if we have some

2391
01:55:13,690 --> 01:55:16,900
inputs<font color="#E5E5E5"> coming in right and then we have</font>

2392
01:55:16,900 --> 01:55:18,910
<font color="#E5E5E5">this</font><font color="#CCCCCC"> function which is basically</font><font color="#E5E5E5"> trying</font>

2393
01:55:18,910 --> 01:55:21,940
<font color="#E5E5E5">to predict the</font><font color="#CCCCCC"> error</font><font color="#E5E5E5"> it's like how much</font>

2394
01:55:21,940 --> 01:55:25,180
are we<font color="#E5E5E5"> off by right and then we add</font><font color="#CCCCCC"> that</font>

2395
01:55:25,180 --> 01:55:27,160
on so we basically<font color="#CCCCCC"> add on this</font>

2396
01:55:27,160 --> 01:55:29,440
additional like prediction of how much

2397
01:55:29,440 --> 01:55:31,660
will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> wrong by and then we add on</font>

2398
01:55:31,660 --> 01:55:33,790
<font color="#CCCCCC">another prediction</font><font color="#E5E5E5"> of how much</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> we</font>

2399
01:55:33,790 --> 01:55:35,710
wrong by that time and add on another

2400
01:55:35,710 --> 01:55:37,750
<font color="#CCCCCC">prediction of how much we</font><font color="#E5E5E5"> wrong by that</font>

2401
01:55:37,750 --> 01:55:40,900
time then<font color="#CCCCCC"> that each time we're</font><font color="#E5E5E5"> kind of</font>

2402
01:55:40,900 --> 01:55:44,320
zooming in getting closer<font color="#CCCCCC"> and closer</font><font color="#E5E5E5"> to</font>

2403
01:55:44,320 --> 01:55:46,510
our correct answer<font color="#E5E5E5"> and each time we're</font>

2404
01:55:46,510 --> 01:55:48,610
saying<font color="#E5E5E5"> like okay we've got to a certain</font>

2405
01:55:48,610 --> 01:55:51,760
<font color="#CCCCCC">point but we still got an error you've</font>

2406
01:55:51,760 --> 01:55:53,860
<font color="#E5E5E5">still got a residual so let's try and</font>

2407
01:55:53,860 --> 01:55:56,470
<font color="#E5E5E5">create a model</font><font color="#CCCCCC"> that just predicts that</font>

2408
01:55:56,470 --> 01:55:58,570
residual<font color="#E5E5E5"> and add that</font><font color="#CCCCCC"> on to our previous</font>

2409
01:55:58,570 --> 01:56:00,430
<font color="#E5E5E5">model</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then let's build</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> model</font>

2410
01:56:00,430 --> 01:56:02,650
<font color="#CCCCCC">that</font><font color="#E5E5E5"> predicts the residual and add that</font>

2411
01:56:02,650 --> 01:56:04,450
<font color="#E5E5E5">on to our previous</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> and if we keep</font>

2412
01:56:04,450 --> 01:56:06,640
doing that again and<font color="#E5E5E5"> again we should</font><font color="#CCCCCC"> get</font>

2413
01:56:06,640 --> 01:56:10,840
closer and closer to our<font color="#CCCCCC"> answer</font><font color="#E5E5E5"> and this</font>

2414
01:56:10,840 --> 01:56:14,440
<font color="#E5E5E5">is based on a theory called boosting</font>

2415
01:56:14,440 --> 01:56:16,420
<font color="#E5E5E5">which people that have done some machine</font>

2416
01:56:16,420 --> 01:56:17,830
learning<font color="#CCCCCC"> will certainly come across</font>

2417
01:56:17,830 --> 01:56:20,580
right<font color="#E5E5E5"> and so basically the trick here is</font>

2418
01:56:20,580 --> 01:56:30,040
<font color="#E5E5E5">that by specifying</font><font color="#CCCCCC"> that as being</font><font color="#E5E5E5"> the</font>

2419
01:56:30,040 --> 01:56:32,910
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> that we're trying to calculate</font>

2420
01:56:36,560 --> 01:56:39,380
then we kind<font color="#E5E5E5"> of get boosting for free</font>

2421
01:56:39,380 --> 01:56:41,900
<font color="#E5E5E5">right it's like because we couldn't</font><font color="#CCCCCC"> just</font>

2422
01:56:41,900 --> 01:56:44,130
juggle that around<font color="#E5E5E5"> to show that actually</font>

2423
01:56:44,130 --> 01:56:47,040
<font color="#E5E5E5">it's just calculating a model on the</font>

2424
01:56:47,040 --> 01:56:53,390
<font color="#CCCCCC">wrist Jill so that's kind of</font><font color="#E5E5E5"> amazing and</font>

2425
01:56:53,510 --> 01:56:56,370
you know<font color="#CCCCCC"> it totally</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can see</font>

2426
01:56:56,370 --> 01:56:59,909
here I've now<font color="#E5E5E5"> got</font><font color="#CCCCCC"> my standard batch norm</font>

2427
01:56:59,909 --> 01:57:02,370
layer<font color="#E5E5E5"> okay which is something which</font><font color="#CCCCCC"> is</font>

2428
01:57:02,370 --> 01:57:05,159
<font color="#E5E5E5">going to reduce</font><font color="#CCCCCC"> my size by two</font><font color="#E5E5E5"> because</font>

2429
01:57:05,159 --> 01:57:07,170
it's got the stride<font color="#CCCCCC"> too and then I've</font>

2430
01:57:07,170 --> 01:57:08,909
got a resident layers<font color="#CCCCCC"> dried one and</font>

2431
01:57:08,909 --> 01:57:11,790
another resident layer<font color="#CCCCCC"> astride one right</font>

2432
01:57:11,790 --> 01:57:13,739
and sorry I think<font color="#CCCCCC"> I</font><font color="#E5E5E5"> said that was four</font>

2433
01:57:13,739 --> 01:57:15,600
of<font color="#E5E5E5"> these is</font><font color="#CCCCCC"> actually three of these so</font>

2434
01:57:15,600 --> 01:57:17,670
<font color="#E5E5E5">this is now three</font><font color="#CCCCCC"> times</font><font color="#E5E5E5"> deeper</font><font color="#CCCCCC"> I zipped</font>

2435
01:57:17,670 --> 01:57:19,860
through all of those and so I've now got

2436
01:57:19,860 --> 01:57:22,860
a function of a function<font color="#E5E5E5"> of a function</font>

2437
01:57:22,860 --> 01:57:26,670
<font color="#E5E5E5">so three layers per group</font><font color="#CCCCCC"> and then my</font>

2438
01:57:26,670 --> 01:57:29,489
<font color="#CCCCCC">con at the start and my linear at the</font>

2439
01:57:29,489 --> 01:57:32,310
end<font color="#E5E5E5"> so this is now three times bigger</font>

2440
01:57:32,310 --> 01:57:37,560
<font color="#CCCCCC">than my original and if I fit it you can</font>

2441
01:57:37,560 --> 01:57:39,780
see<font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> keeps going up and up and</font>

2442
01:57:39,780 --> 01:57:41,699
up<font color="#E5E5E5"> and up I keep fitting it more he's</font>

2443
01:57:41,699 --> 01:57:45,360
<font color="#E5E5E5">going up and up and</font><font color="#CCCCCC"> it's still going</font><font color="#E5E5E5"> up</font>

2444
01:57:45,360 --> 01:57:49,199
when I kind of<font color="#CCCCCC"> got bored okay so the</font>

2445
01:57:49,199 --> 01:57:54,050
rest net has<font color="#E5E5E5"> been a really important</font>

2446
01:57:54,050 --> 01:57:58,530
development<font color="#E5E5E5"> and it's allowed us to</font>

2447
01:57:58,530 --> 01:58:03,510
<font color="#CCCCCC">create these really</font><font color="#E5E5E5"> deep networks right</font>

2448
01:58:03,510 --> 01:58:06,239
now the full<font color="#CCCCCC"> risk net does not quite</font>

2449
01:58:06,239 --> 01:58:09,540
look<font color="#E5E5E5"> the way</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> described it here</font><font color="#CCCCCC"> the</font>

2450
01:58:09,540 --> 01:58:11,989
full res net<font color="#E5E5E5"> doesn't just have one</font>

2451
01:58:11,989 --> 01:58:14,760
convolution<font color="#E5E5E5"> right but it actually has</font>

2452
01:58:14,760 --> 01:58:16,770
two convolutions right so the way people

2453
01:58:16,770 --> 01:58:19,380
<font color="#E5E5E5">normally draw resident blocks is they</font>

2454
01:58:19,380 --> 01:58:21,420
normally say you've got<font color="#CCCCCC"> some input</font>

2455
01:58:21,420 --> 01:58:26,520
coming<font color="#CCCCCC"> in to the layer it goes through</font>

2456
01:58:26,520 --> 01:58:31,290
one convolution<font color="#CCCCCC"> to convolutions and then</font>

2457
01:58:31,290 --> 01:58:35,550
gets<font color="#E5E5E5"> added back</font><font color="#CCCCCC"> to the original</font><font color="#E5E5E5"> input</font>

2458
01:58:35,550 --> 01:58:37,949
<font color="#E5E5E5">right that's the full version of a</font>

2459
01:58:37,949 --> 01:58:40,040
<font color="#CCCCCC">ResNet block in my case I've just</font><font color="#E5E5E5"> done</font>

2460
01:58:40,040 --> 01:58:43,409
one convolution<font color="#E5E5E5"> okay and then you'll see</font>

2461
01:58:43,409 --> 01:58:47,959
also in every block

2462
01:58:47,959 --> 01:58:52,729
right<font color="#E5E5E5"> one of them it's actually the</font>

2463
01:58:52,729 --> 01:58:56,900
first<font color="#E5E5E5"> one does he it's actually the</font>

2464
01:58:56,900 --> 01:58:59,209
first one<font color="#E5E5E5"> here is not</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> resident block</font>

2465
01:58:59,209 --> 01:59:04,249
<font color="#E5E5E5">but a standard convolution with a stride</font>

2466
01:59:04,249 --> 01:59:07,099
of two right<font color="#E5E5E5"> this is called</font><font color="#CCCCCC"> a bottleneck</font>

2467
01:59:07,099 --> 01:59:09,860
layer<font color="#E5E5E5"> right and the idea is this</font><font color="#CCCCCC"> is not</font>

2468
01:59:09,860 --> 01:59:12,769
a<font color="#CCCCCC"> ResNet block so from time</font><font color="#E5E5E5"> to time we</font>

2469
01:59:12,769 --> 01:59:14,840
<font color="#CCCCCC">actually change the</font><font color="#E5E5E5"> geometry right we're</font>

2470
01:59:14,840 --> 01:59:17,900
<font color="#CCCCCC">doing</font><font color="#E5E5E5"> this trade to in resident we don't</font>

2471
01:59:17,900 --> 01:59:19,099
actually use<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a standard</font>

2472
01:59:19,099 --> 01:59:21,320
convolutional layer there's actually a

2473
01:59:21,320 --> 01:59:23,959
different form of bottleneck block<font color="#E5E5E5"> that</font>

2474
01:59:23,959 --> 01:59:25,159
I'm not going to picture in this course

2475
01:59:25,159 --> 01:59:27,260
<font color="#E5E5E5">I'm going to teach</font><font color="#CCCCCC"> you in part</font><font color="#E5E5E5"> two okay</font>

2476
01:59:27,260 --> 01:59:29,749
but as you can<font color="#E5E5E5"> see even this somewhat</font>

2477
01:59:29,749 --> 01:59:31,820
simplified version of a resin it still

2478
01:59:31,820 --> 01:59:35,630
works pretty well<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so we can make it</font>

2479
01:59:35,630 --> 01:59:38,570
a<font color="#E5E5E5"> little bit bigger</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right and so</font>

2480
01:59:38,570 --> 01:59:41,229
here I've just<font color="#E5E5E5"> increased all of my</font><font color="#CCCCCC"> sizes</font>

2481
01:59:41,229 --> 01:59:45,170
<font color="#CCCCCC">I</font><font color="#E5E5E5"> have still</font><font color="#CCCCCC"> got my three</font><font color="#E5E5E5"> and also</font><font color="#CCCCCC"> I've</font>

2482
01:59:45,170 --> 01:59:47,570
had it drop out right<font color="#CCCCCC"> so at this point</font>

2483
01:59:47,570 --> 01:59:49,789
I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> say this is other than the</font>

2484
01:59:49,789 --> 01:59:52,550
<font color="#CCCCCC">minor simplification of ResNet you know</font>

2485
01:59:52,550 --> 01:59:54,979
a reasonable<font color="#E5E5E5"> approximation of a good</font>

2486
01:59:54,979 --> 01:59:56,979
starting<font color="#E5E5E5"> point for a modern architecture</font>

2487
01:59:56,979 --> 02:00:00,110
<font color="#E5E5E5">okay and so now I've</font><font color="#CCCCCC"> added in my point</font>

2488
02:00:00,110 --> 02:00:02,479
<font color="#E5E5E5">to drop out I've increased the size here</font>

2489
02:00:02,479 --> 02:00:06,289
<font color="#CCCCCC">and if I</font><font color="#E5E5E5"> train this you know I can</font><font color="#CCCCCC"> treat</font>

2490
02:00:06,289 --> 02:00:08,090
<font color="#E5E5E5">it</font><font color="#CCCCCC"> for a while it's</font><font color="#E5E5E5"> going pretty well I</font>

2491
02:00:08,090 --> 02:00:09,800
can then add<font color="#E5E5E5"> in</font><font color="#CCCCCC"> gta at the end</font>

2492
02:00:09,800 --> 02:00:13,189
eventually<font color="#CCCCCC"> I get 85% and you know this</font>

2493
02:00:13,189 --> 02:00:16,249
<font color="#E5E5E5">is at a point now where like literally I</font>

2494
02:00:16,249 --> 02:00:17,900
wrote this whole<font color="#E5E5E5"> notebook in like three</font>

2495
02:00:17,900 --> 02:00:19,369
hours<font color="#E5E5E5"> right we can like create this</font>

2496
02:00:19,369 --> 02:00:22,519
thing<font color="#E5E5E5"> in three hours</font><font color="#CCCCCC"> and this is like an</font>

2497
02:00:22,519 --> 02:00:26,389
accuracy that<font color="#E5E5E5"> in kind</font><font color="#CCCCCC"> of 2012-2013 was</font>

2498
02:00:26,389 --> 02:00:29,239
considered pretty<font color="#E5E5E5"> much data the art for</font>

2499
02:00:29,239 --> 02:00:32,420
<font color="#CCCCCC">say pocket</font><font color="#E5E5E5"> right so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually no</font>

2500
02:00:32,420 --> 02:00:35,659
this is<font color="#CCCCCC"> actually pretty</font><font color="#E5E5E5"> damn good to get</font>

2501
02:00:35,659 --> 02:00:37,849
you know nowadays<font color="#CCCCCC"> the most</font><font color="#E5E5E5"> recent</font>

2502
02:00:37,849 --> 02:00:40,789
<font color="#CCCCCC">results are like 97% you know there are</font>

2503
02:00:40,789 --> 02:00:42,380
there's plenty of room we can still

2504
02:00:42,380 --> 02:00:44,780
improve but they're all based on<font color="#E5E5E5"> these</font>

2505
02:00:44,780 --> 02:00:46,309
techniques<font color="#E5E5E5"> like there isn't really</font>

2506
02:00:46,309 --> 02:00:49,999
anything<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know when we start looking</font>

2507
02:00:49,999 --> 02:00:52,489
in in part to it like how to<font color="#E5E5E5"> get this</font>

2508
02:00:52,489 --> 02:00:53,959
right<font color="#CCCCCC"> up</font><font color="#E5E5E5"> to state</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> art you'll see</font>

2509
02:00:53,959 --> 02:00:55,489
it's<font color="#CCCCCC"> basically better approaches to data</font>

2510
02:00:55,489 --> 02:00:57,979
augmentation better approaches to

2511
02:00:57,979 --> 02:01:01,120
regularization<font color="#CCCCCC"> some tweaks on ResNet</font>

2512
02:01:01,120 --> 02:01:04,000
but it's all basically<font color="#CCCCCC"> the circuit okay</font>

2513
02:01:04,000 --> 02:01:09,850
<font color="#E5E5E5">so so is the residual training on the</font>

2514
02:01:09,850 --> 02:01:13,780
residual method is that<font color="#CCCCCC"> only looks like</font>

2515
02:01:13,780 --> 02:01:16,150
<font color="#E5E5E5">it's a generic</font><font color="#CCCCCC"> thing that can be applied</font>

2516
02:01:16,150 --> 02:01:19,120
<font color="#CCCCCC">non</font><font color="#E5E5E5"> image problems</font><font color="#CCCCCC"> oh great question</font>

2517
02:01:19,120 --> 02:01:22,270
<font color="#E5E5E5">yeah yes it is but it's like being</font>

2518
02:01:22,270 --> 02:01:25,840
<font color="#E5E5E5">ignored everywhere else</font><font color="#CCCCCC"> in NLP something</font>

2519
02:01:25,840 --> 02:01:28,300
called the transformer architecture

2520
02:01:28,300 --> 02:01:31,210
recently appeared and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> was shown</font>

2521
02:01:31,210 --> 02:01:32,940
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be the state of the art for</font>

2522
02:01:32,940 --> 02:01:36,040
translation<font color="#E5E5E5"> and it's got like a simple</font>

2523
02:01:36,040 --> 02:01:38,620
resonance<font color="#E5E5E5"> structure you know first time</font>

2524
02:01:38,620 --> 02:01:40,840
<font color="#CCCCCC">I've ever seen it</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> NLP I haven't</font>

2525
02:01:40,840 --> 02:01:42,310
really seen anybody<font color="#E5E5E5"> else take advantage</font>

2526
02:01:42,310 --> 02:01:45,520
of it<font color="#CCCCCC"> yeah this general approach we call</font>

2527
02:01:45,520 --> 02:01:47,290
these skip connections this idea of<font color="#E5E5E5"> like</font>

2528
02:01:47,290 --> 02:01:49,510
skipping<font color="#E5E5E5"> over a layer and kind of doing</font>

2529
02:01:49,510 --> 02:01:52,390
<font color="#CCCCCC">an identity</font><font color="#E5E5E5"> it's yeah it's been</font>

2530
02:01:52,390 --> 02:01:54,280
appearing<font color="#E5E5E5"> a lot in computer</font><font color="#CCCCCC"> vision and</font>

2531
02:01:54,280 --> 02:01:56,410
nobody else much seems<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be using</font><font color="#CCCCCC"> it</font>

2532
02:01:56,410 --> 02:01:57,970
even<font color="#E5E5E5"> though there's nothing computer</font>

2533
02:01:57,970 --> 02:02:00,040
vision specific about<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so I think it's</font>

2534
02:02:00,040 --> 02:02:05,740
<font color="#E5E5E5">a big opportunity okay so final stage I</font>

2535
02:02:05,740 --> 02:02:09,730
want<font color="#E5E5E5"> to show you is</font><font color="#CCCCCC"> how to</font><font color="#E5E5E5"> use an extra</font>

2536
02:02:09,730 --> 02:02:12,910
feature of<font color="#E5E5E5"> Pi torch to do something cool</font>

2537
02:02:12,910 --> 02:02:14,710
and it's going<font color="#E5E5E5"> to be a kind of a segue</font>

2538
02:02:14,710 --> 02:02:17,440
into part<font color="#CCCCCC"> two it's</font><font color="#E5E5E5"> going to be our first</font>

2539
02:02:17,440 --> 02:02:20,590
little<font color="#E5E5E5"> hint as to what else we can build</font>

2540
02:02:20,590 --> 02:02:23,500
on these neural<font color="#E5E5E5"> nets</font><font color="#CCCCCC"> and so and it's</font>

2541
02:02:23,500 --> 02:02:24,490
<font color="#E5E5E5">also going to take us all the</font><font color="#CCCCCC"> way back</font>

2542
02:02:24,490 --> 02:02:26,800
<font color="#CCCCCC">to lesson</font><font color="#E5E5E5"> 1 which is we're going to do</font>

2543
02:02:26,800 --> 02:02:29,680
dogs and cats<font color="#CCCCCC"> ok so going all the way</font>

2544
02:02:29,680 --> 02:02:32,560
<font color="#CCCCCC">back to dogs</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> cats</font><font color="#E5E5E5"> we're going to</font>

2545
02:02:32,560 --> 02:02:34,900
create a resin at 34<font color="#CCCCCC"> ok so these</font>

2546
02:02:34,900 --> 02:02:38,890
different<font color="#CCCCCC"> ResNet</font><font color="#E5E5E5"> 3450 101</font><font color="#CCCCCC"> they're</font>

2547
02:02:38,890 --> 02:02:42,670
they're basically<font color="#E5E5E5"> just different numbers</font>

2548
02:02:42,670 --> 02:02:46,330
<font color="#CCCCCC">of different sized blocks</font><font color="#E5E5E5"> it's like how</font>

2549
02:02:46,330 --> 02:02:48,040
many<font color="#CCCCCC"> of these kind of</font><font color="#E5E5E5"> pieces do you have</font>

2550
02:02:48,040 --> 02:02:50,260
<font color="#CCCCCC">before it bottleneck block and then how</font>

2551
02:02:50,260 --> 02:02:53,050
many<font color="#E5E5E5"> of these sets of super blocks do</font>

2552
02:02:53,050 --> 02:02:54,070
you have right that's all these

2553
02:02:54,070 --> 02:02:56,590
different<font color="#CCCCCC"> numbers mean</font><font color="#E5E5E5"> so if you look at</font>

2554
02:02:56,590 --> 02:03:00,160
the torch vision source code you can

2555
02:03:00,160 --> 02:03:01,780
<font color="#E5E5E5">actually see the definition of these</font>

2556
02:03:01,780 --> 02:03:03,190
different<font color="#CCCCCC"> resonates you'll see they're</font>

2557
02:03:03,190 --> 02:03:09,370
all just different<font color="#E5E5E5"> parameters right</font><font color="#CCCCCC"> ok</font>

2558
02:03:09,370 --> 02:03:11,670
so we're going to<font color="#E5E5E5"> use rest at 34</font>

2559
02:03:11,670 --> 02:03:13,080
and so we're going<font color="#CCCCCC"> to do this</font><font color="#E5E5E5"> a little</font>

2560
02:03:13,080 --> 02:03:17,340
bit<font color="#E5E5E5"> more by hand</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so if this is my</font>

2561
02:03:17,340 --> 02:03:19,170
architecture<font color="#E5E5E5"> this is just the name of</font><font color="#CCCCCC"> a</font>

2562
02:03:19,170 --> 02:03:22,020
function<font color="#E5E5E5"> then I can call it</font><font color="#CCCCCC"> to get that</font>

2563
02:03:22,020 --> 02:03:25,650
<font color="#E5E5E5">model right and then true look</font><font color="#CCCCCC"> at the</font>

2564
02:03:25,650 --> 02:03:27,989
definition is do I<font color="#E5E5E5"> want the</font><font color="#CCCCCC"> pre-trained</font>

2565
02:03:27,989 --> 02:03:29,699
so in other words is<font color="#E5E5E5"> it going to load in</font>

2566
02:03:29,699 --> 02:03:31,500
the<font color="#E5E5E5"> pre-trained</font><font color="#CCCCCC"> imagenet weights</font>

2567
02:03:31,500 --> 02:03:36,960
<font color="#E5E5E5">okay so M now contains a model and so I</font>

2568
02:03:36,960 --> 02:03:39,239
can<font color="#E5E5E5"> take a look at it like so okay and</font>

2569
02:03:39,239 --> 02:03:41,760
so you can see here what's going on

2570
02:03:41,760 --> 02:03:47,510
<font color="#E5E5E5">right is that inside here</font><font color="#CCCCCC"> I've got</font><font color="#E5E5E5"> my</font>

2571
02:03:47,510 --> 02:03:49,770
initial<font color="#CCCCCC"> two deconvolution</font>

2572
02:03:49,770 --> 02:03:52,380
and here is<font color="#E5E5E5"> that kernel size of seven by</font>

2573
02:03:52,380 --> 02:03:54,960
seven okay<font color="#CCCCCC"> and interestingly in</font><font color="#E5E5E5"> this</font>

2574
02:03:54,960 --> 02:03:56,489
case it actually starts<font color="#E5E5E5"> out with a seven</font>

2575
02:03:56,489 --> 02:03:58,890
by seven strobe<font color="#CCCCCC"> - okay there's the</font>

2576
02:03:58,890 --> 02:04:00,390
padding<font color="#E5E5E5"> that we talked</font><font color="#CCCCCC"> about to</font><font color="#E5E5E5"> make</font>

2577
02:04:00,390 --> 02:04:02,160
<font color="#E5E5E5">sure that we don't lose the edges</font><font color="#CCCCCC"> all</font>

2578
02:04:02,160 --> 02:04:04,290
<font color="#E5E5E5">right there's our batch naught okay</font>

2579
02:04:04,290 --> 02:04:07,020
<font color="#E5E5E5">there's our Lu you get the idea right</font>

2580
02:04:07,020 --> 02:04:10,080
<font color="#CCCCCC">Kong and then</font><font color="#E5E5E5"> so here you can now see</font>

2581
02:04:10,080 --> 02:04:13,530
there's a layer that contains a<font color="#CCCCCC"> bunch of</font>

2582
02:04:13,530 --> 02:04:16,170
blocks<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so here's a block which</font>

2583
02:04:16,170 --> 02:04:19,469
<font color="#CCCCCC">contains a cons</font><font color="#E5E5E5"> fetch norm rally you con</font>

2584
02:04:19,469 --> 02:04:22,560
<font color="#CCCCCC">Bethnal you can't see it printed but</font>

2585
02:04:22,560 --> 02:04:24,660
after this is where it does<font color="#E5E5E5"> the addition</font>

2586
02:04:24,660 --> 02:04:26,820
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right so there's like a whole</font><font color="#CCCCCC"> ResNet</font>

2587
02:04:26,820 --> 02:04:28,560
block and then another resident block

2588
02:04:28,560 --> 02:04:33,600
and then another<font color="#CCCCCC"> ResNet block okay and</font>

2589
02:04:33,600 --> 02:04:38,100
then you can see also sometimes you see

2590
02:04:38,100 --> 02:04:40,860
one where there's a<font color="#CCCCCC"> stripe -</font><font color="#E5E5E5"> right so</font>

2591
02:04:40,860 --> 02:04:44,390
here's actually one of<font color="#E5E5E5"> these bottleneck</font>

2592
02:04:44,390 --> 02:04:47,040
layers<font color="#E5E5E5"> okay</font>

2593
02:04:47,040 --> 02:04:49,530
so you can kind of see how this is this

2594
02:04:49,530 --> 02:04:53,489
is<font color="#CCCCCC"> structure so in our</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> sorry I</font>

2595
02:04:53,489 --> 02:04:59,040
skipped over this a little<font color="#E5E5E5"> bit but the</font>

2596
02:04:59,040 --> 02:05:04,110
approach that we ended up using<font color="#E5E5E5"> for real</font>

2597
02:05:04,110 --> 02:05:12,719
you was to<font color="#E5E5E5"> put it before our before our</font>

2598
02:05:12,719 --> 02:05:18,270
<font color="#CCCCCC">Bashan</font><font color="#E5E5E5"> on which see what they do here</font>

2599
02:05:18,270 --> 02:05:24,300
we've got<font color="#E5E5E5"> fetch norm railing you cons</font>

2600
02:05:24,300 --> 02:05:25,050
<font color="#E5E5E5">that</font>

2601
02:05:25,050 --> 02:05:26,699
no I'm really<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> okay so you can see</font>

2602
02:05:26,699 --> 02:05:27,960
<font color="#CCCCCC">the order that they're using</font><font color="#E5E5E5"> it here</font>

2603
02:05:27,960 --> 02:05:29,309
okay

2604
02:05:29,309 --> 02:05:31,290
and you'll find<font color="#E5E5E5"> like there's two</font>

2605
02:05:31,290 --> 02:05:33,780
different<font color="#E5E5E5"> versions</font><font color="#CCCCCC"> of ResNet in fact</font>

2606
02:05:33,780 --> 02:05:34,710
there's three<font color="#CCCCCC"> different versions</font><font color="#E5E5E5"> of</font>

2607
02:05:34,710 --> 02:05:37,050
<font color="#CCCCCC">ResNet floating around the one which</font>

2608
02:05:37,050 --> 02:05:39,270
<font color="#CCCCCC">actually turns out</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be the best it's</font>

2609
02:05:39,270 --> 02:05:41,940
called the<font color="#CCCCCC"> pre-act ResNet which has a</font>

2610
02:05:41,940 --> 02:05:47,250
different<font color="#CCCCCC"> ordering</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> but you can</font>

2611
02:05:47,250 --> 02:05:48,840
<font color="#E5E5E5">look it up it's basically a different</font>

2612
02:05:48,840 --> 02:05:50,849
<font color="#E5E5E5">order of where the value and where the</font>

2613
02:05:50,849 --> 02:05:53,730
batch<font color="#E5E5E5"> norm</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> okay so we're going to</font>

2614
02:05:53,730 --> 02:05:57,199
start with a standard resident<font color="#E5E5E5"> 34 and</font>

2615
02:05:57,199 --> 02:06:01,230
normally what we do is<font color="#E5E5E5"> we need to now</font>

2616
02:06:01,230 --> 02:06:02,880
turn<font color="#E5E5E5"> this into something that can</font>

2617
02:06:02,880 --> 02:06:06,329
predict dogs versus class<font color="#CCCCCC"> right so</font>

2618
02:06:06,329 --> 02:06:10,050
<font color="#E5E5E5">currently the final layer has a thousand</font>

2619
02:06:10,050 --> 02:06:12,449
features because imagenet has a thousand

2620
02:06:12,449 --> 02:06:14,880
features right so we need<font color="#E5E5E5"> to get rid of</font>

2621
02:06:14,880 --> 02:06:19,679
this so when you use<font color="#E5E5E5"> confer owner from</font>

2622
02:06:19,679 --> 02:06:22,469
pre-trained<font color="#E5E5E5"> in fast AI it actually</font>

2623
02:06:22,469 --> 02:06:25,980
deletes this layer<font color="#E5E5E5"> for you</font><font color="#CCCCCC"> and it also</font>

2624
02:06:25,980 --> 02:06:30,150
deletes<font color="#E5E5E5"> this layer and something that as</font>

2625
02:06:30,150 --> 02:06:33,239
far as<font color="#E5E5E5"> I know is unique to fast AI is we</font>

2626
02:06:33,239 --> 02:06:35,550
<font color="#E5E5E5">replace this see this is an average</font>

2627
02:06:35,550 --> 02:06:37,590
<font color="#E5E5E5">pooling layer of size seven by seven</font>

2628
02:06:37,590 --> 02:06:39,869
<font color="#CCCCCC">right so this is</font><font color="#E5E5E5"> the basically the</font>

2629
02:06:39,869 --> 02:06:41,909
adaptive pooling layer<font color="#E5E5E5"> but whoever wrote</font>

2630
02:06:41,909 --> 02:06:43,710
this didn't know about adaptive pooling

2631
02:06:43,710 --> 02:06:45,449
so they<font color="#E5E5E5"> manually said oh I know it's</font>

2632
02:06:45,449 --> 02:06:47,880
meant<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> seven by seven so in first</font>

2633
02:06:47,880 --> 02:06:49,619
AI we replaced this with<font color="#CCCCCC"> adaptive</font>

2634
02:06:49,619 --> 02:06:51,780
pooling but we actually do both adaptive

2635
02:06:51,780 --> 02:06:54,869
average pooling<font color="#E5E5E5"> and adaptive max pooling</font>

2636
02:06:54,869 --> 02:06:56,790
<font color="#E5E5E5">and we then concatenate them</font><font color="#CCCCCC"> two</font>

2637
02:06:56,790 --> 02:07:00,239
<font color="#CCCCCC">together which it's it is something</font><font color="#E5E5E5"> we</font>

2638
02:07:00,239 --> 02:07:02,040
invented<font color="#E5E5E5"> but at the same time we</font>

2639
02:07:02,040 --> 02:07:03,750
invented it somebody wrote a paper about

2640
02:07:03,750 --> 02:07:04,260
<font color="#E5E5E5">it</font>

2641
02:07:04,260 --> 02:07:06,210
so it's you<font color="#E5E5E5"> know we don't get any credit</font>

2642
02:07:06,210 --> 02:07:08,489
<font color="#E5E5E5">but I think we're the only library that</font>

2643
02:07:08,489 --> 02:07:09,900
provides it and certainly<font color="#CCCCCC"> only</font><font color="#E5E5E5"> one that</font>

2644
02:07:09,900 --> 02:07:14,130
does it<font color="#E5E5E5"> by default</font><font color="#CCCCCC"> we're going to for</font>

2645
02:07:14,130 --> 02:07:15,420
the purpose<font color="#E5E5E5"> of this exercise though</font>

2646
02:07:15,420 --> 02:07:17,400
we're going<font color="#CCCCCC"> to do a</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> version where</font>

2647
02:07:17,400 --> 02:07:19,619
we<font color="#E5E5E5"> delete the last two layers</font><font color="#CCCCCC"> so we'll</font>

2648
02:07:19,619 --> 02:07:21,630
<font color="#E5E5E5">grab all the children of the model will</font>

2649
02:07:21,630 --> 02:07:24,090
delete the last two layers and then

2650
02:07:24,090 --> 02:07:27,710
instead we're going<font color="#E5E5E5"> to add a convolution</font>

2651
02:07:27,710 --> 02:07:32,550
which just has two outputs<font color="#E5E5E5"> right I'll</font>

2652
02:07:32,550 --> 02:07:33,630
show you why<font color="#CCCCCC"> in a moment</font>

2653
02:07:33,630 --> 02:07:36,599
right then we're going to do our<font color="#E5E5E5"> average</font>

2654
02:07:36,599 --> 02:07:39,030
pooling<font color="#E5E5E5"> and then we're going to do</font>

2655
02:07:39,030 --> 02:07:43,320
soft<font color="#CCCCCC"> mess</font><font color="#E5E5E5"> okay so that's a model which</font>

2656
02:07:43,320 --> 02:07:46,260
is<font color="#CCCCCC"> going to have</font><font color="#E5E5E5"> you'll see that there</font>

2657
02:07:46,260 --> 02:07:48,180
is no this one has a fully<font color="#E5E5E5"> connected</font>

2658
02:07:48,180 --> 02:07:50,640
layer at the<font color="#E5E5E5"> end this one does</font><font color="#CCCCCC"> not have</font>

2659
02:07:50,640 --> 02:07:53,280
<font color="#CCCCCC">a fully connected</font><font color="#E5E5E5"> layer yet but if you</font>

2660
02:07:53,280 --> 02:07:55,470
think<font color="#CCCCCC"> about it</font><font color="#E5E5E5"> this convolutional layer</font>

2661
02:07:55,470 --> 02:08:01,380
is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be two filters only right</font>

2662
02:08:01,380 --> 02:08:03,900
and it's going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> two by seven by</font>

2663
02:08:03,900 --> 02:08:06,810
<font color="#CCCCCC">seven and so once we then do the average</font>

2664
02:08:06,810 --> 02:08:09,270
pooling<font color="#E5E5E5"> it's going to end up being just</font>

2665
02:08:09,270 --> 02:08:11,610
two<font color="#E5E5E5"> numbers that</font><font color="#CCCCCC"> it produces</font><font color="#E5E5E5"> so this is</font>

2666
02:08:11,610 --> 02:08:13,230
a different way of<font color="#E5E5E5"> producing just two</font>

2667
02:08:13,230 --> 02:08:15,030
<font color="#E5E5E5">numbers I'm not going to say it's better</font>

2668
02:08:15,030 --> 02:08:16,920
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> going to say it's different okay</font>

2669
02:08:16,920 --> 02:08:19,470
<font color="#E5E5E5">but there's a reason we do it I'll show</font>

2670
02:08:19,470 --> 02:08:21,240
you the reason<font color="#E5E5E5"> we can now train this</font>

2671
02:08:21,240 --> 02:08:23,910
<font color="#E5E5E5">model in the usual way right so we can</font>

2672
02:08:23,910 --> 02:08:26,160
say transform stock model image

2673
02:08:26,160 --> 02:08:29,010
<font color="#CCCCCC">classifier data from paths and then we</font>

2674
02:08:29,010 --> 02:08:30,840
can use<font color="#E5E5E5"> that</font><font color="#CCCCCC"> Kampf learner from model</font>

2675
02:08:30,840 --> 02:08:34,110
data we<font color="#E5E5E5"> just</font><font color="#CCCCCC"> learnt</font><font color="#E5E5E5"> about I'm now going</font>

2676
02:08:34,110 --> 02:08:38,450
to<font color="#E5E5E5"> freeze every single layer except for</font>

2677
02:08:38,450 --> 02:08:41,400
that one and this<font color="#E5E5E5"> is the fourth last</font>

2678
02:08:41,400 --> 02:08:41,970
layer

2679
02:08:41,970 --> 02:08:44,730
so we'll say freeze<font color="#E5E5E5"> to minus</font><font color="#CCCCCC"> four right</font>

2680
02:08:44,730 --> 02:08:46,440
and so this is<font color="#E5E5E5"> just training the last</font>

2681
02:08:46,440 --> 02:08:49,350
<font color="#E5E5E5">layer okay so we get 99.1 percent</font>

2682
02:08:49,350 --> 02:08:50,790
accuracy so that you know this

2683
02:08:50,790 --> 02:08:53,700
approaches working fine<font color="#CCCCCC"> and here's what</font>

2684
02:08:53,700 --> 02:08:56,160
we can<font color="#E5E5E5"> do though we can now do</font><font color="#CCCCCC"> something</font>

2685
02:08:56,160 --> 02:09:02,300
called<font color="#CCCCCC"> fast</font><font color="#E5E5E5"> comm last activated Maps</font>

2686
02:09:02,300 --> 02:09:06,120
<font color="#E5E5E5">fast activation</font><font color="#CCCCCC"> is what we're going to</font>

2687
02:09:06,120 --> 02:09:08,610
do is we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> try to look at this</font>

2688
02:09:08,610 --> 02:09:11,850
<font color="#E5E5E5">particular cat and we're going to use a</font>

2689
02:09:11,850 --> 02:09:13,620
<font color="#E5E5E5">technique called class activation</font><font color="#CCCCCC"> Maps</font>

2690
02:09:13,620 --> 02:09:16,320
where we take our<font color="#E5E5E5"> model</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we ask you</font>

2691
02:09:16,320 --> 02:09:19,290
which parts<font color="#E5E5E5"> of this image turned out to</font>

2692
02:09:19,290 --> 02:09:22,080
be important<font color="#E5E5E5"> and when we do this it's</font>

2693
02:09:22,080 --> 02:09:24,750
going<font color="#CCCCCC"> to feed out this is got the</font>

2694
02:09:24,750 --> 02:09:26,880
picture it's<font color="#CCCCCC"> going to create alright and</font>

2695
02:09:26,880 --> 02:09:28,980
so<font color="#CCCCCC"> as you can see here it's found the</font>

2696
02:09:28,980 --> 02:09:32,580
<font color="#CCCCCC">cat so how</font><font color="#E5E5E5"> did it do that well</font><font color="#CCCCCC"> the way</font>

2697
02:09:32,580 --> 02:09:33,990
it did that<font color="#CCCCCC"> will kind of work</font><font color="#E5E5E5"> backwards</font>

2698
02:09:33,990 --> 02:09:38,550
<font color="#CCCCCC">is to produce this matrix</font><font color="#E5E5E5"> now you'll see</font>

2699
02:09:38,550 --> 02:09:41,190
in this matrix<font color="#E5E5E5"> there's some pretty big</font>

2700
02:09:41,190 --> 02:09:44,550
<font color="#CCCCCC">numbers</font><font color="#E5E5E5"> around about here which</font>

2701
02:09:44,550 --> 02:09:48,450
correspond to<font color="#CCCCCC"> our cat so what is this</font>

2702
02:09:48,450 --> 02:09:52,260
<font color="#CCCCCC">matrix this matrix is simply</font>

2703
02:09:52,260 --> 02:10:00,210
<font color="#E5E5E5">or to the value of this feature matrix</font>

2704
02:10:00,210 --> 02:10:05,790
times this<font color="#CCCCCC"> py vector the py vector is</font>

2705
02:10:05,790 --> 02:10:09,420
simply<font color="#E5E5E5"> equal to the predictions which in</font>

2706
02:10:09,420 --> 02:10:11,970
this<font color="#E5E5E5"> case said</font><font color="#CCCCCC"> I am 100% confident</font><font color="#E5E5E5"> it's</font>

2707
02:10:11,970 --> 02:10:14,940
a cat<font color="#E5E5E5"> right so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> equal to</font><font color="#E5E5E5"> the</font>

2708
02:10:14,940 --> 02:10:17,180
value<font color="#CCCCCC"> of if I just call the model</font>

2709
02:10:17,180 --> 02:10:20,730
<font color="#E5E5E5">passing in our cat this is our cat</font>

2710
02:10:20,730 --> 02:10:23,430
<font color="#E5E5E5">that's an X then we got our predictions</font>

2711
02:10:23,430 --> 02:10:24,570
right so it's just<font color="#CCCCCC"> the value</font><font color="#E5E5E5"> of our</font>

2712
02:10:24,570 --> 02:10:27,180
<font color="#E5E5E5">predictions so py is just the value of</font>

2713
02:10:27,180 --> 02:10:27,950
our<font color="#E5E5E5"> predictions</font>

2714
02:10:27,950 --> 02:10:30,650
what about feet<font color="#E5E5E5"> what's that equal to</font>

2715
02:10:30,650 --> 02:10:38,340
feet is<font color="#E5E5E5"> equal to the values in this</font>

2716
02:10:38,340 --> 02:10:40,740
<font color="#E5E5E5">layer</font><font color="#CCCCCC"> right in other words the value</font>

2717
02:10:40,740 --> 02:10:42,780
<font color="#E5E5E5">that</font><font color="#CCCCCC"> comes out of the final in facts</font>

2718
02:10:42,780 --> 02:10:43,950
come<font color="#CCCCCC"> out of this ladder coming</font><font color="#E5E5E5"> out of</font>

2719
02:10:43,950 --> 02:10:46,770
the final convolutional layer<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font>

2720
02:10:46,770 --> 02:10:50,750
it's actually<font color="#CCCCCC"> the</font><font color="#E5E5E5"> seven by seven by two</font>

2721
02:10:50,750 --> 02:10:54,570
and<font color="#E5E5E5"> so you can see here let's see feet</font>

2722
02:10:54,570 --> 02:10:58,770
the shape of features is<font color="#E5E5E5"> two filters by</font>

2723
02:10:58,770 --> 02:11:03,030
seven by seven<font color="#E5E5E5"> right so the idea</font><font color="#CCCCCC"> is if</font>

2724
02:11:03,030 --> 02:11:09,650
we<font color="#E5E5E5"> multiply that vector by that tensor</font>

2725
02:11:09,650 --> 02:11:12,360
right then it's going<font color="#E5E5E5"> to end up grabbing</font>

2726
02:11:12,360 --> 02:11:15,240
all<font color="#E5E5E5"> of the first channel because that's</font>

2727
02:11:15,240 --> 02:11:17,790
a<font color="#CCCCCC"> 1 and none of the second</font><font color="#E5E5E5"> channel</font>

2728
02:11:17,790 --> 02:11:21,390
<font color="#E5E5E5">because that's a 0 and so</font><font color="#CCCCCC"> therefore it's</font>

2729
02:11:21,390 --> 02:11:23,720
going<font color="#E5E5E5"> to return the</font><font color="#CCCCCC"> value of the last</font>

2730
02:11:23,720 --> 02:11:28,080
convolutional layer for the for the

2731
02:11:28,080 --> 02:11:30,630
section which lines up<font color="#E5E5E5"> with being a cat</font>

2732
02:11:30,630 --> 02:11:33,870
but if you think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it this the first</font>

2733
02:11:33,870 --> 02:11:36,120
section lines up with being<font color="#E5E5E5"> a cat the</font>

2734
02:11:36,120 --> 02:11:37,830
second<font color="#E5E5E5"> section lines up with being a dog</font>

2735
02:11:37,830 --> 02:11:41,100
so if we multiply<font color="#CCCCCC"> that</font><font color="#E5E5E5"> tensor by that</font>

2736
02:11:41,100 --> 02:11:45,330
tensor we end up with this<font color="#E5E5E5"> matrix and</font>

2737
02:11:45,330 --> 02:11:50,010
this matrix is which parts<font color="#E5E5E5"> most like a</font>

2738
02:11:50,010 --> 02:11:53,940
cat<font color="#E5E5E5"> or to put it another way</font><font color="#CCCCCC"> in our</font>

2739
02:11:53,940 --> 02:11:56,550
<font color="#E5E5E5">model the</font><font color="#CCCCCC"> only thing that happened after</font>

2740
02:11:56,550 --> 02:11:59,340
<font color="#CCCCCC">the convolutional layer was an</font><font color="#E5E5E5"> average</font>

2741
02:11:59,340 --> 02:12:01,590
<font color="#E5E5E5">pooling layer so the average pooling</font>

2742
02:12:01,590 --> 02:12:04,410
layer<font color="#E5E5E5"> talked that 7x7 grid and said</font>

2743
02:12:04,410 --> 02:12:05,630
average

2744
02:12:05,630 --> 02:12:08,929
how much each part is cat<font color="#CCCCCC"> Lake that</font>

2745
02:12:08,929 --> 02:12:10,730
<font color="#E5E5E5">answered my final value my final</font>

2746
02:12:10,730 --> 02:12:13,449
prediction was the average<font color="#E5E5E5"> cattiness</font>

2747
02:12:13,449 --> 02:12:17,830
<font color="#E5E5E5">there's the whole thing right and so</font>

2748
02:12:17,830 --> 02:12:19,969
because it had to be able<font color="#E5E5E5"> to average out</font>

2749
02:12:19,969 --> 02:12:20,989
these things to<font color="#E5E5E5"> get the average</font>

2750
02:12:20,989 --> 02:12:23,449
cattiness<font color="#E5E5E5"> that means I could</font><font color="#CCCCCC"> then just</font>

2751
02:12:23,449 --> 02:12:28,310
<font color="#E5E5E5">take this matrix and resize it</font><font color="#CCCCCC"> to be the</font>

2752
02:12:28,310 --> 02:12:30,800
same size<font color="#CCCCCC"> as my original cat and just</font>

2753
02:12:30,800 --> 02:12:33,500
<font color="#E5E5E5">overlay it on top you</font><font color="#CCCCCC"> get this heat map</font>

2754
02:12:33,500 --> 02:12:35,659
right<font color="#E5E5E5"> so the way you can use this</font>

2755
02:12:35,659 --> 02:12:39,020
<font color="#E5E5E5">technique at home is to</font><font color="#CCCCCC"> basically</font>

2756
02:12:39,020 --> 02:12:41,870
calculate this matrix<font color="#E5E5E5"> right on some like</font>

2757
02:12:41,870 --> 02:12:43,520
<font color="#E5E5E5">really you've got some really big</font>

2758
02:12:43,520 --> 02:12:46,489
picture<font color="#E5E5E5"> you can calculate this</font><font color="#CCCCCC"> matrix on</font>

2759
02:12:46,489 --> 02:12:48,860
a quick small little<font color="#CCCCCC"> cognate</font><font color="#E5E5E5"> and then</font>

2760
02:12:48,860 --> 02:12:51,110
zoom<font color="#CCCCCC"> into the bit that has the</font><font color="#E5E5E5"> highest</font>

2761
02:12:51,110 --> 02:12:54,560
value<font color="#E5E5E5"> and then rerun it just on that</font>

2762
02:12:54,560 --> 02:12:57,020
part<font color="#CCCCCC"> that so it's</font><font color="#E5E5E5"> like oh this is the</font>

2763
02:12:57,020 --> 02:12:58,550
area that seems to<font color="#E5E5E5"> be the most like a</font>

2764
02:12:58,550 --> 02:13:01,850
<font color="#CCCCCC">hat</font><font color="#E5E5E5"> or most like a dog that zoom in to</font>

2765
02:13:01,850 --> 02:13:05,420
<font color="#CCCCCC">that bit right so I skipped over that</font>

2766
02:13:05,420 --> 02:13:06,530
pretty quickly because<font color="#E5E5E5"> we ran</font><font color="#CCCCCC"> out of</font>

2767
02:13:06,530 --> 02:13:10,940
time<font color="#CCCCCC"> and so we'll</font><font color="#E5E5E5"> be learning more about</font>

2768
02:13:10,940 --> 02:13:12,770
<font color="#E5E5E5">these kind</font><font color="#CCCCCC"> of approaches in part</font><font color="#E5E5E5"> two and</font>

2769
02:13:12,770 --> 02:13:13,969
we<font color="#E5E5E5"> can talk about it</font><font color="#CCCCCC"> more on the forum</font>

2770
02:13:13,969 --> 02:13:15,590
<font color="#E5E5E5">and hopefully you get the</font><font color="#CCCCCC"> idea the one</font>

2771
02:13:15,590 --> 02:13:18,199
thing that<font color="#CCCCCC"> totally skipped over</font><font color="#E5E5E5"> was how</font>

2772
02:13:18,199 --> 02:13:21,710
do we actually ask for<font color="#CCCCCC"> that particular</font>

2773
02:13:21,710 --> 02:13:23,780
<font color="#E5E5E5">layer</font><font color="#CCCCCC"> okay and I'll let you read</font><font color="#E5E5E5"> about</font>

2774
02:13:23,780 --> 02:13:25,670
this<font color="#E5E5E5"> during</font><font color="#CCCCCC"> the week but basically</font>

2775
02:13:25,670 --> 02:13:31,810
there's a thing called a hook<font color="#E5E5E5"> so we said</font>

2776
02:13:31,960 --> 02:13:35,210
we called save features which is this

2777
02:13:35,210 --> 02:13:37,370
little<font color="#E5E5E5"> class that we wrote that goes</font>

2778
02:13:37,370 --> 02:13:40,070
register<font color="#CCCCCC"> forward hook and basically</font><font color="#E5E5E5"> a</font>

2779
02:13:40,070 --> 02:13:42,980
forward hook is a special PI torch thing

2780
02:13:42,980 --> 02:13:45,949
that every time<font color="#E5E5E5"> it calculates a layer it</font>

2781
02:13:45,949 --> 02:13:48,880
runs this function it's like a<font color="#E5E5E5"> callback</font>

2782
02:13:48,880 --> 02:13:50,810
basically it's like a callback<font color="#E5E5E5"> that</font>

2783
02:13:50,810 --> 02:13:52,250
<font color="#E5E5E5">happens every time it calculates a layer</font>

2784
02:13:52,250 --> 02:13:55,909
and so in this<font color="#E5E5E5"> case it</font><font color="#CCCCCC"> just saved the</font>

2785
02:13:55,909 --> 02:13:59,060
value of the particular layer that<font color="#E5E5E5"> I was</font>

2786
02:13:59,060 --> 02:14:02,360
<font color="#CCCCCC">interested in okay</font><font color="#E5E5E5"> and so that</font><font color="#CCCCCC"> way I was</font>

2787
02:14:02,360 --> 02:14:04,159
<font color="#E5E5E5">able</font><font color="#CCCCCC"> to go inside here and</font><font color="#E5E5E5"> grab those</font>

2788
02:14:04,159 --> 02:14:10,909
features out look<font color="#E5E5E5"> after I was done okay</font>

2789
02:14:10,909 --> 02:14:13,730
so<font color="#E5E5E5"> I call save features</font><font color="#CCCCCC"> that gives</font><font color="#E5E5E5"> me my</font>

2790
02:14:13,730 --> 02:14:15,980
pork and then later on<font color="#E5E5E5"> I can</font><font color="#CCCCCC"> just grab</font>

2791
02:14:15,980 --> 02:14:18,800
<font color="#CCCCCC">the</font><font color="#E5E5E5"> value that I saved okay so I skipped</font>

2792
02:14:18,800 --> 02:14:19,340
over<font color="#CCCCCC"> that pretty</font>

2793
02:14:19,340 --> 02:14:20,840
quickly but if you look<font color="#CCCCCC"> in the pipe or</font>

2794
02:14:20,840 --> 02:14:22,760
<font color="#E5E5E5">docks</font><font color="#CCCCCC"> they have some more information</font>

2795
02:14:22,760 --> 02:14:28,190
and help<font color="#E5E5E5"> about that</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> Jeremy can you</font>

2796
02:14:28,190 --> 02:14:31,699
<font color="#E5E5E5">spend five minutes</font><font color="#CCCCCC"> talking about your</font>

2797
02:14:31,699 --> 02:14:34,719
journey into<font color="#E5E5E5"> deep learning</font>

2798
02:14:34,719 --> 02:14:39,340
yeah and finally how can<font color="#CCCCCC"> we keep</font><font color="#E5E5E5"> up with</font>

2799
02:14:39,340 --> 02:14:42,050
important research that<font color="#CCCCCC"> is important to</font>

2800
02:14:42,050 --> 02:14:46,070
<font color="#E5E5E5">practice</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so it's gonna that's</font>

2801
02:14:46,070 --> 02:14:47,360
good I think I'll close<font color="#E5E5E5"> more</font><font color="#CCCCCC"> on the</font>

2802
02:14:47,360 --> 02:14:50,090
latter bit<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is like what now</font><font color="#CCCCCC"> okay</font>

2803
02:14:50,090 --> 02:14:55,099
so for those of<font color="#E5E5E5"> you are</font><font color="#CCCCCC"> interested you</font>

2804
02:14:55,099 --> 02:14:57,260
<font color="#CCCCCC">should aim to come back for part</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> if</font>

2805
02:14:57,260 --> 02:14:59,270
you're<font color="#CCCCCC"> aiming to come back for part two</font>

2806
02:14:59,270 --> 02:15:00,710
how many<font color="#E5E5E5"> people would like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> come</font><font color="#CCCCCC"> back</font>

2807
02:15:00,710 --> 02:15:02,989
<font color="#CCCCCC">to part</font><font color="#E5E5E5"> two okay that's not bad</font><font color="#CCCCCC"> I think</font>

2808
02:15:02,989 --> 02:15:05,810
<font color="#E5E5E5">almost everybody</font><font color="#CCCCCC"> so if you want to come</font>

2809
02:15:05,810 --> 02:15:08,780
back to part two<font color="#E5E5E5"> be aware of this by</font>

2810
02:15:08,780 --> 02:15:10,849
that time you're expected to<font color="#E5E5E5"> have</font>

2811
02:15:10,849 --> 02:15:12,469
mastered all of<font color="#CCCCCC"> the techniques we've</font>

2812
02:15:12,469 --> 02:15:14,210
learnt in part<font color="#E5E5E5"> one and there's</font><font color="#CCCCCC"> plenty of</font>

2813
02:15:14,210 --> 02:15:16,280
time between<font color="#E5E5E5"> now and then okay even if</font>

2814
02:15:16,280 --> 02:15:18,800
you<font color="#E5E5E5"> haven't done much or any ml before</font>

2815
02:15:18,800 --> 02:15:20,960
<font color="#E5E5E5">but it does assume that you're going</font><font color="#CCCCCC"> to</font>

2816
02:15:20,960 --> 02:15:23,750
<font color="#E5E5E5">be working you know at the same level of</font>

2817
02:15:23,750 --> 02:15:25,760
intensity<font color="#CCCCCC"> for now until</font><font color="#E5E5E5"> then that you</font>

2818
02:15:25,760 --> 02:15:27,980
have<font color="#CCCCCC"> been with practicing right so</font>

2819
02:15:27,980 --> 02:15:30,469
practicing so generally speaking<font color="#E5E5E5"> the</font>

2820
02:15:30,469 --> 02:15:32,179
people<font color="#CCCCCC"> who did well</font><font color="#E5E5E5"> in part two last</font>

2821
02:15:32,179 --> 02:15:34,219
<font color="#E5E5E5">year had watched each of the</font><font color="#CCCCCC"> videos</font>

2822
02:15:34,219 --> 02:15:36,980
about three times<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and some</font><font color="#E5E5E5"> of the</font>

2823
02:15:36,980 --> 02:15:39,500
people<font color="#CCCCCC"> actually I knew had actually</font>

2824
02:15:39,500 --> 02:15:40,610
<font color="#CCCCCC">discovered they learnt some of them off</font>

2825
02:15:40,610 --> 02:15:42,590
by heart<font color="#E5E5E5"> by mistake so they're like</font>

2826
02:15:42,590 --> 02:15:44,000
watching the video is again is helpful

2827
02:15:44,000 --> 02:15:45,770
and make sure you<font color="#E5E5E5"> get to the point that</font>

2828
02:15:45,770 --> 02:15:48,349
<font color="#CCCCCC">you can recreate the notebooks</font><font color="#E5E5E5"> without</font>

2829
02:15:48,349 --> 02:15:50,810
watching<font color="#CCCCCC"> the videos</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> and so</font>

2830
02:15:50,810 --> 02:15:51,710
other<font color="#E5E5E5"> men make more interesting</font>

2831
02:15:51,710 --> 02:15:53,630
<font color="#CCCCCC">obviously</font><font color="#E5E5E5"> try and recreate them</font>

2832
02:15:53,630 --> 02:15:57,440
<font color="#E5E5E5">notebooks using different data sets</font><font color="#CCCCCC"> you</font>

2833
02:15:57,440 --> 02:16:00,020
know and definitely<font color="#E5E5E5"> then just keep up</font>

2834
02:16:00,020 --> 02:16:01,460
with the forum and<font color="#E5E5E5"> you'll see</font><font color="#CCCCCC"> people</font>

2835
02:16:01,460 --> 02:16:04,159
keep on<font color="#E5E5E5"> posting more stuff about recent</font>

2836
02:16:04,159 --> 02:16:07,070
papers and recent advances and over the

2837
02:16:07,070 --> 02:16:08,540
next<font color="#E5E5E5"> couple of months you'll find</font>

2838
02:16:08,540 --> 02:16:10,659
increasingly<font color="#E5E5E5"> less and less of it seems</font>

2839
02:16:10,659 --> 02:16:13,219
weird<font color="#CCCCCC"> mysterious and</font><font color="#E5E5E5"> more and more</font><font color="#CCCCCC"> of it</font>

2840
02:16:13,219 --> 02:16:17,030
makes perfect<font color="#E5E5E5"> sense</font><font color="#CCCCCC"> and so it's a bit</font><font color="#E5E5E5"> of</font>

2841
02:16:17,030 --> 02:16:19,369
a case with<font color="#CCCCCC"> just</font><font color="#E5E5E5"> thing staying tenacious</font>

2842
02:16:19,369 --> 02:16:20,719
<font color="#E5E5E5">you know there's always going to be</font>

2843
02:16:20,719 --> 02:16:23,000
stuff<font color="#CCCCCC"> that you don't understand yet</font><font color="#E5E5E5"> and</font>

2844
02:16:23,000 --> 02:16:25,849
but you'll be<font color="#E5E5E5"> surprised if you go back</font>

2845
02:16:25,849 --> 02:16:28,159
to lesson<font color="#CCCCCC"> one and</font><font color="#E5E5E5"> two now you'll be like</font>

2846
02:16:28,159 --> 02:16:32,380
oh that's<font color="#E5E5E5"> all trivial right</font>

2847
02:16:32,380 --> 02:16:34,360
so you know that's kind<font color="#CCCCCC"> of hopefully a</font>

2848
02:16:34,360 --> 02:16:38,680
bit of<font color="#E5E5E5"> your learning journey</font><font color="#CCCCCC"> and yeah I</font>

2849
02:16:38,680 --> 02:16:40,780
<font color="#E5E5E5">think the main thing I've noticed is</font>

2850
02:16:40,780 --> 02:16:42,251
<font color="#CCCCCC">that people who succeed are the ones who</font>

2851
02:16:42,251 --> 02:16:44,770
just<font color="#CCCCCC"> keep keep working at it you know so</font>

2852
02:16:44,770 --> 02:16:46,719
not coming back here every Monday you're

2853
02:16:46,719 --> 02:16:48,520
not going to have<font color="#E5E5E5"> that forcing function</font>

2854
02:16:48,520 --> 02:16:51,460
I've noticed<font color="#E5E5E5"> the</font><font color="#CCCCCC"> forum suddenly gets</font>

2855
02:16:51,460 --> 02:16:53,710
busy at<font color="#CCCCCC"> 5:00 p.m. on a Monday you</font><font color="#E5E5E5"> know</font>

2856
02:16:53,710 --> 02:16:55,690
<font color="#CCCCCC">it's like Oh</font><font color="#E5E5E5"> course is</font><font color="#CCCCCC"> about to start</font>

2857
02:16:55,690 --> 02:16:57,040
<font color="#E5E5E5">and suddenly these questions start</font>

2858
02:16:57,040 --> 02:16:58,600
coming in so now that<font color="#E5E5E5"> you don't have</font>

2859
02:16:58,600 --> 02:17:00,850
<font color="#E5E5E5">that forcing function you know try and</font>

2860
02:17:00,850 --> 02:17:03,581
<font color="#E5E5E5">use some other technique to you know</font>

2861
02:17:03,581 --> 02:17:05,110
give yourself<font color="#CCCCCC"> that little kick maybe</font><font color="#E5E5E5"> you</font>

2862
02:17:05,110 --> 02:17:06,671
can<font color="#E5E5E5"> tell your partner at home</font>

2863
02:17:06,671 --> 02:17:08,440
you know<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to try and produce</font>

2864
02:17:08,440 --> 02:17:10,001
something every Saturday<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the next</font>

2865
02:17:10,001 --> 02:17:11,440
<font color="#E5E5E5">four weeks</font><font color="#CCCCCC"> or I'm</font><font color="#E5E5E5"> going to try and</font>

2866
02:17:11,440 --> 02:17:13,990
finish<font color="#E5E5E5"> reading this paper or</font><font color="#CCCCCC"> something</font>

2867
02:17:13,990 --> 02:17:17,380
you know<font color="#E5E5E5"> anyway so I hope to see you all</font>

2868
02:17:17,380 --> 02:17:21,190
back in March<font color="#E5E5E5"> and even</font><font color="#CCCCCC"> I regardless</font>

2869
02:17:21,190 --> 02:17:22,480
whether I do or don't<font color="#E5E5E5"> it's been a really</font>

2870
02:17:22,480 --> 02:17:24,190
<font color="#E5E5E5">great pleasure to get to know you</font><font color="#CCCCCC"> all</font>

2871
02:17:24,190 --> 02:17:26,501
and I<font color="#E5E5E5"> hope to keep seeing on the forum</font>

2872
02:17:26,501 --> 02:17:29,270
thanks<font color="#E5E5E5"> very much</font>

2873
02:17:29,270 --> 00:00:00,000
[Applause]

