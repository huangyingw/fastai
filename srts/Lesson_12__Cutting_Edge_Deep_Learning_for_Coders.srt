1
00:00:00,560 --> 00:00:04,460
so I recognize that<font color="#CCCCCC"> by going back to</font>

2
00:00:04,460 --> 00:00:09,300
clustering<font color="#CCCCCC"> we're going to talk about</font>

3
00:00:09,300 --> 00:00:11,010
clustering again in the next lesson or

4
00:00:11,010 --> 00:00:15,750
two in terms<font color="#E5E5E5"> of an application of it but</font>

5
00:00:15,750 --> 00:00:18,670
<font color="#E5E5E5">specifically what I wanted to do was</font>

6
00:00:18,670 --> 00:00:22,060
show you<font color="#E5E5E5"> k-means clustering intensive</font>

7
00:00:22,060 --> 00:00:25,920
<font color="#CCCCCC">love it</font><font color="#E5E5E5"> is stay on</font>

8
00:00:25,920 --> 00:00:28,010
<font color="#E5E5E5">um</font>

9
00:00:28,660 --> 00:00:30,740
there are some things<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is easier to</font>

10
00:00:30,740 --> 00:00:32,479
<font color="#E5E5E5">do intensive flows and play torch</font>

11
00:00:32,479 --> 00:00:34,610
mainly because<font color="#CCCCCC"> tensorflow kind of has a</font>

12
00:00:34,610 --> 00:00:40,250
more complete<font color="#CCCCCC"> API at so far so there are</font>

13
00:00:40,250 --> 00:00:42,530
some<font color="#E5E5E5"> things that are</font><font color="#CCCCCC"> just yellow content</font>

14
00:00:42,530 --> 00:00:43,610
<font color="#CCCCCC">to</font><font color="#E5E5E5"> float</font><font color="#CCCCCC"> if like oh there's already a</font>

15
00:00:43,610 --> 00:00:45,379
method that<font color="#E5E5E5"> does that but there</font><font color="#CCCCCC"> isn't</font>

16
00:00:45,379 --> 00:00:47,960
<font color="#E5E5E5">one in pi torch and so something and</font>

17
00:00:47,960 --> 00:00:49,309
some things are<font color="#CCCCCC"> just a bit</font><font color="#E5E5E5"> easier neater</font>

18
00:00:49,309 --> 00:00:53,090
in<font color="#CCCCCC"> gentle flow than</font><font color="#E5E5E5"> implied torch</font><font color="#CCCCCC"> and I</font>

19
00:00:53,090 --> 00:00:55,670
actually found k-means<font color="#E5E5E5"> quite easy to do</font>

20
00:00:55,670 --> 00:00:56,960
but what I'm<font color="#E5E5E5"> going to do is I'm</font><font color="#CCCCCC"> going to</font>

21
00:00:56,960 --> 00:00:59,809
try and show you a way<font color="#CCCCCC"> to write custom</font>

22
00:00:59,809 --> 00:01:02,750
<font color="#E5E5E5">tensor flow code in a kind of a really</font>

23
00:01:02,750 --> 00:01:05,089
<font color="#CCCCCC">pie torchy way</font><font color="#E5E5E5"> right and a kind of an</font>

24
00:01:05,089 --> 00:01:07,250
interactivity way<font color="#E5E5E5"> and we're going</font><font color="#CCCCCC"> to try</font>

25
00:01:07,250 --> 00:01:11,710
<font color="#E5E5E5">and avoid all of the you know fancy</font>

26
00:01:11,710 --> 00:01:14,869
<font color="#CCCCCC">sz√©chenyi graphics kopi</font><font color="#E5E5E5"> business as</font>

27
00:01:14,869 --> 00:01:20,750
much as<font color="#CCCCCC"> possible so to remind you that</font>

28
00:01:20,750 --> 00:01:22,550
where we kind<font color="#E5E5E5"> of initially claimed at</font>

29
00:01:22,550 --> 00:01:24,770
clustering was to say hey what<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we</font>

30
00:01:24,770 --> 00:01:30,080
were doing<font color="#CCCCCC"> lung cancer detection in CT</font>

31
00:01:30,080 --> 00:01:33,229
scans<font color="#E5E5E5"> and these were</font><font color="#CCCCCC"> like 512 by 512 by</font>

32
00:01:33,229 --> 00:01:36,890
200<font color="#E5E5E5"> volumetric things which is too big</font>

33
00:01:36,890 --> 00:01:39,310
<font color="#E5E5E5">to really run a whole</font><font color="#CCCCCC"> CNN over</font>

34
00:01:39,310 --> 00:01:43,250
conveniently<font color="#E5E5E5"> so one of the thoughts to</font>

35
00:01:43,250 --> 00:01:46,399
fix that<font color="#E5E5E5"> was to run some</font><font color="#CCCCCC"> kind of</font>

36
00:01:46,399 --> 00:01:48,590
heuristic<font color="#CCCCCC"> that found all of</font><font color="#E5E5E5"> the things</font>

37
00:01:48,590 --> 00:01:50,560
that<font color="#E5E5E5"> look like they</font><font color="#CCCCCC"> could vaguely be</font>

38
00:01:50,560 --> 00:01:53,840
<font color="#E5E5E5">modules and then create a new data set</font>

39
00:01:53,840 --> 00:01:55,340
where<font color="#E5E5E5"> you basically zoomed</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> each of</font>

40
00:01:55,340 --> 00:01:57,739
those maybe nodules<font color="#CCCCCC"> and created a small</font>

41
00:01:57,739 --> 00:02:01,580
little you know<font color="#E5E5E5"> 20 by 20 by</font><font color="#CCCCCC"> 20 cube or</font>

42
00:02:01,580 --> 00:02:04,700
something<font color="#CCCCCC"> you could then use a 3d CNN on</font>

43
00:02:04,700 --> 00:02:10,970
there or<font color="#E5E5E5"> try planar CNN and I this</font>

44
00:02:10,970 --> 00:02:12,530
<font color="#E5E5E5">general concept I wanted to remind you</font>

45
00:02:12,530 --> 00:02:13,730
<font color="#E5E5E5">about because I feel</font><font color="#CCCCCC"> like it's something</font>

46
00:02:13,730 --> 00:02:17,180
<font color="#E5E5E5">which maybe I haven't stressed enough</font>

47
00:02:17,180 --> 00:02:18,470
I've<font color="#E5E5E5"> kind of kept from showing any ways</font>

48
00:02:18,470 --> 00:02:20,989
of doing this<font color="#CCCCCC"> think back</font><font color="#E5E5E5"> to the lesson 7</font>

49
00:02:20,989 --> 00:02:22,700
with a fish I showed you the bounding

50
00:02:22,700 --> 00:02:24,410
boxes and I showed<font color="#E5E5E5"> you the heat</font><font color="#CCCCCC"> maps</font><font color="#E5E5E5"> so</font>

51
00:02:24,410 --> 00:02:25,670
the reason<font color="#CCCCCC"> for all of that would</font>

52
00:02:25,670 --> 00:02:27,110
basically<font color="#E5E5E5"> to show you how to</font><font color="#CCCCCC"> zoom</font><font color="#E5E5E5"> into</font>

53
00:02:27,110 --> 00:02:29,780
things<font color="#CCCCCC"> and then create new</font><font color="#E5E5E5"> models based</font>

54
00:02:29,780 --> 00:02:34,310
on<font color="#CCCCCC"> those zoom different things so in the</font>

55
00:02:34,310 --> 00:02:37,130
fisheries case you know you could really

56
00:02:37,130 --> 00:02:40,670
<font color="#CCCCCC">just use a lower res CNN</font><font color="#E5E5E5"> to find that</font>

57
00:02:40,670 --> 00:02:41,900
maybe fish and

58
00:02:41,900 --> 00:02:46,189
into<font color="#E5E5E5"> those in the CT scan case maybe we</font>

59
00:02:46,189 --> 00:02:48,170
<font color="#CCCCCC">can't even do that so maybe</font><font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to</font>

60
00:02:48,170 --> 00:02:50,510
use this kind<font color="#E5E5E5"> of mentorship clustering</font>

61
00:02:50,510 --> 00:02:53,390
approach<font color="#CCCCCC"> another thing we necessarily do</font>

62
00:02:53,390 --> 00:02:54,590
to be interesting to<font color="#CCCCCC"> see what the</font>

63
00:02:54,590 --> 00:02:57,110
winners use<font color="#E5E5E5"> but certainly particularly</font>

64
00:02:57,110 --> 00:02:58,909
<font color="#E5E5E5">if you</font><font color="#CCCCCC"> don't have lots</font><font color="#E5E5E5"> of time</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> you</font>

65
00:02:58,909 --> 00:03:01,340
have a lot of<font color="#E5E5E5"> data</font><font color="#CCCCCC"> heuristics become</font>

66
00:03:01,340 --> 00:03:04,790
more<font color="#E5E5E5"> and</font><font color="#CCCCCC"> more interesting now the reason</font>

67
00:03:04,790 --> 00:03:07,730
is<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> istic is interesting is you</font>

68
00:03:07,730 --> 00:03:11,030
<font color="#CCCCCC">can do something quickly</font><font color="#E5E5E5"> an approximate</font>

69
00:03:11,030 --> 00:03:12,439
<font color="#E5E5E5">that could have lots and</font><font color="#CCCCCC"> lots and lots</font>

70
00:03:12,439 --> 00:03:15,019
of false positives<font color="#E5E5E5"> and it doesn't really</font>

71
00:03:15,019 --> 00:03:16,760
matter<font color="#CCCCCC"> right because you know</font><font color="#E5E5E5"> those</font>

72
00:03:16,760 --> 00:03:19,340
false<font color="#CCCCCC"> positives means just you know</font>

73
00:03:19,340 --> 00:03:21,079
extra data that you're feeding to your

74
00:03:21,079 --> 00:03:24,440
you<font color="#E5E5E5"> know your real model so you can</font>

75
00:03:24,440 --> 00:03:26,120
<font color="#CCCCCC">always tune it it's like</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> how much</font>

76
00:03:26,120 --> 00:03:28,670
<font color="#CCCCCC">time have I got to train my real model</font>

77
00:03:28,670 --> 00:03:30,260
and then I can decide<font color="#CCCCCC"> how many false</font>

78
00:03:30,260 --> 00:03:30,859
<font color="#CCCCCC">positives</font>

79
00:03:30,859 --> 00:03:33,620
I can I can<font color="#E5E5E5"> handle so as long</font><font color="#CCCCCC"> as you're</font>

80
00:03:33,620 --> 00:03:35,659
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> pre processing model</font><font color="#CCCCCC"> is better</font>

81
00:03:35,659 --> 00:03:36,200
than nothing

82
00:03:36,200 --> 00:03:40,159
go you know you can use<font color="#CCCCCC"> it to get</font><font color="#E5E5E5"> rid</font><font color="#CCCCCC"> of</font>

83
00:03:40,159 --> 00:03:41,829
some<font color="#CCCCCC"> of the stuff that like</font><font color="#E5E5E5"> is clearly</font>

84
00:03:41,829 --> 00:03:44,989
not a nodule<font color="#CCCCCC"> for example for example</font>

85
00:03:44,989 --> 00:03:47,629
<font color="#CCCCCC">anything that is like in the</font><font color="#E5E5E5"> middle of</font>

86
00:03:47,629 --> 00:03:49,970
the lung wall is not a nodule<font color="#E5E5E5"> another</font>

87
00:03:49,970 --> 00:03:52,940
thing that is you know or<font color="#CCCCCC"> whitespace</font><font color="#E5E5E5"> is</font>

88
00:03:52,940 --> 00:03:57,919
not a nodule<font color="#E5E5E5"> so forth okay so we talked</font>

89
00:03:57,919 --> 00:04:00,829
about mean shift clustering<font color="#CCCCCC"> and how the</font>

90
00:04:00,829 --> 00:04:06,290
big benefit<font color="#CCCCCC"> of it is that it allows us</font>

91
00:04:06,290 --> 00:04:09,859
<font color="#CCCCCC">to</font><font color="#E5E5E5"> build clusters without knowing how</font>

92
00:04:09,859 --> 00:04:13,760
many clusters<font color="#E5E5E5"> there are at a time</font><font color="#CCCCCC"> also</font>

93
00:04:13,760 --> 00:04:16,668
it<font color="#E5E5E5"> without any special extra work</font><font color="#CCCCCC"> that</font>

94
00:04:16,668 --> 00:04:19,639
allows<font color="#CCCCCC"> us to</font><font color="#E5E5E5"> find clusters which aren't</font>

95
00:04:19,639 --> 00:04:22,130
<font color="#E5E5E5">kind of Gaussian or</font><font color="#CCCCCC"> tharok all if you</font>

96
00:04:22,130 --> 00:04:24,740
like in shape but can<font color="#E5E5E5"> that's really</font>

97
00:04:24,740 --> 00:04:26,270
important<font color="#CCCCCC"> for something</font><font color="#E5E5E5"> like a CT scan</font>

98
00:04:26,270 --> 00:04:27,680
where a<font color="#CCCCCC"> cluster will often be like</font><font color="#E5E5E5"> a</font>

99
00:04:27,680 --> 00:04:29,449
vessel<font color="#E5E5E5"> which is this really skinny long</font>

100
00:04:29,449 --> 00:04:36,849
thing so k-means on the other hand is

101
00:04:36,849 --> 00:04:39,470
faster I think it's N squared rather

102
00:04:39,470 --> 00:04:43,490
than n cubed<font color="#E5E5E5"> time</font><font color="#CCCCCC"> we have talked to you</font>

103
00:04:43,490 --> 00:04:45,770
on the forum about dramatically speeding

104
00:04:45,770 --> 00:04:47,120
up<font color="#CCCCCC"> means shift clustering</font><font color="#E5E5E5"> using</font>

105
00:04:47,120 --> 00:04:48,650
approximate<font color="#E5E5E5"> nearest neighbors which is</font>

106
00:04:48,650 --> 00:04:50,630
something<font color="#CCCCCC"> which we started</font><font color="#E5E5E5"> making</font><font color="#CCCCCC"> some</font>

107
00:04:50,630 --> 00:04:52,400
progress<font color="#E5E5E5"> on</font><font color="#CCCCCC"> today so hopefully we'll</font>

108
00:04:52,400 --> 00:04:53,990
have<font color="#E5E5E5"> results from that maybe by</font><font color="#CCCCCC"> next</font>

109
00:04:53,990 --> 00:04:54,860
week

110
00:04:54,860 --> 00:04:57,229
<font color="#E5E5E5">but the basic naive algorithm is</font>

111
00:04:57,229 --> 00:05:00,530
certainly should<font color="#CCCCCC"> be a lot classed at the</font>

112
00:05:00,530 --> 00:05:02,599
k-means<font color="#E5E5E5"> so there's one good reason to</font>

113
00:05:02,599 --> 00:05:05,780
<font color="#CCCCCC">use it so as per usual</font><font color="#E5E5E5"> you know we can</font>

114
00:05:05,780 --> 00:05:10,849
start with<font color="#E5E5E5"> some listing data and we're</font>

115
00:05:10,849 --> 00:05:12,199
<font color="#E5E5E5">going to try and figure out what where</font>

116
00:05:12,199 --> 00:05:16,370
the<font color="#E5E5E5"> cluster centers are so one quick way</font>

117
00:05:16,370 --> 00:05:21,439
<font color="#CCCCCC">to avoid hassles</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> tensor</font><font color="#E5E5E5"> flow is to</font>

118
00:05:21,439 --> 00:05:24,439
create an interactive<font color="#CCCCCC"> session so an</font>

119
00:05:24,439 --> 00:05:27,199
interactive session<font color="#E5E5E5"> basically means</font><font color="#CCCCCC"> that</font>

120
00:05:27,199 --> 00:05:31,250
you can call that run on a computation

121
00:05:31,250 --> 00:05:34,250
graph which<font color="#E5E5E5"> doesn't return something or</font>

122
00:05:34,250 --> 00:05:36,590
dot<font color="#E5E5E5"> eval on our computation graph that</font>

123
00:05:36,590 --> 00:05:39,349
does<font color="#E5E5E5"> return something</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> don't have</font>

124
00:05:39,349 --> 00:05:42,229
to worry<font color="#E5E5E5"> about creating a graph or a</font>

125
00:05:42,229 --> 00:05:43,969
session or<font color="#CCCCCC"> you know calling having a</font>

126
00:05:43,969 --> 00:05:45,500
session<font color="#E5E5E5"> with the clause or anything like</font>

127
00:05:45,500 --> 00:05:49,279
<font color="#E5E5E5">that it</font><font color="#CCCCCC"> just it just</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> so that's</font>

128
00:05:49,279 --> 00:05:51,770
<font color="#E5E5E5">basically what happens when</font><font color="#CCCCCC"> you call TF</font>

129
00:05:51,770 --> 00:05:54,710
interactive session

130
00:05:54,710 --> 00:05:58,820
<font color="#E5E5E5">okay so by</font><font color="#CCCCCC"> creating an interactive</font>

131
00:05:58,820 --> 00:06:01,680
<font color="#E5E5E5">session we can</font><font color="#CCCCCC"> then</font>

132
00:06:01,680 --> 00:06:03,330
[Music]

133
00:06:03,330 --> 00:06:07,370
and if do<font color="#E5E5E5"> you things one step</font><font color="#CCCCCC"> at a time</font>

134
00:06:07,660 --> 00:06:09,910
so in this case<font color="#E5E5E5"> the first step in</font>

135
00:06:09,910 --> 00:06:14,500
k-means<font color="#E5E5E5"> is to pick some initial</font>

136
00:06:14,500 --> 00:06:16,960
centroids<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> basically start out and</font>

137
00:06:16,960 --> 00:06:18,330
<font color="#CCCCCC">say okay if we're going</font><font color="#E5E5E5"> to create</font>

138
00:06:18,330 --> 00:06:21,070
however many clusters so in this case n

139
00:06:21,070 --> 00:06:25,660
<font color="#E5E5E5">plus tis is six okay then</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> out by</font>

140
00:06:25,660 --> 00:06:27,640
saying<font color="#E5E5E5"> okay well where where</font><font color="#CCCCCC"> might you</font>

141
00:06:27,640 --> 00:06:29,470
know<font color="#E5E5E5"> where might those six clusters be</font>

142
00:06:29,470 --> 00:06:32,380
and for a long time with k-means<font color="#CCCCCC"> people</font>

143
00:06:32,380 --> 00:06:36,160
<font color="#E5E5E5">picked them randomly but most</font>

144
00:06:36,160 --> 00:06:37,870
practitioners<font color="#CCCCCC"> realize that that was a</font>

145
00:06:37,870 --> 00:06:40,270
dumb idea soon enough<font color="#E5E5E5"> and a lot of</font>

146
00:06:40,270 --> 00:06:41,500
people<font color="#CCCCCC"> had various heuristics</font><font color="#E5E5E5"> for</font>

147
00:06:41,500 --> 00:06:44,350
picking<font color="#E5E5E5"> them in 2007 finally a paper was</font>

148
00:06:44,350 --> 00:06:45,520
published<font color="#E5E5E5"> actually suggesting a</font>

149
00:06:45,520 --> 00:06:47,890
heuristic<font color="#CCCCCC"> I tend to</font><font color="#E5E5E5"> use a very simple</font>

150
00:06:47,890 --> 00:06:51,760
heuristic which is what I use<font color="#CCCCCC"> here in</font>

151
00:06:51,760 --> 00:06:54,220
find<font color="#E5E5E5"> initial centroids</font><font color="#CCCCCC"> so to describe</font>

152
00:06:54,220 --> 00:06:57,870
this heuristic<font color="#CCCCCC"> I will show you the code</font>

153
00:06:59,610 --> 00:07:03,160
so find<font color="#CCCCCC"> additional</font><font color="#E5E5E5"> centroids</font><font color="#CCCCCC"> looks like</font>

154
00:07:03,160 --> 00:07:05,740
this<font color="#CCCCCC"> basically and I'm going</font><font color="#E5E5E5"> to run</font>

155
00:07:05,740 --> 00:07:06,850
through<font color="#CCCCCC"> it quickly and</font><font color="#E5E5E5"> then I'll run</font>

156
00:07:06,850 --> 00:07:09,100
through<font color="#E5E5E5"> it slowly basically the idea is</font>

157
00:07:09,100 --> 00:07:14,350
we first of<font color="#E5E5E5"> all pick a single data point</font>

158
00:07:14,350 --> 00:07:17,800
<font color="#E5E5E5">index and then we select</font><font color="#CCCCCC"> that single</font>

159
00:07:17,800 --> 00:07:19,810
data point<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so we have</font><font color="#CCCCCC"> someone</font>

160
00:07:19,810 --> 00:07:22,930
<font color="#E5E5E5">randomly selected data point and then we</font>

161
00:07:22,930 --> 00:07:25,600
find what<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the distance from that</font>

162
00:07:25,600 --> 00:07:28,090
<font color="#E5E5E5">randomly selected data point to every</font>

163
00:07:28,090 --> 00:07:30,600
other data point

164
00:07:30,600 --> 00:07:35,460
and then we say okay<font color="#E5E5E5"> what is the data</font>

165
00:07:35,460 --> 00:07:37,250
point<font color="#E5E5E5"> that is the</font><font color="#CCCCCC"> farthest away</font><font color="#E5E5E5"> from</font>

166
00:07:37,250 --> 00:07:40,860
<font color="#CCCCCC">that</font><font color="#E5E5E5"> randomly selected data point the</font>

167
00:07:40,860 --> 00:07:42,570
<font color="#E5E5E5">index of it and the point itself and</font>

168
00:07:42,570 --> 00:07:44,820
then we say okay we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> append</font>

169
00:07:44,820 --> 00:07:48,240
that to<font color="#CCCCCC"> the initial centroids</font><font color="#E5E5E5"> so say</font>

170
00:07:48,240 --> 00:07:52,140
they picked<font color="#E5E5E5"> at random</font><font color="#CCCCCC"> this plate as my</font>

171
00:07:52,140 --> 00:07:54,330
random<font color="#E5E5E5"> initial point the furthest</font><font color="#CCCCCC"> point</font>

172
00:07:54,330 --> 00:07:56,460
away from<font color="#E5E5E5"> that is probably somewhere</font>

173
00:07:56,460 --> 00:07:58,530
around here<font color="#E5E5E5"> okay so that would be the</font>

174
00:07:58,530 --> 00:08:03,450
first centroid we picked okay we<font color="#E5E5E5"> are now</font>

175
00:08:03,450 --> 00:08:06,090
inside<font color="#E5E5E5"> a loop and we now go back</font><font color="#CCCCCC"> and we</font>

176
00:08:06,090 --> 00:08:08,820
repeat the<font color="#CCCCCC"> process so we now replace our</font>

177
00:08:08,820 --> 00:08:12,390
random point with the actual<font color="#E5E5E5"> first</font>

178
00:08:12,390 --> 00:08:15,000
centroid<font color="#CCCCCC"> and we repeat go through the</font>

179
00:08:15,000 --> 00:08:17,730
<font color="#E5E5E5">live once more so if we had</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> first</font>

180
00:08:17,730 --> 00:08:20,040
centroid here<font color="#E5E5E5"> our second one now might</font>

181
00:08:20,040 --> 00:08:24,630
be<font color="#E5E5E5"> somewhere up here okay so we now have</font>

182
00:08:24,630 --> 00:08:27,870
two centroids<font color="#E5E5E5"> the next time through the</font>

183
00:08:27,870 --> 00:08:29,310
<font color="#E5E5E5">loop therefore</font><font color="#CCCCCC"> this is slightly</font><font color="#E5E5E5"> more</font>

184
00:08:29,310 --> 00:08:31,950
interesting<font color="#CCCCCC"> this all distances</font><font color="#E5E5E5"> we're now</font>

185
00:08:31,950 --> 00:08:34,080
going to<font color="#E5E5E5"> have the distance between every</font>

186
00:08:34,080 --> 00:08:39,320
one of our initial centroids<font color="#CCCCCC"> and every</font>

187
00:08:39,320 --> 00:08:41,969
other data point<font color="#E5E5E5"> that's we've got a</font>

188
00:08:41,969 --> 00:08:43,620
<font color="#E5E5E5">matrix in this case it's going to be two</font>

189
00:08:43,620 --> 00:08:47,460
by<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of data points so then we</font>

190
00:08:47,460 --> 00:08:51,980
say okay<font color="#E5E5E5"> for every data point find the</font>

191
00:08:51,980 --> 00:08:55,440
closest cluster okay so what's<font color="#E5E5E5"> the</font>

192
00:08:55,440 --> 00:08:58,460
distance<font color="#E5E5E5"> to the closest initial centroid</font>

193
00:08:58,460 --> 00:09:02,460
okay and then tell me<font color="#CCCCCC"> which data point</font>

194
00:09:02,460 --> 00:09:06,330
is the<font color="#CCCCCC"> farthest away</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> its closest</font>

195
00:09:06,330 --> 00:09:08,340
initial centroid<font color="#E5E5E5"> so in other words which</font>

196
00:09:08,340 --> 00:09:10,290
data point is the furthest away from<font color="#E5E5E5"> any</font>

197
00:09:10,290 --> 00:09:12,699
centroid

198
00:09:12,699 --> 00:09:16,160
so that's the basic that's the basic

199
00:09:16,160 --> 00:09:19,670
algorithm<font color="#CCCCCC"> so let's look and</font><font color="#E5E5E5"> see how we</font>

200
00:09:19,670 --> 00:09:23,389
<font color="#CCCCCC">actually do that</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> tensorflow</font><font color="#E5E5E5"> so it</font>

201
00:09:23,389 --> 00:09:25,939
looks a lot like numpy except in places

202
00:09:25,939 --> 00:09:29,959
<font color="#CCCCCC">you would expect to see NP we see</font><font color="#E5E5E5"> here</font>

203
00:09:29,959 --> 00:09:32,300
and then we see the API is a little

204
00:09:32,300 --> 00:09:37,220
different<font color="#CCCCCC"> but</font><font color="#E5E5E5"> not too different</font><font color="#CCCCCC"> right so</font>

205
00:09:37,220 --> 00:09:41,089
to get<font color="#E5E5E5"> a random number</font><font color="#CCCCCC"> we can just use</font>

206
00:09:41,089 --> 00:09:44,449
random<font color="#CCCCCC"> uniform we can tell it what type</font>

207
00:09:44,449 --> 00:09:45,949
of<font color="#E5E5E5"> random number we want so we want a</font>

208
00:09:45,949 --> 00:09:47,360
<font color="#E5E5E5">random int because we're trying to get a</font>

209
00:09:47,360 --> 00:09:49,369
random<font color="#E5E5E5"> index so which the choose a</font>

210
00:09:49,369 --> 00:09:51,499
random data point it's<font color="#E5E5E5"> going to be</font>

211
00:09:51,499 --> 00:09:53,329
between<font color="#CCCCCC"> 0 and the amount of data</font><font color="#E5E5E5"> points</font>

212
00:09:53,329 --> 00:09:55,569
<font color="#E5E5E5">we have</font>

213
00:09:55,600 --> 00:10:00,879
<font color="#CCCCCC">so that gives</font><font color="#E5E5E5"> this is some random index</font>

214
00:10:00,879 --> 00:10:04,939
we<font color="#CCCCCC"> can now go ahead and index into our</font>

215
00:10:04,939 --> 00:10:07,160
data<font color="#E5E5E5"> now you'll notice that</font><font color="#CCCCCC"> credits</font>

216
00:10:07,160 --> 00:10:09,740
<font color="#CCCCCC">include</font><font color="#E5E5E5"> V data so what</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> V data when we</font>

217
00:10:09,740 --> 00:10:12,199
said<font color="#CCCCCC"> that when</font><font color="#E5E5E5"> we set up this k-means in</font>

218
00:10:12,199 --> 00:10:15,050
the first place<font color="#E5E5E5"> the data was sent in as</font>

219
00:10:15,050 --> 00:10:17,720
a numpy array and then<font color="#E5E5E5"> I call TS</font>

220
00:10:17,720 --> 00:10:20,449
variable on it now this<font color="#CCCCCC"> is the critical</font>

221
00:10:20,449 --> 00:10:22,779
<font color="#E5E5E5">thing that kind of lets us make</font>

222
00:10:22,779 --> 00:10:27,050
tensorflow<font color="#E5E5E5"> feel more like</font><font color="#CCCCCC"> paper</font><font color="#E5E5E5"> once I</font>

223
00:10:27,050 --> 00:10:30,679
do this data is now basically copied to

224
00:10:30,679 --> 00:10:33,350
the GPU<font color="#CCCCCC"> and so when</font><font color="#E5E5E5"> I'm calling</font>

225
00:10:33,350 --> 00:10:36,679
something<font color="#E5E5E5"> using V data</font><font color="#CCCCCC"> I'm calling this</font>

226
00:10:36,679 --> 00:10:42,230
the<font color="#E5E5E5"> GPU object</font><font color="#CCCCCC"> okay now there's one</font>

227
00:10:42,230 --> 00:10:44,329
<font color="#E5E5E5">thing problematic</font><font color="#CCCCCC"> are to be aware of</font>

228
00:10:44,329 --> 00:10:46,370
which<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the copying does not</font>

229
00:10:46,370 --> 00:10:49,970
<font color="#CCCCCC">actually occur</font><font color="#E5E5E5"> when you write this the</font>

230
00:10:49,970 --> 00:10:55,999
copying occurs when you write this<font color="#CCCCCC"> okay</font>

231
00:10:55,999 --> 00:11:01,069
so<font color="#E5E5E5"> anytime you call TS variable if you</font>

232
00:11:01,069 --> 00:11:04,069
then try<font color="#E5E5E5"> to run something using that</font>

233
00:11:04,069 --> 00:11:05,600
variable<font color="#CCCCCC"> you'll</font><font color="#E5E5E5"> get back an</font>

234
00:11:05,600 --> 00:11:08,149
uninitialized variable error<font color="#CCCCCC"> unless you</font>

235
00:11:08,149 --> 00:11:09,610
call this in the meantime

236
00:11:09,610 --> 00:11:12,610
okay so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> kind of like a</font>

237
00:11:12,610 --> 00:11:15,589
performance<font color="#CCCCCC"> stuff intensive flow where</font>

238
00:11:15,589 --> 00:11:17,119
they try to try<font color="#E5E5E5"> to say okay</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> you can</font>

239
00:11:17,119 --> 00:11:18,499
like set<font color="#CCCCCC"> up lots</font><font color="#E5E5E5"> of variables at once</font>

240
00:11:18,499 --> 00:11:21,620
<font color="#E5E5E5">and then call this initializer and we'll</font>

241
00:11:21,620 --> 00:11:23,690
do<font color="#E5E5E5"> it all at once for you</font>

242
00:11:23,690 --> 00:11:27,470
okay so

243
00:11:28,880 --> 00:11:31,660
earlier on we created this k-means

244
00:11:31,660 --> 00:11:34,970
<font color="#E5E5E5">object</font><font color="#CCCCCC"> we know that in place in when you</font>

245
00:11:34,970 --> 00:11:36,560
create an<font color="#CCCCCC"> object to calls underscore</font>

246
00:11:36,560 --> 00:11:39,110
underscore underscore<font color="#E5E5E5"> underscore at such</font>

247
00:11:39,110 --> 00:11:41,300
a place<font color="#CCCCCC"> and works</font><font color="#E5E5E5"> inside that we copied</font>

248
00:11:41,300 --> 00:11:44,839
<font color="#CCCCCC">the</font><font color="#E5E5E5"> data to</font><font color="#CCCCCC"> the GPU by using TF variable</font>

249
00:11:44,839 --> 00:11:47,449
and then inside find initial<font color="#E5E5E5"> centroids</font>

250
00:11:47,449 --> 00:11:50,690
<font color="#E5E5E5">we can now access that in order</font><font color="#CCCCCC"> to</font>

251
00:11:50,690 --> 00:11:52,730
basically<font color="#E5E5E5"> do calculations involving data</font>

252
00:11:52,730 --> 00:11:55,240
on the GPU

253
00:11:57,800 --> 00:11:59,330
<font color="#CCCCCC">intends to flow pretty much everything</font>

254
00:11:59,330 --> 00:12:02,510
takes and returns a<font color="#E5E5E5"> tensor</font><font color="#CCCCCC"> alright so</font>

255
00:12:02,510 --> 00:12:04,070
when you<font color="#CCCCCC"> create we call random uniform</font>

256
00:12:04,070 --> 00:12:06,200
<font color="#CCCCCC">it's giving us a tensor you know an</font>

257
00:12:06,200 --> 00:12:09,080
array<font color="#CCCCCC"> of</font><font color="#E5E5E5"> random numbers in this case we</font>

258
00:12:09,080 --> 00:12:10,850
just<font color="#E5E5E5"> wanted one of them so we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font>

259
00:12:10,850 --> 00:12:14,180
use TF squeeze to take that tensor<font color="#CCCCCC"> time</font>

260
00:12:14,180 --> 00:12:16,040
turn it into a scalar<font color="#E5E5E5"> because then we're</font>

261
00:12:16,040 --> 00:12:18,290
just indexing into<font color="#E5E5E5"> here to get a single</font>

262
00:12:18,290 --> 00:12:21,279
<font color="#E5E5E5">item back</font>

263
00:12:21,770 --> 00:12:23,570
so now that we've got<font color="#CCCCCC"> that single</font><font color="#E5E5E5"> open</font>

264
00:12:23,570 --> 00:12:27,290
back<font color="#CCCCCC"> we're then expand it back again</font>

265
00:12:27,290 --> 00:12:30,440
into<font color="#CCCCCC"> a</font><font color="#E5E5E5"> tensor because inside our loop</font>

266
00:12:30,440 --> 00:12:33,380
<font color="#CCCCCC">remember this</font><font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to be a list of</font>

267
00:12:33,380 --> 00:12:35,480
initial centroids<font color="#CCCCCC"> that's just that</font><font color="#E5E5E5"> this</font>

268
00:12:35,480 --> 00:12:38,120
list happens to be of<font color="#E5E5E5"> length</font><font color="#CCCCCC"> one at the</font>

269
00:12:38,120 --> 00:12:40,270
moment

270
00:12:40,730 --> 00:12:44,380
so one of these tricks<font color="#E5E5E5"> in</font>

271
00:12:45,640 --> 00:12:48,280
making tensorflow<font color="#E5E5E5"> feel more like a torch</font>

272
00:12:48,280 --> 00:12:52,120
is to use<font color="#E5E5E5"> standard</font><font color="#CCCCCC"> Python</font><font color="#E5E5E5"> loops</font><font color="#CCCCCC"> so in a</font>

273
00:12:52,120 --> 00:12:54,100
<font color="#CCCCCC">lot of tensorflow code where it's kind</font>

274
00:12:54,100 --> 00:12:56,320
of you<font color="#E5E5E5"> know more serious performance</font>

275
00:12:56,320 --> 00:12:58,060
intensive stuff you'll see<font color="#CCCCCC"> people use</font>

276
00:12:58,060 --> 00:13:00,670
like<font color="#CCCCCC"> 10</font><font color="#E5E5E5"> to flow specific loops like T F</font>

277
00:13:00,670 --> 00:13:03,310
dot while or<font color="#E5E5E5"> T</font><font color="#CCCCCC"> F dot scan or map</font><font color="#E5E5E5"> or so</font>

278
00:13:03,310 --> 00:13:06,220
<font color="#E5E5E5">close</font><font color="#CCCCCC"> the challenge with using</font><font color="#E5E5E5"> those</font>

279
00:13:06,220 --> 00:13:07,930
kind of loops is it's<font color="#E5E5E5"> basically creating</font>

280
00:13:07,930 --> 00:13:10,120
<font color="#E5E5E5">a computation graph of</font><font color="#CCCCCC"> that loop you</font>

281
00:13:10,120 --> 00:13:12,910
<font color="#CCCCCC">can't step through which you can't you</font>

282
00:13:12,910 --> 00:13:14,800
know use it<font color="#CCCCCC"> in the normal Python it kind</font>

283
00:13:14,800 --> 00:13:18,040
of<font color="#E5E5E5"> ways so we can just use normal loops</font>

284
00:13:18,040 --> 00:13:19,840
<font color="#E5E5E5">normal</font><font color="#CCCCCC"> plays on</font><font color="#E5E5E5"> words if we're careful</font>

285
00:13:19,840 --> 00:13:22,540
about how we do it<font color="#CCCCCC"> okay so inside our</font>

286
00:13:22,540 --> 00:13:25,480
normal place and loop we can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> normal</font>

287
00:13:25,480 --> 00:13:28,540
Python functions<font color="#CCCCCC"> so here's a function I</font>

288
00:13:28,540 --> 00:13:31,090
created which calculates the distance

289
00:13:31,090 --> 00:13:33,010
<font color="#CCCCCC">between</font><font color="#E5E5E5"> everything in this tensor</font>

290
00:13:33,010 --> 00:13:34,840
<font color="#E5E5E5">compared to everything in this tensor</font>

291
00:13:34,840 --> 00:13:41,800
<font color="#E5E5E5">all right so all distances it looks very</font>

292
00:13:41,800 --> 00:13:43,330
familiar<font color="#CCCCCC"> because it looks a lot like the</font>

293
00:13:43,330 --> 00:13:46,750
pay torch code we had right so we<font color="#CCCCCC"> for</font>

294
00:13:46,750 --> 00:13:49,420
the first array<font color="#E5E5E5"> for the first</font><font color="#CCCCCC"> chancer we</font>

295
00:13:49,420 --> 00:13:53,980
add an additional access to access<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and</font>

296
00:13:53,980 --> 00:13:55,450
for<font color="#E5E5E5"> the second we add an additional</font>

297
00:13:55,450 --> 00:13:59,230
access<font color="#E5E5E5"> to access</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> so the reason this</font>

298
00:13:59,230 --> 00:14:05,940
works is because of broadcasting so a

299
00:14:05,940 --> 00:14:11,890
when it starts out is a vector now<font color="#E5E5E5"> and B</font>

300
00:14:11,890 --> 00:14:17,440
is a vector now is with a a column or

301
00:14:17,440 --> 00:14:20,730
<font color="#CCCCCC">add a a row what's the orientation of it</font>

302
00:14:20,730 --> 00:14:22,990
well the answer is it's both<font color="#E5E5E5"> in it's</font>

303
00:14:22,990 --> 00:14:25,750
neither right it's<font color="#E5E5E5"> one-dimensional so it</font>

304
00:14:25,750 --> 00:14:27,580
has no concept of<font color="#CCCCCC"> what direction</font><font color="#E5E5E5"> is</font>

305
00:14:27,580 --> 00:14:30,730
looking<font color="#E5E5E5"> right so at this so then what we</font>

306
00:14:30,730 --> 00:14:36,040
do<font color="#CCCCCC"> is we said</font><font color="#E5E5E5"> expanding</font><font color="#CCCCCC"> an ax is zero so</font>

307
00:14:36,040 --> 00:14:37,870
that's roads right<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> basically</font>

308
00:14:37,870 --> 00:14:40,080
says<font color="#CCCCCC"> to a ok</font><font color="#E5E5E5"> you are</font><font color="#CCCCCC"> now</font>

309
00:14:40,080 --> 00:14:43,120
definitely a row vector<font color="#CCCCCC"> right you now</font>

310
00:14:43,120 --> 00:14:47,080
have<font color="#CCCCCC"> one row</font><font color="#E5E5E5"> and however many columns</font>

311
00:14:47,080 --> 00:14:49,480
<font color="#E5E5E5">same as before and then where else with</font>

312
00:14:49,480 --> 00:14:54,580
B we add an axis at<font color="#E5E5E5"> the end right so B</font>

313
00:14:54,580 --> 00:14:57,970
is now<font color="#E5E5E5"> definitely a column vector</font><font color="#CCCCCC"> ax</font>

314
00:14:57,970 --> 00:14:59,560
<font color="#E5E5E5">that now has one</font>

315
00:14:59,560 --> 00:15:01,750
<font color="#E5E5E5">column and however many rows</font><font color="#CCCCCC"> we had</font>

316
00:15:01,750 --> 00:15:06,490
before<font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> broadcasting what</font>

317
00:15:06,490 --> 00:15:09,880
happens is that<font color="#CCCCCC"> this one gets broadcast</font>

318
00:15:09,880 --> 00:15:14,140
<font color="#CCCCCC">to</font><font color="#E5E5E5"> this length and this</font><font color="#CCCCCC"> one gets</font>

319
00:15:14,140 --> 00:15:18,010
broadcast<font color="#E5E5E5"> to this length so</font><font color="#CCCCCC"> we end up</font>

320
00:15:18,010 --> 00:15:21,850
<font color="#E5E5E5">with a matrix containing the difference</font>

321
00:15:21,850 --> 00:15:24,100
between every one of<font color="#E5E5E5"> these</font><font color="#CCCCCC"> items</font><font color="#E5E5E5"> and</font>

322
00:15:24,100 --> 00:15:27,790
every one of<font color="#E5E5E5"> these</font><font color="#CCCCCC"> items so that's like</font>

323
00:15:27,790 --> 00:15:31,570
this kind<font color="#CCCCCC"> of simple but powerful concept</font>

324
00:15:31,570 --> 00:15:34,350
of how<font color="#E5E5E5"> we can do you know very fast</font>

325
00:15:34,350 --> 00:15:38,170
<font color="#E5E5E5">gpu-accelerated loops and less code than</font>

326
00:15:38,170 --> 00:15:39,640
<font color="#CCCCCC">it would have taken to actually write</font>

327
00:15:39,640 --> 00:15:41,440
the<font color="#CCCCCC"> loop</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we don't have to worry</font>

328
00:15:41,440 --> 00:15:43,450
about<font color="#E5E5E5"> out of bounds conditions or</font>

329
00:15:43,450 --> 00:15:45,760
<font color="#E5E5E5">anything like that it's all done for us</font>

330
00:15:45,760 --> 00:15:48,910
<font color="#CCCCCC">so that's the trick here right</font><font color="#E5E5E5"> and once</font>

331
00:15:48,910 --> 00:15:51,070
you've got that matrix because<font color="#CCCCCC"> intensive</font>

332
00:15:51,070 --> 00:15:54,640
flow everything<font color="#E5E5E5"> is a tensor</font><font color="#CCCCCC"> we can call</font>

333
00:15:54,640 --> 00:15:57,910
squared difference<font color="#CCCCCC"> rather</font><font color="#E5E5E5"> than just</font>

334
00:15:57,910 --> 00:15:59,500
regular difference<font color="#E5E5E5"> and it gives us the</font>

335
00:15:59,500 --> 00:16:01,330
squares of<font color="#E5E5E5"> those differences and then we</font>

336
00:16:01,330 --> 00:16:04,420
can sum over the last axis<font color="#E5E5E5"> so the last</font>

337
00:16:04,420 --> 00:16:07,630
access is the dimensions<font color="#E5E5E5"> right so we're</font>

338
00:16:07,630 --> 00:16:10,420
just<font color="#E5E5E5"> screwing</font><font color="#CCCCCC"> your Euclidean distance</font>

339
00:16:10,420 --> 00:16:14,380
here<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so that's that's all this code</font>

340
00:16:14,380 --> 00:16:17,350
does<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so this gives us every</font>

341
00:16:17,350 --> 00:16:19,210
distance between every Anand of a and

342
00:16:19,210 --> 00:16:21,560
every<font color="#E5E5E5"> element of B</font>

343
00:16:21,560 --> 00:16:27,680
<font color="#E5E5E5">okay so that's how we get to this point</font>

344
00:16:27,960 --> 00:16:31,050
so then let's say we've gone through<font color="#E5E5E5"> a</font>

345
00:16:31,050 --> 00:16:33,270
<font color="#CCCCCC">couple of</font><font color="#E5E5E5"> loops right so at that bar for</font>

346
00:16:33,270 --> 00:16:34,800
<font color="#E5E5E5">a couple of loops</font><font color="#CCCCCC"> our is going to</font>

347
00:16:34,800 --> 00:16:39,899
contain a few initial<font color="#E5E5E5"> centroids so we</font>

348
00:16:39,899 --> 00:16:44,339
now want to basically find<font color="#E5E5E5"> out for every</font>

349
00:16:44,339 --> 00:16:47,399
point<font color="#CCCCCC"> how far away</font><font color="#E5E5E5"> is it</font><font color="#CCCCCC"> from its</font>

350
00:16:47,399 --> 00:16:49,370
nearest<font color="#E5E5E5"> initial centroid</font>

351
00:16:49,370 --> 00:16:54,180
so when we go reduce<font color="#CCCCCC"> men</font>

352
00:16:54,180 --> 00:16:57,990
with<font color="#E5E5E5"> access equal zero then</font><font color="#CCCCCC"> we know that</font>

353
00:16:57,990 --> 00:17:00,900
<font color="#E5E5E5">that's going over the axis here because</font>

354
00:17:00,900 --> 00:17:02,580
<font color="#E5E5E5">that's what we put into our or distances</font>

355
00:17:02,580 --> 00:17:06,800
function<font color="#CCCCCC"> so it's going</font><font color="#E5E5E5"> to go through</font>

356
00:17:06,920 --> 00:17:09,780
like<font color="#E5E5E5"> it's reducing across that into that</font>

357
00:17:09,780 --> 00:17:11,220
axis so it's actually reducing across

358
00:17:11,220 --> 00:17:14,310
our centroids<font color="#CCCCCC"> so at the</font><font color="#E5E5E5"> end of this it</font>

359
00:17:14,310 --> 00:17:18,690
says<font color="#CCCCCC"> alright this is for every piece</font><font color="#E5E5E5"> of</font>

360
00:17:18,690 --> 00:17:21,480
our data how far it<font color="#E5E5E5"> is away from its</font>

361
00:17:21,480 --> 00:17:26,640
nearest<font color="#E5E5E5"> centroid</font><font color="#CCCCCC"> okay and that returns</font>

362
00:17:26,640 --> 00:17:28,500
<font color="#CCCCCC">the actual distance right because we</font>

363
00:17:28,500 --> 00:17:31,980
said do the actual min<font color="#E5E5E5"> so there's a</font>

364
00:17:31,980 --> 00:17:34,590
difference between men<font color="#E5E5E5"> and argh</font>

365
00:17:34,590 --> 00:17:37,590
the<font color="#E5E5E5"> argh version so</font><font color="#CCCCCC"> arc max then says</font>

366
00:17:37,590 --> 00:17:41,700
<font color="#CCCCCC">okay now</font><font color="#E5E5E5"> go through all of the points we</font>

367
00:17:41,700 --> 00:17:43,020
now know how far away<font color="#E5E5E5"> they are from</font>

368
00:17:43,020 --> 00:17:46,080
their closest centroid<font color="#E5E5E5"> and tell me the</font>

369
00:17:46,080 --> 00:17:50,000
index of the one which is<font color="#CCCCCC"> furthest away</font>

370
00:17:50,000 --> 00:17:53,250
<font color="#CCCCCC">right so Arg max</font><font color="#E5E5E5"> is a super handy</font>

371
00:17:53,250 --> 00:17:54,810
function we used it quite a bit<font color="#E5E5E5"> in part</font>

372
00:17:54,810 --> 00:17:58,050
<font color="#CCCCCC">one of the course but</font><font color="#E5E5E5"> it's well worth</font>

373
00:17:58,050 --> 00:17:59,880
<font color="#E5E5E5">making sure we understand how it works</font>

374
00:17:59,880 --> 00:18:04,020
I think<font color="#CCCCCC"> intensive flow there</font><font color="#E5E5E5"> I think</font>

375
00:18:04,020 --> 00:18:05,400
<font color="#E5E5E5">they're getting rid</font><font color="#CCCCCC"> of these reduced</font>

376
00:18:05,400 --> 00:18:08,430
<font color="#E5E5E5">underscore prefixes</font><font color="#CCCCCC"> I'm not sure I think</font>

377
00:18:08,430 --> 00:18:11,700
<font color="#CCCCCC">I read that</font><font color="#E5E5E5"> somewhere</font><font color="#CCCCCC"> so in some version</font>

378
00:18:11,700 --> 00:18:13,890
you may find<font color="#E5E5E5"> this is called mean rather</font>

379
00:18:13,890 --> 00:18:16,680
than reduced min<font color="#CCCCCC"> I certainly hope they</font>

380
00:18:16,680 --> 00:18:19,770
are for those<font color="#E5E5E5"> of</font><font color="#CCCCCC"> you who</font><font color="#E5E5E5"> don't have such</font>

381
00:18:19,770 --> 00:18:21,170
a computer<font color="#E5E5E5"> science background</font><font color="#CCCCCC"> a</font>

382
00:18:21,170 --> 00:18:23,400
reduction<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> means taking</font>

383
00:18:23,400 --> 00:18:24,840
<font color="#E5E5E5">something in a higher dimension and</font>

384
00:18:24,840 --> 00:18:26,370
squishing it down into something<font color="#CCCCCC"> that's</font>

385
00:18:26,370 --> 00:18:29,250
a lower dimension for example<font color="#E5E5E5"> summing a</font>

386
00:18:29,250 --> 00:18:31,380
vector<font color="#CCCCCC"> entering into it into</font><font color="#E5E5E5"> a scalar</font>

387
00:18:31,380 --> 00:18:33,710
<font color="#E5E5E5">this quarter reduction so it was a very</font>

388
00:18:33,710 --> 00:18:36,360
tensorflow<font color="#E5E5E5"> API assuming that</font><font color="#CCCCCC"> everybody's</font>

389
00:18:36,360 --> 00:18:37,830
<font color="#E5E5E5">a computer scientist and that you</font>

390
00:18:37,830 --> 00:18:39,030
wouldn't<font color="#CCCCCC"> book</font><font color="#E5E5E5"> for me</font><font color="#CCCCCC"> and you would look</font>

391
00:18:39,030 --> 00:18:42,800
for reduce underscore<font color="#CCCCCC"> mean</font>

392
00:18:43,730 --> 00:18:48,880
so that's how we got that index<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so</font>

393
00:18:48,880 --> 00:18:51,080
generally speaking<font color="#E5E5E5"> you know you have to</font>

394
00:18:51,080 --> 00:18:54,350
be a bit careful<font color="#E5E5E5"> of data types</font><font color="#CCCCCC"> I</font>

395
00:18:54,350 --> 00:18:56,270
<font color="#E5E5E5">generally don't really notice about data</font>

396
00:18:56,270 --> 00:18:57,950
type problems until<font color="#E5E5E5"> I get the error but</font>

397
00:18:57,950 --> 00:18:59,300
like if you<font color="#E5E5E5"> get an error that kind of</font>

398
00:18:59,300 --> 00:19:02,060
says oh you<font color="#E5E5E5"> passed in 64 into something</font>

399
00:19:02,060 --> 00:19:04,880
that expected<font color="#CCCCCC"> a 1032 you can always just</font>

400
00:19:04,880 --> 00:19:07,610
cast things like this okay<font color="#E5E5E5"> so you need</font>

401
00:19:07,610 --> 00:19:09,470
<font color="#E5E5E5">to index something within 32 so we just</font>

402
00:19:09,470 --> 00:19:12,080
have<font color="#CCCCCC"> to cast it and so this returns the</font>

403
00:19:12,080 --> 00:19:15,530
extra point<font color="#E5E5E5"> right append</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> this</font>

404
00:19:15,530 --> 00:19:18,200
is<font color="#E5E5E5"> very similar to numpy stacking</font>

405
00:19:18,200 --> 00:19:20,240
together the initial centroids<font color="#CCCCCC"> to create</font>

406
00:19:20,240 --> 00:19:24,980
them<font color="#E5E5E5"> a tensor of them okay</font>

407
00:19:24,980 --> 00:19:31,160
so the code doesn't<font color="#E5E5E5"> look at all weird or</font>

408
00:19:31,160 --> 00:19:33,290
different<font color="#E5E5E5"> but it's important to remember</font>

409
00:19:33,290 --> 00:19:35,690
that when we<font color="#E5E5E5"> run this code nothing</font>

410
00:19:35,690 --> 00:19:36,250
happens

411
00:19:36,250 --> 00:19:38,360
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> that it creates a</font>

412
00:19:38,360 --> 00:19:43,270
computation graph so when we call

413
00:19:44,600 --> 00:19:47,960
<font color="#E5E5E5">KDOT find initial centroids nothing</font>

414
00:19:47,960 --> 00:19:49,790
happens but because we're in<font color="#E5E5E5"> an</font>

415
00:19:49,790 --> 00:19:53,230
<font color="#E5E5E5">interactive session we can now call eval</font>

416
00:19:53,230 --> 00:19:56,420
and that actually runs it right<font color="#E5E5E5"> and it</font>

417
00:19:56,420 --> 00:19:59,510
runs it and it actually<font color="#E5E5E5"> takes the data</font>

418
00:19:59,510 --> 00:20:01,550
<font color="#E5E5E5">that's returned from that and copies it</font>

419
00:20:01,550 --> 00:20:04,250
<font color="#E5E5E5">off the</font><font color="#CCCCCC"> CPU and put that's</font><font color="#E5E5E5"> very off the</font>

420
00:20:04,250 --> 00:20:06,740
GPU and<font color="#E5E5E5"> puts it</font><font color="#CCCCCC"> back in the</font><font color="#E5E5E5"> CPU as an</font>

421
00:20:06,740 --> 00:20:08,960
umpire array so it's important<font color="#E5E5E5"> to</font>

422
00:20:08,960 --> 00:20:11,360
<font color="#E5E5E5">remember that after</font><font color="#CCCCCC"> call of eval</font><font color="#E5E5E5"> we now</font>

423
00:20:11,360 --> 00:20:14,330
have an<font color="#E5E5E5"> actual genuine regular numpy</font>

424
00:20:14,330 --> 00:20:16,700
array here and this is the thing that

425
00:20:16,700 --> 00:20:21,170
makes<font color="#E5E5E5"> us be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> write code that</font>

426
00:20:21,170 --> 00:20:23,690
<font color="#E5E5E5">looks a lot like pi torch code because</font>

427
00:20:23,690 --> 00:20:25,100
<font color="#E5E5E5">we now know</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can take something</font>

428
00:20:25,100 --> 00:20:27,110
<font color="#E5E5E5">that's an umpire array and turn it into</font>

429
00:20:27,110 --> 00:20:31,460
a GPU tensor like that<font color="#E5E5E5"> and we can take</font>

430
00:20:31,460 --> 00:20:33,950
something<font color="#CCCCCC"> that's a GPU tensor</font><font color="#E5E5E5"> and turn</font>

431
00:20:33,950 --> 00:20:38,930
it into an umpire array<font color="#E5E5E5"> like that so I</font>

432
00:20:38,930 --> 00:20:42,460
don't<font color="#CCCCCC"> know I</font><font color="#E5E5E5"> suspect this might um</font>

433
00:20:44,390 --> 00:20:47,030
<font color="#CCCCCC">despite makeup tensorflow</font>

434
00:20:47,030 --> 00:20:49,670
developers<font color="#E5E5E5"> shake at how horrible this is</font>

435
00:20:49,670 --> 00:20:51,680
<font color="#E5E5E5">it's not you know really quite the way</font>

436
00:20:51,680 --> 00:20:53,620
<font color="#E5E5E5">you have to do things I think but it's</font>

437
00:20:53,620 --> 00:20:57,470
yeah it's<font color="#CCCCCC"> super easy</font><font color="#E5E5E5"> and it seems to</font>

438
00:20:57,470 --> 00:21:01,850
<font color="#CCCCCC">work pretty well</font><font color="#E5E5E5"> um this approach where</font>

439
00:21:01,850 --> 00:21:03,950
we're calling eval<font color="#CCCCCC"> you're doing</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> be a</font>

440
00:21:03,950 --> 00:21:06,950
bit careful<font color="#CCCCCC"> if this was</font><font color="#E5E5E5"> like inside a</font>

441
00:21:06,950 --> 00:21:08,660
loop that we were<font color="#E5E5E5"> calling the eval and</font>

442
00:21:08,660 --> 00:21:10,610
we were copying back a<font color="#E5E5E5"> really really big</font>

443
00:21:10,610 --> 00:21:13,220
chunk of<font color="#E5E5E5"> data to the GPU and the CPU</font>

444
00:21:13,220 --> 00:21:16,010
again and again<font color="#E5E5E5"> and again that would</font><font color="#CCCCCC"> be</font>

445
00:21:16,010 --> 00:21:18,680
<font color="#E5E5E5">a performance nightmare</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so you</font>

446
00:21:18,680 --> 00:21:19,880
<font color="#CCCCCC">just you do need to kind of think about</font>

447
00:21:19,880 --> 00:21:22,580
what's going on as you do it so we're

448
00:21:22,580 --> 00:21:23,870
<font color="#E5E5E5">looking side the</font><font color="#CCCCCC"> in away from the moment</font>

449
00:21:23,870 --> 00:21:27,650
<font color="#E5E5E5">and</font><font color="#CCCCCC"> just check anyway</font><font color="#E5E5E5"> the results pretty</font>

450
00:21:27,650 --> 00:21:30,680
fantastic<font color="#E5E5E5"> as you can see</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> this</font>

451
00:21:30,680 --> 00:21:32,870
little<font color="#CCCCCC"> hacky heuristic and does a</font><font color="#E5E5E5"> great</font>

452
00:21:32,870 --> 00:21:37,730
job<font color="#E5E5E5"> and you know it's a hacky heuristic</font>

453
00:21:37,730 --> 00:21:40,970
I've been using<font color="#CCCCCC"> for decades</font><font color="#E5E5E5"> now and it's</font>

454
00:21:40,970 --> 00:21:43,220
a<font color="#E5E5E5"> kind of thing which often</font><font color="#CCCCCC"> doesn't</font>

455
00:21:43,220 --> 00:21:45,230
appear in<font color="#E5E5E5"> papers in this case of similar</font>

456
00:21:45,230 --> 00:21:46,760
hacky heuristic did actually<font color="#E5E5E5"> appear in</font><font color="#CCCCCC"> a</font>

457
00:21:46,760 --> 00:21:48,860
paper in 2007 and even better one

458
00:21:48,860 --> 00:21:53,030
appeared just<font color="#E5E5E5"> last year</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's always</font>

459
00:21:53,030 --> 00:21:56,180
worth thinking<font color="#E5E5E5"> about like how can</font><font color="#CCCCCC"> i pre</font>

460
00:21:56,180 --> 00:21:58,640
<font color="#CCCCCC">process my data to</font><font color="#E5E5E5"> kind of create get it</font>

461
00:21:58,640 --> 00:22:00,650
close to<font color="#CCCCCC"> where I might</font><font color="#E5E5E5"> want it to be and</font>

462
00:22:00,650 --> 00:22:02,750
often these kind<font color="#E5E5E5"> of approaches are</font>

463
00:22:02,750 --> 00:22:06,560
useful there's actually I don't<font color="#E5E5E5"> know if</font>

464
00:22:06,560 --> 00:22:07,820
we have<font color="#E5E5E5"> time to maybe talk about it</font>

465
00:22:07,820 --> 00:22:10,640
<font color="#CCCCCC">someday but there's a</font><font color="#E5E5E5"> probe to doing</font><font color="#CCCCCC"> TTA</font>

466
00:22:10,640 --> 00:22:12,830
<font color="#E5E5E5">principal components analysis which has</font>

467
00:22:12,830 --> 00:22:14,810
a similar<font color="#E5E5E5"> flavor basically finding</font>

468
00:22:14,810 --> 00:22:16,430
random<font color="#E5E5E5"> numbers and finding the</font><font color="#CCCCCC"> farthest</font>

469
00:22:16,430 --> 00:22:19,550
numbers<font color="#E5E5E5"> away from them so it's a good</font>

470
00:22:19,550 --> 00:22:22,790
general<font color="#E5E5E5"> technique actually all right so</font>

471
00:22:22,790 --> 00:22:25,610
we've got<font color="#E5E5E5"> our</font><font color="#CCCCCC"> initial centroids</font><font color="#E5E5E5"> what are</font>

472
00:22:25,610 --> 00:22:26,210
we doing next

473
00:22:26,210 --> 00:22:28,010
<font color="#E5E5E5">well what we do next is we're</font><font color="#CCCCCC"> going to</font>

474
00:22:28,010 --> 00:22:29,510
<font color="#E5E5E5">be</font><font color="#CCCCCC"> doing more computation intensive flow</font>

475
00:22:29,510 --> 00:22:31,100
with them<font color="#E5E5E5"> so we want to copy them back</font>

476
00:22:31,100 --> 00:22:33,040
to the GPU

477
00:22:33,040 --> 00:22:37,050
<font color="#E5E5E5">okay and so</font>

478
00:22:37,280 --> 00:22:39,710
copied them to the<font color="#E5E5E5"> GPU</font><font color="#CCCCCC"> before we do an</font>

479
00:22:39,710 --> 00:22:41,360
eval or anything<font color="#E5E5E5"> later on we're going to</font>

480
00:22:41,360 --> 00:22:43,490
<font color="#E5E5E5">have to make sure</font><font color="#CCCCCC"> we go global variable</font>

481
00:22:43,490 --> 00:22:46,540
initializes run

482
00:22:46,680 --> 00:22:49,200
the<font color="#CCCCCC"> question</font><font color="#E5E5E5"> you explained what happens</font>

483
00:22:49,200 --> 00:22:51,770
if you don't create interactive session

484
00:22:51,770 --> 00:22:55,590
so what the<font color="#E5E5E5"> tensorflow authors decided</font>

485
00:22:55,590 --> 00:22:57,930
to do in their wisdom was to<font color="#E5E5E5"> generate</font>

486
00:22:57,930 --> 00:23:02,010
their own<font color="#CCCCCC"> whole concept of namespaces</font>

487
00:23:02,010 --> 00:23:05,240
and<font color="#E5E5E5"> variables and whatever else</font><font color="#CCCCCC"> so</font>

488
00:23:05,240 --> 00:23:07,980
rather than using pythons

489
00:23:07,980 --> 00:23:10,920
there's tensor clothes and so a session

490
00:23:10,920 --> 00:23:14,850
is<font color="#E5E5E5"> basically a kind of like a named base</font>

491
00:23:14,850 --> 00:23:16,860
that holds<font color="#E5E5E5"> you know the computation</font>

492
00:23:16,860 --> 00:23:20,360
graphs and the variables<font color="#E5E5E5"> and so forth</font>

493
00:23:20,360 --> 00:23:24,179
you can and then there's this concept of

494
00:23:24,179 --> 00:23:26,490
a context<font color="#CCCCCC"> manager which is</font><font color="#E5E5E5"> basically</font>

495
00:23:26,490 --> 00:23:28,230
where you have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> wizz clause in Python</font>

496
00:23:28,230 --> 00:23:30,900
and<font color="#E5E5E5"> you say like with this session now</font>

497
00:23:30,900 --> 00:23:32,670
you're<font color="#E5E5E5"> going to do stuff in this</font>

498
00:23:32,670 --> 00:23:35,490
namespace<font color="#E5E5E5"> and then there's a concept of</font>

499
00:23:35,490 --> 00:23:36,570
a graph you can<font color="#E5E5E5"> have multiple</font>

500
00:23:36,570 --> 00:23:38,280
computation graphs you can<font color="#E5E5E5"> say with this</font>

501
00:23:38,280 --> 00:23:39,900
graph you<font color="#E5E5E5"> know create these various</font>

502
00:23:39,900 --> 00:23:43,500
computations where<font color="#E5E5E5"> it comes in very</font>

503
00:23:43,500 --> 00:23:46,350
<font color="#CCCCCC">handy is if you want to say like run</font>

504
00:23:46,350 --> 00:23:50,550
this graph on this GPU or you know stick

505
00:23:50,550 --> 00:23:58,410
this variable on that<font color="#CCCCCC"> CPU so without an</font>

506
00:23:58,410 --> 00:24:00,090
interactive<font color="#CCCCCC"> session you basically have</font>

507
00:24:00,090 --> 00:24:01,679
to create that<font color="#E5E5E5"> session you have to say</font>

508
00:24:01,679 --> 00:24:03,620
which<font color="#CCCCCC"> session to use using a wisk</font><font color="#E5E5E5"> laws</font>

509
00:24:03,620 --> 00:24:06,000
<font color="#CCCCCC">and then like there's</font><font color="#E5E5E5"> many layers of</font>

510
00:24:06,000 --> 00:24:08,550
<font color="#E5E5E5">that so within that</font><font color="#CCCCCC"> you can then create</font>

511
00:24:08,550 --> 00:24:10,650
<font color="#CCCCCC">name scopes</font><font color="#E5E5E5"> variable scopes and blah</font>

512
00:24:10,650 --> 00:24:13,830
blah<font color="#E5E5E5"> blah</font><font color="#CCCCCC"> so then the annoying thing is</font>

513
00:24:13,830 --> 00:24:15,690
the vast<font color="#E5E5E5"> majority of tutorial code out</font>

514
00:24:15,690 --> 00:24:18,720
there<font color="#E5E5E5"> uses all of these concepts right</font>

515
00:24:18,720 --> 00:24:21,870
it's as if like all<font color="#E5E5E5"> of</font><font color="#CCCCCC"> python</font><font color="#E5E5E5"> 0 and</font>

516
00:24:21,870 --> 00:24:25,170
variables and modules doesn't exist<font color="#E5E5E5"> and</font>

517
00:24:25,170 --> 00:24:27,420
<font color="#E5E5E5">you use tensorflow for everything so I</font>

518
00:24:27,420 --> 00:24:28,410
wanted<font color="#E5E5E5"> to show you that you don't have</font>

519
00:24:28,410 --> 00:24:32,330
to use any of<font color="#E5E5E5"> these concepts pretty much</font>

520
00:24:32,330 --> 00:24:37,290
<font color="#E5E5E5">like thank you for the question</font><font color="#CCCCCC"> ok hey I</font>

521
00:24:37,290 --> 00:24:38,850
haven't fight

522
00:24:38,850 --> 00:24:41,070
but it's<font color="#E5E5E5"> thinking goodness but have you</font>

523
00:24:41,070 --> 00:24:45,210
<font color="#E5E5E5">tried so because your whatever there's</font>

524
00:24:45,210 --> 00:24:49,370
six clusters<font color="#E5E5E5"> up there um and if you have</font>

525
00:24:49,370 --> 00:24:52,530
<font color="#CCCCCC">given</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> initially said I have</font>

526
00:24:52,530 --> 00:24:55,860
seven clusters or eight clusters<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you</font>

527
00:24:55,860 --> 00:24:57,900
refine that<font color="#E5E5E5"> see you hit</font><font color="#CCCCCC"> your six sheets</font>

528
00:24:57,900 --> 00:25:00,810
all<font color="#E5E5E5"> the sudden start getting two codes</font>

529
00:25:00,810 --> 00:25:02,700
are very close to<font color="#E5E5E5"> previous existing</font>

530
00:25:02,700 --> 00:25:05,940
control<font color="#E5E5E5"> so it seems</font><font color="#CCCCCC"> like you could come</font>

531
00:25:05,940 --> 00:25:10,140
how intelligently define a width of a

532
00:25:10,140 --> 00:25:14,160
cluster or look for<font color="#CCCCCC"> a jump and things</font>

533
00:25:14,160 --> 00:25:15,930
dropping down and how far apart they<font color="#CCCCCC"> are</font>

534
00:25:15,930 --> 00:25:16,980
on the cluster

535
00:25:16,980 --> 00:25:20,460
<font color="#E5E5E5">yeah and programmatically come up with</font>

536
00:25:20,460 --> 00:25:22,200
the<font color="#CCCCCC"> weighting decide</font><font color="#E5E5E5"> the number yeah</font>

537
00:25:22,200 --> 00:25:26,580
yeah I think you could<font color="#E5E5E5"> you know maybe</font>

538
00:25:26,580 --> 00:25:28,620
then you're using<font color="#CCCCCC"> k-means</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't know</font>

539
00:25:28,620 --> 00:25:31,680
<font color="#E5E5E5">like yeah I think it's a fascinating</font>

540
00:25:31,680 --> 00:25:36,690
question<font color="#E5E5E5"> I haven't seen that done</font><font color="#CCCCCC"> there</font>

541
00:25:36,690 --> 00:25:42,840
are certainly papers about figuring<font color="#E5E5E5"> out</font>

542
00:25:42,840 --> 00:25:44,700
the number<font color="#E5E5E5"> of clusters</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> k-means</font><font color="#CCCCCC"> so</font>

543
00:25:44,700 --> 00:25:46,850
maybe<font color="#E5E5E5"> during the week</font><font color="#CCCCCC"> you check one out</font>

544
00:25:46,850 --> 00:25:49,830
<font color="#E5E5E5">what</font><font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> tends to flow that'll be</font>

545
00:25:49,830 --> 00:25:52,650
<font color="#CCCCCC">that'll be</font><font color="#E5E5E5"> really interesting</font><font color="#CCCCCC"> and i just</font>

546
00:25:52,650 --> 00:25:54,000
wanted to<font color="#E5E5E5"> follow up what you said about</font>

547
00:25:54,000 --> 00:25:57,150
<font color="#E5E5E5">session to kind of emphasize that with a</font>

548
00:25:57,150 --> 00:25:59,640
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> tutorials you could make the code</font>

549
00:25:59,640 --> 00:26:01,590
simpler by using an interactive<font color="#E5E5E5"> session</font>

550
00:26:01,590 --> 00:26:04,020
<font color="#E5E5E5">in a jupiter notebook instead yeah I</font>

551
00:26:04,020 --> 00:26:05,700
remember<font color="#E5E5E5"> when</font><font color="#CCCCCC"> Rachel was going</font><font color="#E5E5E5"> through a</font>

552
00:26:05,700 --> 00:26:08,190
tensor flow crossed a while ago and<font color="#E5E5E5"> she</font>

553
00:26:08,190 --> 00:26:09,660
kept on<font color="#E5E5E5"> banging her head against the</font>

554
00:26:09,660 --> 00:26:11,850
desk with sessions and variables<font color="#CCCCCC"> cots</font>

555
00:26:11,850 --> 00:26:14,070
and<font color="#CCCCCC"> whatever else and we kind of yeah</font>

556
00:26:14,070 --> 00:26:15,870
that was part<font color="#E5E5E5"> of what led us to</font><font color="#CCCCCC"> think</font>

557
00:26:15,870 --> 00:26:18,930
<font color="#E5E5E5">okay let's let's simplify all that all</font>

558
00:26:18,930 --> 00:26:21,240
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so I'm step one is to take our</font>

559
00:26:21,240 --> 00:26:22,800
initial centroids and copy them<font color="#E5E5E5"> onto the</font>

560
00:26:22,800 --> 00:26:25,800
GPU<font color="#E5E5E5"> so we now have a symbol representing</font>

561
00:26:25,800 --> 00:26:29,760
those so the next step in the k-means

562
00:26:29,760 --> 00:26:32,660
algorithm is<font color="#E5E5E5"> to take every point and</font>

563
00:26:32,660 --> 00:26:35,310
assign them<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> cluster which is</font>

564
00:26:35,310 --> 00:26:37,170
basically to<font color="#CCCCCC"> say for</font><font color="#E5E5E5"> every point which</font>

565
00:26:37,170 --> 00:26:38,940
which which of the centroids is the

566
00:26:38,940 --> 00:26:46,440
closest so that's what assigned<font color="#E5E5E5"> to</font>

567
00:26:46,440 --> 00:26:48,360
nearest does we'll get to that<font color="#E5E5E5"> in a</font>

568
00:26:48,360 --> 00:26:49,650
moment but let's pretend we've done it

569
00:26:49,650 --> 00:26:52,200
<font color="#E5E5E5">this will now be a list</font>

570
00:26:52,200 --> 00:26:56,159
of<font color="#E5E5E5"> rich centroid is the closest or every</font>

571
00:26:56,159 --> 00:27:00,120
data point<font color="#CCCCCC"> so then we need one more</font>

572
00:27:00,120 --> 00:27:05,429
<font color="#E5E5E5">piece of tensor flow concepts which is</font>

573
00:27:05,429 --> 00:27:11,940
we want<font color="#E5E5E5"> to update</font><font color="#CCCCCC"> an existing we want to</font>

574
00:27:11,940 --> 00:27:14,130
<font color="#E5E5E5">update an existing variable with some</font>

575
00:27:14,130 --> 00:27:18,120
new data<font color="#E5E5E5"> and so we</font><font color="#CCCCCC"> can actually call</font>

576
00:27:18,120 --> 00:27:21,419
update centroids<font color="#CCCCCC"> to</font><font color="#E5E5E5"> basically do that</font>

577
00:27:21,419 --> 00:27:22,500
updating and I'll show you<font color="#E5E5E5"> how that</font>

578
00:27:22,500 --> 00:27:25,590
works<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> so basically the idea is</font>

579
00:27:25,590 --> 00:27:28,620
<font color="#CCCCCC">that we're going</font><font color="#E5E5E5"> to loop through</font><font color="#CCCCCC"> doing</font>

580
00:27:28,620 --> 00:27:33,570
this again<font color="#CCCCCC"> and again</font><font color="#E5E5E5"> and again</font><font color="#CCCCCC"> but when</font>

581
00:27:33,570 --> 00:27:36,929
we just<font color="#CCCCCC"> do</font><font color="#E5E5E5"> it once</font><font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> see</font>

582
00:27:36,929 --> 00:27:40,830
it's nearly<font color="#E5E5E5"> perfect already so it's a</font>

583
00:27:40,830 --> 00:27:42,990
pretty<font color="#CCCCCC"> powerful pretty powerful idea as</font>

584
00:27:42,990 --> 00:27:45,480
long<font color="#CCCCCC"> as your initial cluster centers are</font>

585
00:27:45,480 --> 00:27:48,480
good so let's see how this works<font color="#E5E5E5"> assign</font>

586
00:27:48,480 --> 00:27:50,899
<font color="#E5E5E5">the nearest</font>

587
00:27:56,810 --> 00:27:58,820
it's a single<font color="#CCCCCC"> line of</font><font color="#E5E5E5"> code</font>

588
00:27:58,820 --> 00:28:00,930
now the reason is a single line of<font color="#E5E5E5"> code</font>

589
00:28:00,930 --> 00:28:02,910
<font color="#E5E5E5">is we already have the code</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find the</font>

590
00:28:02,910 --> 00:28:06,800
distance between every piece of<font color="#E5E5E5"> data</font><font color="#CCCCCC"> and</font>

591
00:28:06,800 --> 00:28:10,190
<font color="#CCCCCC">its centroid</font>

592
00:28:10,720 --> 00:28:13,150
now rather<font color="#CCCCCC"> than calling TF</font><font color="#E5E5E5"> reduce</font><font color="#CCCCCC"> min</font>

593
00:28:13,150 --> 00:28:15,309
which<font color="#CCCCCC"> returned the distance to its</font>

594
00:28:15,309 --> 00:28:18,390
nearest centroid<font color="#CCCCCC"> we call TS</font><font color="#E5E5E5"> dot</font><font color="#CCCCCC"> argh men</font>

595
00:28:18,390 --> 00:28:22,260
to get the index<font color="#E5E5E5"> of its nearest centroid</font>

596
00:28:22,260 --> 00:28:25,120
so generally speaking the<font color="#E5E5E5"> the hard bit</font>

597
00:28:25,120 --> 00:28:27,370
of<font color="#E5E5E5"> doing this kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> highly vectorized</font>

598
00:28:27,370 --> 00:28:31,120
code is figuring out this number which

599
00:28:31,120 --> 00:28:33,159
is what access are we working with<font color="#CCCCCC"> right</font>

600
00:28:33,159 --> 00:28:35,470
and so it's a good<font color="#CCCCCC"> idea to actually</font><font color="#E5E5E5"> like</font>

601
00:28:35,470 --> 00:28:38,590
write down on a piece<font color="#CCCCCC"> of paper you know</font>

602
00:28:38,590 --> 00:28:40,450
for each of your<font color="#CCCCCC"> 10 sores it's like it's</font>

603
00:28:40,450 --> 00:28:43,059
time by batch by row by<font color="#CCCCCC"> column or</font>

604
00:28:43,059 --> 00:28:45,280
whatever<font color="#E5E5E5"> let make sure you know what</font>

605
00:28:45,280 --> 00:28:49,240
every<font color="#CCCCCC"> basis represents when I'm creating</font>

606
00:28:49,240 --> 00:28:53,049
<font color="#E5E5E5">these algorithms I'm constantly printing</font>

607
00:28:53,049 --> 00:28:57,400
out the shape<font color="#CCCCCC"> of things</font><font color="#E5E5E5"> and another</font>

608
00:28:57,400 --> 00:28:59,049
really<font color="#E5E5E5"> simple trick that a lot of people</font>

609
00:28:59,049 --> 00:29:01,720
don't do this<font color="#CCCCCC"> is make sure</font><font color="#E5E5E5"> that your</font>

610
00:29:01,720 --> 00:29:03,730
different dimensions actually<font color="#CCCCCC"> have</font>

611
00:29:03,730 --> 00:29:06,039
<font color="#CCCCCC">different sizes so when you're playing</font>

612
00:29:06,039 --> 00:29:07,270
<font color="#E5E5E5">around</font><font color="#CCCCCC"> with setting things</font><font color="#E5E5E5"> don't have a</font>

613
00:29:07,270 --> 00:29:09,669
batch size of<font color="#CCCCCC"> ten and</font><font color="#E5E5E5"> an N of</font><font color="#CCCCCC"> ten and</font>

614
00:29:09,669 --> 00:29:11,530
the number of dimensions<font color="#CCCCCC"> of</font><font color="#E5E5E5"> ten right</font>

615
00:29:11,530 --> 00:29:14,559
<font color="#E5E5E5">but I find it much</font><font color="#CCCCCC"> easier to</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> of</font>

616
00:29:14,559 --> 00:29:16,030
real numbers so like have a<font color="#E5E5E5"> batch size</font>

617
00:29:16,030 --> 00:29:18,330
of<font color="#E5E5E5"> 8 and an</font><font color="#CCCCCC"> ad of can and a</font>

618
00:29:18,330 --> 00:29:20,559
dimensionality of<font color="#E5E5E5"> four</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> because</font>

619
00:29:20,559 --> 00:29:21,549
<font color="#E5E5E5">every time you print out the shape</font>

620
00:29:21,549 --> 00:29:22,750
you're<font color="#E5E5E5"> finding out exactly what</font>

621
00:29:22,750 --> 00:29:25,480
<font color="#E5E5E5">everything is</font><font color="#CCCCCC"> okay so this is</font><font color="#E5E5E5"> going to</font>

622
00:29:25,480 --> 00:29:32,289
<font color="#CCCCCC">return</font><font color="#E5E5E5"> the nearest indices</font><font color="#CCCCCC"> so then we</font>

623
00:29:32,289 --> 00:29:35,260
<font color="#E5E5E5">can go ahead and</font><font color="#CCCCCC"> update the centroids</font><font color="#E5E5E5"> so</font>

624
00:29:35,260 --> 00:29:38,470
here is update centroids<font color="#E5E5E5"> and suddenly we</font>

625
00:29:38,470 --> 00:29:41,950
have some crazy function<font color="#E5E5E5"> and this is</font>

626
00:29:41,950 --> 00:29:46,059
where tensorflow is super handy<font color="#CCCCCC"> it's</font>

627
00:29:46,059 --> 00:29:49,900
full<font color="#E5E5E5"> of crazy functions and if you know</font>

628
00:29:49,900 --> 00:29:53,049
the<font color="#E5E5E5"> computer science term for the thing</font>

629
00:29:53,049 --> 00:29:55,990
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> generally has</font>

630
00:29:55,990 --> 00:29:58,919
it's generally called<font color="#E5E5E5"> that right and so</font>

631
00:29:58,919 --> 00:30:01,870
it's the<font color="#E5E5E5"> only other way to</font><font color="#CCCCCC"> find it</font><font color="#E5E5E5"> is to</font>

632
00:30:01,870 --> 00:30:03,159
<font color="#E5E5E5">do lots and lots of searching through</font>

633
00:30:03,159 --> 00:30:09,480
<font color="#E5E5E5">the documentation so in general taking a</font>

634
00:30:09,480 --> 00:30:12,280
set<font color="#E5E5E5"> of data and sticking it into</font>

635
00:30:12,280 --> 00:30:15,850
<font color="#E5E5E5">multiple chunks of data</font><font color="#CCCCCC"> according to</font>

636
00:30:15,850 --> 00:30:18,340
<font color="#E5E5E5">some kind of</font><font color="#CCCCCC"> criteria</font><font color="#E5E5E5"> it's called</font>

637
00:30:18,340 --> 00:30:20,950
partitioning<font color="#E5E5E5"> in computer science so I</font>

638
00:30:20,950 --> 00:30:22,539
got a bit lucky when I first<font color="#E5E5E5"> looked for</font>

639
00:30:22,539 --> 00:30:24,029
<font color="#E5E5E5">this I googled the tensor flow</font>

640
00:30:24,029 --> 00:30:27,659
petition and bang<font color="#E5E5E5"> this thing</font><font color="#CCCCCC"> pops up so</font>

641
00:30:27,659 --> 00:30:35,279
let's take a look<font color="#E5E5E5"> at it and this is</font>

642
00:30:35,279 --> 00:30:39,239
where like reading<font color="#E5E5E5"> about GPU programming</font>

643
00:30:39,239 --> 00:30:41,789
in<font color="#CCCCCC"> general is very helpful because</font><font color="#E5E5E5"> in</font>

644
00:30:41,789 --> 00:30:43,909
GPU programming there's this kind<font color="#CCCCCC"> of</font>

645
00:30:43,909 --> 00:30:46,469
<font color="#E5E5E5">smallish subset of things which</font>

646
00:30:46,469 --> 00:30:48,029
everything else<font color="#E5E5E5"> is built on and one of</font>

647
00:30:48,029 --> 00:30:49,460
them is partitioning

648
00:30:49,460 --> 00:30:53,140
[Music]

649
00:30:55,630 --> 00:30:58,960
okay so here we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> TF dynamic</font>

650
00:30:58,960 --> 00:31:06,669
partition partition the data into some

651
00:31:06,669 --> 00:31:09,539
<font color="#E5E5E5">number of partitions using some indices</font>

652
00:31:09,539 --> 00:31:12,070
<font color="#E5E5E5">and generally</font><font color="#CCCCCC"> speaking it's easier</font><font color="#E5E5E5"> to</font>

653
00:31:12,070 --> 00:31:14,740
<font color="#CCCCCC">just look</font><font color="#E5E5E5"> at some code so here's our</font>

654
00:31:14,740 --> 00:31:16,990
data<font color="#E5E5E5"> we're going to create two</font>

655
00:31:16,990 --> 00:31:19,150
partitions<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> calling them clusters</font>

656
00:31:19,150 --> 00:31:23,910
and it's<font color="#E5E5E5"> going to go like</font><font color="#CCCCCC"> this</font>

657
00:31:23,910 --> 00:31:27,280
<font color="#E5E5E5">d-rose partition</font><font color="#CCCCCC"> zeros</font><font color="#E5E5E5"> first first zeros</font>

658
00:31:27,280 --> 00:31:31,570
<font color="#E5E5E5">so 10 will go to the</font><font color="#CCCCCC"> zeroth partition</font><font color="#E5E5E5"> 20</font>

659
00:31:31,570 --> 00:31:33,549
will go to the<font color="#CCCCCC"> zeroth partition 30 will</font>

660
00:31:33,549 --> 00:31:36,100
go to the first<font color="#E5E5E5"> partition</font><font color="#CCCCCC"> okay this is</font>

661
00:31:36,100 --> 00:31:38,950
<font color="#E5E5E5">exactly what we want right so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

662
00:31:38,950 --> 00:31:40,780
<font color="#CCCCCC">the nice thing is that</font><font color="#E5E5E5"> there's a lot</font><font color="#CCCCCC"> of</font>

663
00:31:40,780 --> 00:31:42,429
these<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see all this stuff</font><font color="#E5E5E5"> right</font>

664
00:31:42,429 --> 00:31:45,000
there's so many<font color="#E5E5E5"> functions available</font>

665
00:31:45,000 --> 00:31:47,110
often<font color="#E5E5E5"> there's the exact function</font><font color="#CCCCCC"> you</font>

666
00:31:47,110 --> 00:31:48,820
need<font color="#CCCCCC"> and here it is</font><font color="#E5E5E5"> right so we just</font>

667
00:31:48,820 --> 00:31:51,220
<font color="#CCCCCC">take</font><font color="#E5E5E5"> our list of indices convert it to</font>

668
00:31:51,220 --> 00:31:55,330
<font color="#CCCCCC">os/2</font><font color="#E5E5E5"> in 32 s</font><font color="#CCCCCC"> Parfitt our data the</font>

669
00:31:55,330 --> 00:31:57,929
<font color="#E5E5E5">indices and</font><font color="#CCCCCC"> the number of clusters and</font>

670
00:31:57,929 --> 00:32:04,049
we're done<font color="#E5E5E5"> right</font><font color="#CCCCCC"> this is now a separate</font>

671
00:32:04,049 --> 00:32:07,120
array basically<font color="#E5E5E5"> a</font><font color="#CCCCCC"> zipper tensor</font><font color="#E5E5E5"> so each</font>

672
00:32:07,120 --> 00:32:09,900
of our clusters

673
00:32:10,290 --> 00:32:13,290
so now that<font color="#E5E5E5"> we have done</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can</font>

674
00:32:13,290 --> 00:32:17,880
then<font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> what is the mean of each</font>

675
00:32:17,880 --> 00:32:20,280
of those clusters so the mean<font color="#CCCCCC"> of</font><font color="#E5E5E5"> each of</font>

676
00:32:20,280 --> 00:32:22,560
those clusters is our new centroid<font color="#E5E5E5"> right</font>

677
00:32:22,560 --> 00:32:26,310
so what we're doing<font color="#E5E5E5"> is we're saying okay</font>

678
00:32:26,310 --> 00:32:28,530
which points are<font color="#E5E5E5"> the closest to this one</font>

679
00:32:28,530 --> 00:32:31,080
<font color="#E5E5E5">and we're kind of going okay</font><font color="#CCCCCC"> these</font>

680
00:32:31,080 --> 00:32:32,520
<font color="#E5E5E5">points are the closest to this one</font>

681
00:32:32,520 --> 00:32:35,030
okay<font color="#E5E5E5"> what's the</font><font color="#CCCCCC"> average of those</font><font color="#E5E5E5"> points</font>

682
00:32:35,030 --> 00:32:37,290
<font color="#CCCCCC">right that's all that</font><font color="#E5E5E5"> happens from here</font>

683
00:32:37,290 --> 00:32:39,010
to here

684
00:32:39,010 --> 00:32:41,360
<font color="#E5E5E5">okay so that's taking the mean of those</font>

685
00:32:41,360 --> 00:32:43,809
points

686
00:32:43,880 --> 00:32:45,650
and then we can<font color="#E5E5E5"> basically see okay</font>

687
00:32:45,650 --> 00:32:48,940
<font color="#E5E5E5">that's our new partition that's our new</font>

688
00:32:48,940 --> 00:32:54,320
<font color="#CCCCCC">add new clusters so then</font><font color="#E5E5E5"> just join them</font>

689
00:32:54,320 --> 00:32:57,340
all together<font color="#CCCCCC"> concatenate them together</font>

690
00:32:57,340 --> 00:33:01,300
<font color="#E5E5E5">okay so</font>

691
00:33:03,340 --> 00:33:06,980
except for<font color="#E5E5E5"> that dynamic partitions well</font>

692
00:33:06,980 --> 00:33:08,450
I mean in fact<font color="#E5E5E5"> including that dynamic</font>

693
00:33:08,450 --> 00:33:09,860
conditions<font color="#E5E5E5"> it was incredibly simple but</font>

694
00:33:09,860 --> 00:33:11,300
<font color="#E5E5E5">it is incredibly simple</font><font color="#CCCCCC"> because we had a</font>

695
00:33:11,300 --> 00:33:12,830
function that<font color="#CCCCCC"> did exactly what we</font><font color="#E5E5E5"> wanted</font>

696
00:33:12,830 --> 00:33:15,110
so because we assigned a variable up

697
00:33:15,110 --> 00:33:19,100
<font color="#CCCCCC">here</font><font color="#E5E5E5"> we have to call initializer</font><font color="#CCCCCC"> but run</font>

698
00:33:19,100 --> 00:33:21,290
and then of course<font color="#CCCCCC"> before we can do</font>

699
00:33:21,290 --> 00:33:25,130
anything with<font color="#CCCCCC"> this tensor we have to</font>

700
00:33:25,130 --> 00:33:27,080
call eval<font color="#E5E5E5"> to actually call the</font>

701
00:33:27,080 --> 00:33:30,140
computation graph and copy it<font color="#E5E5E5"> back to</font>

702
00:33:30,140 --> 00:33:36,340
our<font color="#E5E5E5"> CPU okay so that's all those tips</font>

703
00:33:37,010 --> 00:33:41,850
so then we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> replace the contents</font>

704
00:33:41,850 --> 00:33:44,370
of current centroids<font color="#E5E5E5"> with the contents</font>

705
00:33:44,370 --> 00:33:50,360
of updated centroids and so to do<font color="#E5E5E5"> that</font>

706
00:33:50,360 --> 00:33:53,160
<font color="#CCCCCC">we can't just say equals</font><font color="#E5E5E5"> everything's</font>

707
00:33:53,160 --> 00:33:54,870
<font color="#E5E5E5">different intensive law you have to call</font>

708
00:33:54,870 --> 00:33:57,870
dot assign right so this<font color="#E5E5E5"> is the same as</font>

709
00:33:57,870 --> 00:33:59,280
<font color="#E5E5E5">basically saying current centroids</font>

710
00:33:59,280 --> 00:34:01,530
<font color="#E5E5E5">equals updated centroids but it's</font>

711
00:34:01,530 --> 00:34:03,960
creating a computation graph that

712
00:34:03,960 --> 00:34:06,510
basically does that assignment<font color="#E5E5E5"> on the</font>

713
00:34:06,510 --> 00:34:12,000
GPU how<font color="#CCCCCC"> can we extrapolate this to</font><font color="#E5E5E5"> other</font>

714
00:34:12,000 --> 00:34:14,040
non numeric data types such as words

715
00:34:14,040 --> 00:34:16,430
images

716
00:34:16,800 --> 00:34:20,790
well they're all numeric data types

717
00:34:20,790 --> 00:34:24,869
really<font color="#CCCCCC"> so an image</font><font color="#E5E5E5"> is absolutely a</font>

718
00:34:24,869 --> 00:34:28,980
numeric data type<font color="#E5E5E5"> so it's just a bunch</font>

719
00:34:28,980 --> 00:34:31,349
of<font color="#E5E5E5"> pixels</font><font color="#CCCCCC"> you just have to</font><font color="#E5E5E5"> decide what</font>

720
00:34:31,349 --> 00:34:34,260
distance measure you want<font color="#E5E5E5"> which</font>

721
00:34:34,260 --> 00:34:35,909
generally just means<font color="#E5E5E5"> deciding you're</font>

722
00:34:35,909 --> 00:34:37,530
probably using<font color="#E5E5E5"> you</font><font color="#CCCCCC"> city and distance</font><font color="#E5E5E5"> but</font>

723
00:34:37,530 --> 00:34:39,418
are you<font color="#E5E5E5"> doing it in pixel space or</font>

724
00:34:39,418 --> 00:34:41,579
you're picking one of the activation

725
00:34:41,579 --> 00:34:46,710
layers in a neural<font color="#E5E5E5"> net for words</font><font color="#CCCCCC"> you</font>

726
00:34:46,710 --> 00:34:51,960
would create a word vector for your webs

727
00:34:51,960 --> 00:34:53,849
there's nothing specifically

728
00:34:53,849 --> 00:34:56,609
<font color="#E5E5E5">two-dimensional about this it's working</font>

729
00:34:56,609 --> 00:34:59,210
as many dimensions as we like and and

730
00:34:59,210 --> 00:35:01,589
that's<font color="#E5E5E5"> really the whole point</font><font color="#CCCCCC"> and I'm</font>

731
00:35:01,589 --> 00:35:02,970
hoping that<font color="#CCCCCC"> maybe during</font><font color="#E5E5E5"> the week some</font>

732
00:35:02,970 --> 00:35:04,440
<font color="#E5E5E5">people will start to play around with</font>

733
00:35:04,440 --> 00:35:06,839
<font color="#E5E5E5">some higher dimensional data sets</font><font color="#CCCCCC"> to get</font>

734
00:35:06,839 --> 00:35:09,060
<font color="#CCCCCC">a feel for how</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> works particularly</font>

735
00:35:09,060 --> 00:35:10,589
<font color="#E5E5E5">if you</font><font color="#CCCCCC"> can get it</font><font color="#E5E5E5"> working on CT scans</font>

736
00:35:10,589 --> 00:35:13,079
that<font color="#E5E5E5"> would be fascinating</font><font color="#CCCCCC"> using the five</font>

737
00:35:13,079 --> 00:35:15,619
dimensional clustering we talked about

738
00:35:15,619 --> 00:35:20,310
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> to use what it looks like in</font>

739
00:35:20,310 --> 00:35:22,020
total<font color="#CCCCCC"> if we weren't</font><font color="#E5E5E5"> using an interactive</font>

740
00:35:22,020 --> 00:35:23,730
<font color="#CCCCCC">session</font>

741
00:35:23,730 --> 00:35:27,810
you basically say where's<font color="#CCCCCC"> TF session</font>

742
00:35:27,810 --> 00:35:30,329
let's create<font color="#E5E5E5"> the session but as default</font>

743
00:35:30,329 --> 00:35:32,010
that<font color="#E5E5E5"> sets it</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> current session and</font>

744
00:35:32,010 --> 00:35:34,470
then within<font color="#E5E5E5"> the width block we can now</font>

745
00:35:34,470 --> 00:35:38,329
run things<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> Kay don't run</font>

746
00:35:38,329 --> 00:35:40,770
<font color="#CCCCCC">there's all the stuff we just</font><font color="#E5E5E5"> saw so if</font>

747
00:35:40,770 --> 00:35:45,240
we could<font color="#E5E5E5"> okay don't run here it is</font>

748
00:35:45,240 --> 00:35:47,609
<font color="#E5E5E5">right so Kay don't run does all of those</font>

749
00:35:47,609 --> 00:35:50,310
steps<font color="#CCCCCC"> so this is how you can create</font><font color="#E5E5E5"> a</font>

750
00:35:50,310 --> 00:35:53,280
complete computation graph in<font color="#CCCCCC"> tensor</font>

751
00:35:53,280 --> 00:35:55,319
<font color="#E5E5E5">flow using a notebook you do each one</font>

752
00:35:55,319 --> 00:35:57,119
one step<font color="#E5E5E5"> at a time</font><font color="#CCCCCC"> once you put it</font>

753
00:35:57,119 --> 00:35:59,250
working<font color="#E5E5E5"> you put it all together</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font>

754
00:35:59,250 --> 00:36:03,680
you can see find initial<font color="#CCCCCC"> centroids eval</font>

755
00:36:03,680 --> 00:36:07,430
<font color="#CCCCCC">put it back into a variable</font><font color="#E5E5E5"> again</font>

756
00:36:07,430 --> 00:36:12,109
<font color="#CCCCCC">assigned</font><font color="#E5E5E5"> a nearest at the centroids</font>

757
00:36:12,109 --> 00:36:15,119
<font color="#CCCCCC">because we created</font><font color="#E5E5E5"> a variable in the</font>

758
00:36:15,119 --> 00:36:17,520
process there we didn't have to rerun

759
00:36:17,520 --> 00:36:21,410
global variable initializer<font color="#E5E5E5"> we could</font>

760
00:36:21,410 --> 00:36:25,410
have<font color="#E5E5E5"> avoided this I guess by not</font><font color="#CCCCCC"> calling</font>

761
00:36:25,410 --> 00:36:27,500
eval and just treating this as a

762
00:36:27,500 --> 00:36:29,910
variable<font color="#E5E5E5"> the whole time but it does</font>

763
00:36:29,910 --> 00:36:35,550
is fresh lime<font color="#E5E5E5"> and then we just look</font>

764
00:36:35,550 --> 00:36:36,870
through a bunch of times

765
00:36:36,870 --> 00:36:42,270
calling centroid sort of sign<font color="#CCCCCC"> updated</font>

766
00:36:42,270 --> 00:36:44,690
set<font color="#E5E5E5"> droids</font>

767
00:36:46,809 --> 00:36:50,799
oh I think<font color="#E5E5E5"> I see a bug</font><font color="#CCCCCC"> what we</font><font color="#E5E5E5"> should be</font>

768
00:36:50,799 --> 00:36:55,119
doing after<font color="#CCCCCC"> that is then calling up site</font>

769
00:36:55,119 --> 00:36:58,469
centroids each time so there you go

770
00:36:58,469 --> 00:37:01,299
I'll fix<font color="#CCCCCC"> that during the week</font><font color="#E5E5E5"> and then</font>

771
00:37:01,299 --> 00:37:02,979
<font color="#E5E5E5">the nice thing is because I've used a</font>

772
00:37:02,979 --> 00:37:07,929
normal place and<font color="#E5E5E5"> full loop here and I'm</font>

773
00:37:07,929 --> 00:37:12,069
calling eval<font color="#E5E5E5"> each time it means I can</font>

774
00:37:12,069 --> 00:37:12,939
check

775
00:37:12,939 --> 00:37:17,289
<font color="#E5E5E5">Oh</font><font color="#CCCCCC"> have have any of the cluster</font>

776
00:37:17,289 --> 00:37:21,189
centroids moved and if they haven't<font color="#E5E5E5"> then</font>

777
00:37:21,189 --> 00:37:24,309
I will stop working<font color="#CCCCCC"> right so it makes it</font>

778
00:37:24,309 --> 00:37:26,829
<font color="#E5E5E5">very easy to kind of create dynamic for</font>

779
00:37:26,829 --> 00:37:28,479
loops which could be quite<font color="#E5E5E5"> tricky</font>

780
00:37:28,479 --> 00:37:34,949
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> tensorflow otherwise</font><font color="#CCCCCC"> okay</font>

781
00:37:34,949 --> 00:37:42,569
so that<font color="#CCCCCC"> is the the tensorflow</font>

782
00:37:42,630 --> 00:37:47,309
algorithm from end to end

783
00:37:47,769 --> 00:37:51,159
Rachel you want<font color="#CCCCCC"> to pick</font><font color="#E5E5E5"> out an</font><font color="#CCCCCC"> ano your</font>

784
00:37:51,159 --> 00:37:53,549
question

785
00:37:53,690 --> 00:37:58,550
so actually I kind of am helping start a

786
00:37:58,550 --> 00:38:02,690
company<font color="#E5E5E5"> the I don't know if you've</font><font color="#CCCCCC"> seen</font>

787
00:38:02,690 --> 00:38:04,790
my<font color="#E5E5E5"> talks on ted.com that I kind of show</font>

788
00:38:04,790 --> 00:38:08,030
this demo of this interactive labeling

789
00:38:08,030 --> 00:38:12,440
tool a friend of mine said<font color="#CCCCCC"> that he</font>

790
00:38:12,440 --> 00:38:13,670
wanted to<font color="#E5E5E5"> start a company to</font><font color="#CCCCCC"> actually</font>

791
00:38:13,670 --> 00:38:15,110
make that<font color="#E5E5E5"> and commercialize it</font>

792
00:38:15,110 --> 00:38:17,330
so I guess my short<font color="#CCCCCC"> answer is I'm</font>

793
00:38:17,330 --> 00:38:19,070
helping somebody do<font color="#CCCCCC"> that so I</font><font color="#E5E5E5"> think</font>

794
00:38:19,070 --> 00:38:20,510
that's<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> cool</font>

795
00:38:20,510 --> 00:38:23,870
more generally<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> before I</font>

796
00:38:23,870 --> 00:38:26,450
think<font color="#E5E5E5"> that best thing</font><font color="#CCCCCC"> to do is always</font><font color="#E5E5E5"> to</font>

797
00:38:26,450 --> 00:38:29,120
scratch an edge so pick whatever you've

798
00:38:29,120 --> 00:38:31,550
been<font color="#CCCCCC"> passionate about or something</font>

799
00:38:31,550 --> 00:38:33,430
<font color="#E5E5E5">that's just driven you crazy and</font><font color="#CCCCCC"> you</font>

800
00:38:33,430 --> 00:38:37,820
<font color="#CCCCCC">know fix it if you have the benefit of</font>

801
00:38:37,820 --> 00:38:39,680
being<font color="#E5E5E5"> able to take enough</font><font color="#CCCCCC"> time to do</font>

802
00:38:39,680 --> 00:38:42,350
absolutely<font color="#E5E5E5"> anything you want</font><font color="#CCCCCC"> I felt</font><font color="#E5E5E5"> like</font>

803
00:38:42,350 --> 00:38:43,850
the three most important areas for

804
00:38:43,850 --> 00:38:48,800
applying deep learning<font color="#E5E5E5"> when I last</font>

805
00:38:48,800 --> 00:38:50,120
<font color="#CCCCCC">talked which was two</font><font color="#E5E5E5"> or three</font><font color="#CCCCCC"> years ago</font>

806
00:38:50,120 --> 00:38:53,600
were medicine robotics and satellite

807
00:38:53,600 --> 00:38:57,470
imagery<font color="#CCCCCC"> because at</font><font color="#E5E5E5"> that time computer</font>

808
00:38:57,470 --> 00:38:59,020
vision was<font color="#E5E5E5"> the only area that was</font>

809
00:38:59,020 --> 00:39:02,450
remotely maturer<font color="#E5E5E5"> really for machine</font>

810
00:39:02,450 --> 00:39:05,540
learning deep learning<font color="#E5E5E5"> and those three</font>

811
00:39:05,540 --> 00:39:09,080
areas or were areas<font color="#CCCCCC"> that very heavily</font>

812
00:39:09,080 --> 00:39:11,570
<font color="#CCCCCC">used</font><font color="#E5E5E5"> computer vision or could heavily</font>

813
00:39:11,570 --> 00:39:14,240
use computer vision<font color="#E5E5E5"> and were potentially</font>

814
00:39:14,240 --> 00:39:17,450
very large markets<font color="#CCCCCC"> medicine is probably</font>

815
00:39:17,450 --> 00:39:18,950
the largest industry in<font color="#E5E5E5"> the world I</font>

816
00:39:18,950 --> 00:39:20,450
think<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> three trillion dollars in</font>

817
00:39:20,450 --> 00:39:24,320
America<font color="#CCCCCC"> alone robotics isn't</font><font color="#E5E5E5"> currently</font>

818
00:39:24,320 --> 00:39:26,420
that large but at some point<font color="#CCCCCC"> it probably</font>

819
00:39:26,420 --> 00:39:27,980
<font color="#CCCCCC">will become the largest industry in</font><font color="#E5E5E5"> the</font>

820
00:39:27,980 --> 00:39:31,430
<font color="#E5E5E5">world</font><font color="#CCCCCC"> if you know everything we do</font>

821
00:39:31,430 --> 00:39:33,110
manually is replaced with automated

822
00:39:33,110 --> 00:39:36,760
approaches<font color="#E5E5E5"> and satellite imagery is</font>

823
00:39:36,760 --> 00:39:38,780
<font color="#E5E5E5">basically used by military intelligence</font>

824
00:39:38,780 --> 00:39:40,430
<font color="#CCCCCC">so you have some of the biggest budgets</font>

825
00:39:40,430 --> 00:39:44,270
in the world<font color="#E5E5E5"> so yeah I guess those three</font>

826
00:39:44,270 --> 00:39:49,490
areas<font color="#CCCCCC"> take it going oh no</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> got some</font>

827
00:39:49,490 --> 00:39:51,790
higher<font color="#E5E5E5"> weather</font><font color="#CCCCCC"> fish okay well next</font><font color="#E5E5E5"> time</font>

828
00:39:51,790 --> 00:39:56,770
<font color="#CCCCCC">alright I know it's like a break soon</font>

829
00:39:56,770 --> 00:40:02,630
<font color="#CCCCCC">before I do I might</font><font color="#E5E5E5"> just introduce what</font>

830
00:40:02,630 --> 00:40:07,380
we're going<font color="#E5E5E5"> to be looking</font><font color="#CCCCCC"> at next</font><font color="#E5E5E5"> so</font>

831
00:40:07,380 --> 00:40:11,819
<font color="#CCCCCC">we're going to start on our NLP</font><font color="#E5E5E5"> and</font>

832
00:40:11,819 --> 00:40:13,859
specifically translation deep dive<font color="#E5E5E5"> and</font>

833
00:40:13,859 --> 00:40:15,540
we're going<font color="#E5E5E5"> to be really following on</font>

834
00:40:15,540 --> 00:40:18,990
from the<font color="#CCCCCC"> end-to-end</font><font color="#E5E5E5"> memory networks from</font>

835
00:40:18,990 --> 00:40:24,210
<font color="#E5E5E5">last week</font><font color="#CCCCCC"> the one of the</font><font color="#E5E5E5"> things that I</font>

836
00:40:24,210 --> 00:40:27,119
find kind of most<font color="#E5E5E5"> interesting and was</font>

837
00:40:27,119 --> 00:40:28,650
challenging and<font color="#E5E5E5"> setting up this course</font>

838
00:40:28,650 --> 00:40:31,890
is<font color="#E5E5E5"> coming up with good problem sets</font>

839
00:40:31,890 --> 00:40:34,980
which are like hard enough to be

840
00:40:34,980 --> 00:40:38,099
interesting and easy enough<font color="#CCCCCC"> to be</font>

841
00:40:38,099 --> 00:40:42,089
possible<font color="#E5E5E5"> and often other people</font><font color="#CCCCCC"> already</font>

842
00:40:42,089 --> 00:40:43,260
done that<font color="#CCCCCC"> so I was</font><font color="#E5E5E5"> lucky enough that</font>

843
00:40:43,260 --> 00:40:45,109
<font color="#E5E5E5">somebody else had already shown a</font>

844
00:40:45,109 --> 00:40:47,970
example<font color="#E5E5E5"> of using sequence</font><font color="#CCCCCC"> tool sequence</font>

845
00:40:47,970 --> 00:40:51,030
learning<font color="#E5E5E5"> for what they called spelling</font>

846
00:40:51,030 --> 00:40:54,089
<font color="#E5E5E5">bee and basically we start with this</font>

847
00:40:54,089 --> 00:40:55,890
thing called<font color="#E5E5E5"> the CMU pronouncing</font>

848
00:40:55,890 --> 00:40:58,559
dictionary which has things that<font color="#E5E5E5"> look</font>

849
00:40:58,559 --> 00:41:03,920
<font color="#CCCCCC">like this the wiki followed</font><font color="#E5E5E5"> by a</font>

850
00:41:03,920 --> 00:41:07,980
phonetic description of how<font color="#E5E5E5"> to read the</font>

851
00:41:07,980 --> 00:41:12,599
where key<font color="#E5E5E5"> so the way these work this is</font>

852
00:41:12,599 --> 00:41:14,430
actually specifically<font color="#E5E5E5"> an American</font>

853
00:41:14,430 --> 00:41:19,680
pronunciation dictionary the<font color="#CCCCCC"> continents</font>

854
00:41:19,680 --> 00:41:22,470
<font color="#E5E5E5">pretty straightforward the vowel sounds</font>

855
00:41:22,470 --> 00:41:24,750
<font color="#E5E5E5">have a number at the end showing how</font>

856
00:41:24,750 --> 00:41:27,720
much stress is an h1<font color="#E5E5E5"> right so</font><font color="#CCCCCC"> 0 1</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> 2</font>

857
00:41:27,720 --> 00:41:29,670
<font color="#E5E5E5">so in this case you can see</font><font color="#CCCCCC"> that the</font>

858
00:41:29,670 --> 00:41:31,380
middle<font color="#E5E5E5"> one is where most of the stress</font>

859
00:41:31,380 --> 00:41:34,900
is<font color="#E5E5E5"> so it's risky</font>

860
00:41:34,900 --> 00:41:38,920
so<font color="#E5E5E5"> here is the letter A</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it is</font>

861
00:41:38,920 --> 00:41:43,720
pronounced<font color="#E5E5E5"> ah okay so the goal that</font>

862
00:41:43,720 --> 00:41:44,890
we're going to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> out after the</font>

863
00:41:44,890 --> 00:41:48,730
break<font color="#E5E5E5"> is to do the other direction which</font>

864
00:41:48,730 --> 00:41:51,460
is to start with how do you say it

865
00:41:51,460 --> 00:41:55,780
<font color="#E5E5E5">I'm turn it into how do you spell it um</font>

866
00:41:55,780 --> 00:41:57,100
this is quite<font color="#CCCCCC"> a difficult question</font>

867
00:41:57,100 --> 00:41:59,050
because<font color="#CCCCCC"> though English is</font><font color="#E5E5E5"> really weird</font>

868
00:41:59,050 --> 00:42:03,430
<font color="#E5E5E5">to spell and the number of phonemes and</font>

869
00:42:03,430 --> 00:42:08,350
<font color="#E5E5E5">will necessarily match</font><font color="#CCCCCC"> the thumb the</font>

870
00:42:08,350 --> 00:42:11,380
number of letters<font color="#CCCCCC"> so this is going to</font><font color="#E5E5E5"> be</font>

871
00:42:11,380 --> 00:42:12,820
where we're going to start and<font color="#CCCCCC"> then</font>

872
00:42:12,820 --> 00:42:13,870
we're going<font color="#E5E5E5"> to try and solve this puzzle</font>

873
00:42:13,870 --> 00:42:15,940
<font color="#E5E5E5">and then we'll use the solutions in this</font>

874
00:42:15,940 --> 00:42:18,540
<font color="#E5E5E5">puzzle to try and learn to translate</font>

875
00:42:18,540 --> 00:42:21,550
<font color="#E5E5E5">French into English using the same basic</font>

876
00:42:21,550 --> 00:42:23,650
idea<font color="#CCCCCC"> so let's have a ten minute break</font>

877
00:42:23,650 --> 00:42:29,380
and we'll come<font color="#CCCCCC"> back at</font><font color="#E5E5E5"> 7:40</font><font color="#CCCCCC"> so just to</font>

878
00:42:29,380 --> 00:42:30,850
clarify<font color="#E5E5E5"> this will make sure everybody</font>

879
00:42:30,850 --> 00:42:32,980
understands the<font color="#E5E5E5"> problem we're solving</font>

880
00:42:32,980 --> 00:42:35,050
here so the problem we're solving is

881
00:42:35,050 --> 00:42:36,730
we're going<font color="#E5E5E5"> to be told here is how to</font>

882
00:42:36,730 --> 00:42:39,520
pronounce something<font color="#E5E5E5"> okay and then we</font>

883
00:42:39,520 --> 00:42:41,170
have<font color="#CCCCCC"> to say okay here it said a</font><font color="#E5E5E5"> speller</font>

884
00:42:41,170 --> 00:42:42,640
<font color="#E5E5E5">all right so this is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be our</font>

885
00:42:42,640 --> 00:42:45,210
input<font color="#CCCCCC"> and this is</font><font color="#E5E5E5"> going to be our target</font>

886
00:42:45,210 --> 00:42:48,010
so this is like a translation<font color="#CCCCCC"> problem</font>

887
00:42:48,010 --> 00:42:51,600
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> writ simpler</font>

888
00:42:52,380 --> 00:42:57,390
have pre-trained phoneme vectors or<font color="#E5E5E5"> pre</font>

889
00:42:57,390 --> 00:42:59,339
<font color="#E5E5E5">change letter vectors so</font><font color="#CCCCCC"> they'd have to</font>

890
00:42:59,339 --> 00:43:01,529
do this by building<font color="#E5E5E5"> a model I'm going to</font>

891
00:43:01,529 --> 00:43:04,190
have to create some<font color="#E5E5E5"> embeddings</font><font color="#CCCCCC"> of arrow</font>

892
00:43:04,190 --> 00:43:08,940
so in general the<font color="#E5E5E5"> first steps necessary</font>

893
00:43:08,940 --> 00:43:13,079
<font color="#E5E5E5">to create an NLP model tends to look</font>

894
00:43:13,079 --> 00:43:16,740
very very similar<font color="#CCCCCC"> I feel like I've done</font>

895
00:43:16,740 --> 00:43:18,059
them<font color="#CCCCCC"> in a thousand different ways</font><font color="#E5E5E5"> now</font>

896
00:43:18,059 --> 00:43:20,240
and at some<font color="#E5E5E5"> point I really need to</font>

897
00:43:20,240 --> 00:43:22,680
abstract<font color="#E5E5E5"> the cell</font><font color="#CCCCCC"> laughs into us into a</font>

898
00:43:22,680 --> 00:43:23,940
simple set of functions<font color="#E5E5E5"> that we use</font>

899
00:43:23,940 --> 00:43:27,660
again<font color="#E5E5E5"> and</font><font color="#CCCCCC"> again and</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> but let's go</font>

900
00:43:27,660 --> 00:43:29,849
through<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> if you've got any</font>

901
00:43:29,849 --> 00:43:32,490
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> about any</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the code or</font><font color="#CCCCCC"> steps</font>

902
00:43:32,490 --> 00:43:34,069
or<font color="#CCCCCC"> anything let me know</font>

903
00:43:34,069 --> 00:43:40,380
um so the basic<font color="#CCCCCC"> pronounciation</font>

904
00:43:40,380 --> 00:43:43,799
dictionary is just a<font color="#E5E5E5"> text file</font><font color="#CCCCCC"> and I'm</font>

905
00:43:43,799 --> 00:43:48,470
going<font color="#E5E5E5"> to just grab the lines which are</font>

906
00:43:48,920 --> 00:43:51,089
actual words<font color="#E5E5E5"> so they have to start with</font>

907
00:43:51,089 --> 00:43:55,309
a letter now<font color="#E5E5E5"> something which I have</font>

908
00:44:00,890 --> 00:44:03,150
<font color="#CCCCCC">actually it's gonna match that okay</font><font color="#E5E5E5"> so</font>

909
00:44:03,150 --> 00:44:05,490
we're<font color="#E5E5E5"> going to go through every line</font><font color="#CCCCCC"> of</font>

910
00:44:05,490 --> 00:44:07,080
the text<font color="#CCCCCC"> file here's the handy things</font>

911
00:44:07,080 --> 00:44:08,310
that a lot<font color="#CCCCCC"> of people don't realize you</font>

912
00:44:08,310 --> 00:44:11,640
can<font color="#CCCCCC"> do in</font><font color="#E5E5E5"> Python when you call open that</font>

913
00:44:11,640 --> 00:44:13,740
returns a generator which lists<font color="#E5E5E5"> all of</font>

914
00:44:13,740 --> 00:44:16,170
<font color="#CCCCCC">the lines</font><font color="#E5E5E5"> so I see</font><font color="#CCCCCC"> if you just go</font><font color="#E5E5E5"> for L</font>

915
00:44:16,170 --> 00:44:20,670
in open blah that's<font color="#E5E5E5"> now looping through</font>

916
00:44:20,670 --> 00:44:23,370
every line in that file<font color="#E5E5E5"> okay so I can</font>

917
00:44:23,370 --> 00:44:27,920
then<font color="#E5E5E5"> say filter those which start with a</font>

918
00:44:27,920 --> 00:44:31,320
<font color="#E5E5E5">which start with a lowercase letter</font><font color="#CCCCCC"> okay</font>

919
00:44:31,320 --> 00:44:33,420
so sorry boo start with an uppercase

920
00:44:33,420 --> 00:44:37,110
letter<font color="#CCCCCC"> they're all uppercase and then</font>

921
00:44:37,110 --> 00:44:42,570
strip off any white space<font color="#CCCCCC"> and</font><font color="#E5E5E5"> spirit on</font>

922
00:44:42,570 --> 00:44:45,750
white space<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> the basically the</font>

923
00:44:45,750 --> 00:44:49,680
<font color="#E5E5E5">steps necessary to separate out</font><font color="#CCCCCC"> the word</font>

924
00:44:49,680 --> 00:44:52,530
from<font color="#E5E5E5"> the pronunciation</font><font color="#CCCCCC"> and then the</font>

925
00:44:52,530 --> 00:44:55,370
pronunciation is just white space

926
00:44:55,370 --> 00:44:59,010
delimited so we can then fit that<font color="#E5E5E5"> and</font>

927
00:44:59,010 --> 00:45:00,960
that the steps necessary<font color="#E5E5E5"> to get the word</font>

928
00:45:00,960 --> 00:45:03,300
and the<font color="#CCCCCC"> pronunciation as a set of</font>

929
00:45:03,300 --> 00:45:07,530
phonemes<font color="#CCCCCC"> so as we tend to pretty much</font>

930
00:45:07,530 --> 00:45:09,300
<font color="#E5E5E5">always do with these language models we</font>

931
00:45:09,300 --> 00:45:11,100
next need to<font color="#E5E5E5"> get a list of like water</font>

932
00:45:11,100 --> 00:45:13,380
all of<font color="#E5E5E5"> the vocabulary items so in this</font>

933
00:45:13,380 --> 00:45:15,390
case the vocabulary items are the other

934
00:45:15,390 --> 00:45:18,510
possible phonemes<font color="#E5E5E5"> so we can create a set</font>

935
00:45:18,510 --> 00:45:24,960
of<font color="#E5E5E5"> every possible phoneme and then we</font>

936
00:45:24,960 --> 00:45:28,350
can sort<font color="#E5E5E5"> it and what we always</font><font color="#CCCCCC"> like to</font>

937
00:45:28,350 --> 00:45:33,630
<font color="#E5E5E5">do is to get an extra an extra character</font>

938
00:45:33,630 --> 00:45:36,960
<font color="#E5E5E5">or an extra object in position zero</font>

939
00:45:36,960 --> 00:45:38,900
because remember<font color="#E5E5E5"> we use zero for padding</font>

940
00:45:38,900 --> 00:45:41,640
<font color="#CCCCCC">right so that's</font><font color="#E5E5E5"> why I stick I'm going to</font>

941
00:45:41,640 --> 00:45:44,130
use underscore is our special padding

942
00:45:44,130 --> 00:45:45,600
letter here so<font color="#E5E5E5"> let's take an underscore</font>

943
00:45:45,600 --> 00:45:48,770
at the front so here are the<font color="#E5E5E5"> first five</font>

944
00:45:48,770 --> 00:45:49,920
phonemes

945
00:45:49,920 --> 00:45:52,290
this is our special padding one which is

946
00:45:52,290 --> 00:45:54,740
going<font color="#E5E5E5"> to be index zero and then there's</font>

947
00:45:54,740 --> 00:45:57,120
an<font color="#CCCCCC"> R</font><font color="#E5E5E5"> with three different</font><font color="#CCCCCC"> level stress</font>

948
00:45:57,120 --> 00:46:02,580
and so forth<font color="#E5E5E5"> okay now the next</font><font color="#CCCCCC"> thing</font>

949
00:46:02,580 --> 00:46:04,380
that<font color="#E5E5E5"> we can to do anytime we've got a</font>

950
00:46:04,380 --> 00:46:06,540
list<font color="#E5E5E5"> of</font><font color="#CCCCCC"> vocabulary items is to</font><font color="#E5E5E5"> create a</font>

951
00:46:06,540 --> 00:46:08,970
list in the opposite<font color="#CCCCCC"> direction so we go</font>

952
00:46:08,970 --> 00:46:12,270
from phoneme<font color="#E5E5E5"> to index we</font>

953
00:46:12,270 --> 00:46:14,730
just a dictionary where we enumerate

954
00:46:14,730 --> 00:46:17,850
through<font color="#E5E5E5"> all of our phonemes and put it</font>

955
00:46:17,850 --> 00:46:18,720
in the opposite order

956
00:46:18,720 --> 00:46:23,250
so from phoneme<font color="#E5E5E5"> to index</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> we've used</font>

957
00:46:23,250 --> 00:46:26,400
<font color="#E5E5E5">this approach</font><font color="#CCCCCC"> 2,000 times before but</font>

958
00:46:26,400 --> 00:46:27,300
it's<font color="#E5E5E5"> going to make sure everybody</font>

959
00:46:27,300 --> 00:46:30,420
understands that<font color="#CCCCCC"> when you use enumerate</font>

960
00:46:30,420 --> 00:46:32,850
in Python it doesn't just return each

961
00:46:32,850 --> 00:46:35,010
phoneme<font color="#CCCCCC"> but returns a tuple that</font>

962
00:46:35,010 --> 00:46:37,440
<font color="#CCCCCC">contains the index</font><font color="#E5E5E5"> of the phoneme and</font>

963
00:46:37,440 --> 00:46:39,540
<font color="#E5E5E5">then the phoneme itself so that's the</font>

964
00:46:39,540 --> 00:46:42,630
key<font color="#CCCCCC"> and the value</font><font color="#E5E5E5"> so then if we go value</font>

965
00:46:42,630 --> 00:46:45,180
comma key that's now the phoneme

966
00:46:45,180 --> 00:46:47,520
followed<font color="#E5E5E5"> by the index and so if we turn</font>

967
00:46:47,520 --> 00:46:49,050
<font color="#CCCCCC">that into a dictionary we now have a</font>

968
00:46:49,050 --> 00:46:50,640
<font color="#CCCCCC">dictionary which you can give it a</font>

969
00:46:50,640 --> 00:46:54,960
phoneme and<font color="#E5E5E5"> return it and index</font><font color="#CCCCCC"> here's</font>

970
00:46:54,960 --> 00:46:56,970
all the letters of<font color="#E5E5E5"> English again with</font>

971
00:46:56,970 --> 00:47:00,600
our special underscore at the front and

972
00:47:00,600 --> 00:47:01,680
<font color="#E5E5E5">we've got one extra</font><font color="#CCCCCC"> thing we'll talk</font>

973
00:47:01,680 --> 00:47:04,650
<font color="#E5E5E5">about</font><font color="#CCCCCC"> later which is asterisks so that's</font>

974
00:47:04,650 --> 00:47:07,950
a list of letters<font color="#E5E5E5"> and so again to go</font>

975
00:47:07,950 --> 00:47:10,560
from letter to letter index<font color="#E5E5E5"> we just</font>

976
00:47:10,560 --> 00:47:12,930
create a<font color="#CCCCCC"> dictionary which</font><font color="#E5E5E5"> reverses it</font>

977
00:47:12,930 --> 00:47:19,760
again<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so now that</font><font color="#E5E5E5"> we've got our</font>

978
00:47:19,760 --> 00:47:22,260
phoneme to index and<font color="#E5E5E5"> letter to index we</font>

979
00:47:22,260 --> 00:47:26,600
can<font color="#E5E5E5"> use that to</font><font color="#CCCCCC"> convert this data into</font>

980
00:47:26,600 --> 00:47:29,490
<font color="#E5E5E5">numeric data</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> which is like what we</font>

981
00:47:29,490 --> 00:47:31,080
always<font color="#E5E5E5"> do with these language models we</font>

982
00:47:31,080 --> 00:47:35,130
end up with just<font color="#CCCCCC"> a list</font><font color="#E5E5E5"> of indices we</font>

983
00:47:35,130 --> 00:47:38,490
can pick some<font color="#E5E5E5"> maximum length word so I'm</font>

984
00:47:38,490 --> 00:47:41,430
just going<font color="#CCCCCC"> to say 15 and so we're</font><font color="#E5E5E5"> going</font>

985
00:47:41,430 --> 00:47:45,560
<font color="#CCCCCC">to</font><font color="#E5E5E5"> create a dictionary</font><font color="#CCCCCC"> which maps from</font>

986
00:47:45,560 --> 00:47:49,500
each word<font color="#E5E5E5"> to a list of phonemes we're</font>

987
00:47:49,500 --> 00:47:51,330
going to get<font color="#E5E5E5"> the indexes for them yes</font>

988
00:47:51,330 --> 00:47:55,980
Rachel okay so this dictionary

989
00:47:55,980 --> 00:47:59,760
comprehension<font color="#E5E5E5"> is a little bit awkward</font><font color="#CCCCCC"> so</font>

990
00:47:59,760 --> 00:48:00,480
I thought<font color="#E5E5E5"> this would be a good</font>

991
00:48:00,480 --> 00:48:02,550
opportunity to talk<font color="#CCCCCC"> about dictionary</font>

992
00:48:02,550 --> 00:48:03,840
comprehensions and list comprehensions

993
00:48:03,840 --> 00:48:06,990
for a moment so we're going<font color="#E5E5E5"> to pause</font>

994
00:48:06,990 --> 00:48:08,490
this in a moment<font color="#CCCCCC"> but first of</font><font color="#E5E5E5"> all let's</font>

995
00:48:08,490 --> 00:48:11,010
look<font color="#E5E5E5"> at a couple of</font><font color="#CCCCCC"> examples of</font><font color="#E5E5E5"> list</font>

996
00:48:11,010 --> 00:48:13,440
comprehensions<font color="#E5E5E5"> so the first thing to</font>

997
00:48:13,440 --> 00:48:14,640
note is

998
00:48:14,640 --> 00:48:15,989
when you go<font color="#E5E5E5"> something like this</font><font color="#CCCCCC"> the</font>

999
00:48:15,989 --> 00:48:20,009
string X Y<font color="#CCCCCC"> Z</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> string here</font><font color="#CCCCCC"> - is</font>

1000
00:48:20,009 --> 00:48:21,720
perfectly<font color="#E5E5E5"> happy</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> consider that a list</font>

1001
00:48:21,720 --> 00:48:23,670
of letters<font color="#CCCCCC"> so the placing considers this</font>

1002
00:48:23,670 --> 00:48:25,499
the same as<font color="#CCCCCC"> being a list of X comma Y</font>

1003
00:48:25,499 --> 00:48:27,839
comma<font color="#CCCCCC"> debt so you</font><font color="#E5E5E5"> can think of this as</font>

1004
00:48:27,839 --> 00:48:30,329
<font color="#E5E5E5">two lists list of</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> Y</font><font color="#CCCCCC"> Z and</font><font color="#E5E5E5"> almost of</font>

1005
00:48:30,329 --> 00:48:34,650
ABC so here is the simplest possible

1006
00:48:34,650 --> 00:48:38,339
<font color="#E5E5E5">list comprehension okay so go</font><font color="#CCCCCC"> through</font>

1007
00:48:38,339 --> 00:48:41,579
every element<font color="#E5E5E5"> of a and put that into a</font>

1008
00:48:41,579 --> 00:48:45,390
list so if I call<font color="#E5E5E5"> that then it returns</font>

1009
00:48:45,390 --> 00:48:47,880
exactly what I started with okay that's

1010
00:48:47,880 --> 00:48:50,670
not<font color="#CCCCCC"> very interesting what if now we</font>

1011
00:48:50,670 --> 00:48:56,700
<font color="#E5E5E5">replaced</font><font color="#CCCCCC"> o</font><font color="#E5E5E5"> with another list</font>

1012
00:48:56,700 --> 00:49:00,269
comprehension<font color="#E5E5E5"> okay so what that's going</font>

1013
00:49:00,269 --> 00:49:03,289
to do is it's now going<font color="#E5E5E5"> to return a list</font>

1014
00:49:03,289 --> 00:49:08,999
for each list<font color="#E5E5E5"> okay so this is one way of</font>

1015
00:49:08,999 --> 00:49:11,519
<font color="#E5E5E5">pulling things out</font><font color="#CCCCCC"> of sub lists is to</font>

1016
00:49:11,519 --> 00:49:13,380
<font color="#E5E5E5">basically take the thing that was here</font>

1017
00:49:13,380 --> 00:49:15,269
<font color="#E5E5E5">and replace it</font><font color="#CCCCCC"> with a new list</font>

1018
00:49:15,269 --> 00:49:16,920
comprehension<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's going to give</font>

1019
00:49:16,920 --> 00:49:20,970
you a list of<font color="#CCCCCC"> Lists now the reason I</font>

1020
00:49:20,970 --> 00:49:22,470
wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about this is</font><font color="#CCCCCC"> because</font>

1021
00:49:22,470 --> 00:49:24,569
<font color="#E5E5E5">it's quite confusing</font><font color="#CCCCCC"> in Python you can</font>

1022
00:49:24,569 --> 00:49:28,829
also write<font color="#E5E5E5"> this which is different so in</font>

1023
00:49:28,829 --> 00:49:32,670
this case I'm going for each object<font color="#CCCCCC"> in</font>

1024
00:49:32,670 --> 00:49:36,960
our a list<font color="#E5E5E5"> and then for each</font><font color="#CCCCCC"> object in</font>

1025
00:49:36,960 --> 00:49:39,119
that sub list and you see what's

1026
00:49:39,119 --> 00:49:40,799
<font color="#E5E5E5">different here I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to like in</font>

1027
00:49:40,799 --> 00:49:42,839
square brackets right it's<font color="#E5E5E5"> just all laid</font>

1028
00:49:42,839 --> 00:49:45,390
<font color="#E5E5E5">out</font><font color="#CCCCCC"> next to each other</font><font color="#E5E5E5"> so I find it's</font>

1029
00:49:45,390 --> 00:49:47,819
really<font color="#CCCCCC"> confusing but the idea is</font><font color="#E5E5E5"> you're</font>

1030
00:49:47,819 --> 00:49:49,230
meant to<font color="#E5E5E5"> think of this is just being</font>

1031
00:49:49,230 --> 00:49:51,420
<font color="#E5E5E5">like a normal for loop inside</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> for loop</font>

1032
00:49:51,420 --> 00:49:53,849
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and so what this</font><font color="#CCCCCC"> does is it goes</font>

1033
00:49:53,849 --> 00:49:58,289
through<font color="#E5E5E5"> X Y Z and then ABC</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> in X</font>

1034
00:49:58,289 --> 00:50:00,210
Y<font color="#CCCCCC"> Z to go to your each of x and</font><font color="#E5E5E5"> Y and</font>

1035
00:50:00,210 --> 00:50:02,489
Zed but because<font color="#CCCCCC"> there's no embedded set</font>

1036
00:50:02,489 --> 00:50:04,769
of square brackets<font color="#E5E5E5"> that actually ends up</font>

1037
00:50:04,769 --> 00:50:11,390
flattening the list okay so we just<font color="#E5E5E5"> saw</font>

1038
00:50:12,230 --> 00:50:16,869
<font color="#E5E5E5">um I think</font>

1039
00:50:17,830 --> 00:50:19,930
we're about to see an example<font color="#E5E5E5"> of the</font>

1040
00:50:19,930 --> 00:50:22,360
square bracket version<font color="#CCCCCC"> and pretty</font><font color="#E5E5E5"> soon</font>

1041
00:50:22,360 --> 00:50:23,860
we'll<font color="#CCCCCC"> be seeing an example of this</font>

1042
00:50:23,860 --> 00:50:25,840
<font color="#CCCCCC">version as well</font><font color="#E5E5E5"> these are both used for</font>

1043
00:50:25,840 --> 00:50:27,790
<font color="#E5E5E5">it's very useful to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to flatten</font><font color="#CCCCCC"> a</font>

1044
00:50:27,790 --> 00:50:30,130
list that's<font color="#E5E5E5"> very</font><font color="#CCCCCC"> useful to be able to do</font>

1045
00:50:30,130 --> 00:50:33,220
things with sub lists and then just to

1046
00:50:33,220 --> 00:50:36,790
<font color="#CCCCCC">be aware that anytime</font><font color="#E5E5E5"> you have any</font><font color="#CCCCCC"> kind</font>

1047
00:50:36,790 --> 00:50:38,500
<font color="#E5E5E5">of expression like this</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> replace</font>

1048
00:50:38,500 --> 00:50:42,670
the thing at<font color="#CCCCCC"> the here with any</font>

1049
00:50:42,670 --> 00:50:45,460
expression you like right<font color="#E5E5E5"> so we could</font>

1050
00:50:45,460 --> 00:51:01,080
say<font color="#CCCCCC"> for example we could say o dot upper</font>

1051
00:51:01,080 --> 00:51:05,020
<font color="#E5E5E5">okay so you can basically map different</font>

1052
00:51:05,020 --> 00:51:06,400
<font color="#E5E5E5">computations to each element</font><font color="#CCCCCC"> of a list</font>

1053
00:51:06,400 --> 00:51:10,000
<font color="#E5E5E5">and then the second</font><font color="#CCCCCC"> thing you can</font><font color="#E5E5E5"> do is</font>

1054
00:51:10,000 --> 00:51:19,360
put an F here to<font color="#E5E5E5"> filter it if o 0 take</font>

1055
00:51:19,360 --> 00:51:21,750
all day

1056
00:51:22,810 --> 00:51:26,830
very wrong there sorry

1057
00:51:26,830 --> 00:51:36,640
oh thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> okay okay so that's</font>

1058
00:51:36,640 --> 00:51:39,160
<font color="#CCCCCC">basically the</font><font color="#E5E5E5"> idea</font><font color="#CCCCCC"> you can create any</font>

1059
00:51:39,160 --> 00:51:40,720
list comprehension<font color="#E5E5E5"> you know you like by</font>

1060
00:51:40,720 --> 00:51:43,420
putting computations here<font color="#E5E5E5"> filters here</font>

1061
00:51:43,420 --> 00:51:46,300
and optionally multiple lists of<font color="#CCCCCC"> lists</font>

1062
00:51:46,300 --> 00:51:50,140
here the other thing<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do is</font>

1063
00:51:50,140 --> 00:51:51,520
replace the<font color="#E5E5E5"> square brackets with curly</font>

1064
00:51:51,520 --> 00:51:54,490
brackets in which case you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to put</font>

1065
00:51:54,490 --> 00:51:56,560
something<font color="#E5E5E5"> before a colon</font><font color="#CCCCCC"> and something</font>

1066
00:51:56,560 --> 00:51:58,900
after a colon<font color="#E5E5E5"> the thing before is your</font>

1067
00:51:58,900 --> 00:52:01,720
key nothing after is your value<font color="#E5E5E5"> so here</font>

1068
00:52:01,720 --> 00:52:04,060
we're going<font color="#E5E5E5"> for</font><font color="#CCCCCC"> oh and then there's</font>

1069
00:52:04,060 --> 00:52:05,920
another thing<font color="#CCCCCC"> you can do which is</font><font color="#E5E5E5"> if the</font>

1070
00:52:05,920 --> 00:52:08,320
thing you're looping<font color="#E5E5E5"> through is a bunch</font>

1071
00:52:08,320 --> 00:52:10,330
of lists or tuples<font color="#E5E5E5"> or nothing like that</font>

1072
00:52:10,330 --> 00:52:12,330
you<font color="#E5E5E5"> can pull them out into two pieces</font>

1073
00:52:12,330 --> 00:52:16,510
<font color="#E5E5E5">like so so this</font><font color="#CCCCCC"> is the word and this is</font>

1074
00:52:16,510 --> 00:52:19,180
the list of phonemes so we're going to

1075
00:52:19,180 --> 00:52:22,900
<font color="#E5E5E5">have the</font><font color="#CCCCCC"> lowercase</font><font color="#E5E5E5"> word will be our keys</font>

1076
00:52:22,900 --> 00:52:27,040
<font color="#E5E5E5">in our dictionary and the values will be</font>

1077
00:52:27,040 --> 00:52:28,130
lists

1078
00:52:28,130 --> 00:52:30,199
so we're doing<font color="#E5E5E5"> it</font><font color="#CCCCCC"> just like</font><font color="#E5E5E5"> we did down</font>

1079
00:52:30,199 --> 00:52:33,559
<font color="#CCCCCC">here and the list will be let's go</font>

1080
00:52:33,559 --> 00:52:38,150
through each<font color="#E5E5E5"> phoneme and go phoneme to</font>

1081
00:52:38,150 --> 00:52:41,329
index<font color="#CCCCCC"> okay so now we have</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that</font>

1082
00:52:41,329 --> 00:52:43,880
<font color="#E5E5E5">maps from every word to</font><font color="#CCCCCC"> its list of</font>

1083
00:52:43,880 --> 00:52:51,969
phoneme indexes<font color="#E5E5E5"> all right so that's that</font>

1084
00:52:52,299 --> 00:52:56,420
<font color="#E5E5E5">we can find out what the maximum length</font>

1085
00:52:56,420 --> 00:52:58,759
of<font color="#CCCCCC"> editing is in terms of</font><font color="#E5E5E5"> how many</font>

1086
00:52:58,759 --> 00:53:01,430
<font color="#E5E5E5">phonemes that</font><font color="#CCCCCC"> are and we can do that by</font>

1087
00:53:01,430 --> 00:53:03,920
again<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> just go through every one</font>

1088
00:53:03,920 --> 00:53:06,499
<font color="#CCCCCC">of those dictionary items</font><font color="#E5E5E5"> calling</font>

1089
00:53:06,499 --> 00:53:08,930
<font color="#CCCCCC">lengths on each one</font><font color="#E5E5E5"> and then doing a max</font>

1090
00:53:08,930 --> 00:53:11,719
on that okay so there is<font color="#CCCCCC"> the maximum</font>

1091
00:53:11,719 --> 00:53:14,119
length so you<font color="#E5E5E5"> can see like combining</font>

1092
00:53:14,119 --> 00:53:17,569
<font color="#E5E5E5">list comprehensions with other functions</font>

1093
00:53:17,569 --> 00:53:26,269
is also powerful<font color="#E5E5E5"> all right so finally</font>

1094
00:53:26,269 --> 00:53:29,599
we're going<font color="#E5E5E5"> to create our nice square</font>

1095
00:53:29,599 --> 00:53:33,109
arrays normally we do this<font color="#E5E5E5"> with</font><font color="#CCCCCC"> CAD</font>

1096
00:53:33,109 --> 00:53:36,319
sequences<font color="#CCCCCC"> just through a change we're</font>

1097
00:53:36,319 --> 00:53:40,430
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> this manually this time</font><font color="#CCCCCC"> so</font>

1098
00:53:40,430 --> 00:53:42,729
the key<font color="#E5E5E5"> is that we start out</font><font color="#CCCCCC"> by creating</font>

1099
00:53:42,729 --> 00:53:47,299
<font color="#CCCCCC">two arrays of zeros because all the</font>

1100
00:53:47,299 --> 00:53:48,979
padding is going to be<font color="#E5E5E5"> 0 right</font><font color="#CCCCCC"> so if we</font>

1101
00:53:48,979 --> 00:53:51,049
start off<font color="#E5E5E5"> with</font><font color="#CCCCCC"> all zeros and</font><font color="#E5E5E5"> we can just</font>

1102
00:53:51,049 --> 00:53:53,089
fill in<font color="#E5E5E5"> the non zeros so this is going</font>

1103
00:53:53,089 --> 00:53:56,479
to be our all of<font color="#CCCCCC"> our phonemes</font><font color="#E5E5E5"> this is</font>

1104
00:53:56,479 --> 00:53:58,549
going to be our<font color="#E5E5E5"> actual spelling</font><font color="#CCCCCC"> that's</font>

1105
00:53:58,549 --> 00:54:00,559
<font color="#E5E5E5">our target labels so then we go through</font>

1106
00:54:00,559 --> 00:54:02,959
<font color="#E5E5E5">all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our and we've permitted them</font>

1107
00:54:02,959 --> 00:54:05,479
randomly<font color="#E5E5E5"> so randomly ordered things in</font>

1108
00:54:05,479 --> 00:54:09,459
the pronunciation<font color="#CCCCCC"> dictionaries</font><font color="#E5E5E5"> and we</font>

1109
00:54:09,459 --> 00:54:15,410
put<font color="#CCCCCC"> in size input</font><font color="#E5E5E5"> all of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> items from</font>

1110
00:54:15,410 --> 00:54:17,779
the<font color="#E5E5E5"> pronunciation dictionary and into</font>

1111
00:54:17,779 --> 00:54:22,249
<font color="#CCCCCC">labels</font><font color="#E5E5E5"> we go lesser to</font><font color="#CCCCCC"> indexed</font><font color="#E5E5E5"> all right</font>

1112
00:54:22,249 --> 00:54:24,140
<font color="#E5E5E5">so we now have one thing called input</font>

1113
00:54:24,140 --> 00:54:27,259
<font color="#CCCCCC">once in</font><font color="#E5E5E5"> court labels that contains nice</font>

1114
00:54:27,259 --> 00:54:31,660
rectangular<font color="#E5E5E5"> arrays padded with zeros</font>

1115
00:54:31,660 --> 00:54:35,520
<font color="#E5E5E5">containing exactly what we want</font>

1116
00:54:35,520 --> 00:54:37,350
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I'm not going to worry about this</font>

1117
00:54:37,350 --> 00:54:38,550
<font color="#E5E5E5">line yet because we're not going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

1118
00:54:38,550 --> 00:54:41,870
it for<font color="#CCCCCC"> the starting point</font>

1119
00:54:42,070 --> 00:54:44,560
so anyway you see dick<font color="#E5E5E5"> something just</font>

1120
00:54:44,560 --> 00:54:45,820
ignore<font color="#CCCCCC"> that for now we'll</font><font color="#E5E5E5"> get back to</font>

1121
00:54:45,820 --> 00:54:48,030
<font color="#CCCCCC">that later</font>

1122
00:54:48,060 --> 00:54:50,560
<font color="#E5E5E5">trains have</font><font color="#CCCCCC"> split is a very handy</font>

1123
00:54:50,560 --> 00:54:53,800
function from<font color="#E5E5E5"> SK learn that takes all of</font>

1124
00:54:53,800 --> 00:54:58,120
<font color="#E5E5E5">these lists and splits them all in the</font>

1125
00:54:58,120 --> 00:55:00,190
<font color="#E5E5E5">same way with this proportion in the</font>

1126
00:55:00,190 --> 00:55:03,850
test set and so<font color="#CCCCCC"> input becomes</font><font color="#E5E5E5"> input</font>

1127
00:55:03,850 --> 00:55:06,310
train and input test<font color="#CCCCCC"> labels becomes</font>

1128
00:55:06,310 --> 00:55:08,890
labels train and labels<font color="#E5E5E5"> test so that's</font>

1129
00:55:08,890 --> 00:55:11,800
<font color="#E5E5E5">pretty handy we've often written that</font>

1130
00:55:11,800 --> 00:55:14,230
manually<font color="#CCCCCC"> but this is a nice</font><font color="#E5E5E5"> quick</font><font color="#CCCCCC"> way to</font>

1131
00:55:14,230 --> 00:55:16,360
do it<font color="#E5E5E5"> when you've got lots of lists to</font>

1132
00:55:16,360 --> 00:55:17,990
do

1133
00:55:17,990 --> 00:55:22,070
um okay<font color="#E5E5E5"> so just to have a look at how</font>

1134
00:55:22,070 --> 00:55:23,630
<font color="#E5E5E5">many phonemes we have a no vocabulary</font>

1135
00:55:23,630 --> 00:55:26,360
there are<font color="#E5E5E5"> 70 how many letters in</font><font color="#CCCCCC"> our</font>

1136
00:55:26,360 --> 00:55:28,130
vocab<font color="#E5E5E5"> read is 28 that's</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> we've got</font>

1137
00:55:28,130 --> 00:55:31,180
that underscore and<font color="#E5E5E5"> the star as well</font>

1138
00:55:31,180 --> 00:55:32,360
<font color="#E5E5E5">okay</font>

1139
00:55:32,360 --> 00:55:36,700
<font color="#E5E5E5">so let's go ahead and create the model</font>

1140
00:55:36,700 --> 00:55:43,600
so here's the basic<font color="#CCCCCC"> idea</font>

1141
00:55:43,600 --> 00:55:46,630
[Music]

1142
00:55:46,630 --> 00:55:52,880
the model has<font color="#CCCCCC"> three parts</font><font color="#E5E5E5"> the first is</font>

1143
00:55:52,880 --> 00:55:56,540
an embedding right so the embedding is

1144
00:55:56,540 --> 00:55:59,150
going to take<font color="#E5E5E5"> every one</font><font color="#CCCCCC"> of our phonemes</font>

1145
00:55:59,150 --> 00:56:02,300
okay max<font color="#CCCCCC"> Lenti is the maximum number of</font>

1146
00:56:02,300 --> 00:56:06,070
<font color="#E5E5E5">phonemes we have in any pronunciation</font>

1147
00:56:06,070 --> 00:56:09,140
and<font color="#E5E5E5"> each one of those phonemes is going</font>

1148
00:56:09,140 --> 00:56:13,520
to go<font color="#E5E5E5"> into an embedding right and the</font>

1149
00:56:13,520 --> 00:56:17,869
look up for that embedding is the vocab

1150
00:56:17,869 --> 00:56:20,450
size<font color="#E5E5E5"> for phonemes which I think was 70</font>

1151
00:56:20,450 --> 00:56:23,930
and then the output you know is whatever

1152
00:56:23,930 --> 00:56:25,490
we decide what dimensionality who you

1153
00:56:25,490 --> 00:56:28,340
want and in<font color="#E5E5E5"> experimentation I found 120</font>

1154
00:56:28,340 --> 00:56:31,010
seems to<font color="#E5E5E5"> work pretty well</font><font color="#CCCCCC"> I was</font>

1155
00:56:31,010 --> 00:56:34,730
surprised by<font color="#CCCCCC"> how high that</font><font color="#E5E5E5"> number is</font><font color="#CCCCCC"> but</font>

1156
00:56:34,730 --> 00:56:39,800
<font color="#E5E5E5">there you go</font><font color="#CCCCCC"> it is we started out with a</font>

1157
00:56:39,800 --> 00:56:42,910
list of phonemes

1158
00:56:43,740 --> 00:56:48,410
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right list of 13</font>

1159
00:56:49,110 --> 00:56:53,510
this embedding<font color="#E5E5E5"> we now have a list of</font>

1160
00:56:53,600 --> 00:56:58,110
embeddings so this is like 70 and this

1161
00:56:58,110 --> 00:57:05,250
<font color="#E5E5E5">is like 120</font><font color="#CCCCCC"> okay so the</font><font color="#E5E5E5"> basic idea</font><font color="#CCCCCC"> is to</font>

1162
00:57:05,250 --> 00:57:09,600
<font color="#E5E5E5">take this big thing which is all of our</font>

1163
00:57:09,600 --> 00:57:11,910
phonemes embedded and we want to turn<font color="#E5E5E5"> it</font>

1164
00:57:11,910 --> 00:57:15,780
<font color="#CCCCCC">into a single distributed representation</font>

1165
00:57:15,780 --> 00:57:19,830
which contains all<font color="#CCCCCC"> of the richness</font><font color="#E5E5E5"> of</font>

1166
00:57:19,830 --> 00:57:23,010
what<font color="#E5E5E5"> this pronunciation says later on</font>

1167
00:57:23,010 --> 00:57:24,120
we're going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> doing the</font><font color="#E5E5E5"> same thing</font>

1168
00:57:24,120 --> 00:57:27,600
<font color="#CCCCCC">with an English sentence right and so we</font>

1169
00:57:27,600 --> 00:57:29,430
know<font color="#CCCCCC"> that when you</font><font color="#E5E5E5"> have a sequence and</font>

1170
00:57:29,430 --> 00:57:32,210
you<font color="#CCCCCC"> want to turn</font><font color="#E5E5E5"> it into a</font>

1171
00:57:32,210 --> 00:57:34,830
representation<font color="#E5E5E5"> one great way of</font><font color="#CCCCCC"> doing</font>

1172
00:57:34,830 --> 00:57:40,790
that is with an RNN now why an RN

1173
00:57:40,790 --> 00:57:43,710
<font color="#E5E5E5">because</font><font color="#CCCCCC"> an RNN we know is good at</font>

1174
00:57:43,710 --> 00:57:45,360
dealing with<font color="#E5E5E5"> things like state</font><font color="#CCCCCC"> and</font>

1175
00:57:45,360 --> 00:57:48,510
memory right<font color="#E5E5E5"> so when we're</font><font color="#CCCCCC"> looking at</font>

1176
00:57:48,510 --> 00:57:51,480
translation we really want something

1177
00:57:51,480 --> 00:57:54,510
<font color="#E5E5E5">which can remember</font><font color="#CCCCCC"> like where</font><font color="#E5E5E5"> are we</font>

1178
00:57:54,510 --> 00:57:57,840
right so let's say we were let's<font color="#E5E5E5"> say we</font>

1179
00:57:57,840 --> 00:57:59,640
were<font color="#CCCCCC"> doing this simple phonetic</font>

1180
00:57:59,640 --> 00:58:02,640
translation<font color="#E5E5E5"> the idea of you know have we</font>

1181
00:58:02,640 --> 00:58:04,560
<font color="#E5E5E5">just had a C because if we</font><font color="#CCCCCC"> just had a C</font>

1182
00:58:04,560 --> 00:58:07,230
then the H is<font color="#E5E5E5"> going to make a totally</font>

1183
00:58:07,230 --> 00:58:08,640
different sound<font color="#CCCCCC"> too if we haven't just</font>

1184
00:58:08,640 --> 00:58:15,660
had a C right<font color="#E5E5E5"> so an iron</font><font color="#CCCCCC"> n we think is a</font>

1185
00:58:15,660 --> 00:58:17,730
good way<font color="#CCCCCC"> to do this kind of thing and</font><font color="#E5E5E5"> in</font>

1186
00:58:17,730 --> 00:58:19,860
general<font color="#E5E5E5"> this whole class of models</font>

1187
00:58:19,860 --> 00:58:24,840
remember is called seek to seek sequence

1188
00:58:24,840 --> 00:58:26,940
to sequence models which<font color="#E5E5E5"> is where we</font>

1189
00:58:26,940 --> 00:58:29,070
start with<font color="#E5E5E5"> some</font><font color="#CCCCCC"> arbitrary length</font>

1190
00:58:29,070 --> 00:58:31,140
sequence and we produce some arbitrary

1191
00:58:31,140 --> 00:58:33,570
length sequence<font color="#E5E5E5"> and so the</font><font color="#CCCCCC"> general idea</font>

1192
00:58:33,570 --> 00:58:35,670
here<font color="#E5E5E5"> is taking that arbitrary length</font>

1193
00:58:35,670 --> 00:58:38,180
sequence and turning it into<font color="#E5E5E5"> a</font><font color="#CCCCCC"> six size</font>

1194
00:58:38,180 --> 00:58:40,800
representation using an<font color="#CCCCCC"> hour a ten is</font>

1195
00:58:40,800 --> 00:58:44,610
<font color="#E5E5E5">probably a good first step and you're</font>

1196
00:58:44,610 --> 00:58:47,430
using<font color="#CCCCCC"> dropout</font><font color="#E5E5E5"> in your</font><font color="#CCCCCC"> Alice TN is it</font>

1197
00:58:47,430 --> 00:58:50,550
best practice to do drop out<font color="#E5E5E5"> across time</font>

1198
00:58:50,550 --> 00:58:50,940
you

1199
00:58:50,940 --> 00:58:52,589
[Music]

1200
00:58:52,589 --> 00:59:00,490
so okay so<font color="#E5E5E5"> looking ahead</font><font color="#CCCCCC"> I'm actually</font>

1201
00:59:00,490 --> 00:59:01,869
going to<font color="#E5E5E5"> be using</font><font color="#CCCCCC"> quite a few layers</font><font color="#E5E5E5"> of</font>

1202
00:59:01,869 --> 00:59:06,250
RNN<font color="#CCCCCC"> so to make</font><font color="#E5E5E5"> that easier</font><font color="#CCCCCC"> I've still in</font>

1203
00:59:06,250 --> 00:59:10,740
drawing mode<font color="#CCCCCC"> so to make that</font><font color="#E5E5E5"> easier</font>

1204
00:59:10,740 --> 00:59:14,109
<font color="#CCCCCC">we've created</font><font color="#E5E5E5"> a get RNN function which</font>

1205
00:59:14,109 --> 00:59:15,700
just<font color="#E5E5E5"> and so we can you can put anything</font>

1206
00:59:15,700 --> 00:59:18,029
you<font color="#CCCCCC"> like</font><font color="#E5E5E5"> here GRU or</font><font color="#CCCCCC"> LS TM or whatever</font>

1207
00:59:18,029 --> 00:59:24,880
<font color="#CCCCCC">and yes</font><font color="#E5E5E5"> indeed I</font><font color="#CCCCCC"> am using drop out the</font>

1208
00:59:24,880 --> 00:59:26,710
kind of<font color="#E5E5E5"> drop out that you use in our in</font>

1209
00:59:26,710 --> 00:59:28,029
an<font color="#CCCCCC"> R and N is slightly different to</font>

1210
00:59:28,029 --> 00:59:33,010
<font color="#E5E5E5">normal drop out</font><font color="#CCCCCC"> it turns</font><font color="#E5E5E5"> out that if the</font>

1211
00:59:33,010 --> 00:59:35,440
particular thing that you<font color="#E5E5E5"> drop out it's</font>

1212
00:59:35,440 --> 00:59:37,480
best to<font color="#CCCCCC"> have some the same</font><font color="#E5E5E5"> things at</font>

1213
00:59:37,480 --> 00:59:41,380
every<font color="#E5E5E5"> time step in an RNN there's a</font>

1214
00:59:41,380 --> 00:59:43,990
really good paper that explains<font color="#E5E5E5"> why this</font>

1215
00:59:43,990 --> 00:59:45,640
is the case and shows<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

1216
00:59:45,640 --> 00:59:48,160
case<font color="#CCCCCC"> so this is why there's a special</font>

1217
00:59:48,160 --> 00:59:51,069
drop out parameter<font color="#E5E5E5"> inside the air and in</font>

1218
00:59:51,069 --> 00:59:54,130
and clear us it does its proper<font color="#E5E5E5"> RNN</font>

1219
00:59:54,130 --> 00:59:57,910
style drop out<font color="#CCCCCC"> so yeah so</font><font color="#E5E5E5"> we'll you know</font>

1220
00:59:57,910 --> 00:59:59,680
<font color="#E5E5E5">I put in a tiny bit of drop out here and</font>

1221
00:59:59,680 --> 01:00:05,019
if it turns<font color="#E5E5E5"> out that we over theater we</font>

1222
01:00:05,019 --> 01:00:08,019
can always increase it<font color="#E5E5E5"> if we don't we</font>

1223
01:00:08,019 --> 01:00:13,180
could always turn it to<font color="#E5E5E5"> zero so so what</font>

1224
01:00:13,180 --> 01:00:16,359
we're going<font color="#CCCCCC"> to do is yes Rachel I want</font>

1225
01:00:16,359 --> 01:00:17,470
more question about<font color="#CCCCCC"> that</font>

1226
01:00:17,470 --> 01:00:20,109
can you explain consume less than equals

1227
01:00:20,109 --> 01:00:27,849
GPU<font color="#E5E5E5"> so yeah always</font><font color="#CCCCCC"> do that they're</font>

1228
01:00:27,849 --> 01:00:31,089
<font color="#E5E5E5">deeply I don't know if you remember</font><font color="#CCCCCC"> but</font>

1229
01:00:31,089 --> 01:00:33,730
when we looked at like doing<font color="#CCCCCC"> harridans</font>

1230
01:00:33,730 --> 01:00:37,240
from scratch last year<font color="#E5E5E5"> we learnt that</font>

1231
01:00:37,240 --> 01:00:39,880
<font color="#CCCCCC">you could like actually combine the</font>

1232
01:00:39,880 --> 01:00:41,650
matrices<font color="#E5E5E5"> together and led</font><font color="#CCCCCC"> to a single</font>

1233
01:00:41,650 --> 01:00:43,930
<font color="#CCCCCC">matrix computation if you do that it's</font>

1234
01:00:43,930 --> 01:00:45,670
going<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> that more memory</font><font color="#E5E5E5"> but it</font>

1235
01:00:45,670 --> 01:00:48,250
allows the GPU to<font color="#CCCCCC"> be more highly</font>

1236
01:00:48,250 --> 01:00:51,640
parallel so basically if you<font color="#CCCCCC"> look at the</font>

1237
01:00:51,640 --> 01:00:53,049
<font color="#CCCCCC">case documentation or Oteri's</font><font color="#E5E5E5"> of</font>

1238
01:00:53,049 --> 01:00:55,509
different things you<font color="#CCCCCC"> can use but since</font>

1239
01:00:55,509 --> 01:00:57,519
we're using a GPU<font color="#CCCCCC"> you probably</font><font color="#E5E5E5"> always</font>

1240
01:00:57,519 --> 01:01:01,470
want<font color="#CCCCCC"> to say consume less equals GPU</font>

1241
01:01:01,720 --> 01:01:04,180
<font color="#E5E5E5">okay the other thing that we learned</font>

1242
01:01:04,180 --> 01:01:07,720
about<font color="#CCCCCC"> last year</font><font color="#E5E5E5"> is bi-directional</font><font color="#CCCCCC"> arrow</font>

1243
01:01:07,720 --> 01:01:10,810
<font color="#CCCCCC">names and maybe</font><font color="#E5E5E5"> the best way to come</font><font color="#CCCCCC"> at</font>

1244
01:01:10,810 --> 01:01:13,090
this is actually to go all the<font color="#CCCCCC"> way back</font>

1245
01:01:13,090 --> 01:01:19,570
<font color="#CCCCCC">and remind</font><font color="#E5E5E5"> you how</font><font color="#CCCCCC"> RNs work we haven't</font>

1246
01:01:19,570 --> 01:01:20,950
done much revision<font color="#E5E5E5"> but it's been a while</font>

1247
01:01:20,950 --> 01:01:23,520
<font color="#CCCCCC">since we put our an enzyme at the detail</font>

1248
01:01:23,520 --> 01:01:26,620
so just remind you this is<font color="#E5E5E5"> kind of our</font>

1249
01:01:26,620 --> 01:01:30,480
drawing of a totally basic neural net

1250
01:01:30,480 --> 01:01:35,380
<font color="#CCCCCC">square is input Circle is intermediate</font>

1251
01:01:35,380 --> 01:01:38,080
activations<font color="#E5E5E5"> hidden and triangles output</font>

1252
01:01:38,080 --> 01:01:41,920
and arrows represent affine

1253
01:01:41,920 --> 01:01:47,860
transformations with nonlinearities<font color="#CCCCCC"> we</font>

1254
01:01:47,860 --> 01:01:49,810
can then have multiple copies of<font color="#E5E5E5"> those</font>

1255
01:01:49,810 --> 01:01:52,960
to<font color="#E5E5E5"> create deeper convolutions for</font>

1256
01:01:52,960 --> 01:01:58,600
example<font color="#CCCCCC"> and so the</font><font color="#E5E5E5"> other thing</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> do</font>

1257
01:01:58,600 --> 01:02:01,110
is actually we<font color="#CCCCCC"> can have inputs going</font><font color="#E5E5E5"> in</font>

1258
01:02:01,110 --> 01:02:04,330
<font color="#E5E5E5">at different places so in this case if</font>

1259
01:02:04,330 --> 01:02:05,230
<font color="#E5E5E5">we were trying to predict</font><font color="#CCCCCC"> the third</font>

1260
01:02:05,230 --> 01:02:08,020
character from first two<font color="#CCCCCC"> characters we</font>

1261
01:02:08,020 --> 01:02:09,790
can<font color="#CCCCCC"> use a totally standard neural</font>

1262
01:02:09,790 --> 01:02:11,980
network<font color="#CCCCCC"> and actually</font><font color="#E5E5E5"> have input coming</font>

1263
01:02:11,980 --> 01:02:18,160
<font color="#E5E5E5">in at two different</font><font color="#CCCCCC"> places and then</font><font color="#E5E5E5"> we</font>

1264
01:02:18,160 --> 01:02:19,840
realized that we could<font color="#CCCCCC"> kind of make this</font>

1265
01:02:19,840 --> 01:02:22,600
arbitrarily large<font color="#CCCCCC"> but what we should</font>

1266
01:02:22,600 --> 01:02:24,220
<font color="#E5E5E5">probably do then is make</font><font color="#CCCCCC"> everything</font>

1267
01:02:24,220 --> 01:02:26,260
<font color="#E5E5E5">where an input is going</font><font color="#CCCCCC"> to a</font><font color="#E5E5E5"> hidden</font>

1268
01:02:26,260 --> 01:02:28,450
state<font color="#CCCCCC"> feeds the same matrix</font><font color="#E5E5E5"> so this</font>

1269
01:02:28,450 --> 01:02:31,120
color<font color="#E5E5E5"> coding remember represents the</font>

1270
01:02:31,120 --> 01:02:33,610
<font color="#E5E5E5">same weight matrix so hidden to hidden</font>

1271
01:02:33,610 --> 01:02:35,950
would be the same weight<font color="#E5E5E5"> matrix and hit</font>

1272
01:02:35,950 --> 01:02:37,540
into<font color="#E5E5E5"> output and is a separate weight</font>

1273
01:02:37,540 --> 01:02:43,210
<font color="#E5E5E5">matrix so then to remind you we realize</font>

1274
01:02:43,210 --> 01:02:44,620
<font color="#CCCCCC">that we could draw that</font><font color="#E5E5E5"> more simply like</font>

1275
01:02:44,620 --> 01:02:48,610
this okay so our it ends<font color="#CCCCCC"> when</font><font color="#E5E5E5"> they're</font>

1276
01:02:48,610 --> 01:02:52,000
unrolled<font color="#E5E5E5"> just look like a normal neural</font>

1277
01:02:52,000 --> 01:02:53,770
network<font color="#E5E5E5"> at which some</font><font color="#CCCCCC"> of the weight</font>

1278
01:02:53,770 --> 01:02:56,410
matrices are tied together and if this

1279
01:02:56,410 --> 01:02:59,620
is not ringing<font color="#E5E5E5"> a bell</font><font color="#CCCCCC"> go back to I think</font>

1280
01:02:59,620 --> 01:03:02,380
it's lessons<font color="#E5E5E5"> 5 where we actually build</font>

1281
01:03:02,380 --> 01:03:04,810
these weight matrices<font color="#E5E5E5"> from scratch and</font>

1282
01:03:04,810 --> 01:03:09,040
tie them together<font color="#E5E5E5"> manually so that will</font>

1283
01:03:09,040 --> 01:03:11,980
hopefully remind you of what's<font color="#E5E5E5"> going on</font>

1284
01:03:11,980 --> 01:03:18,220
now importantly we can then take one of

1285
01:03:18,220 --> 01:03:21,040
<font color="#E5E5E5">those</font><font color="#CCCCCC"> our and</font><font color="#E5E5E5"> ends and have the output</font>

1286
01:03:21,040 --> 01:03:24,030
go to the<font color="#E5E5E5"> input of another</font><font color="#CCCCCC"> errand and</font>

1287
01:03:24,030 --> 01:03:26,650
these are stacks arrogance<font color="#E5E5E5"> and stacks</font>

1288
01:03:26,650 --> 01:03:28,390
<font color="#CCCCCC">are</font><font color="#E5E5E5"> and ends basically give us you know</font>

1289
01:03:28,390 --> 01:03:31,329
<font color="#E5E5E5">richer computations in our recurrent</font>

1290
01:03:31,329 --> 01:03:36,010
neural<font color="#E5E5E5"> Nets</font><font color="#CCCCCC"> and this is what it looks</font>

1291
01:03:36,010 --> 01:03:40,990
like<font color="#E5E5E5"> when we unroll it so you can see</font>

1292
01:03:40,990 --> 01:03:42,849
here<font color="#E5E5E5"> that we've got multiple inputs</font>

1293
01:03:42,849 --> 01:03:44,290
coming in going<font color="#CCCCCC"> through multiple</font><font color="#E5E5E5"> layers</font>

1294
01:03:44,290 --> 01:03:47,109
<font color="#E5E5E5">and creating multiple outputs but of</font>

1295
01:03:47,109 --> 01:03:48,520
<font color="#E5E5E5">course we</font><font color="#CCCCCC"> don't have to create</font><font color="#E5E5E5"> multiple</font>

1296
01:03:48,520 --> 01:03:50,640
outputs

1297
01:03:50,640 --> 01:03:56,260
you could also<font color="#CCCCCC"> present networking you</font>

1298
01:03:56,260 --> 01:03:57,550
could also get<font color="#E5E5E5"> rid of these two</font>

1299
01:03:57,550 --> 01:04:00,359
triangles here<font color="#E5E5E5"> and have just one</font><font color="#CCCCCC"> output</font>

1300
01:04:00,359 --> 01:04:02,560
<font color="#E5E5E5">and remember in care out the difference</font>

1301
01:04:02,560 --> 01:04:04,359
is whether or<font color="#E5E5E5"> not we say return</font>

1302
01:04:04,359 --> 01:04:06,460
sequences equals true<font color="#E5E5E5"> or return</font>

1303
01:04:06,460 --> 01:04:09,070
sequences equals false<font color="#CCCCCC"> this one your</font>

1304
01:04:09,070 --> 01:04:11,500
<font color="#CCCCCC">thing here is return sequences equals</font>

1305
01:04:11,500 --> 01:04:16,510
true this one here<font color="#E5E5E5"> is return sequences</font>

1306
01:04:16,510 --> 01:04:27,250
equals false<font color="#CCCCCC"> so what we've got is input</font>

1307
01:04:27,250 --> 01:04:34,390
train has<font color="#CCCCCC"> 97 thousand words</font><font color="#E5E5E5"> each one is</font>

1308
01:04:34,390 --> 01:04:38,560
of length 16<font color="#E5E5E5"> it's 15 characters</font><font color="#CCCCCC"> long</font>

1309
01:04:38,560 --> 01:04:41,280
plus<font color="#CCCCCC"> the</font>

1310
01:04:45,349 --> 01:04:51,049
the padding<font color="#E5E5E5"> and then no sorry 1616</font>

1311
01:04:51,049 --> 01:04:53,450
proteins<font color="#E5E5E5"> long-haul stop</font><font color="#CCCCCC"> plug possibly</font>

1312
01:04:53,450 --> 01:04:57,499
with padding if necessary and then

1313
01:04:57,499 --> 01:05:00,680
<font color="#E5E5E5">labels is 15 because we chose earlier on</font>

1314
01:05:00,680 --> 01:05:02,720
that I max length<font color="#E5E5E5"> would be</font><font color="#CCCCCC"> a 15 long</font>

1315
01:05:02,720 --> 01:05:06,579
spelling so phonemes<font color="#CCCCCC"> don't match two</font>

1316
01:05:06,579 --> 01:05:13,150
letters exactly so after the embedding

1317
01:05:15,160 --> 01:05:18,200
<font color="#CCCCCC">so if we take</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of those tens of</font>

1318
01:05:18,200 --> 01:05:19,910
thousands of words<font color="#E5E5E5"> remember</font><font color="#CCCCCC"> it was</font>

1319
01:05:19,910 --> 01:05:22,180
length

1320
01:05:22,180 --> 01:05:24,870
<font color="#E5E5E5">um</font>

1321
01:05:25,220 --> 01:05:31,760
of<font color="#E5E5E5"> length sub</font><font color="#CCCCCC"> 4 phonemes</font><font color="#E5E5E5"> length 16</font><font color="#CCCCCC"> all</font>

1322
01:05:31,760 --> 01:05:34,670
<font color="#E5E5E5">right</font><font color="#CCCCCC"> and then we're putting it into an</font>

1323
01:05:34,670 --> 01:05:45,080
embedding matrix which is 70s by 120<font color="#E5E5E5"> and</font>

1324
01:05:45,080 --> 01:05:47,810
the reason it's 70<font color="#E5E5E5"> is that each of these</font>

1325
01:05:47,810 --> 01:05:51,380
phonemes<font color="#E5E5E5"> contains a number between</font>

1326
01:05:51,380 --> 01:05:59,000
<font color="#CCCCCC">naught to 69 okay so basically we go</font>

1327
01:05:59,000 --> 01:06:00,140
through and we<font color="#E5E5E5"> get each one of these</font>

1328
01:06:00,140 --> 01:06:01,940
indexes<font color="#E5E5E5"> and we look up</font><font color="#CCCCCC"> to find it so</font>

1329
01:06:01,940 --> 01:06:04,460
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> fives here</font><font color="#E5E5E5"> then we find number</font>

1330
01:06:04,460 --> 01:06:11,480
<font color="#E5E5E5">five here okay and so we end up with 16</font>

1331
01:06:11,480 --> 01:06:19,130
by 120 and<font color="#E5E5E5"> then part two of the question</font>

1332
01:06:19,130 --> 01:06:22,190
says are<font color="#CCCCCC"> we then taking a sequence</font><font color="#E5E5E5"> of</font>

1333
01:06:22,190 --> 01:06:24,980
<font color="#E5E5E5">these phonemes represented as 120</font>

1334
01:06:24,980 --> 01:06:26,869
dimensional<font color="#E5E5E5"> floating-point vectors and</font>

1335
01:06:26,869 --> 01:06:29,330
using an<font color="#CCCCCC"> RNN</font><font color="#E5E5E5"> to create a sequence of</font>

1336
01:06:29,330 --> 01:06:31,910
word to<font color="#CCCCCC"> bec</font><font color="#E5E5E5"> embeddings which we will</font>

1337
01:06:31,910 --> 01:06:34,130
then<font color="#E5E5E5"> reverse to actual words</font><font color="#CCCCCC"> so we're</font>

1338
01:06:34,130 --> 01:06:35,869
not going<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> words avec here right</font>

1339
01:06:35,869 --> 01:06:37,849
we're<font color="#E5E5E5"> Tyvek is a particular sort of</font><font color="#CCCCCC"> pre</font>

1340
01:06:37,849 --> 01:06:40,310
<font color="#CCCCCC">trained embeddings we're not using pre</font>

1341
01:06:40,310 --> 01:06:42,800
trained embeddings<font color="#E5E5E5"> we have to create our</font>

1342
01:06:42,800 --> 01:06:46,609
<font color="#E5E5E5">own inventing we're creating phoneme in</font>

1343
01:06:46,609 --> 01:06:48,950
<font color="#CCCCCC">betting's so if somebody</font><font color="#E5E5E5"> else</font><font color="#CCCCCC"> would add</font>

1344
01:06:48,950 --> 01:06:50,150
<font color="#CCCCCC">your own wanted to do something else</font>

1345
01:06:50,150 --> 01:06:53,450
with<font color="#E5E5E5"> phonemes and we like save the</font>

1346
01:06:53,450 --> 01:06:55,700
result of this we could provide<font color="#E5E5E5"> phoneme</font>

1347
01:06:55,700 --> 01:06:57,890
<font color="#CCCCCC">Tyvek and you could download them and</font>

1348
01:06:57,890 --> 01:07:01,430
use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fast</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> I pre train phoneme to</font>

1349
01:07:01,430 --> 01:07:03,770
<font color="#CCCCCC">bec embeddings this is how</font><font color="#E5E5E5"> embeddings</font>

1350
01:07:03,770 --> 01:07:05,990
basically get created right<font color="#E5E5E5"> the people</font>

1351
01:07:05,990 --> 01:07:07,849
build models starting with random

1352
01:07:07,849 --> 01:07:10,440
<font color="#E5E5E5">embeddings and then</font>

1353
01:07:10,440 --> 01:07:11,880
<font color="#E5E5E5">save those embeddings and make them</font>

1354
01:07:11,880 --> 01:07:15,780
available for<font color="#E5E5E5"> other people to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> as</font>

1355
01:07:15,780 --> 01:07:17,520
<font color="#CCCCCC">indian misinterpreting it but</font><font color="#E5E5E5"> I thought</font>

1356
01:07:17,520 --> 01:07:20,640
<font color="#CCCCCC">that question was getting it</font><font color="#E5E5E5"> the second</font>

1357
01:07:20,640 --> 01:07:22,410
set of embeddings<font color="#E5E5E5"> when you want to get</font>

1358
01:07:22,410 --> 01:07:27,420
back to<font color="#E5E5E5"> your words right so let's wait</font>

1359
01:07:27,420 --> 01:07:29,460
until<font color="#E5E5E5"> we get there</font><font color="#CCCCCC"> because we're going</font>

1360
01:07:29,460 --> 01:07:31,890
<font color="#CCCCCC">to create letters</font><font color="#E5E5E5"> not words and then</font><font color="#CCCCCC"> we</font>

1361
01:07:31,890 --> 01:07:34,020
<font color="#CCCCCC">just join the letters together</font><font color="#E5E5E5"> so there</font>

1362
01:07:34,020 --> 01:07:35,599
won't be any word to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> year so</font>

1363
01:07:35,599 --> 01:07:39,119
we've got as<font color="#CCCCCC"> far as creating our</font>

1364
01:07:39,119 --> 01:07:42,540
embeddings<font color="#E5E5E5"> and then we we've then got an</font>

1365
01:07:42,540 --> 01:07:46,520
<font color="#E5E5E5">R and n which is going</font><font color="#CCCCCC"> to take our</font>

1366
01:07:46,520 --> 01:07:49,700
embeddings<font color="#CCCCCC"> and attempt to</font><font color="#E5E5E5"> turn it into a</font>

1367
01:07:49,700 --> 01:07:53,550
single<font color="#E5E5E5"> vector that's kind of what an RNN</font>

1368
01:07:53,550 --> 01:08:00,900
does so we've got here<font color="#CCCCCC"> return sequences</font>

1369
01:08:00,900 --> 01:08:04,520
by default is true so<font color="#E5E5E5"> this first</font><font color="#CCCCCC"> r</font><font color="#E5E5E5"> and n</font>

1370
01:08:04,520 --> 01:08:06,839
returns<font color="#E5E5E5"> something which is just as long</font>

1371
01:08:06,839 --> 01:08:09,089
as we started with<font color="#CCCCCC"> right and so if you</font>

1372
01:08:09,089 --> 01:08:10,650
want<font color="#E5E5E5"> to stack our and end on top of each</font>

1373
01:08:10,650 --> 01:08:12,450
other<font color="#E5E5E5"> every one of them is return</font>

1374
01:08:12,450 --> 01:08:14,910
<font color="#E5E5E5">sequences equals true until the last one</font>

1375
01:08:14,910 --> 01:08:17,660
isn't<font color="#E5E5E5"> right so that's why we have false</font>

1376
01:08:17,660 --> 01:08:20,250
here right<font color="#E5E5E5"> so at the end of this one it</font>

1377
01:08:20,250 --> 01:08:21,930
<font color="#CCCCCC">goes gives us a single</font><font color="#E5E5E5"> vector which is</font>

1378
01:08:21,930 --> 01:08:26,399
<font color="#E5E5E5">the final state the other important</font>

1379
01:08:26,399 --> 01:08:28,229
piece is<font color="#CCCCCC"> bi-directional</font><font color="#E5E5E5"> and</font>

1380
01:08:28,229 --> 01:08:30,810
bi-directional you can totally do<font color="#CCCCCC"> this</font>

1381
01:08:30,810 --> 01:08:34,040
manually yourself<font color="#CCCCCC"> you take your input</font>

1382
01:08:34,040 --> 01:08:37,710
<font color="#CCCCCC">and feed it</font><font color="#E5E5E5"> into an R and N and then you</font>

1383
01:08:37,710 --> 01:08:40,049
<font color="#CCCCCC">reverse your</font><font color="#E5E5E5"> input and feed it into a</font>

1384
01:08:40,049 --> 01:08:42,270
different narrative<font color="#E5E5E5"> and then just</font>

1385
01:08:42,270 --> 01:08:43,469
<font color="#CCCCCC">concatenate the two</font><font color="#E5E5E5"> together</font>

1386
01:08:43,469 --> 01:08:46,620
<font color="#CCCCCC">so care us has</font><font color="#E5E5E5"> something which does that</font>

1387
01:08:46,620 --> 01:08:49,109
for you<font color="#E5E5E5"> which is called bi-directional</font>

1388
01:08:49,109 --> 01:08:51,420
<font color="#E5E5E5">and</font><font color="#CCCCCC"> bi-directional actually requires</font><font color="#E5E5E5"> you</font>

1389
01:08:51,420 --> 01:08:55,229
to pass<font color="#CCCCCC"> it an R and</font><font color="#E5E5E5"> n right so it takes</font>

1390
01:08:55,229 --> 01:08:58,560
an<font color="#CCCCCC"> RN n and returns</font><font color="#E5E5E5"> two copies of that</font>

1391
01:08:58,560 --> 01:09:00,270
<font color="#E5E5E5">are against</font><font color="#CCCCCC"> ax on top of each other</font>

1392
01:09:00,270 --> 01:09:03,120
one of which reverses its input and<font color="#E5E5E5"> so</font>

1393
01:09:03,120 --> 01:09:05,460
why<font color="#E5E5E5"> is that interesting</font><font color="#CCCCCC"> well that's</font>

1394
01:09:05,460 --> 01:09:07,698
interesting<font color="#CCCCCC"> because often in language</font>

1395
01:09:07,698 --> 01:09:11,250
what happens later influences what comes

1396
01:09:11,250 --> 01:09:15,988
before for<font color="#E5E5E5"> example in French</font><font color="#CCCCCC"> the gender</font>

1397
01:09:15,988 --> 01:09:18,929
of your<font color="#E5E5E5"> local</font><font color="#CCCCCC"> lawyer</font><font color="#E5E5E5"> your definite</font>

1398
01:09:18,929 --> 01:09:21,229
article depends on the noun

1399
01:09:21,229 --> 01:09:22,880
refers to so you need<font color="#E5E5E5"> to go to look</font>

1400
01:09:22,880 --> 01:09:26,299
backwards or forwards<font color="#E5E5E5"> in both directions</font>

1401
01:09:26,299 --> 01:09:27,799
<font color="#E5E5E5">to figure out how to match those two</font>

1402
01:09:27,799 --> 01:09:30,589
together<font color="#CCCCCC"> or in any language with temps</font>

1403
01:09:30,589 --> 01:09:35,120
you know what<font color="#E5E5E5"> verb do you use depends on</font>

1404
01:09:35,120 --> 01:09:37,700
the<font color="#E5E5E5"> tense and often</font><font color="#CCCCCC"> also depends on</font><font color="#E5E5E5"> the</font>

1405
01:09:37,700 --> 01:09:39,250
<font color="#CCCCCC">details</font><font color="#E5E5E5"> about the subject and the object</font>

1406
01:09:39,250 --> 01:09:41,930
so we want to be able<font color="#E5E5E5"> to both look</font>

1407
01:09:41,930 --> 01:09:44,450
<font color="#CCCCCC">forwards</font><font color="#E5E5E5"> and look backwards right so</font>

1408
01:09:44,450 --> 01:09:47,210
that's why we want two<font color="#E5E5E5"> copies of the</font><font color="#CCCCCC"> RNN</font>

1409
01:09:47,210 --> 01:09:49,399
<font color="#CCCCCC">one which goes</font><font color="#E5E5E5"> from left to right and</font>

1410
01:09:49,399 --> 01:09:51,620
<font color="#E5E5E5">one which goes from right to left and</font>

1411
01:09:51,620 --> 01:09:53,630
indeed we could<font color="#E5E5E5"> assume that when you</font>

1412
01:09:53,630 --> 01:09:55,520
spell things<font color="#E5E5E5"> I'm not actually</font><font color="#CCCCCC"> sure how</font>

1413
01:09:55,520 --> 01:09:57,140
<font color="#E5E5E5">this work but when you spell things</font>

1414
01:09:57,140 --> 01:09:59,540
depending<font color="#E5E5E5"> on what the latest dressers</font>

1415
01:09:59,540 --> 01:10:02,300
might be or the later<font color="#E5E5E5"> details of</font>

1416
01:10:02,300 --> 01:10:04,190
athletics might be might change how you

1417
01:10:04,190 --> 01:10:08,080
pronounce things earlier on

1418
01:10:08,199 --> 01:10:11,320
as the bi-directional RNN can<font color="#E5E5E5"> cat to our</font>

1419
01:10:11,320 --> 01:10:14,699
limbs or does<font color="#CCCCCC"> it's Jackson</font>

1420
01:10:16,680 --> 01:10:19,680
it

1421
01:10:19,869 --> 01:10:25,060
if you end up with the same<font color="#E5E5E5"> you end up</font>

1422
01:10:25,060 --> 01:10:28,300
with the same number<font color="#CCCCCC"> of dimensions</font><font color="#E5E5E5"> you</font>

1423
01:10:28,300 --> 01:10:32,290
had<font color="#CCCCCC"> before but</font><font color="#E5E5E5"> it basically doubles the</font>

1424
01:10:32,290 --> 01:10:35,560
<font color="#CCCCCC">number of features that you have</font><font color="#E5E5E5"> so in</font>

1425
01:10:35,560 --> 01:10:40,440
this case we have 240 so<font color="#CCCCCC"> I just had</font>

1426
01:10:40,440 --> 01:10:44,530
<font color="#CCCCCC">doubled so</font><font color="#E5E5E5"> and I think</font><font color="#CCCCCC"> we had one</font>

1427
01:10:44,530 --> 01:10:46,870
question here

1428
01:10:46,870 --> 01:10:50,450
so the currency level is<font color="#E5E5E5"> about order</font>

1429
01:10:50,450 --> 01:10:52,790
<font color="#E5E5E5">regarding to level of our men or lsdm</font>

1430
01:10:52,790 --> 01:10:57,080
would be the<font color="#E5E5E5"> input of the length of a</font>

1431
01:10:57,080 --> 01:10:59,060
pizza box<font color="#E5E5E5"> alone</font><font color="#CCCCCC"> underscore drag that's</font>

1432
01:10:59,060 --> 01:11:02,180
the<font color="#CCCCCC"> 16</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> okay the number</font><font color="#E5E5E5"> 70 here is</font>

1433
01:11:02,180 --> 01:11:04,460
it like all<font color="#E5E5E5"> the possible characters of</font>

1434
01:11:04,460 --> 01:11:07,370
yeah all<font color="#E5E5E5"> about the phonemes we're going</font>

1435
01:11:07,370 --> 01:11:14,180
from phonemes or you okay okay okay<font color="#E5E5E5"> so</font>

1436
01:11:14,180 --> 01:11:17,530
let's<font color="#CCCCCC"> simplify this down a little</font><font color="#E5E5E5"> bit</font>

1437
01:11:17,530 --> 01:11:22,010
again<font color="#CCCCCC"> and basically</font><font color="#E5E5E5"> say we started out</font>

1438
01:11:22,010 --> 01:11:27,080
with a set of embeddings<font color="#E5E5E5"> and we've gone</font>

1439
01:11:27,080 --> 01:11:30,230
through<font color="#CCCCCC"> two layers</font><font color="#E5E5E5"> well we've gone</font>

1440
01:11:30,230 --> 01:11:32,630
through<font color="#E5E5E5"> a bi-directional</font><font color="#CCCCCC"> RNN</font><font color="#E5E5E5"> and then we</font>

1441
01:11:32,630 --> 01:11:36,129
feed that<font color="#CCCCCC"> to a second Aaron in</font>

1442
01:11:36,129 --> 01:11:40,570
<font color="#CCCCCC">right to</font><font color="#E5E5E5"> create a representation</font><font color="#CCCCCC"> of this</font>

1443
01:11:40,570 --> 01:11:42,909
ordered list of<font color="#CCCCCC"> fillings right</font><font color="#E5E5E5"> and</font>

1444
01:11:42,909 --> 01:11:45,639
specifically this represented a vector

1445
01:11:45,639 --> 01:11:46,389
<font color="#E5E5E5">okay</font>

1446
01:11:46,389 --> 01:11:49,840
so X at this point is a vector<font color="#E5E5E5"> okay</font>

1447
01:11:49,840 --> 01:11:52,320
because<font color="#E5E5E5"> return sequences equals false</font>

1448
01:11:52,320 --> 01:11:55,719
that<font color="#CCCCCC"> vector once we've trained this</font>

1449
01:11:55,719 --> 01:11:58,590
thing<font color="#E5E5E5"> the idea is it represents</font>

1450
01:11:58,590 --> 01:12:01,179
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> that important there</font><font color="#E5E5E5"> is to</font>

1451
01:12:01,179 --> 01:12:03,070
know<font color="#CCCCCC"> about this ordered list of phonemes</font>

1452
01:12:03,070 --> 01:12:04,570
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> could</font><font color="#CCCCCC"> possibly these</font>

1453
01:12:04,570 --> 01:12:08,649
know in order<font color="#E5E5E5"> to spell it okay so the</font>

1454
01:12:08,649 --> 01:12:10,659
<font color="#CCCCCC">idea is we could now take that</font><font color="#E5E5E5"> vector</font>

1455
01:12:10,659 --> 01:12:16,869
<font color="#E5E5E5">and feed it into a new</font><font color="#CCCCCC"> RNN or even a few</font>

1456
01:12:16,869 --> 01:12:20,709
layers of<font color="#CCCCCC"> RNN</font><font color="#E5E5E5"> okay and that are an N</font>

1457
01:12:20,709 --> 01:12:23,379
could basically go through<font color="#E5E5E5"> and</font><font color="#CCCCCC"> be with</font>

1458
01:12:23,379 --> 01:12:26,349
<font color="#CCCCCC">returned sequences equals true</font><font color="#E5E5E5"> this time</font>

1459
01:12:26,349 --> 01:12:29,219
it could spit out at every time step

1460
01:12:29,219 --> 01:12:31,689
<font color="#E5E5E5">what it thinks the next letter in</font><font color="#CCCCCC"> this</font>

1461
01:12:31,689 --> 01:12:34,449
spelling is right and so this<font color="#E5E5E5"> is how a</font>

1462
01:12:34,449 --> 01:12:37,119
sequence<font color="#E5E5E5"> to</font><font color="#CCCCCC"> sequence works is</font><font color="#E5E5E5"> one one</font>

1463
01:12:37,119 --> 01:12:42,399
part which is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> the n coda takes</font>

1464
01:12:42,399 --> 01:12:45,539
our initial<font color="#CCCCCC"> sequence</font>

1465
01:12:46,159 --> 01:12:49,369
into a distributed representation<font color="#E5E5E5"> into a</font>

1466
01:12:49,369 --> 01:12:53,209
into<font color="#E5E5E5"> a vector using generally speaking</font>

1467
01:12:53,209 --> 01:12:56,539
<font color="#E5E5E5">some stacked iron ends then the second</font>

1468
01:12:56,539 --> 01:12:59,840
piece called<font color="#E5E5E5"> the decoder takes the</font>

1469
01:12:59,840 --> 01:13:04,849
<font color="#E5E5E5">output of the encoder</font><font color="#CCCCCC"> and passes</font><font color="#E5E5E5"> that</font>

1470
01:13:04,849 --> 01:13:06,789
into a separate stack of our it ends

1471
01:13:06,789 --> 01:13:09,519
with return<font color="#E5E5E5"> sequences equals true</font><font color="#CCCCCC"> and</font>

1472
01:13:09,519 --> 01:13:12,439
those are<font color="#CCCCCC"> n ends are taught to then</font>

1473
01:13:12,439 --> 01:13:16,189
generate<font color="#CCCCCC"> the labels</font><font color="#E5E5E5"> in this case two</font>

1474
01:13:16,189 --> 01:13:16,729
spellings

1475
01:13:16,729 --> 01:13:19,309
<font color="#E5E5E5">when I later</font><font color="#CCCCCC"> kate's</font><font color="#E5E5E5"> the english</font>

1476
01:13:19,309 --> 01:13:26,869
sentences now in<font color="#CCCCCC"> Caruth it's not</font>

1477
01:13:26,869 --> 01:13:31,999
convenient<font color="#E5E5E5"> to create an</font><font color="#CCCCCC"> R and n</font><font color="#E5E5E5"> by</font>

1478
01:13:31,999 --> 01:13:34,039
handing<font color="#E5E5E5"> it some initial</font><font color="#CCCCCC"> state some</font>

1479
01:13:34,039 --> 01:13:36,169
initial hidden<font color="#CCCCCC"> status</font><font color="#E5E5E5"> that's not really</font>

1480
01:13:36,169 --> 01:13:38,780
how care<font color="#CCCCCC"> ass likes to do</font><font color="#E5E5E5"> things Tara</font>

1481
01:13:38,780 --> 01:13:44,590
expects to be handed a a list of<font color="#CCCCCC"> input</font>

1482
01:13:44,860 --> 01:13:48,650
<font color="#CCCCCC">problem number 1 problem number 2 if you</font>

1483
01:13:48,650 --> 01:13:50,599
do hand it to an R and n just at the

1484
01:13:50,599 --> 01:13:53,630
start<font color="#E5E5E5"> it's quite hard</font><font color="#CCCCCC"> for the RN to</font>

1485
01:13:53,630 --> 01:13:56,659
<font color="#E5E5E5">remember the whole time what is this</font>

1486
01:13:56,659 --> 01:13:58,519
word I meant to be translating<font color="#E5E5E5"> right it</font>

1487
01:13:58,519 --> 01:13:59,959
<font color="#E5E5E5">kind of has to keep two</font><font color="#CCCCCC"> things that's</font>

1488
01:13:59,959 --> 01:14:02,090
<font color="#CCCCCC">head one is like what's the word I meant</font>

1489
01:14:02,090 --> 01:14:04,909
to be spelling<font color="#CCCCCC"> and the second is</font><font color="#E5E5E5"> like</font>

1490
01:14:04,909 --> 01:14:06,349
what's the letter I'm trying to spell

1491
01:14:06,349 --> 01:14:09,139
right now<font color="#E5E5E5"> so what we do with care us is</font>

1492
01:14:09,139 --> 01:14:15,169
we actually<font color="#E5E5E5"> take this whole state and we</font>

1493
01:14:15,169 --> 01:14:18,970
copy it so

1494
01:14:18,970 --> 01:14:22,060
case we're trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> create a word that</font>

1495
01:14:22,060 --> 01:14:28,420
could<font color="#CCCCCC"> be up to 15 letters</font><font color="#E5E5E5"> long so in</font>

1496
01:14:28,420 --> 01:14:33,730
other words 15<font color="#E5E5E5"> time steps so we take</font>

1497
01:14:33,730 --> 01:14:36,550
this<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> actually make 15 copies</font><font color="#E5E5E5"> of</font>

1498
01:14:36,550 --> 01:14:38,670
it

1499
01:14:44,850 --> 01:14:48,930
okay and those 15 copies<font color="#E5E5E5"> of our final</font>

1500
01:14:48,930 --> 01:14:51,930
encoder state becomes the<font color="#CCCCCC"> input to our</font>

1501
01:14:51,930 --> 01:14:55,290
decoder<font color="#CCCCCC"> R</font><font color="#E5E5E5"> and n so it seems kind</font><font color="#CCCCCC"> of</font>

1502
01:14:55,290 --> 01:14:56,820
clunky<font color="#E5E5E5"> right but it's actually not</font>

1503
01:14:56,820 --> 01:14:58,980
<font color="#E5E5E5">difficult to do in</font><font color="#CCCCCC"> chaos</font><font color="#E5E5E5"> we just go</font><font color="#CCCCCC"> like</font>

1504
01:14:58,980 --> 01:15:01,010
this

1505
01:15:01,369 --> 01:15:06,949
we take the<font color="#CCCCCC"> output from our encoder</font><font color="#E5E5E5"> and</font>

1506
01:15:06,949 --> 01:15:11,989
we repeat it 15 times<font color="#E5E5E5"> all right so we</font>

1507
01:15:11,989 --> 01:15:14,659
literally have 15 identical copies of

1508
01:15:14,659 --> 01:15:17,780
the same<font color="#E5E5E5"> sector and so that's how</font><font color="#CCCCCC"> Clara</font>

1509
01:15:17,780 --> 01:15:20,539
expects to see things and it also turns

1510
01:15:20,539 --> 01:15:22,039
<font color="#E5E5E5">out</font><font color="#CCCCCC"> that it's actually</font><font color="#E5E5E5"> you get better</font>

1511
01:15:22,039 --> 01:15:24,649
results<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you pass into the</font><font color="#CCCCCC"> R and n</font>

1512
01:15:24,649 --> 01:15:26,419
the state that it needs<font color="#E5E5E5"> again and again</font>

1513
01:15:26,419 --> 01:15:28,219
at every time<font color="#E5E5E5"> step so we're basically</font>

1514
01:15:28,219 --> 01:15:30,679
passing in<font color="#CCCCCC"> saying something saying</font><font color="#E5E5E5"> we're</font>

1515
01:15:30,679 --> 01:15:32,269
<font color="#E5E5E5">trying to</font><font color="#CCCCCC"> spell this word we're trying</font>

1516
01:15:32,269 --> 01:15:33,559
to spell this work we're trying<font color="#E5E5E5"> to spell</font>

1517
01:15:33,559 --> 01:15:34,699
this word we're trying to<font color="#E5E5E5"> spell this</font>

1518
01:15:34,699 --> 01:15:37,669
word<font color="#CCCCCC"> and then as the</font><font color="#E5E5E5"> R and n goes</font><font color="#CCCCCC"> along</font>

1519
01:15:37,669 --> 01:15:41,239
<font color="#CCCCCC">it's generating its own</font><font color="#E5E5E5"> internal state</font>

1520
01:15:41,239 --> 01:15:43,429
<font color="#E5E5E5">figuring out like what have we spelt so</font>

1521
01:15:43,429 --> 01:15:44,570
far and what are<font color="#E5E5E5"> we going to have to</font>

1522
01:15:44,570 --> 01:15:48,800
spell next<font color="#E5E5E5"> there's a question why</font><font color="#CCCCCC"> can't</font>

1523
01:15:48,800 --> 01:15:51,229
we have<font color="#E5E5E5"> return sequences equals true for</font>

1524
01:15:51,229 --> 01:15:55,369
the second bi-directional<font color="#CCCCCC"> illa and not</font>

1525
01:15:55,369 --> 01:15:58,039
bi-directional for the second LS TM we

1526
01:15:58,039 --> 01:16:00,939
only have one bi-directional<font color="#CCCCCC"> calais</font><font color="#E5E5E5"> TM</font>

1527
01:16:00,939 --> 01:16:03,019
we don't want return<font color="#E5E5E5"> sequence with</font>

1528
01:16:03,019 --> 01:16:06,739
equals true here<font color="#E5E5E5"> because we're trying to</font>

1529
01:16:06,739 --> 01:16:09,010
<font color="#E5E5E5">create</font><font color="#CCCCCC"> a representation of the whole</font>

1530
01:16:09,010 --> 01:16:12,860
word we're trying to spell so there's no

1531
01:16:12,860 --> 01:16:15,439
point having something<font color="#CCCCCC"> saying here's</font>

1532
01:16:15,439 --> 01:16:17,709
reputation representation of the first

1533
01:16:17,709 --> 01:16:20,360
phoneme of the first two<font color="#E5E5E5"> of the first</font>

1534
01:16:20,360 --> 01:16:21,860
three<font color="#CCCCCC"> or the first four or</font><font color="#E5E5E5"> the first</font>

1535
01:16:21,860 --> 01:16:25,179
<font color="#E5E5E5">five because we don't really</font><font color="#CCCCCC"> know like</font>

1536
01:16:25,179 --> 01:16:27,739
<font color="#E5E5E5">exactly which letter of the output is</font>

1537
01:16:27,739 --> 01:16:29,209
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to correspond to which phoneme of</font>

1538
01:16:29,209 --> 01:16:30,919
the input and<font color="#CCCCCC"> particularly when we get</font>

1539
01:16:30,919 --> 01:16:32,389
to translation<font color="#CCCCCC"> it can get much harder</font>

1540
01:16:32,389 --> 01:16:34,369
<font color="#E5E5E5">like some languages totally reverse the</font>

1541
01:16:34,369 --> 01:16:36,199
subject and<font color="#E5E5E5"> object order or put the verb</font>

1542
01:16:36,199 --> 01:16:38,300
somewhere else<font color="#E5E5E5"> so that's why we try</font><font color="#CCCCCC"> to</font>

1543
01:16:38,300 --> 01:16:41,869
package<font color="#CCCCCC"> up the</font><font color="#E5E5E5"> whole thing</font><font color="#CCCCCC"> into a single</font>

1544
01:16:41,869 --> 01:16:44,090
piece of state which has all of the

1545
01:16:44,090 --> 01:16:46,760
<font color="#E5E5E5">information necessary</font><font color="#CCCCCC"> to build our</font>

1546
01:16:46,760 --> 01:16:49,669
target sequence so remember these

1547
01:16:49,669 --> 01:16:53,510
sequence<font color="#CCCCCC"> to sequence models are also</font>

1548
01:16:53,510 --> 01:16:56,629
used for<font color="#E5E5E5"> things like image captioning</font>

1549
01:16:56,629 --> 01:17:00,590
right<font color="#E5E5E5"> so with image captioning you</font>

1550
01:17:00,590 --> 01:17:02,419
wouldn't want to have like something

1551
01:17:02,419 --> 01:17:05,030
<font color="#CCCCCC">that</font><font color="#E5E5E5"> created a representation</font><font color="#CCCCCC"> separately</font>

1552
01:17:05,030 --> 01:17:07,070
for<font color="#E5E5E5"> every pixel you know when you're</font>

1553
01:17:07,070 --> 01:17:08,599
trying to<font color="#CCCCCC"> capture an image you</font><font color="#E5E5E5"> want a</font>

1554
01:17:08,599 --> 01:17:11,510
single<font color="#E5E5E5"> representation which</font><font color="#CCCCCC"> is like this</font>

1555
01:17:11,510 --> 01:17:13,480
is something that

1556
01:17:13,480 --> 01:17:14,950
<font color="#E5E5E5">how contains all of the</font><font color="#CCCCCC"> information</font>

1557
01:17:14,950 --> 01:17:18,100
about<font color="#CCCCCC"> what this is the picture of</font><font color="#E5E5E5"> or if</font>

1558
01:17:18,100 --> 01:17:21,720
<font color="#E5E5E5">you're doing</font><font color="#CCCCCC"> neural language translation</font>

1559
01:17:21,720 --> 01:17:24,370
<font color="#CCCCCC">here's my</font><font color="#E5E5E5"> English sentence that</font><font color="#CCCCCC"> turns</font>

1560
01:17:24,370 --> 01:17:25,870
into a representation<font color="#E5E5E5"> of everything that</font>

1561
01:17:25,870 --> 01:17:28,120
it means so<font color="#E5E5E5"> that I can generate</font><font color="#CCCCCC"> my</font>

1562
01:17:28,120 --> 01:17:30,670
<font color="#CCCCCC">french sentence</font>

1563
01:17:30,670 --> 01:17:32,170
we're going to be seeing<font color="#E5E5E5"> later how we</font>

1564
01:17:32,170 --> 01:17:34,180
can use<font color="#CCCCCC"> return sequences equals true</font>

1565
01:17:34,180 --> 01:17:37,210
<font color="#E5E5E5">when we look at tension models but for</font>

1566
01:17:37,210 --> 01:17:39,640
now we're just<font color="#E5E5E5"> going to keep seeing some</font>

1567
01:17:39,640 --> 01:17:42,390
simple

1568
01:17:43,020 --> 01:17:44,940
the question is then I<font color="#E5E5E5"> have an</font>

1569
01:17:44,940 --> 01:17:46,739
underlying<font color="#CCCCCC"> question regarding why don't</font>

1570
01:17:46,739 --> 01:17:49,050
<font color="#E5E5E5">need discrete text problems the same</font><font color="#CCCCCC"> way</font>

1571
01:17:49,050 --> 01:17:51,600
we do images images have relationships

1572
01:17:51,600 --> 01:17:53,250
between pixels<font color="#E5E5E5"> and shapes that</font><font color="#CCCCCC"> are</font>

1573
01:17:53,250 --> 01:17:55,080
complex and rely on<font color="#E5E5E5"> positional</font>

1574
01:17:55,080 --> 01:17:57,150
information<font color="#CCCCCC"> why</font><font color="#E5E5E5"> doesn't that work with</font>

1575
01:17:57,150 --> 01:18:01,550
word or phoneme embeddings well it does

1576
01:18:01,550 --> 01:18:06,239
<font color="#CCCCCC">it absolutely does</font><font color="#E5E5E5"> and indeed we can use</font>

1577
01:18:06,239 --> 01:18:09,420
convolutional models<font color="#CCCCCC"> but</font><font color="#E5E5E5"> if you remember</font>

1578
01:18:09,420 --> 01:18:16,500
back to lesson 5 we talked about some of

1579
01:18:16,500 --> 01:18:19,739
<font color="#E5E5E5">the challenges with that so if you're</font>

1580
01:18:19,739 --> 01:18:24,050
trying<font color="#E5E5E5"> to create something which can has</font>

1581
01:18:24,050 --> 01:18:26,730
you know some<font color="#E5E5E5"> kind of markup block like</font>

1582
01:18:26,730 --> 01:18:29,040
this it has to both remember that oh you

1583
01:18:29,040 --> 01:18:30,480
<font color="#E5E5E5">know you've</font><font color="#CCCCCC"> just opened up a piece of</font>

1584
01:18:30,480 --> 01:18:32,850
markup<font color="#E5E5E5"> you're in the middle of it then</font>

1585
01:18:32,850 --> 01:18:34,170
in here<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to remember that you're</font>

1586
01:18:34,170 --> 01:18:35,610
actually<font color="#E5E5E5"> inside a comment block so that</font>

1587
01:18:35,610 --> 01:18:38,820
<font color="#CCCCCC">at the end remember</font><font color="#E5E5E5"> to close it</font><font color="#CCCCCC"> this</font>

1588
01:18:38,820 --> 01:18:41,880
<font color="#E5E5E5">kind of</font><font color="#CCCCCC"> long-term dependency and memory</font>

1589
01:18:41,880 --> 01:18:44,010
and stateful representation becomes

1590
01:18:44,010 --> 01:18:46,800
increasingly<font color="#E5E5E5"> difficult to do with CNN's</font>

1591
01:18:46,800 --> 01:18:49,739
<font color="#E5E5E5">as they get longer</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not impossible</font>

1592
01:18:49,739 --> 01:18:52,830
by<font color="#CCCCCC"> any means but</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> an ends are one</font>

1593
01:18:52,830 --> 01:18:57,989
good way of of<font color="#E5E5E5"> doing this but it is</font>

1594
01:18:57,989 --> 01:19:00,600
critical that<font color="#CCCCCC"> we start with embedding</font>

1595
01:19:00,600 --> 01:19:03,270
<font color="#E5E5E5">because where else an image we are</font>

1596
01:19:03,270 --> 01:19:06,930
<font color="#E5E5E5">already given you know</font><font color="#CCCCCC"> valued numbers</font>

1597
01:19:06,930 --> 01:19:09,000
that<font color="#E5E5E5"> really represent the image that's</font>

1598
01:19:09,000 --> 01:19:11,219
not true with text right so<font color="#CCCCCC"> with text</font>

1599
01:19:11,219 --> 01:19:13,140
where you have to use embeddings<font color="#E5E5E5"> to turn</font>

1600
01:19:13,140 --> 01:19:16,200
it into<font color="#E5E5E5"> these nice numeric</font>

1601
01:19:16,200 --> 01:19:22,920
representations are nervous and<font color="#CCCCCC"> on</font>

1602
01:19:22,920 --> 01:19:25,200
generic<font color="#E5E5E5"> term she writes or specific</font>

1603
01:19:25,200 --> 01:19:28,620
<font color="#E5E5E5">network</font><font color="#CCCCCC"> uses lsdm</font><font color="#E5E5E5"> yes but there's other</font>

1604
01:19:28,620 --> 01:19:30,450
<font color="#E5E5E5">types of computers</font><font color="#CCCCCC"> GRU</font>

1605
01:19:30,450 --> 01:19:33,770
remember yeah<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so careful are it in</font>

1606
01:19:33,770 --> 01:19:37,410
<font color="#E5E5E5">Solaris support like yeah</font><font color="#CCCCCC"> weird all the</font>

1607
01:19:37,410 --> 01:19:38,730
ones we did in the last<font color="#E5E5E5"> part of the</font>

1608
01:19:38,730 --> 01:19:41,100
course<font color="#CCCCCC"> so we looked in simple</font><font color="#E5E5E5"> r NN g iu</font>

1609
01:19:41,100 --> 01:19:44,219
<font color="#CCCCCC">and Emmas</font><font color="#E5E5E5"> TM / so</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> looked like the</font><font color="#CCCCCC"> LCM</font>

1610
01:19:44,219 --> 01:19:48,380
<font color="#CCCCCC">which is the best preserved task no no</font>

1611
01:19:48,380 --> 01:19:52,530
not at all<font color="#CCCCCC"> um the GI is</font><font color="#E5E5E5"> knows TM is</font>

1612
01:19:52,530 --> 01:19:53,710
pretty<font color="#E5E5E5"> similar</font>

1613
01:19:53,710 --> 01:20:00,340
not worth thinking about<font color="#E5E5E5"> too much okay</font>

1614
01:20:01,840 --> 01:20:06,460
<font color="#CCCCCC">all right</font><font color="#E5E5E5"> so at this point</font>

1615
01:20:06,940 --> 01:20:09,410
here when

1616
01:20:09,410 --> 01:20:18,400
now have 15 copies<font color="#E5E5E5"> of the 15 copies of X</font>

1617
01:20:18,400 --> 01:20:25,090
right<font color="#E5E5E5"> and so we now pass that into</font>

1618
01:20:25,469 --> 01:20:28,229
two more layers<font color="#E5E5E5"> of</font><font color="#CCCCCC"> our den so if this</font>

1619
01:20:28,229 --> 01:20:31,559
here is our<font color="#E5E5E5"> encoder and this here</font><font color="#CCCCCC"> is our</font>

1620
01:20:31,559 --> 01:20:33,929
decoder<font color="#E5E5E5"> now there's nothing we'd get</font>

1621
01:20:33,929 --> 01:20:35,909
particularly in care us to say this<font color="#E5E5E5"> is</font>

1622
01:20:35,909 --> 01:20:38,219
an encoder<font color="#CCCCCC"> to the decoder the important</font>

1623
01:20:38,219 --> 01:20:40,619
thing<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> return</font><font color="#E5E5E5"> sequences equals</font>

1624
01:20:40,619 --> 01:20:43,519
false here and the repeat vector here

1625
01:20:43,519 --> 01:20:45,960
right<font color="#E5E5E5"> so like this what does it have to</font>

1626
01:20:45,960 --> 01:20:48,389
do well somehow<font color="#E5E5E5"> it has to take this</font>

1627
01:20:48,389 --> 01:20:52,860
single summary<font color="#E5E5E5"> and create some layers of</font>

1628
01:20:52,860 --> 01:20:56,099
<font color="#CCCCCC">RN ends until then at the end we say</font>

1629
01:20:56,099 --> 01:20:59,999
<font color="#E5E5E5">okay here's a dense layer okay and it's</font>

1630
01:20:59,999 --> 01:21:02,130
time distributed so remember that<font color="#E5E5E5"> means</font>

1631
01:21:02,130 --> 01:21:06,590
that we<font color="#E5E5E5"> actually have</font><font color="#CCCCCC"> 15 dense layers</font>

1632
01:21:06,679 --> 01:21:09,989
and so each of these dense layers now

1633
01:21:09,989 --> 01:21:14,519
has a soft max activation<font color="#E5E5E5"> which means</font>

1634
01:21:14,519 --> 01:21:17,849
that we basically<font color="#E5E5E5"> can then do an</font><font color="#CCCCCC"> Ag Max</font>

1635
01:21:17,849 --> 01:21:20,489
on that to create<font color="#E5E5E5"> our final list of</font>

1636
01:21:20,489 --> 01:21:23,849
letters so this is kind of our reverse

1637
01:21:23,849 --> 01:21:27,199
embedding if you like

1638
01:21:28,939 --> 01:21:33,380
so the model is<font color="#CCCCCC"> very</font><font color="#E5E5E5"> little code okay</font>

1639
01:21:33,380 --> 01:21:35,749
and once we've built<font color="#E5E5E5"> it</font>

1640
01:21:35,749 --> 01:21:39,489
<font color="#E5E5E5">and again if things like this are</font>

1641
01:21:39,489 --> 01:21:42,619
mysterious to you go back and relook at

1642
01:21:42,619 --> 01:21:47,360
lessons<font color="#CCCCCC"> four five and six remind you how</font>

1643
01:21:47,360 --> 01:21:49,159
these embeddings work and how these kind

1644
01:21:49,159 --> 01:21:51,979
of<font color="#CCCCCC"> time distributed</font><font color="#E5E5E5"> dense works to give</font>

1645
01:21:51,979 --> 01:21:53,809
us effectively<font color="#E5E5E5"> a kind of reversed</font>

1646
01:21:53,809 --> 01:21:59,090
embedding so that's our model<font color="#CCCCCC"> starts</font>

1647
01:21:59,090 --> 01:22:01,789
<font color="#E5E5E5">with our phoneme input into</font><font color="#CCCCCC"> that time</font>

1648
01:22:01,789 --> 01:22:05,269
<font color="#CCCCCC">tribute dead output we</font><font color="#E5E5E5"> can then compile</font>

1649
01:22:05,269 --> 01:22:09,530
<font color="#CCCCCC">that our targets</font><font color="#E5E5E5"> are just indexes</font>

1650
01:22:09,530 --> 01:22:12,110
remember we turn them into indexes so we

1651
01:22:12,110 --> 01:22:14,389
use this handy<font color="#E5E5E5"> sparse categorical</font><font color="#CCCCCC"> cross</font>

1652
01:22:14,389 --> 01:22:17,510
<font color="#CCCCCC">entropy it's just the same</font><font color="#E5E5E5"> as our normal</font>

1653
01:22:17,510 --> 01:22:19,099
categorical cross entropy but rather

1654
01:22:19,099 --> 01:22:21,469
than<font color="#E5E5E5"> one</font><font color="#CCCCCC"> hot encoding we just skip the</font>

1655
01:22:21,469 --> 01:22:22,909
<font color="#CCCCCC">whole one code encoding</font><font color="#E5E5E5"> and just leave</font>

1656
01:22:22,909 --> 01:22:25,479
<font color="#E5E5E5">it as an index</font>

1657
01:22:25,670 --> 01:22:28,520
and we can go<font color="#E5E5E5"> ahead and sit plussing in</font>

1658
01:22:28,520 --> 01:22:31,960
our training data<font color="#CCCCCC"> so that was our</font>

1659
01:22:31,960 --> 01:22:36,490
<font color="#E5E5E5">rectangular data of the phoneme indexes</font>

1660
01:22:36,490 --> 01:22:40,580
<font color="#E5E5E5">our labels</font><font color="#CCCCCC"> and then we can use some</font>

1661
01:22:40,580 --> 01:22:43,040
<font color="#E5E5E5">valid test set data that we set aside as</font>

1662
01:22:43,040 --> 01:22:44,679
<font color="#CCCCCC">well</font>

1663
01:22:44,679 --> 01:22:48,429
so<font color="#E5E5E5"> we've hit that</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a while</font><font color="#CCCCCC"> I found</font>

1664
01:22:48,429 --> 01:22:50,530
that the<font color="#E5E5E5"> first three o'clock the</font><font color="#CCCCCC"> loss</font>

1665
01:22:50,530 --> 01:22:51,640
went down like<font color="#E5E5E5"> this</font>

1666
01:22:51,640 --> 01:22:53,739
the<font color="#CCCCCC"> secondary</font><font color="#E5E5E5"> epochs that went down like</font>

1667
01:22:53,739 --> 01:22:56,290
this<font color="#CCCCCC"> it seemed to be flattening out</font><font color="#E5E5E5"> so</font>

1668
01:22:56,290 --> 01:22:59,590
that's where as far as I stopped it so

1669
01:22:59,590 --> 01:23:04,110
we can now see how<font color="#E5E5E5"> well that worked</font>

1670
01:23:04,680 --> 01:23:07,930
now what I wanted to do was not<font color="#CCCCCC"> just say</font>

1671
01:23:07,930 --> 01:23:10,750
what<font color="#CCCCCC"> percentage of letters are correct</font>

1672
01:23:10,750 --> 01:23:12,430
<font color="#E5E5E5">because</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> doesn't really give you</font><font color="#CCCCCC"> the</font>

1673
01:23:12,430 --> 01:23:14,710
<font color="#E5E5E5">right sense at all okay what I really</font>

1674
01:23:14,710 --> 01:23:16,570
want<font color="#E5E5E5"> to know is what percentage of words</font>

1675
01:23:16,570 --> 01:23:19,390
are correct<font color="#CCCCCC"> so that's all this little</font>

1676
01:23:19,390 --> 01:23:24,090
eval<font color="#CCCCCC"> chaos function does it takes the</font>

1677
01:23:24,090 --> 01:23:26,980
thing that I'm trying<font color="#E5E5E5"> to evaluate called</font>

1678
01:23:26,980 --> 01:23:31,720
predict on it<font color="#CCCCCC"> it then does the</font><font color="#E5E5E5"> AG</font><font color="#CCCCCC"> max as</font>

1679
01:23:31,720 --> 01:23:34,360
<font color="#CCCCCC">usual to take that softmax and turn it</font>

1680
01:23:34,360 --> 01:23:36,670
into a specific<font color="#E5E5E5"> number which which</font>

1681
01:23:36,670 --> 01:23:39,790
character<font color="#CCCCCC"> is this</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> I want to</font>

1682
01:23:39,790 --> 01:23:43,330
check whether it's true for<font color="#E5E5E5"> all of the</font>

1683
01:23:43,330 --> 01:23:46,120
characters<font color="#CCCCCC"> that the real character</font>

1684
01:23:46,120 --> 01:23:49,330
equals<font color="#E5E5E5"> the predicted character okay so</font>

1685
01:23:49,330 --> 01:23:52,090
this is<font color="#E5E5E5"> going to return true only if</font>

1686
01:23:52,090 --> 01:23:55,470
every<font color="#E5E5E5"> single</font><font color="#CCCCCC"> item in the word is correct</font>

1687
01:23:55,470 --> 01:23:58,510
<font color="#CCCCCC">and so then taking the mean of that</font><font color="#E5E5E5"> it's</font>

1688
01:23:58,510 --> 01:23:59,980
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> tell</font><font color="#CCCCCC"> us what percentage</font><font color="#E5E5E5"> of the</font>

1689
01:23:59,980 --> 01:24:03,150
words to get totally right

1690
01:24:03,150 --> 01:24:05,010
and unfortunately<font color="#E5E5E5"> the</font><font color="#CCCCCC"> answer is</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> very</font>

1691
01:24:05,010 --> 01:24:10,760
many<font color="#E5E5E5"> 26% so let's look at some examples</font>

1692
01:24:10,760 --> 01:24:14,390
<font color="#CCCCCC">so we can go through</font><font color="#E5E5E5"> 20 words at random</font>

1693
01:24:14,390 --> 01:24:18,690
<font color="#CCCCCC">and we can print out all of the phonemes</font>

1694
01:24:18,690 --> 01:24:20,670
<font color="#E5E5E5">with dashes between so here's an example</font>

1695
01:24:20,670 --> 01:24:24,090
<font color="#CCCCCC">of some phonemes we can print out the</font>

1696
01:24:24,090 --> 01:24:27,449
<font color="#E5E5E5">actual word</font><font color="#CCCCCC"> and we can print out our</font>

1697
01:24:27,449 --> 01:24:33,480
prediction so here is a whole<font color="#E5E5E5"> bunch of</font>

1698
01:24:33,480 --> 01:24:36,530
words<font color="#E5E5E5"> that I don't really recognize</font>

1699
01:24:36,530 --> 01:24:40,620
<font color="#CCCCCC">Turtle Bay shuns it should be</font><font color="#E5E5E5"> spelt like</font>

1700
01:24:40,620 --> 01:24:43,949
<font color="#E5E5E5">that</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> we spelled it like that slightly</font>

1701
01:24:43,949 --> 01:24:48,900
<font color="#E5E5E5">wrong so you can see some</font><font color="#CCCCCC"> of the time</font>

1702
01:24:48,900 --> 01:24:50,909
<font color="#E5E5E5">the mistakes it makes you pretty clear</font>

1703
01:24:50,909 --> 01:24:55,260
so laro could be spelt like<font color="#E5E5E5"> that but</font>

1704
01:24:55,260 --> 01:24:57,590
this seems perfectly reasonable

1705
01:24:57,590 --> 01:25:01,610
<font color="#CCCCCC">sometimes on</font><font color="#E5E5E5"> the other hand it's way off</font>

1706
01:25:01,610 --> 01:25:05,100
<font color="#CCCCCC">and</font><font color="#E5E5E5"> interestingly what I what</font><font color="#CCCCCC"> you find</font>

1707
01:25:05,100 --> 01:25:08,280
is that most<font color="#E5E5E5"> of the time when it's way</font>

1708
01:25:08,280 --> 01:25:08,850
<font color="#CCCCCC">off</font>

1709
01:25:08,850 --> 01:25:11,850
I found<font color="#E5E5E5"> a</font><font color="#CCCCCC"> chance to be with the longer</font>

1710
01:25:11,850 --> 01:25:17,600
words<font color="#CCCCCC"> and the reason</font><font color="#E5E5E5"> for that</font><font color="#CCCCCC"> it's that</font>

1711
01:25:17,600 --> 01:25:21,060
the longer the<font color="#E5E5E5"> words</font><font color="#CCCCCC"> so like this one</font>

1712
01:25:21,060 --> 01:25:24,150
<font color="#E5E5E5">where it's terrible it's by</font><font color="#CCCCCC"> far the</font><font color="#E5E5E5"> most</font>

1713
01:25:24,150 --> 01:25:26,429
phonemes I think<font color="#E5E5E5"> one two three four five</font>

1714
01:25:26,429 --> 01:25:30,080
<font color="#E5E5E5">six seven</font><font color="#CCCCCC"> eight</font><font color="#E5E5E5"> nine</font><font color="#CCCCCC"> ten eleven phonemes</font>

1715
01:25:30,080 --> 01:25:34,800
so if we had<font color="#E5E5E5"> to somehow create</font><font color="#CCCCCC"> a single</font>

1716
01:25:34,800 --> 01:25:37,800
representation<font color="#E5E5E5"> that contained all of</font><font color="#CCCCCC"> the</font>

1717
01:25:37,800 --> 01:25:40,770
information<font color="#E5E5E5"> of all of those eleven</font>

1718
01:25:40,770 --> 01:25:44,100
phonemes<font color="#E5E5E5"> in a single vector and that's</font>

1719
01:25:44,100 --> 01:25:46,290
hard<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> right and then that single</font>

1720
01:25:46,290 --> 01:25:47,730
vector<font color="#E5E5E5"> got passed</font>

1721
01:25:47,730 --> 01:25:50,400
I mean copied that<font color="#E5E5E5"> passed to the decoder</font>

1722
01:25:50,400 --> 01:25:54,540
<font color="#E5E5E5">and that was everything it had to try to</font>

1723
01:25:54,540 --> 01:26:00,469
<font color="#E5E5E5">create this output</font><font color="#CCCCCC"> okay so</font>

1724
01:26:01,689 --> 01:26:03,429
that's the problem with<font color="#E5E5E5"> this basic</font>

1725
01:26:03,429 --> 01:26:04,689
<font color="#CCCCCC">encoder/decoder</font>

1726
01:26:04,689 --> 01:26:10,479
method and indeed here is a graph from

1727
01:26:10,479 --> 01:26:14,860
from the model that<font color="#E5E5E5"> means from the</font>

1728
01:26:14,860 --> 01:26:17,909
<font color="#E5E5E5">tanker which originally</font>

1729
01:26:19,510 --> 01:26:23,030
introduced attentional models<font color="#CCCCCC"> I</font>

1730
01:26:23,030 --> 01:26:25,039
this is the<font color="#CCCCCC"> knurl translation what</font><font color="#E5E5E5"> it</font>

1731
01:26:25,039 --> 01:26:29,900
showed is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> as the as the sentence</font>

1732
01:26:29,900 --> 01:26:35,420
<font color="#CCCCCC">lengths got bigger the standard</font><font color="#E5E5E5"> approach</font>

1733
01:26:35,420 --> 01:26:36,889
which we're talking about the<font color="#E5E5E5"> standard</font>

1734
01:26:36,889 --> 01:26:40,429
encoder/decoder approach the accuracy

1735
01:26:40,429 --> 01:26:45,320
absolutely died so what these

1736
01:26:45,320 --> 01:26:47,900
<font color="#E5E5E5">researchers did</font><font color="#CCCCCC"> was that they built a</font>

1737
01:26:47,900 --> 01:26:50,090
new<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> R and n model coordinate</font>

1738
01:26:50,090 --> 01:26:52,219
attentional model and with the

1739
01:26:52,219 --> 01:26:54,969
<font color="#E5E5E5">attentional model</font>

1740
01:26:55,060 --> 01:26:58,109
the accuracy actually<font color="#E5E5E5"> stayed pretty good</font>

1741
01:26:58,109 --> 01:27:01,739
so<font color="#CCCCCC"> goal</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> one the next</font><font color="#E5E5E5"> couple</font>

1742
01:27:01,739 --> 01:27:03,359
<font color="#CCCCCC">weapon system may not have a cold</font>

1743
01:27:03,359 --> 01:27:05,839
<font color="#E5E5E5">anymore</font>

1744
01:27:07,489 --> 01:27:11,699
yeah<font color="#E5E5E5"> so</font><font color="#CCCCCC"> basically we're going</font><font color="#E5E5E5"> to finish</font>

1745
01:27:11,699 --> 01:27:14,329
our deep dive into<font color="#E5E5E5"> neuro translation and</font>

1746
01:27:14,329 --> 01:27:16,439
then we're<font color="#E5E5E5"> going to look at time theory</font>

1747
01:27:16,439 --> 01:27:17,729
so<font color="#CCCCCC"> that we're not specifically looking</font>

1748
01:27:17,729 --> 01:27:19,320
<font color="#E5E5E5">at time theories it turns out that the</font>

1749
01:27:19,320 --> 01:27:22,019
best way that<font color="#CCCCCC"> I've found the time series</font>

1750
01:27:22,019 --> 01:27:24,530
<font color="#E5E5E5">is not specific to time to use at all</font>

1751
01:27:24,530 --> 01:27:30,449
that<font color="#E5E5E5"> you're certainly reinforcement</font>

1752
01:27:30,449 --> 01:27:33,539
<font color="#E5E5E5">learning was something I was planning to</font>

1753
01:27:33,539 --> 01:27:38,129
cover<font color="#CCCCCC"> but</font><font color="#E5E5E5"> I just haven't found almost</font>

1754
01:27:38,129 --> 01:27:40,409
<font color="#E5E5E5">any good examples of it actually being</font>

1755
01:27:40,409 --> 01:27:42,479
<font color="#CCCCCC">used in practice to solve important real</font>

1756
01:27:42,479 --> 01:27:48,109
problems<font color="#CCCCCC"> and indeed</font><font color="#E5E5E5"> when you</font><font color="#CCCCCC"> look at the</font>

1757
01:27:48,109 --> 01:27:50,280
you<font color="#CCCCCC"> can see in the paper in the last</font>

1758
01:27:50,280 --> 01:27:51,449
week<font color="#E5E5E5"> or two about using evolutionary</font>

1759
01:27:51,449 --> 01:27:53,510
strategies for reinforcement learning

1760
01:27:53,510 --> 01:27:55,859
<font color="#E5E5E5">basically it turns out that</font><font color="#CCCCCC"> using</font>

1761
01:27:55,859 --> 01:27:59,429
basically random search is better than

1762
01:27:59,429 --> 01:28:03,329
reinforcement learning<font color="#E5E5E5"> that this paper</font>

1763
01:28:03,329 --> 01:28:05,159
by<font color="#E5E5E5"> the way</font><font color="#CCCCCC"> like ridiculously overhyped</font>

1764
01:28:05,159 --> 01:28:07,939
<font color="#CCCCCC">these evolutionary strategies is</font>

1765
01:28:07,939 --> 01:28:10,379
something that I was working<font color="#CCCCCC"> on over</font><font color="#E5E5E5"> 20</font>

1766
01:28:10,379 --> 01:28:14,459
years<font color="#E5E5E5"> ago and in those days these are</font>

1767
01:28:14,459 --> 01:28:16,519
<font color="#E5E5E5">genetic algorithms as we called them</font>

1768
01:28:16,519 --> 01:28:18,749
used much more<font color="#CCCCCC"> sophisticated methods</font>

1769
01:28:18,749 --> 01:28:21,269
<font color="#E5E5E5">than</font><font color="#CCCCCC"> sick minds brand new evolutionary</font>

1770
01:28:21,269 --> 01:28:23,070
strategies<font color="#CCCCCC"> so</font><font color="#E5E5E5"> people are like</font>

1771
01:28:23,070 --> 01:28:25,859
rediscovering<font color="#E5E5E5"> these randomized Mediterra</font>

1772
01:28:25,859 --> 01:28:29,039
sticks<font color="#E5E5E5"> which is great that</font><font color="#CCCCCC"> they're still</font>

1773
01:28:29,039 --> 01:28:30,329
far behind where they were at<font color="#CCCCCC"> forty</font>

1774
01:28:30,329 --> 01:28:34,550
<font color="#CCCCCC">years</font><font color="#E5E5E5"> ago but fire ahead of</font>

1775
01:28:34,789 --> 01:28:37,189
reinforcement learning approaches so

1776
01:28:37,189 --> 01:28:39,619
given I try to<font color="#E5E5E5"> teach things which I</font>

1777
01:28:39,619 --> 01:28:41,760
<font color="#CCCCCC">think actually going to stand the test</font>

1778
01:28:41,760 --> 01:28:43,949
of time<font color="#CCCCCC"> I'm not at</font><font color="#E5E5E5"> all convinced at any</font>

1779
01:28:43,949 --> 01:28:45,419
current technique for reinforcement

1780
01:28:45,419 --> 01:28:46,559
learning to understand<font color="#E5E5E5"> the test of time</font>

1781
01:28:46,559 --> 01:28:49,789
<font color="#CCCCCC">so I</font><font color="#E5E5E5"> don't think we're gonna touch</font><font color="#CCCCCC"> that</font>

1782
01:28:49,789 --> 01:28:55,709
<font color="#E5E5E5">part</font><font color="#CCCCCC"> three yeah</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font>

1783
01:28:55,709 --> 01:28:59,280
might<font color="#E5E5E5"> have a</font><font color="#CCCCCC"> plateau</font><font color="#E5E5E5"> where where we do</font>

1784
01:28:59,280 --> 01:29:02,879
practical machine<font color="#E5E5E5"> learning for coders</font>

1785
01:29:02,879 --> 01:29:05,789
talk about decision tree ensembles and

1786
01:29:05,789 --> 01:29:09,590
training<font color="#E5E5E5"> test clips and stuff like that</font>

1787
01:29:09,590 --> 01:29:12,900
<font color="#E5E5E5">um yeah and then yeah we'll see where we</font>

1788
01:29:12,900 --> 01:29:17,550
are<font color="#CCCCCC"> that yet I'm sure</font><font color="#E5E5E5"> Rachel knows I'm</font>

1789
01:29:17,550 --> 01:29:18,690
not going to stop<font color="#CCCCCC"> doing this and</font>

1790
01:29:18,690 --> 01:29:20,160
<font color="#CCCCCC">Harriet's</font><font color="#E5E5E5"> it's really fun and</font>

1791
01:29:20,160 --> 01:29:22,950
<font color="#CCCCCC">interesting and and we're really</font>

1792
01:29:22,950 --> 01:29:25,370
interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> your ideas</font><font color="#CCCCCC"> about how</font><font color="#E5E5E5"> to</font>

1793
01:29:25,370 --> 01:29:27,480
how to keep<font color="#E5E5E5"> this going</font><font color="#CCCCCC"> like by the end</font>

1794
01:29:27,480 --> 01:29:31,610
<font color="#CCCCCC">of plat to you know you guys</font><font color="#E5E5E5"> have put</font><font color="#CCCCCC"> in</font>

1795
01:29:31,610 --> 01:29:34,830
hundreds of hours<font color="#E5E5E5"> you know maybe you</font>

1796
01:29:34,830 --> 01:29:38,310
know on average<font color="#CCCCCC"> maybe 140</font><font color="#E5E5E5"> hours</font><font color="#CCCCCC"> put</font>

1797
01:29:38,310 --> 01:29:41,370
<font color="#E5E5E5">together your own box written blog posts</font>

1798
01:29:41,370 --> 01:29:43,610
<font color="#E5E5E5">done hackathons</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> you're</font>

1799
01:29:43,610 --> 01:29:46,380
seriously in this now

1800
01:29:46,380 --> 01:29:49,950
and in fact<font color="#E5E5E5"> I could have say this week's</font>

1801
01:29:49,950 --> 01:29:51,900
kind<font color="#E5E5E5"> of been special</font><font color="#CCCCCC"> for me like this</font>

1802
01:29:51,900 --> 01:29:53,970
week's been a week<font color="#E5E5E5"> where again and again</font>

1803
01:29:53,970 --> 01:29:56,400
I've spoken to various folks of you guys

1804
01:29:56,400 --> 01:30:01,230
<font color="#E5E5E5">and heard about how like how many of you</font>

1805
01:30:01,230 --> 01:30:03,540
have like implemented projects<font color="#E5E5E5"> at your</font>

1806
01:30:03,540 --> 01:30:05,460
workplace<font color="#CCCCCC"> that have worked and are</font><font color="#E5E5E5"> now</font>

1807
01:30:05,460 --> 01:30:06,990
<font color="#E5E5E5">running and making your business</font><font color="#CCCCCC"> money</font>

1808
01:30:06,990 --> 01:30:10,110
<font color="#E5E5E5">or that</font><font color="#CCCCCC"> you've you know</font><font color="#E5E5E5"> achieved the</font>

1809
01:30:10,110 --> 01:30:12,210
career thing that you've<font color="#E5E5E5"> been aiming for</font>

1810
01:30:12,210 --> 01:30:14,280
or that<font color="#E5E5E5"> you've you know</font><font color="#CCCCCC"> won yet another</font>

1811
01:30:14,280 --> 01:30:17,670
GPU at a<font color="#CCCCCC"> hackathon</font><font color="#E5E5E5"> like you know or of</font>

1812
01:30:17,670 --> 01:30:19,710
<font color="#E5E5E5">course the social impact seeing where</font>

1813
01:30:19,710 --> 01:30:22,380
it's like all<font color="#E5E5E5"> these transformative and</font>

1814
01:30:22,380 --> 01:30:24,240
inspirational things that you know it's

1815
01:30:24,240 --> 01:30:27,540
it's<font color="#E5E5E5"> gone from yeah</font><font color="#CCCCCC"> we Rachel</font><font color="#E5E5E5"> and I</font>

1816
01:30:27,540 --> 01:30:30,750
<font color="#E5E5E5">started this we had</font><font color="#CCCCCC"> no idea</font><font color="#E5E5E5"> if it</font><font color="#CCCCCC"> was</font>

1817
01:30:30,750 --> 01:30:33,840
possible<font color="#CCCCCC"> to teach people you know with</font>

1818
01:30:33,840 --> 01:30:38,280
no specific required math<font color="#CCCCCC"> background</font>

1819
01:30:38,280 --> 01:30:39,750
other than<font color="#CCCCCC"> high school math you know</font>

1820
01:30:39,750 --> 01:30:41,340
deep learning to the point that you

1821
01:30:41,340 --> 01:30:44,280
<font color="#E5E5E5">could use it to build cool things we</font>

1822
01:30:44,280 --> 01:30:45,870
thought we probably could because I

1823
01:30:45,870 --> 01:30:47,730
don't have<font color="#CCCCCC"> that background and I've been</font>

1824
01:30:47,730 --> 01:30:51,870
able to but you<font color="#CCCCCC"> know I've been</font><font color="#E5E5E5"> kind of</font>

1825
01:30:51,870 --> 01:30:53,250
playing<font color="#E5E5E5"> around with similar things for a</font>

1826
01:30:53,250 --> 01:30:55,920
<font color="#E5E5E5">couple of decades</font><font color="#CCCCCC"> so it was a bit of an</font>

1827
01:30:55,920 --> 01:30:58,860
<font color="#E5E5E5">experiment and yeah this this week's</font>

1828
01:30:58,860 --> 01:31:01,050
been a week that for me it's been<font color="#E5E5E5"> fear</font>

1829
01:31:01,050 --> 01:31:03,810
that the experiments worked so I don't

1830
01:31:03,810 --> 01:31:04,950
know what<font color="#E5E5E5"> party is going to look like</font>

1831
01:31:04,950 --> 01:31:07,140
<font color="#CCCCCC">it's I</font><font color="#E5E5E5"> think it'll be a bit different</font>

1832
01:31:07,140 --> 01:31:09,870
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it's like it'll be</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> of a</font>

1833
01:31:09,870 --> 01:31:12,240
meeting<font color="#E5E5E5"> of minds along stack group of</font>

1834
01:31:12,240 --> 01:31:14,520
people who were kind of at the<font color="#E5E5E5"> same</font>

1835
01:31:14,520 --> 01:31:15,840
level and<font color="#E5E5E5"> thinking about the same kind</font>

1836
01:31:15,840 --> 01:31:18,739
<font color="#E5E5E5">of thing</font><font color="#CCCCCC"> and so maybe it's more</font><font color="#E5E5E5"> of a</font>

1837
01:31:18,739 --> 01:31:24,270
yeah<font color="#E5E5E5"> more of a ongoing</font><font color="#CCCCCC"> keep out</font>

1838
01:31:24,270 --> 01:31:25,920
knowledge<font color="#CCCCCC"> up-to-date</font><font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> thing it</font>

1839
01:31:25,920 --> 01:31:27,719
might<font color="#E5E5E5"> be more of us teaching each other</font>

1840
01:31:27,719 --> 01:31:30,480
<font color="#CCCCCC">I'm not sure certainly interested to</font>

1841
01:31:30,480 --> 01:31:37,530
<font color="#E5E5E5">hear ideas okay we don't normally</font><font color="#CCCCCC"> have</font>

1842
01:31:37,530 --> 01:31:38,730
three breaks but<font color="#E5E5E5"> I think I need one</font>

1843
01:31:38,730 --> 01:31:40,080
<font color="#E5E5E5">today and they were covering a lot of</font>

1844
01:31:40,080 --> 01:31:42,810
territory<font color="#E5E5E5"> so why don't we have a short</font>

1845
01:31:42,810 --> 01:31:49,080
break<font color="#CCCCCC"> and well I</font><font color="#E5E5E5"> have a 34</font><font color="#CCCCCC"> yeah let's</font>

1846
01:31:49,080 --> 01:31:50,250
<font color="#E5E5E5">have a short</font><font color="#CCCCCC"> break and we put all</font><font color="#E5E5E5"> the</font>

1847
01:31:50,250 --> 01:31:51,719
last 20 minutes<font color="#E5E5E5"> let's come back at em</font>

1848
01:31:51,719 --> 01:31:54,350
<font color="#E5E5E5">8:40</font>

1849
01:31:57,510 --> 01:32:06,520
<font color="#E5E5E5">okay thank you so attention models</font>

1850
01:32:06,520 --> 01:32:09,720
attention models

1851
01:32:12,460 --> 01:32:17,270
so<font color="#CCCCCC"> I</font><font color="#E5E5E5"> actually I really</font><font color="#CCCCCC"> like these</font>

1852
01:32:17,270 --> 01:32:24,020
I think theory<font color="#CCCCCC"> and fairly the</font><font color="#E5E5E5"> paper that</font>

1853
01:32:24,020 --> 01:32:25,880
introduced these it was quite

1854
01:32:25,880 --> 01:32:28,640
<font color="#CCCCCC">extraordinary paper introduced both GI</font>

1855
01:32:28,640 --> 01:32:30,650
use and attention models<font color="#CCCCCC"> at the same</font>

1856
01:32:30,650 --> 01:32:33,320
time<font color="#E5E5E5"> I think it might even be before the</font>

1857
01:32:33,320 --> 01:32:36,110
guy had his<font color="#CCCCCC"> PhD is remember correctly it</font>

1858
01:32:36,110 --> 01:32:40,010
<font color="#E5E5E5">was just a wonderful</font><font color="#CCCCCC"> paper very</font>

1859
01:32:40,010 --> 01:32:42,670
<font color="#CCCCCC">successful</font>

1860
01:32:43,310 --> 01:32:46,240
and the basic idea<font color="#CCCCCC"> of an attention model</font>

1861
01:32:46,240 --> 01:32:52,130
is it's<font color="#E5E5E5"> actually pretty simple</font><font color="#CCCCCC"> you'll</font>

1862
01:32:52,130 --> 01:32:54,910
see here

1863
01:32:55,110 --> 01:32:58,790
see where<font color="#E5E5E5"> does this happen</font>

1864
01:32:59,519 --> 01:33:07,309
<font color="#E5E5E5">okay here is is a decoder right okay and</font>

1865
01:33:07,309 --> 01:33:10,909
here's our embedding

1866
01:33:11,579 --> 01:33:16,409
<font color="#E5E5E5">okay and notice here</font>

1867
01:33:16,530 --> 01:33:18,510
remember<font color="#E5E5E5"> that my</font><font color="#CCCCCC"> ghetto</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> and return</font>

1868
01:33:18,510 --> 01:33:21,000
sequences equals true with the default

1869
01:33:21,000 --> 01:33:24,840
<font color="#E5E5E5">so the decoder now is actually</font><font color="#CCCCCC"> spitting</font>

1870
01:33:24,840 --> 01:33:29,540
<font color="#E5E5E5">out</font><font color="#CCCCCC"> a sequence</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> states</font>

1871
01:33:29,870 --> 01:33:32,660
now the length of<font color="#E5E5E5"> that sequence is equal</font>

1872
01:33:32,660 --> 01:33:38,240
to the<font color="#E5E5E5"> number of phonemes okay</font><font color="#CCCCCC"> and we</font>

1873
01:33:38,240 --> 01:33:39,950
know<font color="#E5E5E5"> that there isn't a mapping one to</font>

1874
01:33:39,950 --> 01:33:43,190
<font color="#E5E5E5">one of phonemes</font><font color="#CCCCCC"> de letters all</font><font color="#E5E5E5"> right so</font>

1875
01:33:43,190 --> 01:33:45,140
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> kind of interesting to even</font>

1876
01:33:45,140 --> 01:33:46,160
think<font color="#E5E5E5"> about how we're going</font><font color="#CCCCCC"> to deal with</font>

1877
01:33:46,160 --> 01:33:49,090
<font color="#E5E5E5">this now how we're going to deal</font><font color="#CCCCCC"> with</font>

1878
01:33:49,090 --> 01:33:54,950
<font color="#CCCCCC">sixteen states and the states</font><font color="#E5E5E5"> because</font>

1879
01:33:54,950 --> 01:33:58,700
they started with bi-directional<font color="#CCCCCC"> state 1</font>

1880
01:33:58,700 --> 01:34:00,860
both<font color="#E5E5E5"> represent the combination of</font>

1881
01:34:00,860 --> 01:34:02,510
<font color="#CCCCCC">everything</font><font color="#E5E5E5"> that's come before the first</font>

1882
01:34:02,510 --> 01:34:04,040
phoneme<font color="#E5E5E5"> and everything has come</font><font color="#CCCCCC"> after</font>

1883
01:34:04,040 --> 01:34:05,450
and state<font color="#CCCCCC"> 2 is everything that come</font>

1884
01:34:05,450 --> 01:34:07,340
before<font color="#E5E5E5"> the second phoneme and everything</font>

1885
01:34:07,340 --> 01:34:08,810
has<font color="#E5E5E5"> come after and so forth</font>

1886
01:34:08,810 --> 01:34:12,800
<font color="#E5E5E5">okay so the states in a sense they're</font>

1887
01:34:12,800 --> 01:34:14,270
all representing something<font color="#E5E5E5"> very similar</font>

1888
01:34:14,270 --> 01:34:16,790
<font color="#E5E5E5">but</font><font color="#CCCCCC"> they've got a</font><font color="#E5E5E5"> different focus you</font>

1889
01:34:16,790 --> 01:34:18,350
know each<font color="#E5E5E5"> one of these states at each</font>

1890
01:34:18,350 --> 01:34:20,450
one remembers<font color="#E5E5E5"> at length of 16 right so</font>

1891
01:34:20,450 --> 01:34:23,920
it's one of these<font color="#E5E5E5"> 16 states represents</font>

1892
01:34:23,920 --> 01:34:26,030
everything<font color="#CCCCCC"> that comes before</font><font color="#E5E5E5"> everything</font>

1893
01:34:26,030 --> 01:34:28,670
that comes<font color="#CCCCCC"> after that point but with a</font>

1894
01:34:28,670 --> 01:34:32,510
<font color="#E5E5E5">focus on on that phony okay</font>

1895
01:34:32,510 --> 01:34:38,680
so what we want to do now is<font color="#E5E5E5"> create a an</font>

1896
01:34:38,680 --> 01:34:41,659
RNN

1897
01:34:41,659 --> 01:34:46,329
<font color="#E5E5E5">where the number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> inputs to the iron n</font>

1898
01:34:46,329 --> 01:34:50,269
needs to be<font color="#E5E5E5"> 15 not 16 because</font><font color="#CCCCCC"> remember</font>

1899
01:34:50,269 --> 01:34:52,729
the length of the word we're creating is

1900
01:34:52,729 --> 01:34:55,820
15 right so we're going<font color="#E5E5E5"> to have at 15</font>

1901
01:34:55,820 --> 01:34:59,079
output time steps

1902
01:35:02,710 --> 01:35:06,010
and at each<font color="#CCCCCC"> point</font><font color="#E5E5E5"> we wanted to have the</font>

1903
01:35:06,010 --> 01:35:10,170
<font color="#CCCCCC">opportunity to look at all of these 16</font>

1904
01:35:10,170 --> 01:35:14,170
output<font color="#E5E5E5"> states but we're going to go in</font>

1905
01:35:14,170 --> 01:35:16,750
<font color="#E5E5E5">with the assumption that only some</font><font color="#CCCCCC"> of</font>

1906
01:35:16,750 --> 01:35:21,700
those 16 are going to be relevant<font color="#E5E5E5"> but we</font>

1907
01:35:21,700 --> 01:35:25,300
don't know which right so what we want

1908
01:35:25,300 --> 01:35:29,500
to do is basically create<font color="#E5E5E5"> a so take a</font>

1909
01:35:29,500 --> 01:35:32,469
basically take each of these<font color="#E5E5E5"> 16</font><font color="#CCCCCC"> States</font>

1910
01:35:32,469 --> 01:35:35,969
and to a weighted sum<font color="#CCCCCC"> write</font><font color="#E5E5E5"> sum of</font>

1911
01:35:35,969 --> 01:35:44,550
weights<font color="#E5E5E5"> times</font><font color="#CCCCCC"> encoded</font><font color="#E5E5E5"> fixed</font>

1912
01:35:44,980 --> 01:35:48,590
right<font color="#E5E5E5"> where these weights somehow</font>

1913
01:35:48,590 --> 01:35:52,940
represent how important is each one<font color="#CCCCCC"> of</font>

1914
01:35:52,940 --> 01:35:55,790
those 16<font color="#CCCCCC"> inputs</font><font color="#E5E5E5"> for calculating this</font>

1915
01:35:55,790 --> 01:35:58,010
output<font color="#E5E5E5"> and how important</font><font color="#CCCCCC"> or each</font><font color="#E5E5E5"> of</font>

1916
01:35:58,010 --> 01:36:00,200
those 16 inputs<font color="#CCCCCC"> for calculating</font><font color="#E5E5E5"> this</font>

1917
01:36:00,200 --> 01:36:03,440
output and so forth<font color="#CCCCCC"> right if we could</font>

1918
01:36:03,440 --> 01:36:07,100
somehow come up<font color="#E5E5E5"> with a set of weights to</font>

1919
01:36:07,100 --> 01:36:08,930
every single<font color="#E5E5E5"> one of those time steps</font>

1920
01:36:08,930 --> 01:36:12,680
<font color="#E5E5E5">then we can replace the length 16 thing</font>

1921
01:36:12,680 --> 01:36:17,120
with a single thing right and if it

1922
01:36:17,120 --> 01:36:21,350
<font color="#E5E5E5">turns out that output number</font><font color="#CCCCCC"> 1 only</font>

1923
01:36:21,350 --> 01:36:24,080
<font color="#CCCCCC">really depends</font><font color="#E5E5E5"> on input number</font><font color="#CCCCCC"> 1 and</font>

1924
01:36:24,080 --> 01:36:26,780
<font color="#E5E5E5">nothing else</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> basically that input</font>

1925
01:36:26,780 --> 01:36:29,390
<font color="#E5E5E5">those weights are going to be 1 0 0 0 0</font>

1926
01:36:29,390 --> 01:36:33,110
<font color="#CCCCCC">0 right like it can it can learn to do</font>

1927
01:36:33,110 --> 01:36:38,030
that<font color="#E5E5E5"> but if it turns out that if it</font>

1928
01:36:38,030 --> 01:36:41,060
turns out<font color="#E5E5E5"> that output</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> 1 actually</font>

1929
01:36:41,060 --> 01:36:45,380
<font color="#CCCCCC">depends on phonemes 1</font><font color="#E5E5E5"> & 2 equally that</font>

1930
01:36:45,380 --> 01:36:49,730
it can learn the weights 0.5 0.5 0 0 0 0

1931
01:36:49,730 --> 01:36:54,080
0 so in other words we<font color="#E5E5E5"> want some</font>

1932
01:36:54,080 --> 01:37:01,130
function<font color="#CCCCCC"> WI equals some function that</font>

1933
01:37:01,130 --> 01:37:04,430
returns<font color="#E5E5E5"> the right set of weights to tell</font>

1934
01:37:04,430 --> 01:37:08,750
us which bit of<font color="#E5E5E5"> the decoded input to</font>

1935
01:37:08,750 --> 01:37:13,430
look at so it so happens<font color="#E5E5E5"> we actually</font>

1936
01:37:13,430 --> 01:37:16,420
<font color="#E5E5E5">know a good way of learning functions</font>

1937
01:37:16,420 --> 01:37:19,880
<font color="#E5E5E5">what if we made the function a neural</font>

1938
01:37:19,880 --> 01:37:25,900
net<font color="#CCCCCC"> and what if we learn to it using</font><font color="#E5E5E5"> SGD</font>

1939
01:37:26,170 --> 01:37:36,110
why not so here's the paper<font color="#CCCCCC"> neural</font>

1940
01:37:36,110 --> 01:37:38,690
machine translation by jointly alert

1941
01:37:38,690 --> 01:37:43,910
learning to align and translate<font color="#E5E5E5"> and the</font>

1942
01:37:43,910 --> 01:37:48,440
<font color="#CCCCCC">great</font><font color="#E5E5E5"> paper it's not the</font><font color="#CCCCCC"> clearest</font><font color="#E5E5E5"> in my</font>

1943
01:37:48,440 --> 01:37:50,230
opinion in terms<font color="#CCCCCC"> of understandability</font>

1944
01:37:50,230 --> 01:37:52,700
<font color="#E5E5E5">but let me describe some</font><font color="#CCCCCC"> of the main</font>

1945
01:37:52,700 --> 01:37:54,940
pieces

1946
01:37:55,810 --> 01:37:58,920
okay so

1947
01:38:01,209 --> 01:38:04,579
here's the starting point<font color="#CCCCCC"> oopsy-daisy</font>

1948
01:38:04,579 --> 01:38:06,200
yes I have to do it

1949
01:38:06,200 --> 01:38:09,310
[Music]

1950
01:38:09,909 --> 01:38:11,550
okay let's subscribe<font color="#E5E5E5"> how to</font>

1951
01:38:11,550 --> 01:38:16,620
read this equation when you<font color="#E5E5E5"> see a</font>

1952
01:38:16,620 --> 01:38:19,680
probability<font color="#E5E5E5"> like this you can very often</font>

1953
01:38:19,680 --> 01:38:22,830
think of<font color="#E5E5E5"> it as a loss function right the</font>

1954
01:38:22,830 --> 01:38:27,540
<font color="#E5E5E5">idea of of</font><font color="#CCCCCC"> SGG basically most time when</font>

1955
01:38:27,540 --> 01:38:29,700
<font color="#E5E5E5">we're using it is</font><font color="#CCCCCC"> to come up</font><font color="#E5E5E5"> with a</font>

1956
01:38:29,700 --> 01:38:32,640
<font color="#CCCCCC">model where the probabilities that</font><font color="#E5E5E5"> the</font>

1957
01:38:32,640 --> 01:38:35,010
<font color="#E5E5E5">model creates are as high</font><font color="#CCCCCC"> as possible</font>

1958
01:38:35,010 --> 01:38:37,440
<font color="#E5E5E5">for the true data and as well as</font>

1959
01:38:37,440 --> 01:38:39,480
possible for the other data<font color="#E5E5E5"> that's like</font>

1960
01:38:39,480 --> 01:38:41,280
it's<font color="#E5E5E5"> just another way of talking about</font><font color="#CCCCCC"> a</font>

1961
01:38:41,280 --> 01:38:45,060
loss function right so<font color="#CCCCCC"> very</font><font color="#E5E5E5"> often when</font>

1962
01:38:45,060 --> 01:38:46,920
<font color="#E5E5E5">you read the papers</font><font color="#CCCCCC"> where we would write</font>

1963
01:38:46,920 --> 01:38:48,780
a loss function<font color="#CCCCCC"> a people will see a</font>

1964
01:38:48,780 --> 01:38:51,390
probability<font color="#E5E5E5"> and what this here says</font>

1965
01:38:51,390 --> 01:38:53,970
earlier on they say that<font color="#CCCCCC"> y is basically</font>

1966
01:38:53,970 --> 01:38:57,330
our our outputs<font color="#CCCCCC"> very common for Y</font><font color="#E5E5E5"> to be</font>

1967
01:38:57,330 --> 01:38:59,550
an<font color="#E5E5E5"> output and what is it saying is that</font>

1968
01:38:59,550 --> 01:39:01,770
the<font color="#E5E5E5"> probability of the output at time</font>

1969
01:39:01,770 --> 01:39:04,800
step<font color="#E5E5E5"> I</font><font color="#CCCCCC"> write so at some</font><font color="#E5E5E5"> particular time</font>

1970
01:39:04,800 --> 01:39:08,100
step depends on to this bar here means

1971
01:39:08,100 --> 01:39:11,940
depends on all of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous outputs</font>

1972
01:39:11,940 --> 01:39:15,930
<font color="#E5E5E5">right</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> other words in</font><font color="#CCCCCC"> our spelling</font>

1973
01:39:15,930 --> 01:39:19,320
thing<font color="#CCCCCC"> when we're looking</font><font color="#E5E5E5"> at the fourth</font>

1974
01:39:19,320 --> 01:39:22,470
letter that we're spelling it depends on

1975
01:39:22,470 --> 01:39:24,680
the<font color="#E5E5E5"> three letters that</font><font color="#CCCCCC"> we spelt so far</font>

1976
01:39:24,680 --> 01:39:27,210
<font color="#CCCCCC">you can't have it depend on</font><font color="#E5E5E5"> the later</font>

1977
01:39:27,210 --> 01:39:30,930
letters that treating<font color="#CCCCCC"> right so this</font><font color="#E5E5E5"> is</font>

1978
01:39:30,930 --> 01:39:32,250
basically a description<font color="#E5E5E5"> of the problem</font>

1979
01:39:32,250 --> 01:39:34,470
<font color="#E5E5E5">is that</font><font color="#CCCCCC"> we're building something</font><font color="#E5E5E5"> which</font>

1980
01:39:34,470 --> 01:39:37,320
is time<font color="#CCCCCC"> dependent and where the ice</font>

1981
01:39:37,320 --> 01:39:40,080
thing that we're creating<font color="#E5E5E5"> can only be</font>

1982
01:39:40,080 --> 01:39:42,620
<font color="#CCCCCC">allowed to depend</font><font color="#E5E5E5"> on the previous I</font>

1983
01:39:42,620 --> 01:39:47,370
minus<font color="#CCCCCC"> 1 things comma</font><font color="#E5E5E5"> that basically</font>

1984
01:39:47,370 --> 01:39:49,980
means<font color="#E5E5E5"> and and it's also allowed to</font>

1985
01:39:49,980 --> 01:39:52,890
<font color="#E5E5E5">depend on ok anything in bold is a</font>

1986
01:39:52,890 --> 01:39:57,030
vector right<font color="#CCCCCC"> a vector of inputs</font><font color="#E5E5E5"> and so</font>

1987
01:39:57,030 --> 01:40:00,930
this here<font color="#CCCCCC"> is our</font><font color="#E5E5E5"> list of phonemes right</font>

1988
01:40:00,930 --> 01:40:04,320
and this here is our list of<font color="#E5E5E5"> all of the</font>

1989
01:40:04,320 --> 01:40:10,370
letters we've<font color="#E5E5E5"> spelt so far</font><font color="#CCCCCC"> ok so</font>

1990
01:40:12,120 --> 01:40:14,280
so that whole thing<font color="#CCCCCC"> right that</font><font color="#E5E5E5"> whole</font>

1991
01:40:14,280 --> 01:40:17,120
probability we're going<font color="#CCCCCC"> to calculate</font>

1992
01:40:17,120 --> 01:40:21,600
using<font color="#E5E5E5"> some some function</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and</font>

1993
01:40:21,600 --> 01:40:23,100
because<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a neural net paper</font><font color="#E5E5E5"> you</font>

1994
01:40:23,100 --> 01:40:24,360
can be pretty<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that's going</font><font color="#E5E5E5"> to turn</font>

1995
01:40:24,360 --> 01:40:27,690
<font color="#E5E5E5">out</font><font color="#CCCCCC"> to be a neural net and what are the</font>

1996
01:40:27,690 --> 01:40:29,160
<font color="#E5E5E5">things that were allowed to calculate</font>

1997
01:40:29,160 --> 01:40:32,130
with well we're allowed to calculate

1998
01:40:32,130 --> 01:40:35,310
with the<font color="#CCCCCC"> previous letter that we just</font>

1999
01:40:35,310 --> 01:40:37,700
translated

2000
01:40:38,059 --> 01:40:42,710
what's this the<font color="#E5E5E5"> R and</font><font color="#CCCCCC"> N hidden state</font>

2001
01:40:42,710 --> 01:40:47,179
that we've built<font color="#E5E5E5"> up so far and what's</font>

2002
01:40:47,179 --> 01:40:52,080
this a context vector

2003
01:40:52,080 --> 01:40:57,380
the context vector the context vector is

2004
01:40:57,770 --> 01:41:04,190
a weighted sum of annotations<font color="#E5E5E5"> H so these</font>

2005
01:41:04,190 --> 01:41:07,070
are the hidden<font color="#CCCCCC"> States to come out of our</font>

2006
01:41:07,070 --> 01:41:12,440
<font color="#E5E5E5">encoder and these are some weights okay</font>

2007
01:41:12,440 --> 01:41:13,460
so I'm<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to give you enough</font>

2008
01:41:13,460 --> 01:41:15,620
information to try and pass this<font color="#CCCCCC"> paper</font>

2009
01:41:15,620 --> 01:41:18,200
over the<font color="#CCCCCC"> weekend</font><font color="#E5E5E5"> right so that's</font>

2010
01:41:18,200 --> 01:41:22,910
<font color="#E5E5E5">everything I've described so far the</font>

2011
01:41:22,910 --> 01:41:26,600
weights and now the nice<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> that</font>

2012
01:41:26,600 --> 01:41:28,340
<font color="#CCCCCC">hopefully you guys have now read enough</font>

2013
01:41:28,340 --> 01:41:30,290
papers that you can look<font color="#E5E5E5"> at something</font>

2014
01:41:30,290 --> 01:41:33,140
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> and skip over</font><font color="#E5E5E5"> it and go oh</font>

2015
01:41:33,140 --> 01:41:38,690
that's just<font color="#E5E5E5"> softmax over time your</font>

2016
01:41:38,690 --> 01:41:40,160
pattern recognition starts getting good

2017
01:41:40,160 --> 01:41:42,950
<font color="#CCCCCC">right like</font><font color="#E5E5E5"> you start seeing something</font>

2018
01:41:42,950 --> 01:41:44,510
like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> you go oh</font><font color="#E5E5E5"> that's a weighted</font>

2019
01:41:44,510 --> 01:41:46,040
sum and<font color="#E5E5E5"> you say something like</font><font color="#CCCCCC"> this</font>

2020
01:41:46,040 --> 01:41:46,340
together

2021
01:41:46,340 --> 01:41:48,950
oh that's<font color="#CCCCCC"> soft mess</font><font color="#E5E5E5"> like people who read</font>

2022
01:41:48,950 --> 01:41:52,130
papers don't actually read every symbol

2023
01:41:52,130 --> 01:41:54,890
<font color="#CCCCCC">that I looks at it and goes</font><font color="#E5E5E5"> softmax</font>

2024
01:41:54,890 --> 01:41:57,830
<font color="#E5E5E5">weighted</font><font color="#CCCCCC"> sum adjusted function okay got</font>

2025
01:41:57,830 --> 01:42:01,280
it<font color="#CCCCCC"> right as if it was like pieces of</font>

2026
01:42:01,280 --> 01:42:03,560
code<font color="#CCCCCC"> only this is like really annoying</font>

2027
01:42:03,560 --> 01:42:04,730
clothes<font color="#CCCCCC"> you can't look up in a</font>

2028
01:42:04,730 --> 01:42:06,020
<font color="#CCCCCC">dictionary and</font><font color="#E5E5E5"> you can't run and you</font>

2029
01:42:06,020 --> 01:42:07,580
can't check it you can't debug it<font color="#E5E5E5"> but</font>

2030
01:42:07,580 --> 01:42:09,670
apart from that it's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like oh okay</font>

2031
01:42:09,670 --> 01:42:13,970
<font color="#CCCCCC">so alright so the alphas are things</font><font color="#E5E5E5"> that</font>

2032
01:42:13,970 --> 01:42:15,920
came<font color="#E5E5E5"> out of a</font><font color="#CCCCCC"> softmax all</font><font color="#E5E5E5"> right what</font>

2033
01:42:15,920 --> 01:42:18,560
goes<font color="#E5E5E5"> into the softmax</font><font color="#CCCCCC"> all right</font>

2034
01:42:18,560 --> 01:42:21,230
something called<font color="#E5E5E5"> e the other annoying</font>

2035
01:42:21,230 --> 01:42:22,820
thing about<font color="#E5E5E5"> math notation is often you</font>

2036
01:42:22,820 --> 01:42:25,100
introduce something<font color="#E5E5E5"> and define it later</font>

2037
01:42:25,100 --> 01:42:26,720
<font color="#CCCCCC">all right</font><font color="#E5E5E5"> so here we</font><font color="#CCCCCC"> are</font>

2038
01:42:26,720 --> 01:42:31,280
later<font color="#E5E5E5"> we define e what a equal</font><font color="#CCCCCC"> to e is</font>

2039
01:42:31,280 --> 01:42:35,660
equal<font color="#CCCCCC"> to</font><font color="#E5E5E5"> some function</font><font color="#CCCCCC"> of what some</font>

2040
01:42:35,660 --> 01:42:39,530
function<font color="#E5E5E5"> of the previous hidden state</font>

2041
01:42:39,530 --> 01:42:48,740
and the encoder<font color="#E5E5E5"> state okay</font><font color="#CCCCCC"> and what's</font>

2042
01:42:48,740 --> 01:42:54,940
<font color="#E5E5E5">that function or</font><font color="#CCCCCC"> that function is again</font>

2043
01:42:55,190 --> 01:42:58,219
a neural network now the important piece

2044
01:42:58,219 --> 01:43:02,810
here<font color="#E5E5E5"> is jointly trained jointly trained</font>

2045
01:43:02,810 --> 01:43:05,660
means<font color="#E5E5E5"> it's not like a again where we</font>

2046
01:43:05,660 --> 01:43:07,280
<font color="#E5E5E5">train a bit of</font><font color="#CCCCCC"> disseminator</font><font color="#E5E5E5"> and a bit of</font>

2047
01:43:07,280 --> 01:43:10,580
generator<font color="#CCCCCC"> it's not like one</font><font color="#E5E5E5"> of these</font>

2048
01:43:10,580 --> 01:43:12,770
<font color="#E5E5E5">kind of manual attentional models where</font>

2049
01:43:12,770 --> 01:43:14,449
<font color="#CCCCCC">we first</font><font color="#E5E5E5"> of all figure</font><font color="#CCCCCC"> out the modules</font>

2050
01:43:14,449 --> 01:43:16,250
are here and then we zoom<font color="#CCCCCC"> into them and</font>

2051
01:43:16,250 --> 01:43:19,070
<font color="#E5E5E5">find them there jointly trained means we</font>

2052
01:43:19,070 --> 01:43:21,469
<font color="#E5E5E5">create a single model in a single</font>

2053
01:43:21,469 --> 01:43:22,940
computation graph if you<font color="#E5E5E5"> like where the</font>

2054
01:43:22,940 --> 01:43:24,080
gradients<font color="#E5E5E5"> are going to flow</font><font color="#CCCCCC"> through</font>

2055
01:43:24,080 --> 01:43:27,110
<font color="#E5E5E5">everything so we have to try</font><font color="#CCCCCC"> and come up</font>

2056
01:43:27,110 --> 01:43:29,150
<font color="#CCCCCC">with a way basically</font><font color="#E5E5E5"> where we're going</font>

2057
01:43:29,150 --> 01:43:34,370
to build a standard regular RNN<font color="#E5E5E5"> okay but</font>

2058
01:43:34,370 --> 01:43:37,790
the iron<font color="#CCCCCC"> N is going to use as the</font><font color="#E5E5E5"> input</font>

2059
01:43:37,790 --> 01:43:44,270
at each time step<font color="#E5E5E5"> this right so we're</font>

2060
01:43:44,270 --> 01:43:46,640
going<font color="#E5E5E5"> to have to come</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with a way of</font>

2061
01:43:46,640 --> 01:43:50,290
<font color="#CCCCCC">actually cup of actually</font><font color="#E5E5E5"> making this</font>

2062
01:43:50,290 --> 01:43:52,969
<font color="#E5E5E5">mini neuron it's just a single one</font>

2063
01:43:52,969 --> 01:43:56,420
hidden layer standard neuron it it's

2064
01:43:56,420 --> 01:44:00,710
going<font color="#E5E5E5"> to be inside every time</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> in our</font>

2065
01:44:00,710 --> 01:44:03,010
RN

2066
01:44:03,630 --> 01:44:10,400
so this whole<font color="#CCCCCC"> thing</font>

2067
01:44:13,090 --> 01:44:16,239
is summarized in another paper<font color="#CCCCCC"> this is</font>

2068
01:44:16,239 --> 01:44:19,449
<font color="#E5E5E5">actually really cool</font><font color="#CCCCCC"> paper grammar</font><font color="#E5E5E5"> as a</font>

2069
01:44:19,449 --> 01:44:23,380
foreign language<font color="#CCCCCC"> lots of</font><font color="#E5E5E5"> things you</font>

2070
01:44:23,380 --> 01:44:24,880
<font color="#CCCCCC">probably recognize here Geoffrey Hinton</font>

2071
01:44:24,880 --> 01:44:27,750
<font color="#E5E5E5">who's kind of father of deep learning</font>

2072
01:44:27,750 --> 01:44:30,099
<font color="#CCCCCC">earlier who's now I think chief</font>

2073
01:44:30,099 --> 01:44:33,460
scientist or something<font color="#CCCCCC"> at some director</font>

2074
01:44:33,460 --> 01:44:38,440
of science at open<font color="#CCCCCC"> AI Oreo venules done</font>

2075
01:44:38,440 --> 01:44:41,320
lots of cool<font color="#CCCCCC"> stuff this</font><font color="#E5E5E5"> paper is kind</font><font color="#CCCCCC"> of</font>

2076
01:44:41,320 --> 01:44:44,670
neat and<font color="#E5E5E5"> fun anyway it basically says</font>

2077
01:44:44,670 --> 01:44:47,920
what if you didn't know anything about

2078
01:44:47,920 --> 01:44:49,989
grammar and<font color="#E5E5E5"> you attempted</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

2079
01:44:49,989 --> 01:44:53,800
<font color="#E5E5E5">neural net which assigned grammar to</font>

2080
01:44:53,800 --> 01:44:57,369
sentences<font color="#CCCCCC"> it turns</font><font color="#E5E5E5"> out you actually end</font>

2081
01:44:57,369 --> 01:44:59,639
up with<font color="#E5E5E5"> something more accurate than any</font>

2082
01:44:59,639 --> 01:45:01,840
<font color="#E5E5E5">rule based grammar system that's been</font>

2083
01:45:01,840 --> 01:45:06,159
built<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the most things they do is</font>

2084
01:45:06,159 --> 01:45:09,400
to<font color="#CCCCCC"> summarize all the bits</font><font color="#E5E5E5"> and again this</font>

2085
01:45:09,400 --> 01:45:11,380
<font color="#E5E5E5">is where like if you</font><font color="#CCCCCC"> were reading a</font>

2086
01:45:11,380 --> 01:45:13,510
paper the first<font color="#E5E5E5"> time and didn't know</font>

2087
01:45:13,510 --> 01:45:15,699
what an<font color="#CCCCCC"> LS TM was and</font><font color="#E5E5E5"> when oh and</font><font color="#CCCCCC"> lsdm</font>

2088
01:45:15,699 --> 01:45:18,610
is all these<font color="#E5E5E5"> things that's not going to</font>

2089
01:45:18,610 --> 01:45:20,230
<font color="#E5E5E5">mean</font><font color="#CCCCCC"> anything to you</font><font color="#E5E5E5"> right you have to</font>

2090
01:45:20,230 --> 01:45:23,500
recognize<font color="#E5E5E5"> that</font><font color="#CCCCCC"> people write stuff in</font>

2091
01:45:23,500 --> 01:45:26,289
papers<font color="#E5E5E5"> I mean there's no point writing</font>

2092
01:45:26,289 --> 01:45:28,269
<font color="#E5E5E5">Atlas TM equations in papers right but</font>

2093
01:45:28,269 --> 01:45:30,130
it's basically you're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have to</font>

2094
01:45:30,130 --> 01:45:32,110
go and<font color="#E5E5E5"> find the lsdm</font><font color="#CCCCCC"> paper or find a</font>

2095
01:45:32,110 --> 01:45:34,389
tutorial like learn about lsdm when

2096
01:45:34,389 --> 01:45:36,340
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> finished come back in the same</font>

2097
01:45:36,340 --> 01:45:41,079
<font color="#CCCCCC">way they summarized attention</font><font color="#E5E5E5"> okay so</font>

2098
01:45:41,079 --> 01:45:42,820
they say we've used<font color="#CCCCCC"> add or adapt to the</font>

2099
01:45:42,820 --> 01:45:45,159
attention<font color="#E5E5E5"> model from - if you go and you</font>

2100
01:45:45,159 --> 01:45:47,860
<font color="#CCCCCC">have a look</font><font color="#E5E5E5"> at - okay that's the</font><font color="#CCCCCC"> paper</font>

2101
01:45:47,860 --> 01:45:51,250
we just looked at<font color="#CCCCCC"> all right but the nice</font>

2102
01:45:51,250 --> 01:45:53,860
thing<font color="#E5E5E5"> is that because this came a little</font>

2103
01:45:53,860 --> 01:45:55,659
later<font color="#CCCCCC"> they've done a pretty good job of</font>

2104
01:45:55,659 --> 01:45:58,179
<font color="#CCCCCC">trying to summarize</font><font color="#E5E5E5"> it into a single</font>

2105
01:45:58,179 --> 01:46:01,030
page<font color="#CCCCCC"> so</font><font color="#E5E5E5"> during the week if you want to</font>

2106
01:46:01,030 --> 01:46:02,739
try and get the hang of attention<font color="#E5E5E5"> you</font>

2107
01:46:02,739 --> 01:46:04,239
might<font color="#E5E5E5"> find it good to</font><font color="#CCCCCC"> have a look at</font>

2108
01:46:04,239 --> 01:46:07,989
this paper<font color="#E5E5E5"> and look at their summary</font><font color="#CCCCCC"> and</font>

2109
01:46:07,989 --> 01:46:09,519
you'll see that basically<font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> is</font>

2110
01:46:09,519 --> 01:46:14,590
that<font color="#E5E5E5"> it's a standard sequence</font><font color="#CCCCCC"> of</font>

2111
01:46:14,590 --> 01:46:16,210
sequence model<font color="#E5E5E5"> so a standard sequence</font>

2112
01:46:16,210 --> 01:46:18,820
<font color="#CCCCCC">two tickets</font><font color="#E5E5E5"> model means encoder hidden</font>

2113
01:46:18,820 --> 01:46:21,340
<font color="#CCCCCC">states</font><font color="#E5E5E5"> the final hidden state decoder</font>

2114
01:46:21,340 --> 01:46:22,750
right

2115
01:46:22,750 --> 01:46:27,700
<font color="#E5E5E5">plus adding attention okay</font><font color="#CCCCCC"> and so we</font>

2116
01:46:27,700 --> 01:46:31,630
have<font color="#E5E5E5"> two separate LS</font><font color="#CCCCCC"> GMS an encoder and</font>

2117
01:46:31,630 --> 01:46:35,040
a decoder<font color="#E5E5E5"> and now be careful of the</font>

2118
01:46:35,040 --> 01:46:37,810
notation<font color="#E5E5E5"> encoded states are going to be</font>

2119
01:46:37,810 --> 01:46:44,020
called<font color="#CCCCCC"> H the decoder states h1 through</font>

2120
01:46:44,020 --> 01:46:44,560
<font color="#E5E5E5">HTA</font>

2121
01:46:44,560 --> 01:46:49,180
the decoder states<font color="#E5E5E5"> are D which are also</font>

2122
01:46:49,180 --> 01:46:53,220
going<font color="#E5E5E5"> to call</font><font color="#CCCCCC"> H ta plus 1/2 T a plus</font><font color="#E5E5E5"> T B</font>

2123
01:46:53,220 --> 01:46:58,270
<font color="#E5E5E5">so the inputs are 1 through T a and here</font>

2124
01:46:58,270 --> 01:47:02,320
you can see is defining<font color="#E5E5E5"> a single layer</font>

2125
01:47:02,320 --> 01:47:09,970
neural net<font color="#E5E5E5"> okay so we've got our decoder</font>

2126
01:47:09,970 --> 01:47:15,910
<font color="#E5E5E5">States</font><font color="#CCCCCC"> we've got our current encoder</font>

2127
01:47:15,910 --> 01:47:21,160
<font color="#E5E5E5">state</font><font color="#CCCCCC"> put it through a non-linearity</font><font color="#E5E5E5"> put</font>

2128
01:47:21,160 --> 01:47:23,880
it through another affine transformation

2129
01:47:23,880 --> 01:47:27,340
<font color="#CCCCCC">stick it through a</font><font color="#E5E5E5"> soft</font><font color="#CCCCCC"> Max</font><font color="#E5E5E5"> and use that</font>

2130
01:47:27,340 --> 01:47:29,860
to create<font color="#CCCCCC"> a weighted sum ok so there's</font>

2131
01:47:29,860 --> 01:47:33,730
like all of<font color="#E5E5E5"> it in one</font><font color="#CCCCCC"> little snapshot ok</font>

2132
01:47:33,730 --> 01:47:38,350
<font color="#E5E5E5">so again</font><font color="#CCCCCC"> like don't expect this to make</font>

2133
01:47:38,350 --> 01:47:39,910
perfect sense the<font color="#E5E5E5"> first time you see it</font>

2134
01:47:39,910 --> 01:47:41,830
necessarily<font color="#CCCCCC"> but hopefully you can kind</font>

2135
01:47:41,830 --> 01:47:44,260
of see<font color="#E5E5E5"> that you know these bits there's</font>

2136
01:47:44,260 --> 01:47:46,840
all stuff you've seen<font color="#E5E5E5"> lots of times</font>

2137
01:47:46,840 --> 01:47:48,340
before<font color="#E5E5E5"> so</font><font color="#CCCCCC"> next week we're going</font><font color="#E5E5E5"> to come</font>

2138
01:47:48,340 --> 01:47:53,020
<font color="#E5E5E5">back and work through you know creating</font>

2139
01:47:53,020 --> 01:47:55,510
this code and seeing that<font color="#CCCCCC"> seeing how it</font>

2140
01:47:55,510 --> 01:47:55,870
<font color="#E5E5E5">works</font>

2141
01:47:55,870 --> 01:47:57,580
did you have some ritual<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have two</font>

2142
01:47:57,580 --> 01:48:01,180
questions<font color="#CCCCCC"> one is what the way speed the</font>

2143
01:48:01,180 --> 01:48:03,040
<font color="#CCCCCC">waiting's be</font><font color="#E5E5E5"> heavily</font><font color="#CCCCCC"> impacted by</font><font color="#E5E5E5"> the</font>

2144
01:48:03,040 --> 01:48:06,220
padding<font color="#E5E5E5"> down to the input set sure</font>

2145
01:48:06,220 --> 01:48:08,800
absolutely<font color="#E5E5E5"> and specifically those</font>

2146
01:48:08,800 --> 01:48:10,600
weights<font color="#E5E5E5"> will say</font><font color="#CCCCCC"> oh the padding is</font>

2147
01:48:10,600 --> 01:48:13,120
always<font color="#CCCCCC"> weighted</font><font color="#E5E5E5"> zero it's not</font><font color="#CCCCCC"> going to</font>

2148
01:48:13,120 --> 01:48:15,520
take<font color="#CCCCCC"> it very</font><font color="#E5E5E5"> long to learn to create</font>

2149
01:48:15,520 --> 01:48:19,120
that pattern<font color="#E5E5E5"> and is a shared among all</font>

2150
01:48:19,120 --> 01:48:21,400
IJ pairs or do we train a separate

2151
01:48:21,400 --> 01:48:24,160
alignment for<font color="#E5E5E5"> each pair so a is not</font>

2152
01:48:24,160 --> 01:48:27,720
trained a is the output<font color="#CCCCCC"> of a suppose a</font>

2153
01:48:27,720 --> 01:48:31,510
is<font color="#CCCCCC"> the output of a soft max</font><font color="#E5E5E5"> what trained</font>

2154
01:48:31,510 --> 01:48:35,290
is w1 and<font color="#CCCCCC"> w2 and note there capital</font>

2155
01:48:35,290 --> 01:48:36,219
letters are matrices

2156
01:48:36,219 --> 01:48:38,860
right<font color="#E5E5E5"> so we just have to</font><font color="#CCCCCC"> learn a single</font>

2157
01:48:38,860 --> 01:48:43,360
w1 and a single<font color="#E5E5E5"> w2 but note that</font><font color="#CCCCCC"> they're</font>

2158
01:48:43,360 --> 01:48:50,380
being applied<font color="#E5E5E5"> to all</font><font color="#CCCCCC"> of the input</font><font color="#E5E5E5"> so</font>

2159
01:48:50,380 --> 01:48:55,139
it's all of the encoded<font color="#CCCCCC"> states and the</font>

2160
01:48:55,139 --> 01:48:58,269
current state of the decoder<font color="#CCCCCC"> all right</font>

2161
01:48:58,269 --> 01:49:02,050
and you know in<font color="#CCCCCC"> fact easier is to just</font>

2162
01:49:02,050 --> 01:49:04,239
abstract<font color="#E5E5E5"> out this all the way back to</font>

2163
01:49:04,239 --> 01:49:09,059
say it is

2164
01:49:10,000 --> 01:49:12,430
function right<font color="#E5E5E5"> like this is the</font><font color="#CCCCCC"> best way</font>

2165
01:49:12,430 --> 01:49:14,530
to think<font color="#CCCCCC"> that it's some function of what</font>

2166
01:49:14,530 --> 01:49:18,580
some function of the<font color="#CCCCCC"> current hidden</font>

2167
01:49:18,580 --> 01:49:26,470
state<font color="#E5E5E5"> and all of the decoder</font><font color="#CCCCCC"> states</font><font color="#E5E5E5"> okay</font>

2168
01:49:26,470 --> 01:49:28,900
so that's that's the inputs to the

2169
01:49:28,900 --> 01:49:31,030
<font color="#CCCCCC">function and</font><font color="#E5E5E5"> we just have to learn a set</font>

2170
01:49:31,030 --> 01:49:34,450
<font color="#E5E5E5">of weights</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will spit out the inputs</font>

2171
01:49:34,450 --> 01:49:38,320
to<font color="#CCCCCC"> ourself Mac you can</font><font color="#E5E5E5"> see you</font><font color="#CCCCCC"> have</font>

2172
01:49:38,320 --> 01:49:45,160
<font color="#E5E5E5">another</font><font color="#CCCCCC"> question okay great so I don't</font>

2173
01:49:45,160 --> 01:49:46,600
feel<font color="#E5E5E5"> like</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> study news so</font><font color="#CCCCCC"> let's</font>

2174
01:49:46,600 --> 01:49:51,000
take<font color="#E5E5E5"> one final AMA before we go home</font>

2175
01:49:53,350 --> 01:49:55,410
[Music]

2176
01:49:55,410 --> 01:50:00,870
advice on imbalance<font color="#E5E5E5"> to dataset</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> okay</font>

2177
01:50:00,870 --> 01:50:04,790
unbalanced datasets<font color="#E5E5E5"> yeah</font>

2178
01:50:06,030 --> 01:50:08,579
there's not really<font color="#E5E5E5"> that much clever</font><font color="#CCCCCC"> you</font>

2179
01:50:08,579 --> 01:50:11,460
can<font color="#E5E5E5"> do about</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> you know basically if</font>

2180
01:50:11,460 --> 01:50:15,929
you've got<font color="#E5E5E5"> well a great example</font><font color="#CCCCCC"> would be</font>

2181
01:50:15,929 --> 01:50:18,510
young<font color="#CCCCCC"> one of the impact</font><font color="#E5E5E5"> talks talked</font>

2182
01:50:18,510 --> 01:50:21,229
about breast cancer<font color="#CCCCCC"> detection from</font>

2183
01:50:21,229 --> 01:50:24,329
mammography scans<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> thing called</font>

2184
01:50:24,329 --> 01:50:27,929
the<font color="#CCCCCC"> drain</font><font color="#E5E5E5"> challenge</font><font color="#CCCCCC"> had a little Mia</font>

2185
01:50:27,929 --> 01:50:30,559
what was it like<font color="#CCCCCC"> less than once</font>

2186
01:50:30,559 --> 01:50:36,119
<font color="#CCCCCC">Teresa</font><font color="#E5E5E5"> them 0.3% of the scans actually</font>

2187
01:50:36,119 --> 01:50:40,050
had<font color="#E5E5E5"> cancer so</font><font color="#CCCCCC"> that's very unbalanced I</font>

2188
01:50:40,050 --> 01:50:42,150
think the first thing you try to do is

2189
01:50:42,150 --> 01:50:44,369
such an unbalanced data set is ignore it

2190
01:50:44,369 --> 01:50:46,789
and try<font color="#E5E5E5"> it try it and see how it goes</font>

2191
01:50:46,789 --> 01:50:49,229
<font color="#CCCCCC">the reason</font><font color="#E5E5E5"> that often it doesn't</font><font color="#CCCCCC"> go well</font>

2192
01:50:49,229 --> 01:50:53,190
is that the initial gradients will tend

2193
01:50:53,190 --> 01:50:56,099
to<font color="#E5E5E5"> point to say they never have cancer</font>

2194
01:50:56,099 --> 01:50:58,110
<font color="#E5E5E5">you know because that's going to give</font>

2195
01:50:58,110 --> 01:51:01,979
you a very<font color="#E5E5E5"> accurate model so one thing</font>

2196
01:51:01,979 --> 01:51:03,599
you<font color="#E5E5E5"> could try and</font><font color="#CCCCCC"> do is to come</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> with</font>

2197
01:51:03,599 --> 01:51:07,050
some kind of initial<font color="#E5E5E5"> model which is like</font>

2198
01:51:07,050 --> 01:51:08,789
you<font color="#E5E5E5"> know maybe some kind of heuristic</font>

2199
01:51:08,789 --> 01:51:10,349
<font color="#E5E5E5">which is not terrible</font>

2200
01:51:10,349 --> 01:51:11,519
and gets it to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> point where the</font>

2201
01:51:11,519 --> 01:51:14,280
gradients are you know don't always

2202
01:51:14,280 --> 01:51:17,989
<font color="#E5E5E5">point to saying they never have cancer</font>

2203
01:51:17,989 --> 01:51:21,570
but the really obvious thing<font color="#CCCCCC"> to do is to</font>

2204
01:51:21,570 --> 01:51:23,729
adjust your thing which is creating the

2205
01:51:23,729 --> 01:51:26,329
<font color="#CCCCCC">mini-batches so that on every mini batch</font>

2206
01:51:26,329 --> 01:51:30,239
<font color="#CCCCCC">you grab like half of it as being</font><font color="#E5E5E5"> people</font>

2207
01:51:30,239 --> 01:51:31,979
<font color="#E5E5E5">with cancer</font><font color="#CCCCCC"> and half</font><font color="#E5E5E5"> of people being</font>

2208
01:51:31,979 --> 01:51:38,099
<font color="#CCCCCC">without cancer so that way you</font><font color="#E5E5E5"> know you</font>

2209
01:51:38,099 --> 01:51:39,710
<font color="#CCCCCC">still go through</font><font color="#E5E5E5"> lots and lots of epochs</font>

2210
01:51:39,710 --> 01:51:42,090
<font color="#CCCCCC">it's a bit of a challenges that you're</font>

2211
01:51:42,090 --> 01:51:43,820
<font color="#CCCCCC">going to the people that do have cancer</font>

2212
01:51:43,820 --> 01:51:45,719
<font color="#E5E5E5">you're going to see lots and lots and</font>

2213
01:51:45,719 --> 01:51:47,219
lots<font color="#E5E5E5"> of time so you have to be very</font>

2214
01:51:47,219 --> 01:51:52,559
careful<font color="#CCCCCC"> of overfitting and then</font>

2215
01:51:52,559 --> 01:51:55,469
basically it is kind of thing

2216
01:51:55,469 --> 01:51:58,170
between those<font color="#CCCCCC"> two extremes so I think</font>

2217
01:51:58,170 --> 01:51:59,869
what you really<font color="#E5E5E5"> need to do is figure</font><font color="#CCCCCC"> out</font>

2218
01:51:59,869 --> 01:52:03,479
what's<font color="#E5E5E5"> the smallest</font><font color="#CCCCCC"> number of</font><font color="#E5E5E5"> people</font>

2219
01:52:03,479 --> 01:52:04,949
with<font color="#E5E5E5"> cancer that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can get away with</font>

2220
01:52:04,949 --> 01:52:06,119
you<font color="#E5E5E5"> know what's the smallest number</font>

2221
01:52:06,119 --> 01:52:08,360
where the gradients don't point<font color="#E5E5E5"> to zero</font>

2222
01:52:08,360 --> 01:52:11,849
<font color="#CCCCCC">and then create a model where</font><font color="#E5E5E5"> let's say</font>

2223
01:52:11,849 --> 01:52:13,530
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> 10% so create a model where every</font>

2224
01:52:13,530 --> 01:52:17,219
batch<font color="#CCCCCC"> mini-batch you create</font><font color="#E5E5E5"> 10% of it</font>

2225
01:52:17,219 --> 01:52:18,960
with<font color="#E5E5E5"> people with</font><font color="#CCCCCC"> cancer and</font><font color="#E5E5E5"> 90% people</font>

2226
01:52:18,960 --> 01:52:22,829
<font color="#E5E5E5">without train that for a while</font><font color="#CCCCCC"> the good</font>

2227
01:52:22,829 --> 01:52:25,099
news is once it's working<font color="#E5E5E5"> pretty well</font>

2228
01:52:25,099 --> 01:52:30,030
<font color="#CCCCCC">you can then decrease the size that has</font>

2229
01:52:30,030 --> 01:52:32,699
the has cancer size because you're

2230
01:52:32,699 --> 01:52:34,530
<font color="#E5E5E5">already at a point where your models not</font>

2231
01:52:34,530 --> 01:52:37,139
kind of pointing off to<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> so you can</font>

2232
01:52:37,139 --> 01:52:39,570
kind<font color="#E5E5E5"> of gradually start</font><font color="#CCCCCC"> to change the</font>

2233
01:52:39,570 --> 01:52:42,809
sample to have less<font color="#E5E5E5"> and less</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> get</font>

2234
01:52:42,809 --> 01:52:48,690
the basic technique and so in this

2235
01:52:48,690 --> 01:52:52,639
example<font color="#CCCCCC"> we're here you're repeating the</font>

2236
01:52:52,639 --> 01:52:56,010
positive results over and over in<font color="#CCCCCC"> your</font>

2237
01:52:56,010 --> 01:52:58,010
sphere<font color="#E5E5E5"> essentially is waiting more yeah</font>

2238
01:52:58,010 --> 01:53:01,199
could you<font color="#E5E5E5"> get the same results by just</font>

2239
01:53:01,199 --> 01:53:04,199
<font color="#CCCCCC">throwing</font><font color="#E5E5E5"> away</font><font color="#CCCCCC"> one to</font><font color="#E5E5E5"> the false base and</font>

2240
01:53:04,199 --> 01:53:07,739
<font color="#CCCCCC">yeah you could do that and like</font><font color="#E5E5E5"> that's</font>

2241
01:53:07,739 --> 01:53:10,829
the really quick way to do it but<font color="#E5E5E5"> that</font>

2242
01:53:10,829 --> 01:53:13,710
way you're not<font color="#E5E5E5"> using</font><font color="#CCCCCC"> like the</font>

2243
01:53:13,710 --> 01:53:15,900
<font color="#E5E5E5">information</font><font color="#CCCCCC"> about the false</font><font color="#E5E5E5"> stuff still</font>

2244
01:53:15,900 --> 01:53:18,659
has<font color="#CCCCCC"> information</font><font color="#E5E5E5"> so yeah okay thanks</font>

2245
01:53:18,659 --> 01:53:22,219
everybody<font color="#E5E5E5"> have a good week</font>

2246
01:53:23,410 --> 00:00:00,000
[Applause]

